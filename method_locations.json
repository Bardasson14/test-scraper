{"InMemorySecurityRealm.java": {"METHODS": ["'protected UserDetails authenticate2(String username, String password) throws AuthenticationException {' - line 60", "'public UserDetails loadUserByUsername2(String username) throws UsernameNotFoundException {' - line 68", "'public GroupDetails loadGroupByGroupname2(String groupname, boolean fetchMembers) throws UsernameNotFoundException {' - line 73", "'private InMemoryUserDetails(String username) {' - line 80", "'public String getUsername() {' - line 90", "'public String getPassword() {' - line 95", "'public boolean isAccountNonExpired() {' - line 100", "'public boolean isAccountNonLocked() {' - line 105", "'public boolean isCredentialsNonExpired() {' - line 110", "'public boolean isEnabled() {' - line 115"]}, "SampleBenchmark.java": {"METHODS": ["'public void benchmark(MyState state, Blackhole blackhole) {' - line 16"]}, "BenchmarkTest.java": {"METHODS": ["'public void runSampleBenchmark() throws Exception {' - line 25", "'new Runner(options.build()).run();' - line 42"]}, "Junit4TestsRanTest.java": {"METHODS": ["'public void anything() {' - line 7"]}, "ExtensionFilterTest.java": {"METHODS": ["'public void filter() {' - line 24"]}, "ClassPathTest.java": {"METHODS": ["'public void uniqueness() throws Exception {' - line 86"]}, "I18nTest.java": {"METHODS": ["'public void test_baseName_unspecified() throws IOException, SAXException {' - line 47", "'public void test_baseName_unknown() throws IOException, SAXException {' - line 54", "'public void test_baseName_plugin() throws Exception {' - line 62", "'public void test_valid() throws IOException, SAXException {' - line 70", "'public void test_valid_region_variant() throws IOException, SAXException {' - line 79", "'public void test_valid_region() throws IOException, SAXException {' - line 88", "'public void test_valid_fallback() throws IOException, SAXException {' - line 97", "'public void test_unsupported_language() throws IOException, SAXException {' - line 105"]}, "AgentProtocolTest.java": {"METHODS": ["'public void testShouldNotOverrideUserConfiguration() throws Exception {' - line 52", "'private void assertEnabled(String ... protocolNames) {' - line 58", "'private void assertDisabled(String ... protocolNames) {' - line 62", "'private void assertProtocols(boolean shouldBeEnabled, @CheckForNull String why, String ... protocolNames) {' - line 66", "'public static void assertProtocols(Jenkins jenkins, boolean shouldBeEnabled, @CheckForNull String why, String ... protocolNames) {' - line 70"]}, "CoreAutomaticTestBuilder.java": {"METHODS": ["'public static Test suite() throws Exception {' - line 47"]}, "SetContextClassLoaderTest.java": {"METHODS": ["'public void positive() throws Throwable {' - line 15", "'private static void _positive(JenkinsRule r) throws ClassNotFoundException {' - line 19", "'public void negative() throws Throwable {' - line 26", "'private static void _negative(JenkinsRule r) {' - line 30"]}, "FullDuplexHttpServiceTest.java": {"METHODS": ["'public void smokes() throws Exception {' - line 61", "'public String getUrlName() {' - line 78", "'public HttpResponse doIndex() {' - line 82", "'protected FullDuplexHttpService createService(StaplerRequest req, UUID uuid) throws IOException, InterruptedException {' - line 85", "'protected void run(InputStream upload, OutputStream download) throws IOException, InterruptedException {' - line 88", "'public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 101"]}, "SystemPropertiesTest.java": {"METHODS": ["'public void setUp() {' - line 50", "'public void tearDown() {' - line 55", "'public void shouldReturnNullIfUndefined() throws Exception {' - line 61", "'public void shouldInitializeFromSystemProperty() throws Exception {' - line 67", "'public void shouldInitializeFromWebAppProperty() throws Exception {' - line 74", "'public void shouldUseSystemPropertyAsAHighPriority() throws Exception {' - line 83", "'public void shouldReturnWebAppPropertyIfSystemPropertyNotSetAndDefaultIsSet() throws Exception {' - line 91", "'protected void setWebAppInitParameter(String property, String value) {' - line 104"]}, "JenkinsJVMRealTest.java": {"METHODS": ["'public void isJenkinsJVM() throws Throwable {' - line 18", "'public Boolean call() throws IOException {' - line 27"]}, "SCMCheckoutStrategyTest.java": {"METHODS": ["'public void configRoundtrip1() throws Exception {' - line 30", "'public void configRoundtrip2() throws Exception {' - line 40", "'public void configWithoutSCMCheckoutStrategy() throws Exception {' - line 56", "'private boolean pageHasUI(FreeStyleProject p) throws IOException, SAXException {' - line 65", "'public TestSCMCheckoutStrategy() {' - line 73", "'public void checkout(AbstractBuildExecution execution) throws IOException, InterruptedException {' - line 77", "'public boolean isApplicable(AbstractProject project) {' - line 85"]}, "GlobalSCMRetryCountConfigurationTest.java": {"METHODS": ["'public void shouldExceptOnNullScmRetryCount() throws Exception {' - line 47"]}, "StartupTest.java": {"METHODS": ["'public void noWarnings() throws Exception {' - line 48"]}, "GlobalBuildDiscarderTest.java": {"METHODS": ["'public void testLoading() throws Exception {' - line 22", "'public void testLoadingWithDiscarders() throws Exception {' - line 29", "'public void testJobBuildDiscarder() throws Exception {' - line 37"]}, "JenkinsReloadConfigurationTest.java": {"METHODS": ["'public void reloadBuiltinNodeConfig() throws Exception {' - line 30", "'public void reloadAgentConfig() throws Exception {' - line 40", "'private void modifyNode(Node node) throws Exception {' - line 49", "'public void reloadUserConfigUsingGlobalReload() throws Exception {' - line 58", "'public void reloadJobConfig() throws Exception {' - line 77", "'public void reloadViewConfig() throws Exception {' - line 92", "'public void reloadDescriptorConfig() {' - line 110", "'private void replace(String path, String search, String replace) {' - line 128"]}, "JenkinsManagePermissionTest.java": {"METHODS": ["'public static void enableManagePermission() {' - line 51", "'public static void disableManagePermission() {' - line 56", "'public void managerCannotDisablePlugin() {' - line 66", "'private void assertPluginEnabled(String name) {' - line 91", "'public void dumpExportTableForbiddenWithoutAdminPermission() throws Exception {' - line 104", "'public void someGlobalConfigurationIsNotDisplayedWithManagePermission() throws Exception {' - line 124", "'public void someGlobalConfigCanNotBeModifiedWithManagePermission() throws Exception {' - line 148", "'public void globalConfigAllowedWithManagePermission() throws Exception {' - line 173", "'public void managePermissionCanChangeUsageStatistics() throws Exception {' - line 186", "'private String getShell() {' - line 199", "'private static Matcher<WebResponse> hasResponseCode(final int httpStatus) {' - line 204", "'public boolean matches(final Object item) {' - line 207", "'public void describeTo(final Description description) {' - line 213", "'public void describeMismatch(Object item, Description description) {' - line 218", "'public void managePermissionShouldBeAllowedToRestart() throws IOException {' - line 235"]}, "JenkinsSystemReadPermissionTest.java": {"METHODS": ["'public static void enablePermission() {' - line 25", "'public static void disablePermission() {' - line 30", "'public void setup() {' - line 35", "'public void configureReadAllowedWithSystemReadPermission() throws Exception {' - line 45", "'public void configureConfigSubmitBlockedWithSystemReadPermission() throws Exception {' - line 52"]}, "ExtensionTypeHierarchyTest.java": {"METHODS": ["'public void sameExtensionCanImplementMultipleExtensionPoints() {' - line 37"]}, "JenkinsTest.java": {"METHODS": ["'public void testUserCreationFromUrlForAdmins() throws Exception {' - line 112", "'public void testIsDisplayNameUniqueTrue() throws Exception {' - line 133", "'public void testIsDisplayNameUniqueFalse() throws Exception {' - line 148", "'public void testIsDisplayNameUniqueSameAsCurrentJob() throws Exception {' - line 164", "'public void testIsNameUniqueTrue() throws Exception {' - line 177", "'public void testIsNameUniqueFalse() throws Exception {' - line 188", "'public void testIsNameUniqueSameAsCurrentJob() throws Exception {' - line 199", "'public void testDoCheckDisplayNameUnique() throws Exception {' - line 211", "'public void testDoCheckDisplayNameSameAsDisplayName() throws Exception {' - line 226", "'public void testDoCheckDisplayNameSameAsJobName() throws Exception {' - line 242", "'public void testDoCheckViewName_GoodName() throws Exception {' - line 258", "'public void testDoCheckViewName_NotGoodName() throws Exception {' - line 272", "'public void testUnprotectedRootAction() throws Exception {' - line 299", "'public void testDoScript() throws Exception {' - line 314", "'public void testDoScriptTextDoesNotOutputExtraWhitespace() throws Exception {' - line 344", "'public void testDoEval() throws Exception {' - line 352", "'private Page eval(WebClient wc) throws Exception {' - line 379", "'public String getIconFileName() {' - line 391", "'public String getDisplayName() {' - line 396", "'public String getUrlName() {' - line 401", "'public HttpResponse doDynamic() {' - line 405", "'public String getUrlName() {' - line 415", "'public HttpResponse doDynamic() {' - line 419", "'public void testErrorPageShouldBeAnonymousAccessible() throws Exception {' - line 425", "'public String getIconFileName() {' - line 448", "'public String getDisplayName() {' - line 453", "'public String getUrlName() {' - line 458", "'public HttpResponse doReportError() {' - line 462", "'public void testComputerListenerNotifiedOnRestart() {' - line 468", "'public void runScriptOnOfflineComputer() throws Exception {' - line 482", "'public void startupShouldNotFailOnIOExceptionOnlineListener() {' - line 501", "'public void onOnline(Computer c, TaskListener listener) throws IOException, InterruptedException {' - line 514", "'public void startupShouldNotFailOnRuntimeExceptionOnlineListener() {' - line 522", "'public void onOnline(Computer c, TaskListener listener) throws IOException, InterruptedException {' - line 534", "'public void agentProtocols_singleEnable_roundtrip() throws Exception {' - line 542", "'public void agentProtocols_multipleDisable_roundtrip() throws Exception {' - line 563", "'public void agentProtocols_multipleEnable_roundtrip() throws Exception {' - line 584", "'public void agentProtocols_singleDisable_roundtrip() throws Exception {' - line 608", "'private void assertProtocolDisabled(String protocolName, @CheckForNull String stage) {' - line 630", "'private void assertProtocolEnabled(String protocolName, @CheckForNull String stage) {' - line 635", "'public String getName() {' - line 646", "'public String getName() {' - line 657", "'public boolean isOptIn() {' - line 664", "'public void handle(Socket socket) throws IOException, InterruptedException {' - line 669", "'public String getName() {' - line 680", "'public String getName() {' - line 691", "'public boolean isOptIn() {' - line 698", "'public void handle(Socket socket) throws IOException, InterruptedException {' - line 703", "'public void getComputers() throws Exception {' - line 709", "'public void versionIsSavedInSave() throws Exception {' - line 723", "'public void jobCreatedByInitializerIsRetained() {' - line 739", "'public void testLogin123() throws Exception {' - line 745", "'public void testLogin123WithRead() throws Exception {' - line 756", "'public void testLogin() throws Exception {' - line 769", "'public void testTrimLabelsRetainsLabelExpressions() throws Exception {' - line 782", "'public void reloadShouldNotSaveConfig() throws Exception {' - line 796", "'void reset() {' - line 807", "'boolean wasCalled() {' - line 811", "'public void onChange(Saveable o, XmlFile file) {' - line 816", "'public String getIconFileName() {' - line 826", "'public String getDisplayName() {' - line 831", "'public String getUrlName() {' - line 836"]}, "NodesTest.java": {"METHODS": ["'public void addNodeShouldFailAtomically() throws Exception {' - line 58", "'public void addNodeShouldFailAtomicallyWhenReplacingNode() throws Exception {' - line 73", "'public void addNodeShouldReplaceExistingNode() throws Exception {' - line 89", "'protected void onDeleted(Node node) {' - line 106", "'protected void onUpdated(Node oldOne, Node newOne) {' - line 111", "'protected void onCreated(Node node) {' - line 117", "'public void replaceNodeShouldRemoveOldNode() throws Exception {' - line 124", "'public void replaceNodeShouldNotRemoveIdenticalOldNode() throws Exception {' - line 135", "'public void cannotCreateNodeWithTrailingDot_withoutOtherNode() throws Exception {' - line 155", "'public void cannotCreateNodeWithTrailingDot_withExistingNode() throws Exception {' - line 170", "'public void cannotCreateNodeWithTrailingDot_exceptIfEscapeHatchIsSet() throws Exception {' - line 187"]}, "JenkinsLogRecordsTest.java": {"METHODS": ["'public void logRecordsArePresentOnController() throws Throwable {' - line 27", "'private static void _logRecordsArePresentOnController(JenkinsRule r) throws Throwable {' - line 31", "'public String toString() {' - line 41", "'private static void use(Object x) {' - line 55"]}, "JenkinsLocationConfigurationTest.java": {"METHODS": ["'public void setUp() {' - line 44", "'public void setAdminEmail() {' - line 52", "'public void resetAdminEmail() {' - line 73"]}, "TransientActionFactoryTest.java": {"METHODS": ["'@Test public void addedToAbstractItem() throws Exception {' - line 62", "'@Override public Class<AbstractItem> type() {' - line 68", "'@Override public Class<MyAction> actionType() {' - line 72", "'@Override public String getIconFileName() {' - line 82", "'@Override public String getDisplayName() {' - line 86", "'@Override public String getUrlName() {' - line 90", "'@Test public void laziness() throws Exception {' - line 95", "'@Override public Class<AbstractProject> type() {' - line 136", "'@Test public void compatibility() throws Exception {' - line 150", "'@Override public Class<FreeStyleProject> type() {' - line 174", "'public void transientActionsAreNotPersistedOnQueueItems() throws Exception {' - line 186", "'public Class<Actionable> type() {' - line 198", "'new Exception(\"MyProminentProjectAction allocated at: \").printStackTrace(pw);' - line 216", "'public String toString() {' - line 221"]}, "NodeListenerTest.java": {"METHODS": ["'public void setUp() {' - line 30", "'public void crud() throws Exception {' - line 36", "'private CLICommandInvoker cli(CLICommand cmd) {' - line 51"]}, "MasterBuildConfigurationTest.java": {"METHODS": ["'public void retainMasterLabelWhenNoSlaveDefined() throws Exception {' - line 16"]}, "ParameterizedJobMixInTest.java": {"METHODS": ["'public void doBuild_shouldFailWhenInvokingDisabledProject() throws Exception {' - line 56", "'public void doBuildWithParameters_shouldFailWhenInvokingDisabledProject() throws Exception {' - line 66", "'public void doBuildQuietPeriodInSeconds() throws Exception {' - line 82"]}, "BuiltInNodeMigrationPropertyTest.java": {"METHODS": ["'public static void setProperty() {' - line 40", "'public static void clearProperty() {' - line 45", "'public void overrideAppliesToNewInstance() throws Exception {' - line 50", "'public void overrideAppliesToUnmigratedInstance() throws Exception {' - line 56", "'public void overrideAppliesToMigratedInstance() throws Exception {' - line 64"]}, "BuiltInNodeMigrationTest.java": {"METHODS": ["'public void newInstanceHasNewTerminology() throws Exception {' - line 44", "'public void oldDataStartsWithOldTerminology() throws Exception {' - line 51", "'public void migratedInstanceStartsWithNewTerminology() throws Exception {' - line 64", "'public static void assertStatus(JenkinsRule j, boolean migrationDoneGetterValue, Boolean migrationNeededFieldValue, String label, String nodeName) throws Exception {' - line 69"]}, "BuildDiscarderPropertyTest.java": {"METHODS": ["'public void buildDiscarderField() throws Exception {' - line 51", "'private void verifyBuildDiscarder(FreeStyleProject p) {' - line 61", "'public void logRotatorField() throws Exception {' - line 74", "'private static void verifyLogRotatorSanity(AbstractProject<?, ?> p) {' - line 91"]}, "UnlabeledLoadStatisticsTest.java": {"METHODS": ["'public void clearQueue() {' - line 54", "'public void computeQueueLength() throws Exception {' - line 60"]}, "JenkinsBuildsAndWorkspacesDirectoriesTest.java": {"METHODS": ["'public void before() {' - line 53", "'public void after() {' - line 58", "'private void clearSystemProperties() {' - line 62", "'public void changeWorkspacesDirLog() throws Exception {' - line 69", "'public void badValueForBuildsDir() {' - line 89", "'public void goodValueForBuildsDir() {' - line 112", "'public void jenkinsDoesNotStartWithBadSysProp() {' - line 126", "'public void jenkinsDoesNotStartWithScrewedUpConfigXml() {' - line 142", "'public void buildsDir() throws Exception {' - line 164", "'public void workspacesDir() throws Exception {' - line 190", "'public void fromPreviousCustomSetup() {' - line 222", "'private void setWorkspacesDirProperty(String workspacesDir) {' - line 260", "'private void setBuildsDirProperty(String buildsDir) {' - line 264", "'private boolean logWasFound(String searched) {' - line 268", "'private boolean logWasFoundAtLevel(String searched, Level level) {' - line 273", "'public void externalBuildDirectoryRenameDelete() throws Exception {' - line 280"]}, "PeepholePermalinkTest.java": {"METHODS": ["'public void basics() throws Exception {' - line 32", "'private void assertStorage(String id, Job<?, ?> job, Run<?, ?> build) throws Exception {' - line 83"]}, "JenkinsFutureDependencyGraphTest.java": {"METHODS": ["'public void testGetFutureDependencyGraphWithoutASingleRebuildBeforeHand() throws InterruptedException, ExecutionException {' - line 24", "'public void testStartRebuildOfDependecyGraphWhileScheduled() throws InterruptedException, ExecutionException {' - line 34", "'public void testStartRebuildOfDependencyGraphWhileAlreadyRebuilding() throws InterruptedException, ExecutionException {' - line 46", "'public void testStartRebuildOfDependencyGraphWhileAlreadyRebuildingAndAnotherOneScheduled() throws InterruptedException, ExecutionException {' - line 70", "'private Jenkins mockJenkinsWithControllableDependencyGraph(RebuildDependencyGraphController rebuildDependencyGraphController) {' - line 93", "'public boolean isLetBuildFinish() {' - line 116", "'public void setLetBuildFinish(boolean letBuildFinish) {' - line 120", "'public int getNumberOfStartedBuilds() {' - line 124", "'public void increaseNumberOfStartedBuilds() {' - line 128", "'public int getNumberOfFinishedBuilds() {' - line 132", "'public void increaseNumberOfFinishedBuilds() {' - line 136"]}, "ContextMenuTest.java": {"METHODS": ["'@Test public void contextMenuVisibility() throws Exception {' - line 55", "'@Override public boolean isVisible() {' - line 76", "'@Override public String getIconFileName() {' - line 80", "'@Override public String getDisplayName() {' - line 84", "'@Override public String getUrlName() {' - line 88"]}, "BuiltInNodeMigrationRestartTest.java": {"METHODS": ["'public void testNewInstanceWithoutConfiguration() throws Throwable {' - line 28", "'public void migratedInstanceStartsWithNewTerminology() throws Throwable {' - line 43", "'public void oldDataStartsWithOldTerminology() throws Throwable {' - line 58", "'public void setup(JenkinsRule jenkinsRule, LocalDataOnce recipe) throws Exception {' - line 94", "'public void decorateHome(JenkinsRule jenkinsRule, File home) throws Exception {' - line 100"]}, "AssetManagerTest.java": {"METHODS": ["'public void emptyAssetDoesNotThrowError() throws Exception {' - line 42"]}, "JenkinsSystemReadAndManagePermissionTest.java": {"METHODS": ["'public static void enablePermissions() {' - line 24", "'public static void disablePermissions() {' - line 30", "'public void setup() {' - line 41", "'public void configureReadAllowedWithSystemReadAndManagePermission() throws Exception {' - line 51", "'public void configureConfigSubmitAllowedWithSystemReadAndManagePermission() throws Exception {' - line 58", "'public void cannotModifyReadOnlyConfiguration() throws Exception {' - line 70", "'public Config() {' - line 91", "'public String getNumber() {' - line 94", "'public void setNumber(String number) {' - line 99"]}, "IdentityRootActionTest.java": {"METHODS": ["'public void ui() throws Exception {' - line 18"]}, "UserExperimentalFlagsPropertyTest.java": {"METHODS": ["'public void testAnonymous() throws Exception {' - line 47", "'public void testWithoutProperty() throws Exception {' - line 61", "'public void testPropertyWithDefault() throws Exception {' - line 77", "'public void testPropertyWithValues() throws Exception {' - line 97", "'public void testPropertyWithNull() throws Exception {' - line 117", "'public String getUrlName() {' - line 140", "'public Test1UserExperimentalFlag() {' - line 147", "'public String getDisplayName() {' - line 157", "'public Test2UserExperimentalFlag() {' - line 169", "'public String getDisplayName() {' - line 180", "'public Test3UserExperimentalFlag() {' - line 192", "'public String getDisplayName() {' - line 197"]}, "LazyBuildMixInTest.java": {"METHODS": ["'@Test public void dropLinksAfterGC() throws Exception {' - line 46", "'@Test public void dropLinksAfterGC2() throws Exception {' - line 68", "'@Test public void newRunningBuildRelationFromPrevious() throws Exception {' - line 90", "'public void newBuildsShouldNotLoadOld() throws Throwable {' - line 101"]}, "BuildTimeTrendTest.java": {"METHODS": ["'public void withAbstractJob_OnBuiltInNode() throws Exception {' - line 66", "'public void withAbstractJob_OnAgentNode() throws Exception {' - line 81", "'public void withAbstractJob_OnBoth() throws Exception {' - line 101", "'public void withNonAbstractJob_withoutAgents() throws Exception {' - line 135", "'public void withNonAbstractJob_withAgents() throws Exception {' - line 155", "'protected NonAbstractBuild(@NonNull NonAbstractJob job) throws IOException {' - line 180", "'public NonAbstractJob(ItemGroup parent, String name) {' - line 188", "'public boolean isBuildable() {' - line 193", "'private NonAbstractBuild createBuildFromDir(File dir) throws IOException {' - line 207", "'protected void removeRun(NonAbstractBuild run) {' - line 215", "'public DescriptorImpl getDescriptor() {' - line 220", "'public TopLevelItem newInstance(ItemGroup parent, String name) {' - line 227"]}, "BuildListTableTest.java": {"METHODS": ["'@Test public void linksFromFolders() throws Exception {' - line 45"]}, "HistoryPageFilterCaseSensitiveSearchTest.java": {"METHODS": ["'public void should_search_case_sensitively_when_enabled_for_user() throws IOException {' - line 37", "'public void should_skip_result_with_different_capitalization_when_case_sensitively_search_is_enabled_for_user() throws IOException {' - line 45", "'public int compareTo(Run o) {' - line 96", "'public Result getResult() {' - line 101", "'public boolean isBuilding() {' - line 106", "'public long getQueueId() {' - line 111", "'public int getNumber() {' - line 116"]}, "HasWidgetHelper.java": {"METHODS": ["'public static Optional<Widget> getWidget(@NonNull HasWidgets hasWidgets, @NonNull Class<? extends Widget> type) {' - line 11"]}, "TelemetryTest.java": {"METHODS": ["'public void prepare() throws Exception {' - line 55", "'public void testSubmission() throws Exception {' - line 64", "'public void testPerTrialCorrelator() throws Exception {' - line 92", "'public void testNonSubmissionOnError() throws Exception {' - line 106", "'public String getDisplayName() {' - line 126", "'public String getId() {' - line 132", "'public LocalDate getStart() {' - line 138", "'public LocalDate getEnd() {' - line 144", "'public JSONObject createContent() {' - line 149", "'public String getDisplayName() {' - line 159", "'public String getId() {' - line 165", "'public LocalDate getStart() {' - line 171", "'public LocalDate getEnd() {' - line 177", "'public JSONObject createContent() {' - line 182", "'public String getId() {' - line 192", "'public String getDisplayName() {' - line 198", "'public LocalDate getStart() {' - line 204", "'public LocalDate getEnd() {' - line 210", "'public JSONObject createContent() {' - line 216", "'public String getId() {' - line 226", "'public String getDisplayName() {' - line 232", "'public LocalDate getStart() {' - line 238", "'public LocalDate getEnd() {' - line 244", "'public JSONObject createContent() {' - line 250", "'public String getId() {' - line 260", "'public String getDisplayName() {' - line 266", "'public LocalDate getStart() {' - line 272", "'public LocalDate getEnd() {' - line 278", "'public JSONObject createContent() {' - line 284", "'public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 292", "'public void doEvents(StaplerRequest request, StaplerResponse response) throws IOException {' - line 307", "'public String getIconFileName() {' - line 318", "'public String getDisplayName() {' - line 324", "'public String getUrlName() {' - line 330"]}, "TriggerTest.java": {"METHODS": ["'public void testNoNPE() throws Exception {' - line 45", "'private String triggersSection() {' - line 51", "'public MockTrigger(String cron) {' - line 61", "'public DescriptorImpl getDescriptor() {' - line 66", "'protected Object readResolve() {' - line 72", "'@Override public boolean isApplicable(Item item) {' - line 77", "'public DescriptorImpl() {' - line 81"]}, "ReverseBuildTriggerTest.java": {"METHODS": ["'public void runMoreQuickly() throws Exception {' - line 68", "'@Test public void configRoundtrip() throws Exception {' - line 72", "'@Test public void upstreamProjectSecurity() throws Exception {' - line 91", "'public void nullJobInTriggerNotCausesNPE() throws Exception {' - line 192", "'public void nullUpstreamProjectsNoNPE() throws Exception {' - line 219", "'public void testGetUpstreamProjectsShouldNullSafe() throws Exception {' - line 234"]}, "ReverseBuildTriggerAfterRestartTest.java": {"METHODS": ["'public void testExecutionOfReverseBuildTriggersAfterRestart() throws Throwable {' - line 17"]}, "AdministrativeMonitorsDecoratorTest.java": {"METHODS": ["'public void ensureAdminMonitorsAreNotRunPerNonAdminPage() throws Exception {' - line 46", "'public void ensureAdminMonitorsAreRunOnlyOncePerAdminPage() throws Exception {' - line 68", "'public String getDisplayName() {' - line 95", "'public boolean isActivated() {' - line 100", "'public boolean isSecurity() {' - line 106", "'public String getDisplayName() {' - line 118", "'public boolean isActivated() {' - line 123", "'public boolean isSecurity() {' - line 129"]}, "URICheckEncodingMonitorTest.java": {"METHODS": ["'public void emptyValueInResponse() throws Exception {' - line 21"]}, "ControllerExecutorsNoAgentsTest.java": {"METHODS": ["'public void testInitial() {' - line 43", "'public void testControllerExecutorsZero() throws IOException {' - line 49", "'public void testHasAgent() throws Exception {' - line 56", "'public void testHasCloud() throws Exception {' - line 63"]}, "RootUrlNotSetMonitorTest.java": {"METHODS": ["'public void testWithRootUrl_configured() {' - line 44"]}, "ControllerExecutorsAgentsTest.java": {"METHODS": ["'public void testInitial() {' - line 42", "'public void testControllerExecutorsZero() throws Exception {' - line 48", "'public void testHasAgent() throws Exception {' - line 56", "'public void testHasCloud() throws Exception {' - line 63"]}, "Jenkins19124Test.java": {"METHODS": ["'public void interrelatedFormValidation() throws Exception {' - line 35", "'public String getAlpha() {' - line 61", "'public String getBravo() {' - line 65", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 70", "'public FormValidation doCheckAlpha(@QueryParameter String value, @QueryParameter String bravo) {' - line 79", "'public ListBoxModel doFillBravoItems() {' - line 85", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 90"]}, "Jenkins14749Test.java": {"METHODS": ["'public void dashboard() throws Exception {' - line 20", "'public void project() throws Exception {' - line 26", "'public void configureProject() throws Exception {' - line 33", "'public void manage() throws Exception {' - line 40", "'public void system() throws Exception {' - line 46", "'public void warning(final CSSParseException exception) throws CSSException {' - line 55", "'public void error(final CSSParseException exception) throws CSSException {' - line 62", "'public void fatalError(final CSSParseException exception) throws CSSException {' - line 69", "'private boolean ignore(final CSSParseException exception) {' - line 75"]}, "Jenkins64991Test.java": {"METHODS": ["'public static List<String> contexts() {' - line 57", "'public Jenkins64991Test(String context) {' - line 61", "'public void setUp() throws Exception {' - line 69", "'public void test403Redirect() throws Exception {' - line 76", "'public void testRedirect() throws Exception {' - line 94", "'public void withoutFrom() throws Exception {' - line 116", "'public void emptyFrom() throws Exception {' - line 131", "'public void testRedirectToProject() throws Exception {' - line 146", "'public void absoluteRedirect() throws Exception {' - line 171", "'public void protocolRelativeRedirect() throws Exception {' - line 176", "'public void hostRelativeRedirect() throws Exception {' - line 182", "'public void relativeRedirect() throws Exception {' - line 188", "'private void assertNoOpenRedirect(String loginUrl) throws IOException, SAXException {' - line 193"]}, "BridgeMethodsTest.java": {"METHODS": ["'public void checkBridgeMethod() {' - line 23"]}, "Jenkins41511Test.java": {"METHODS": ["'public static void setUpClass() {' - line 12", "'public void configRoundTrip() throws Exception {' - line 21"]}, "RemotingVersionInfoTest.java": {"METHODS": ["'public void shouldLoadEmbeddedVersionByDefault() {' - line 37", "'public void shouldLoadMinimumSupportedVersionByDefault() {' - line 43"]}, "UnsupportedRemotingAgentEscapeHatchTest.java": {"METHODS": ["'public void extractAgent() throws Exception {' - line 43", "'public void shouldBeAbleToConnectAgentWithUnsupportedVersionWithEscapeHatch() throws Exception {' - line 50", "'public ComputerLauncher createComputerLauncher(EnvVars env) throws URISyntaxException, IOException {' - line 66"]}, "OldRemotingAgentTest.java": {"METHODS": ["'public void extractAgent() throws Exception {' - line 83", "'public void shouldBeAbleToConnectAgentWithMinimumSupportedVersion() throws Exception {' - line 90", "'public void remoteConsoleNote() throws Exception {' - line 110", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 116", "'public Void call() throws IOException {' - line 143", "'public ConsoleAnnotator<Object> annotate(Object context, MarkupText text, int charPos) {' - line 152", "'public ComputerLauncher createComputerLauncher(EnvVars env) throws URISyntaxException, IOException {' - line 165", "'static void assertMonitors(Collection<NodeMonitor> toCheck, Computer c) {' - line 178", "'static void assertMonitor(NodeMonitor monitor, Computer c) {' - line 184"]}, "UnsupportedRemotingAgentTest.java": {"METHODS": ["'public void extractAgent() throws Exception {' - line 35", "'public void shouldNotBeAbleToConnectAgentWithUnsupportedVersion() throws Exception {' - line 42", "'public ComputerLauncher createComputerLauncher(EnvVars env) throws URISyntaxException, IOException {' - line 52"]}, "JnlpSlaveRestarterInstallerTest.java": {"METHODS": ["'public void tcpReconnection() throws Throwable {' - line 53", "'public void webSocketReconnection() throws Throwable {' - line 59", "'private void reconnection(boolean webSocket) throws Throwable {' - line 63", "'public Integer call() throws RuntimeException {' - line 93"]}, "RedactSecretJsonInErrorMessageSanitizerHtmlTest.java": {"METHODS": ["'public void passwordsAreRedacted_andOtherStayTheSame() throws Exception {' - line 70", "'public void doSubmitTest(StaplerRequest req, StaplerResponse res) throws Exception {' - line 123", "'public String getIconFileName() {' - line 130", "'public String getDisplayName() {' - line 135", "'public String getUrlName() {' - line 140", "'public void checkSanitizationIsApplied_inDescriptor() throws Exception {' - line 147", "'public void checkSanitizationIsApplied_inStapler() throws Exception {' - line 190", "'public TestDescribable(Secret password) {' - line 228", "'public DescriptorImpl getDescriptor() {' - line 233", "'public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws Exception {' - line 252", "'public String getIconFileName() {' - line 257", "'public String getDisplayName() {' - line 262", "'public String getUrlName() {' - line 267", "'public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws Exception {' - line 278", "'public String getIconFileName() {' - line 283", "'public String getDisplayName() {' - line 288", "'public String getUrlName() {' - line 293"]}, "RekeySecretAdminMonitorTest.java": {"METHODS": ["'public void setUp() {' - line 51", "'public void setup(JenkinsRule jenkinsRule, WithTestSecret recipe) {' - line 61", "'public void tearDown(JenkinsRule jenkinsRule, WithTestSecret recipe) {' - line 66", "'public void decorateHome(JenkinsRule jenkinsRule, File home) throws Exception {' - line 78", "'new FilePath(f).touch(0);' - line 82", "'private static void putSomeOldData(File dir) throws Exception {' - line 90", "'private void verifyRewrite(File dir) throws Exception {' - line 95", "'public void testBasicWorkflow() throws Exception {' - line 103", "'private HtmlForm getRekeyForm(JenkinsRule.WebClient wc) throws IOException, SAXException {' - line 139", "'private HtmlButton getButton(HtmlForm form, int index) {' - line 143", "'public void testScanOnBoot() throws Exception {' - line 161", "'private static String encryptOld(String str) throws Exception {' - line 177", "'private String encryptNew(String str) {' - line 183"]}, "SuspiciousRequestFilterTest.java": {"METHODS": ["'private WebResponse get(String path) throws Exception {' - line 29", "'public void denySemicolonInRequestPathByDefault() throws Exception {' - line 37", "'public void allowSemicolonsInRequestPathWhenEscapeHatchEnabled() throws Exception {' - line 47", "'public void allowSemicolonsInQueryParameters() throws Exception {' - line 59", "'private static Foo getInstance() {' - line 68", "'public String getIconFileName() {' - line 76", "'public String getDisplayName() {' - line 82", "'public String getUrlName() {' - line 88", "'public void doBar(@QueryParameter String baz) {' - line 93", "'public void doIndex(@QueryParameter String baz) {' - line 98"]}, "Security3030Test.java": {"METHODS": ["'public void fewFilesStapler() throws IOException {' - line 66", "'public void tooManyFilesStapler() throws Exception {' - line 72", "'public void tooLargeFilesStapler() throws Exception {' - line 89", "'public void tooLargeSubmissionStapler() throws Exception {' - line 100", "'public void fewFilesParser() throws IOException {' - line 111", "'public void tooManyFilesParser() throws Exception {' - line 117", "'public void tooLargeFilesParser() throws Exception {' - line 134", "'public void tooLargeSubmissionParser() throws Exception {' - line 145", "'private static void println(PrintWriter pw, String s) {' - line 156", "'private static Object getStaticFieldValue(Class<?> clazz, String field) throws IllegalAccessException, NoSuchFieldException {' - line 160", "'private static void setStaticFieldValue(Class<?> clazz, String field, Object value) throws IllegalAccessException, NoSuchFieldException {' - line 166", "'private static FieldValue withStaticField(Class<?> clazz, String field, Object value) throws NoSuchFieldException, IllegalAccessException {' - line 172", "'private FieldValue(Class<?> clazz, String field, Object value) throws NoSuchFieldException, IllegalAccessException {' - line 181", "'public void close() throws Exception {' - line 189", "'private static void writeMultipartFormDataBody(OutputStream os, String boundary, int files, int other, int fileSize) throws IOException {' - line 218", "'public String getIconFileName() {' - line 251", "'public String getDisplayName() {' - line 256", "'public String getUrlName() {' - line 261", "'return getClass().getSimpleName();' - line 262", "'public HttpResponse doSubmitMultipart(StaplerRequest req) throws FileUploadException, ServletException, IOException {' - line 266", "'return processMultipartAndUnwrap(req);' - line 270", "'private HttpResponse processMultipartAndUnwrap(StaplerRequest req) throws FileUploadException, ServletException, IOException {' - line 277", "'return processMultipart(req);' - line 279", "'public void setExpectedWrapped(Class<? extends T> expectedWrapped) {' - line 293", "'public Throwable getActualWrapped() {' - line 297", "'public ServletException getActual() {' - line 301", "'public static StaplerRequestFormAction instance() {' - line 308", "'protected HttpResponse processMultipart(StaplerRequest req) throws ServletException, IOException {' - line 312", "'public static MultipartFormDataParserAction instance() {' - line 320", "'protected HttpResponse processMultipart(StaplerRequest req) throws ServletException {' - line 324", "'new MultipartFormDataParser(req);' - line 325"]}, "ApiCrumbExclusionTest.java": {"METHODS": ["'public void callUsingApiTokenDoesNotRequireCSRFToken() throws Exception {' - line 59", "'private void makeRequestAndVerify(String expected) throws IOException {' - line 96", "'private void makeRequestAndFail(int expectedCode) {' - line 104", "'private void checkWeCanChangeMyDescription(int expectedCode) throws IOException, SAXException {' - line 109", "'public String getIconFileName() {' - line 121", "'public String getDisplayName() {' - line 126", "'public String getUrlName() {' - line 131", "'public HttpResponse doIndex() {' - line 135"]}, "Jenkins67105Test.java": {"METHODS": ["'public void arrayListMultimap() throws Exception {' - line 22", "'public void hashMultimap() throws Exception {' - line 31", "'public GuavaBuilder(MasterToSlaveCallable<?, RuntimeException> callable) {' - line 41", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener)' - line 46"]}, "Security637Test.java": {"METHODS": ["'public void urlSafeDeserialization_handler_inSameJVMRemotingContext() throws Throwable {' - line 63", "'public String call() throws Exception {' - line 82", "'public void urlDnsEquivalence() throws Throwable {' - line 93", "'new URL(\"https://jenkins.io\"),' - line 97", "'new URL(\"https://www.jenkins.io\")' - line 98", "'public void urlSafeDeserialization_urlBuiltInAgent_inSameJVMRemotingContext() throws Throwable {' - line 106", "'public URL call() throws Exception {' - line 128", "'public void urlSafeDeserialization_urlBuiltInMaster_inSameJVMRemotingContext() throws Throwable {' - line 136", "'new URL(\"https://jenkins.io\"),' - line 150", "'new URL(\"https://www.jenkins.io\")' - line 151", "'public URL call() throws Exception {' - line 165", "'public void urlSafeDeserialization_inXStreamContext() throws Throwable {' - line 172", "'new URL(\"https://www.google.com/\"),' - line 177", "'new URL(\"https\", null, -1, \"\", null)' - line 179", "'public URLJobProperty(URL... urls) {' - line 213", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 219"]}, "BasicHeaderProcessorTest.java": {"METHODS": ["'public void prepareListeners() {' - line 38", "'public void testVariousWaysToCall() throws Exception {' - line 46", "'private void makeRequestAndFail() throws IOException, SAXException {' - line 104", "'private void makeRequestAndVerify(String expectedLogin) throws IOException {' - line 108", "'public void testAuthHeaderCaseInSensitive() throws Exception {' - line 113", "'private String encode(String prefix, String userAndPass) {' - line 148", "'private void makeRequestWithAuthCodeAndVerify(String authCode, String expectedLogin) throws IOException {' - line 155", "'private void makeRequestWithAuthCodeAndFail(String authCode) throws IOException {' - line 164", "'public String getIconFileName() {' - line 174", "'public String getDisplayName() {' - line 179", "'public String getUrlName() {' - line 184", "'public HttpResponse doIndex() {' - line 188"]}, "Security177Test.java": {"METHODS": ["'public void nosniff() throws Exception {' - line 21", "'private void verifyNoSniff(Page p) {' - line 32"]}, "Security2458Test.java": {"METHODS": ["'public void enableAgentToControllerProtections() {' - line 23", "'public void rejectBadCallable() throws Throwable {' - line 29", "'public Object call() throws Throwable {' - line 48", "'public Object call() throws Exception {' - line 56", "'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 61", "'public Object call() throws Exception {' - line 68", "'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 73", "'public Object call() throws Exception {' - line 80", "'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 85", "'private static SecurityException assertThrowsIOExceptionCausedBySecurityException(ThrowingRunnable runnable) {' - line 91", "'return assertThrowsIOExceptionCausedBy(SecurityException.class, runnable);' - line 92"]}, "CustomClassFilterTest.java": {"METHODS": ["'public void smokes() throws Exception {' - line 69", "'public void dynamicLoad() throws Exception {' - line 80", "'private void assertBlacklisted(String message, Class<?> c, boolean blacklisted) {' - line 90"]}, "UserDetailsCacheTest.java": {"METHODS": ["'public void before() throws IOException {' - line 48", "'public void getCachedTrue() throws Exception {' - line 55", "'public void getCachedFalse() {' - line 65", "'public void getCachedTrueNotFound() throws Exception {' - line 73", "'public void getCachedFalseNotFound() {' - line 82"]}, "ApiTokenPropertyTest.java": {"METHODS": ["'public void basics() throws Exception {' - line 61", "'public void security49Upgrade() throws Exception {' - line 91", "'public void adminsShouldBeUnableToSeeTokensByDefault() throws Exception {' - line 115", "'public void adminsShouldBeUnableToChangeTokensByDefault() throws Exception {' - line 134", "'public void postWithUsernameAndTokenInBasicAuthHeader() throws Exception {' - line 163", "'private WebClient createClientForUser(final String id) throws Exception {' - line 180", "'public void generateNewTokenWithoutName() throws Exception {' - line 190", "'public void migrationFromLegacyToken() throws Exception {' - line 210", "'private void checkUserIsConnected(WebClient wc) throws Exception {' - line 282", "'private void checkUserIsNotConnected(WebClient wc) throws Exception {' - line 290", "'public void legacyTokenChange() throws Exception {' - line 297", "'private void changeTokenByDirectCall(ApiTokenProperty apiTokenProperty) throws Exception {' - line 392", "'private void revokeAllToken(WebClient wc, User user) throws Exception {' - line 398", "'private void revokeLegacyToken(WebClient wc, User user) throws Exception {' - line 402", "'private void revokeAllTokenUsingFilter(WebClient wc, User user, Predicate<ApiTokenStore.HashedToken> filter) throws Exception {' - line 406", "'private void revokeToken(WebClient wc, String login, String tokenUuid) throws Exception {' - line 417", "'new URL(j.getURL(), \"user/\" + login + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/revoke/?tokenUuid=\" + tokenUuid),' - line 419", "'private void changeLegacyToken(WebClient wc, String login, boolean success) throws Exception {' - line 426", "'new URL(j.getURL(), \"user/\" + login + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/changeToken/\"),' - line 428", "'private GenerateNewTokenResponse generateNewToken(WebClient wc, String login, String tokenName) throws Exception {' - line 446", "'new URL(j.getURL(), \"user/\" + login + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken/?newTokenName=\" + tokenName),' - line 448", "'public void script_addFixedNewToken_Regular() throws Exception {' - line 462", "'public void script_addFixedNewToken_Invalid() throws Exception {' - line 483", "'public void script_generateNewToken() throws Exception {' - line 501", "'public void script_revokeAllTokens() throws Exception {' - line 527", "'public void script_revokeAllTokensExceptOne() throws Exception {' - line 558", "'public void script_revokeToken() throws Exception {' - line 598", "'private void checkTokenIsWorking(String login, String token) throws Exception {' - line 637", "'private void checkTokenIsNotWorking(String login, String token) throws Exception {' - line 649", "'private void checkInvalidTokenValue(ApiTokenProperty apiTokenProperty, String tokenName, String tokenValue) throws Exception {' - line 658"]}, "FilePathSecureTest.java": {"METHODS": ["'@Before public void init() throws Exception {' - line 45", "'@Test public void unzip() throws Exception {' - line 52", "'@Test public void untar() throws Exception {' - line 62", "'@Test public void zip() throws Exception {' - line 74", "'@Test public void tar() throws Exception {' - line 84"]}, "BasicHeaderApiTokenAuthenticatorTest.java": {"METHODS": ["'public void legacyToken_regularCase() throws Throwable {' - line 61", "'public void legacyToken_withoutLastGrantedAuthorities() throws Throwable {' - line 111", "'private static void enableLegacyTokenGenerationOnUserCreation() {' - line 167", "'private static void configureSecurity(JenkinsRule j) throws Exception {' - line 173", "'private static String base64(String login, String password) {' - line 181"]}, "Security380Test.java": {"METHODS": ["'public void testGetItemsWithoutAnonRead() throws Exception {' - line 23", "'public void testGetItems() throws Exception {' - line 36", "'public void testWithUnprotectedRootAction() throws Exception {' - line 49", "'public String getIconFileName() {' - line 67", "'public String getDisplayName() {' - line 72", "'public String getUrlName() {' - line 77", "'public HttpResponse doIndex() throws Exception {' - line 81"]}, "Security2278Test.java": {"METHODS": ["'public static void setUp() throws Exception {' - line 43", "'public void testUi() throws Exception {' - line 65", "'public void testUiWithPermission() throws Exception {' - line 76", "'public void testQueueCancelWithoutPermission() throws Exception {' - line 87", "'public void testWebMethodWithoutPermission() throws Exception {' - line 102", "'private WebRequest addReferer(WebRequest request, String referer) {' - line 129", "'public static void tearDown() throws Exception {' - line 135"]}, "ResourceDomainTest.java": {"METHODS": ["'public void prepare() throws Exception {' - line 43", "'public void secondDomainBasics() throws Exception {' - line 54", "'public void clearRootUrl() throws Exception {' - line 142", "'public void secondDomainCannotBeFaked() throws Exception {' - line 162", "'public void missingPermissionsCause403() throws Exception {' - line 189", "'public void projectWasRenamedCauses404() throws Exception {' - line 240", "'public void indexFileIsUsedIfDefined() {' - line 273", "'public void adminMonitorShowsUpWithOverriddenCSP() {' - line 278", "'public void testColonUserName() throws Exception {' - line 293", "'public void testRedirectUrls() {' - line 312", "'public void testUrlEncoding() throws Exception {' - line 320", "'public void testMoreUrlEncoding() throws Exception {' - line 341", "'public String getIconFileName() {' - line 372", "'public String getDisplayName() {' - line 378", "'public String getUrlName() {' - line 384", "'public HttpResponse doDynamic() throws Exception {' - line 388"]}, "SpySecurityListener.java": {"METHODS": ["'public void clearPreviousCalls() {' - line 49", "'protected void authenticated2(@NonNull UserDetails details) {' - line 58", "'protected void failedToAuthenticate(@NonNull String username) {' - line 63", "'protected void loggedIn(@NonNull String username) {' - line 68", "'protected void failedToLogIn(@NonNull String username) {' - line 73", "'protected void loggedOut(@NonNull String username) {' - line 78", "'private EventQueue add(T t) {' - line 86", "'public void assertLastEventIsAndThenRemoveIt(T expected) {' - line 91", "'public void assertLastEventIsAndThenRemoveIt(Predicate<T> predicate) {' - line 95", "'public void assertNoNewEvents() {' - line 105", "'public void clear() {' - line 109"]}, "Security2777Test.java": {"METHODS": ["'public void testView() throws IOException {' - line 18", "'public String getIconFileName() {' - line 35", "'public String getDisplayName() {' - line 40", "'public String getUrlName() {' - line 45"]}, "FrameOptionsPageDecoratorTest.java": {"METHODS": ["'public void defaultHeaderPresent() throws IOException, SAXException {' - line 19", "'public void testDisabledFrameOptions() throws IOException, SAXException {' - line 26", "'private static String getFrameOptionsFromResponse(WebResponse response) {' - line 33"]}, "AgentToControllerSecurityTest.java": {"METHODS": ["'public void testLegacyCallable() {' - line 37", "'public Void call() throws Exception {' - line 44", "'public Void call() throws Exception {' - line 52", "'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 58", "'public void testFilePaths() {' - line 66", "'public Void call() throws Exception {' - line 73", "'new FilePath(AgentComputerUtil.getChannelToController(), \"foo\").readLink();' - line 74", "'public void testAgentToControllerFileCallable() throws Exception {' - line 82", "'public Void call() throws Exception {' - line 88", "'new FilePath(channelToController, \"foo\").act(new A2CFileCallable());' - line 93", "'public Void invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {' - line 100", "'public Void call() throws Exception {' - line 108", "'public void ensureBypass() throws Exception {' - line 116", "'public Void call() throws Exception {' - line 127", "'new FilePath(channelToController, \"foo\").act(new NoopMasterToSlaveFileCallable());' - line 132", "'public Void call() throws Exception {' - line 139", "'public Void invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {' - line 146", "'public void controllerToControllerTest() throws Exception {' - line 155", "'public String call() throws Exception {' - line 162", "'public String call() throws Exception {' - line 177", "'public void agentToAgentTest() throws Exception {' - line 186", "'public static SecurityException assertThrowsIOExceptionCausedBySecurityException(ThrowingRunnable runnable) {' - line 192", "'return assertThrowsIOExceptionCausedBy(SecurityException.class, runnable);' - line 193"]}, "LastGrantedAuthoritiesPropertyTest.java": {"METHODS": ["'public void basicFlow() throws Exception {' - line 32", "'private void assertAuthorities(LastGrantedAuthoritiesProperty p, String expected) {' - line 66", "'private void assertAuthorities(Authentication auth, String expected) {' - line 70", "'private void _assertAuthorities(Collection<? extends GrantedAuthority> grantedAuthorities, String expected) {' - line 74", "'protected UserDetails authenticate2(String username, String password) throws AuthenticationException {' - line 85", "'public GroupDetails loadGroupByGroupname2(String groupname, boolean fetchMembers) throws UsernameNotFoundException {' - line 95", "'public UserDetails loadUserByUsername2(String username) throws UsernameNotFoundException {' - line 100"]}, "Security2761Test.java": {"METHODS": ["'public void symbolIconAltIsEscaped() throws Exception {' - line 26", "'public String getUrlName() {' - line 43", "'public String getTitle() {' - line 47"]}, "Security2776Test.java": {"METHODS": ["'public void escapedTooltipIsEscaped() throws Exception {' - line 26", "'private void assertExpectedBehaviorForTooltip(String selector, String expectedResult) throws IOException, SAXException {' - line 43", "'private static String _getUnsafeTooltip() {' - line 58", "'private static String _getSafeTooltip() {' - line 62", "'public String getUrlName() {' - line 69", "'public String getUnsafeTooltip() {' - line 73", "'return _getUnsafeTooltip();' - line 74", "'public String getSafeTooltip() {' - line 77", "'return _getSafeTooltip();' - line 78"]}, "Security2780Test.java": {"METHODS": ["'public void buildButtonTooltipHasNoXss() throws Exception {' - line 21"]}, "Security3188Test.java": {"METHODS": ["'public void linkCannotAttributeEscape() throws Exception {' - line 26", "'private static CommandInterpreter getScript(String script) {' - line 46"]}, "Security857Test.java": {"METHODS": ["'public void testJellyEscapingTrue() throws Exception {' - line 28", "'public void testJellyEscapingFalse() throws Exception {' - line 37", "'public void testJellyEscapingDefault() throws Exception {' - line 47", "'private void testJelly(Boolean escape) throws Exception {' - line 51", "'private String getJellyContent(Boolean escape) throws IOException {' - line 65", "'private String parseJelly(String jelly) throws Exception {' - line 80", "'private void checkResponse(String response, Boolean escape) {' - line 102"]}, "ClassFilterImplTest.java": {"METHODS": ["'public void controllerToAgentBypassesWhitelist() throws Exception {' - line 76", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 86", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 95", "'public String call() throws RuntimeException {' - line 105", "'public void agentToControllerRequiresWhitelist() throws Exception {' - line 113", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 123", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 132", "'public void xstreamRequiresWhitelist() throws Exception {' - line 146", "'protected XmlFile getConfigFile() {' - line 172"]}, "SecurityContextExecutorServiceTest.java": {"METHODS": ["'public void before() throws Throwable {' - line 58", "'public void testRunnableAgainstAllContexts() throws Exception {' - line 81", "'public void testCallableAgainstAllContexts() throws Exception {' - line 107", "'public void testCallableCollectionAgainstAllContexts() throws Exception {' - line 127", "'public void testFailedRunnableResetsContext() {' - line 159"]}, "Security218Test.java": {"METHODS": ["'public void dumbSlave() throws Exception {' - line 38", "'public void jnlpSlave() throws Exception {' - line 48", "'private void check(DumbSlave s) {' - line 63", "'public Object call() {' - line 73"]}, "StackTraceSuppressionTest.java": {"METHODS": ["'public void setup() {' - line 51", "'public void teardown() {' - line 56", "'private void clearProperties() {' - line 60", "'public void authenticationManageException() throws Exception {' - line 65", "'public void nonexistentAdjunct() throws Exception {' - line 81", "'public void nonexistentAdjunctShowsTrace() throws Exception {' - line 94", "'public void exception() throws Exception {' - line 106", "'public void exceptionShowsTrace() throws Exception {' - line 118", "'public void exceptionEndpoint() throws Exception {' - line 130", "'public void exceptionEndpointShowsTrace() throws Exception {' - line 139", "'private FreeStyleProject createBrokenProject() throws IOException {' - line 147", "'public FreeStyleProject newInstance(ItemGroup parent, String name) {' - line 150", "'public void save() {' - line 153", "'private void checBaseResponseContent(String content) {' - line 162", "'private void checkSuppressedStack(String relativePath, String detailString) throws IOException, SAXException {' - line 168", "'private void checkDisplayedStackTrace(String relativePath, String detailString) throws IOException, SAXException {' - line 178"]}, "Security2779Test.java": {"METHODS": ["'public void noXssInHelpLinkPanel() throws Exception {' - line 25", "'public void noXssInHelpIconPanel() throws Exception {' - line 30", "'private void noCrossSiteScriptingInHelp(String selector) throws Exception {' - line 34", "'public String getIconFileName() {' - line 58", "'public String getDisplayName() {' - line 63", "'public String getUrlName() {' - line 68", "'public String getFeatureName() {' - line 72"]}, "CSRFAdministrativeMonitorTest.java": {"METHODS": ["'public void testWithoutIssuer() {' - line 43", "'public void testWithIssuer() {' - line 52"]}, "UserSeedPropertyTest.java": {"METHODS": ["'public void userCreation_implies_userSeedCreation() {' - line 61", "'public void userSeedRenewal_changeTheSeed() throws Exception {' - line 71", "'public void initialUserSeedIsAlwaysDifferent() throws Exception {' - line 94", "'public void differentUserHaveDifferentInitialSeeds() throws Exception {' - line 112", "'public void userCreatedInThirdPartyRealm_cannotReconnect_afterSessionInvalidation_andRealmDeletion() throws Exception {' - line 129", "'public void userAfterBeingDeletedInThirdPartyRealm_canStillUseTheirSession_withDisabledSeed() throws Exception {' - line 164", "'public void userCreatedInThirdPartyRealm_canReconnect_afterSessionInvalidation() throws Exception {' - line 214", "'public void userSeedSection_isCorrectlyDisplayed() throws Exception {' - line 243", "'public void userSeedSection_isCorrectlyHidden_withSpecificSetting() throws Exception {' - line 263", "'private void assertUserConnected(JenkinsRule.WebClient wc, String expectedUsername) throws Exception {' - line 290", "'private void assertUserNotConnected(JenkinsRule.WebClient wc, String notExpectedUsername) throws Exception {' - line 295", "'private void requestRenewSeedForUser(User user) throws Exception {' - line 300"]}, "UserSeedSecurityListenerTest.java": {"METHODS": ["'public void authenticateSecondaryUserWhileLoggedIn_shouldNotOverwritePrimaryUserSessionSeed() throws Exception {' - line 45"]}, "UserSeedPropertyRestartTest.java": {"METHODS": ["'public void initialSeedIsSaved() throws Throwable {' - line 50", "'public void renewSeedSavesTheChange() throws Throwable {' - line 70", "'private static void requestRenewSeedForUser(User user, JenkinsRule j) throws Exception {' - line 95"]}, "UserSeedChangeListenerTest.java": {"METHODS": ["'public void onProgrammaticUserSeedChange_listenerTriggered() {' - line 46", "'public void onWebCallUserSeedChange_listenerTriggered() throws Exception {' - line 62", "'new URL(j.getURL() + alice.getUrl() + \"/\" + userSeed.getDescriptor().getDescriptorUrl() + \"/renewSessionSeed\"),' - line 73", "'public void onUserSeedRenewed(@NonNull User user) {' - line 89"]}, "CustomRoutingDecisionProviderTest.java": {"METHODS": ["'public Decision decide(@NonNull String signature) {' - line 55", "'public String getDisplayName() {' - line 71", "'public String getIconFileName() {' - line 76", "'public void doIndex() {' - line 90", "'public void valid() {' - line 95", "'private static void replyOk() {' - line 100", "'public void customRoutingWhitelistProvider() throws Exception {' - line 111"]}, "DoActionFilterTest.java": {"METHODS": ["'public TestAccessModifier getPublic() {' - line 63", "'protected TestAccessModifier getProtected() {' - line 67", "'TestAccessModifier getInternal() {' - line 71", "'private TestAccessModifier getPrivate() {' - line 75", "'public String doValue() {' - line 81", "'public void testProtectedMethodDispatch() throws Exception {' - line 88", "'public static void doStaticWithRequest(StaplerRequest request) { replyOk(); }' - line 110", "'public void doWithRequest(StaplerRequest request) { replyOk(); }' - line 112", "'public void doWithHttpRequest(HttpServletRequest request) { replyOk(); }' - line 114", "'public String doWithRequestAndReturnString(StaplerRequest request) { return \"ok\"; }' - line 118", "'public void doWithResponse(StaplerResponse response) { replyOk(); }' - line 120", "'public void doWithHttpResponse(HttpServletResponse response) { replyOk(); }' - line 122", "'public void doWithThrowHttpResponseException() throws HttpResponses.HttpResponseException { replyOk(); }' - line 124", "'public void doWithThrowHttpResponseExceptionChild() throws HttpResponseExceptionChild { replyOk(); }' - line 128", "'public void doWithThrowExceptionImplementingOnlyHttpResponse() throws ExceptionImplementingOnlyHttpResponse { replyOk(); }' - line 131", "'public void doWithThrowOtherException() throws IOException { replyOk(); }' - line 133", "'public HttpResponse doWithReturnHttpResponse() { return HttpResponses.text(\"ok\"); }' - line 135", "'public HttpResponseChild doWithReturnHttpResponseChild() { return new HttpResponseChild(); }' - line 137", "'public void doWebMethod() { replyOk(); }' - line 144", "'public void webMethod() { replyOk(); }' - line 148", "'public void doAnnotatedGet() { replyOk(); }' - line 151", "'public void doAnnotatedPost() { replyOk(); }' - line 154", "'public void doAnnotatedPut() { replyOk(); }' - line 157", "'public void doAnnotatedDelete() { replyOk(); }' - line 160", "'public void doAnnotatedRequirePost() { replyOk(); }' - line 163", "'public void annotatedJavaScriptScriptMethod() { replyOk(); }' - line 166", "'public void doAnnotatedResponseSuccess() { replyOk(); }' - line 169", "'public void doAnnotatedLimitedTo() { replyOk(); }' - line 177", "'public void doAnnotatedParamQueryParameter(@QueryParameter String value) { replyOk(); }' - line 183", "'public void doAnnotatedParamAncestorInPath(@AncestorInPath DoActionFilterTest parent) { replyOk(); }' - line 185", "'public void doAnnotatedParamHeader(@Header(\"test-header\") String testHeader) { replyOk(); }' - line 187", "'public void doAnnotatedParamJsonBody(@JsonBody Map<String, String> names) { replyOk(); }' - line 189", "'public void doAnnotatedParamSubmittedForm(@SubmittedForm JSONObject form) { replyOk(); }' - line 191", "'public void do_CallMeBecauseOfMyUnderscore(StaplerRequest request) { replyOk(); }' - line 197", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 204", "'public void generateResponse(StaplerRequest staplerRequest, StaplerResponse staplerResponse, Object o) throws IOException, ServletException {' - line 214", "'public void testMethodSignatureOk_staticWithRequest() throws Exception {' - line 221", "'public void testMethodSignatureOk_withRequest() throws Exception {' - line 226", "'public void testMethodSignatureOk_withRequestAndReturnString() throws Exception {' - line 231", "'public void testMethodSignatureOk_withHttpRequest() throws Exception {' - line 236", "'public void testMethodSignatureOk_withHttpResponse() throws Exception {' - line 241", "'public void testMethodSignatureOk_withResponse() throws Exception {' - line 246", "'public void testMethodSignatureOk_withThrowHttpResponseException() throws Exception {' - line 251", "'public void testMethodSignatureOk_withThrowHttpResponseExceptionChild() throws Exception {' - line 256", "'public void testMethodSignatureOk_withThrowExceptionImplementingOnlyHttpResponse() throws Exception {' - line 261", "'public void testMethodSignatureOk_withThrowOtherException() throws Exception {' - line 266", "'public void testMethodSignatureOk_withReturnHttpResponse() throws Exception {' - line 271", "'public void testMethodSignatureOk_withReturnHttpResponseChild() throws Exception {' - line 276", "'public void testAnnotatedMethodOk_webMethodUrl() throws Exception {' - line 281", "'public void testAnnotatedMethodOk_webMethodUrl2() throws Exception {' - line 286", "'public void testAnnotatedMethodOk_annotatedGet() throws Exception {' - line 291", "'public void testAnnotatedMethodOk_annotatedPost() throws Exception {' - line 296", "'public void testAnnotatedMethodOk_annotatedPut() throws Exception {' - line 304", "'public void testAnnotatedMethodOk_annotatedDelete() throws Exception {' - line 312", "'public void testAnnotatedMethodOk_annotatedRequirePost() throws Exception {' - line 317", "'public void testAnnotatedMethodOk_annotatedJavaScriptScriptMethod() throws Exception {' - line 325", "'public String issueCrumb(StaplerRequest request) {' - line 328", "'public void validateCrumb(StaplerRequest request, String submittedCrumb) {' - line 333", "'public void testAnnotatedMethodOk_annotatedResponseSuccess() throws Exception {' - line 347", "'public void testAnnotatedMethodOk_annotatedJsonResponse() throws Exception {' - line 352", "'public void testAnnotatedMethodOk_annotatedLimitedTo() {' - line 361", "'public void testAnnotatedParameterOk_annotatedParamQueryParameter() throws Exception {' - line 368", "'public void testAnnotatedParameterOk_annotatedParamAncestorInPath() throws Exception {' - line 375", "'public void testAnnotatedParameterOk_annotatedParamHeader() throws Exception {' - line 380", "'public void testAnnotatedParameterOk_annotatedParamJsonBody() throws Exception {' - line 387", "'public void testAnnotatedParameterOk_annotatedParamSubmittedForm() throws Exception {' - line 397", "'public void testOk__CallMeBecauseOfMyUnderscore() throws Exception {' - line 411", "'public void doDynamic() { replyOk(); }' - line 423", "'public void methodWithoutNameEqualIndex() { replyOk(); }' - line 431", "'public void doIndex() { replyOk(); }' - line 436", "'public void testSpecialCasesOk() throws Exception {' - line 440", "'public void dontCallMeBecauseOfMyDont(StaplerRequest request) { replyOk(); }' - line 450", "'public void doSomething() { replyOk(); }' - line 454", "'public String doReturnString() { return \"ok\"; }' - line 457", "'public Object doReturnObject() { return \"ok\"; }' - line 460", "'public void testNotOk_ntCallMeBecauseOfMyDont() throws Exception {' - line 464", "'public void testNotOk_something() throws Exception {' - line 470", "'public void testNotOk_returnString() throws Exception {' - line 476", "'public void testNotOk_returnObject() throws Exception {' - line 482", "'public void doWithServletRequest(ServletRequest request) { replyOk(); }' - line 489", "'public void doWithServletResponse(ServletResponse response) { replyOk(); }' - line 491", "'public void doWithRequestImpl(RequestImpl request) { replyOk(); }' - line 494", "'public void doWithResponseImpl(ResponseImpl response) { replyOk(); }' - line 496", "'public void doAnnotatedResponseSuccess(Object req) { replyOk(); }' - line 500", "'//        public void doAnnotatedJsonOutputFilter() { replyOk(); }' - line 504", "'public void testNotOkSpecialCases_withServletRequest() throws Exception {' - line 508", "'public void testNotOkSpecialCases_withServletResponse() throws Exception {' - line 514", "'public void testNotOkSpecialCases_withRequestImpl() throws Exception {' - line 520", "'public void testNotOkSpecialCases_withResponseImpl() throws Exception {' - line 526", "'public void testNotOkSpecialCases_annotatedResponseSuccess() throws Exception {' - line 532", "'//    public void testNotOkSpecialCases_annotatedJsonOutputFilter() throws Exception {' - line 539", "'public void doNotAnnotatedAtAll() { replyOk(); }' - line 547", "'public void doOnlyAnnotatedInA() { replyOk(); }' - line 550", "'public void doOnlyAnnotatedInB() { replyOk(); }' - line 552", "'public void doOnlyAnnotatedInANotOverrided() { replyOk(); }' - line 555", "'public void doAnnotatedButDifferent() { replyOk(); }' - line 558", "'public void doNotAnnotatedAtAll() { replyOk(); }' - line 563", "'public void doOnlyAnnotatedInA() { replyOk(); }' - line 566", "'public void doOnlyAnnotatedInB() { replyOk(); }' - line 570", "'public void doAnnotatedButDifferent() { replyOk(); }' - line 576", "'public B getTarget() {' - line 582", "'public void testClassInheritance_notAnnotatedAtAll() throws Exception {' - line 588", "'public void testClassInheritance_onlyAnnotatedInA() throws Exception {' - line 594", "'public void testClassInheritance_onlyAnnotatedInB() throws Exception {' - line 599", "'public void testClassInheritance_onlyAnnotatedInANotOverrided() throws Exception {' - line 604", "'public void testClassInheritance_annotatedButDifferent1() throws Exception {' - line 609", "'public void testClassInheritance_annotatedButDifferent2() throws Exception {' - line 617", "'void doNotAnnotated();' - line 623", "'void doAnnotatedBoth();' - line 626", "'void doAnnotatedOnlyI();' - line 629", "'void doAnnotatedOnlyJ();' - line 631", "'void doAnnotatedButDifferent();' - line 634", "'public void doNotAnnotated() { replyOk(); }' - line 639", "'public void doAnnotatedBoth() { replyOk(); }' - line 643", "'public void doAnnotatedOnlyI() { replyOk(); }' - line 646", "'public void doAnnotatedOnlyJ() { replyOk(); }' - line 650", "'public void doAnnotatedButDifferent() { replyOk(); }' - line 654", "'public J getTarget() {' - line 660", "'public void testInterfaceImplementation_notAnnotated() throws Exception {' - line 666", "'public void testInterfaceImplementation_annotatedBoth() throws Exception {' - line 672", "'public void testInterfaceImplementation_annotatedOnlyI() throws Exception {' - line 677", "'public void testInterfaceImplementation_annotatedOnlyJ() throws Exception {' - line 682", "'public void testInterfaceImplementation_annotatedButDifferent1() throws Exception {' - line 687", "'public void testInterfaceImplementation_annotatedButDifferent2() throws Exception {' - line 695"]}, "TypedFilterTest.java": {"METHODS": ["'public Renderable getTarget() {' - line 12", "'public void getTarget_withoutArg_isNotRoutableDirectly() throws Exception {' - line 18", "'public Renderable getTarget() {' - line 25", "'public void getTarget_withoutArg_isRoutableWithAnnotation() throws Exception {' - line 31", "'public Renderable getTarget() {' - line 38", "'public void getTarget_withArg_isNotRoutableWithStaplerNotDispatchable() throws Exception {' - line 44", "'public Renderable getTarget(StaplerRequest req) {' - line 50", "'public void getTarget_withArg_isRoutable() throws Exception {' - line 56", "'public Renderable getStaplerFallback() {' - line 62", "'public void getStaplerFallback_withoutArg_isNotRoutableDirectly() throws Exception {' - line 68", "'public Renderable getStaplerFallback() {' - line 75", "'public void getStaplerFallback_withoutArg_isRoutableWithAnnotation() throws Exception {' - line 81", "'public Renderable getStaplerFallback() {' - line 88", "'public void getStaplerFallback_withArg_isNotRoutableWithStaplerNotDispatchable() throws Exception {' - line 94", "'public Renderable getStaplerFallback(StaplerRequest req) {' - line 100", "'public void getStaplerFallback_withArg_isRoutable() throws Exception {' - line 106", "'public Object getTarget() {' - line 112", "'public Object getTarget() {' - line 123", "'public TypeImplementingStaplerProxy getTypeImplementingStaplerProxy() {' - line 133", "'public TypeExtendingTypeImplementingStaplerProxy getTypeExtendingTypeImplementingStaplerProxy() {' - line 137", "'public TypeImplementingStaplerProxy2 getTypeImplementingStaplerProxy2() {' - line 141", "'public TypeExtendingTypeImplementingStaplerProxy2 getTypeExtendingTypeImplementingStaplerProxy2() {' - line 145", "'public void typeImplementingStaplerProxy_isRoutableByDefault() throws Exception {' - line 151", "'public void typeExtendingParentImplementingStaplerProxy_isRoutableByDefault() throws Exception {' - line 157", "'public void typeImplementingStaplerProxy_isNotRoutableWithNonroutable() throws Exception {' - line 163", "'public void typeExtendingParentImplementingStaplerProxy_isNotRoutableWithNonroutable() throws Exception {' - line 170", "'public Renderable getDynamic() {' - line 178", "'public void getDynamic_withoutArg_isRoutable() throws Exception {' - line 184", "'public Renderable getDynamic(String someArgs) {' - line 191", "'public void getDynamic_withArgStartingWithString_isRoutable() throws Exception {' - line 197", "'public Renderable getDynamic(StaplerRequest req, String someArgs) {' - line 205", "'public void getDynamic_withArgNotStartingWithString_isNotRoutable() throws Exception {' - line 211", "'public Renderable getDynamic(StaplerRequest req) {' - line 218", "'public void getDynamic_withArgNotIncludingString_isRoutable() throws Exception {' - line 224"]}, "JenkinsSupportAnnotationsTest.java": {"METHODS": ["'public void testPluginWithAnnotations() throws Exception {' - line 21"]}, "PreventRoutingTest.java": {"METHODS": ["'public Object getTarget() {' - line 48", "'public Renderable getLegitRoutable() {' - line 53", "'public void getTargetNull_isNotRoutable() throws Exception {' - line 61", "'public Object getTarget() {' - line 73", "'public Renderable getLegitRoutable() {' - line 78", "'public void getTargetNewObject_isNotRoutable() throws Exception {' - line 84", "'public Renderable getLegitRoutable() {' - line 95", "'public Renderable getLegitRoutable2() {' - line 101", "'private static void notStaplerGetter(@NonNull Object o) {' - line 106", "'public void regularGetter_notARequest() throws Exception {' - line 117"]}, "StaplerRoutableGetterTest.java": {"METHODS": ["'public String getUrlName() {' - line 37", "'public Object getFalseWithoutAnnotation() {' - line 41", "'public Object getFalseWithAnnotation() {' - line 46", "'public Renderable getTrueWithoutAnnotation() {' - line 50", "'public Renderable getTrueWithAnnotation() {' - line 55", "'public Renderable getPriorityToNegative() {' - line 61", "'public void testForceGetterMethod() throws Exception {' - line 67", "'public void testForceNotGetterMethod() throws Exception {' - line 78", "'public void testPriorityIsNegative() throws Exception {' - line 86", "'public Renderable getParentKoButChildOk() {' - line 92", "'public Renderable getParentKoButChildNone() {' - line 97", "'public Renderable getParentNoneButChildOk() {' - line 101", "'public Renderable getParentNoneButChildKo() {' - line 105", "'public Renderable getParentOkButChildKo() {' - line 110", "'public Renderable getParentOkButChildNone() {' - line 115", "'public String getUrlName() {' - line 123", "'public Renderable getParentKoButChildOk() {' - line 129", "'public Renderable getParentKoButChildNone() {' - line 134", "'public Renderable getParentNoneButChildOk() {' - line 140", "'public Renderable getParentNoneButChildKo() {' - line 146", "'public Renderable getParentOkButChildKo() {' - line 152", "'public Renderable getParentOkButChildNone() {' - line 157", "'public void testInheritanceOfAnnotation_childHasLastWord() throws Exception {' - line 163"]}, "GetterMethodFilterTest.java": {"METHODS": ["'public String getString() {' - line 59", "'public Object getObjectString() {' - line 64", "'public Object getObjectCustom() {' - line 69", "'public void doIndex() {' - line 72", "'public Point getPoint() {' - line 78", "'public Point getPointCustomChild() {' - line 82", "'public void doIndex() {' - line 85", "'public Point getPointWithListener() {' - line 91", "'public double getX() {' - line 94", "'public void testWithReturnJavaPlatformObject_string() throws Exception {' - line 104", "'public void testWithReturnJavaPlatformObject_objectString() throws Exception {' - line 109", "'public void testWithReturnJavaPlatformObject_objectCustom() throws Exception {' - line 114", "'public void testWithReturnJavaPlatformObject_point() throws Exception {' - line 119", "'public void testWithReturnJavaPlatformObject_pointCustomChild() throws Exception {' - line 125", "'public void testWithReturnJavaPlatformObject_pointWithListener() throws Exception {' - line 130", "'public List<Renderable> getList() {' - line 140", "'public List<List<Renderable>> getListOfList() {' - line 149", "'public Renderable[] getArray() {' - line 153", "'public Point[] getArrayOfPoint() {' - line 158", "'public void doIndex() {' - line 160", "'public Renderable[][] getArrayOfArray() {' - line 166", "'new Renderable(),' - line 169", "'new Renderable(),' - line 170", "'public List<Renderable>[] getArrayOfList() {' - line 176", "'public List<Renderable[]> getListOfArray() {' - line 181", "'public void testWithReturnMultiple_list() throws Exception {' - line 193", "'public void testWithReturnMultiple_listOfPoint() throws Exception {' - line 201", "'public void testWithReturnMultiple_listOfList() throws Exception {' - line 208", "'public void testWithReturnMultiple_array() throws Exception {' - line 218", "'public void testWithReturnMultiple_arrayOfPoint() throws Exception {' - line 226", "'public void testWithReturnMultiple_arrayOfArray() throws Exception {' - line 233", "'public void testWithReturnMultiple_arrayOfList() throws Exception {' - line 243", "'public void testWithReturnMultiple_listOfArray() throws Exception {' - line 253", "'public void testWithReturnMultiple_map() throws Exception {' - line 263", "'public void testWithReturnCoreObject_people() throws Exception {' - line 278", "'public void testTopLevelItemIsLegal() throws Exception {' - line 283", "'public Folder getFolder() {' - line 290", "'public void testWithReturnPluginObject_folder() throws Exception {' - line 296", "'public Base64 getBase64() {' - line 304", "'public Encoder getEncoder() {' - line 308", "'public Encoder getEncoderCustomChild() {' - line 312", "'public Object encode(Object source) {' - line 315", "'public void doIndex() {' - line 320", "'public void testWithReturnThirdPartyObject_base32() throws Exception {' - line 331", "'public void testWithReturnThirdPartyObject_encoder() throws Exception {' - line 338", "'public void testWithReturnThirdPartyObject_encoderCustomChild() throws Exception {' - line 345", "'public int getInteger() {' - line 354", "'public Integer getIntegerObject() {' - line 358", "'public long getLong() {' - line 362", "'public Long getLongObject() {' - line 366", "'public short getShort() {' - line 370", "'public Short getShortObject() {' - line 374", "'public byte getByte() {' - line 378", "'public Byte getByteObject() {' - line 382", "'public boolean getBoolean() {' - line 386", "'public Boolean getBooleanObject() {' - line 390", "'public char getChar() {' - line 394", "'public Character getCharObject() {' - line 398", "'public float getFloat() {' - line 402", "'public Float getFloatObject() {' - line 406", "'public double getDouble() {' - line 410", "'public Double getDoubleObject() {' - line 414", "'public void getVoid() { }' - line 418", "'public Void getVoidObject() {' - line 420", "'public void testTestWithReturnPrimitives_integer() throws Exception {' - line 426", "'public void testTestWithReturnPrimitives_integerObject() throws Exception {' - line 432", "'public void testTestWithReturnPrimitives_long() throws Exception {' - line 438", "'public void testTestWithReturnPrimitives_longObject() throws Exception {' - line 444", "'public void testTestWithReturnPrimitives_short() throws Exception {' - line 450", "'public void testTestWithReturnPrimitives_shortObject() throws Exception {' - line 456", "'public void testTestWithReturnPrimitives_byte() throws Exception {' - line 462", "'public void testTestWithReturnPrimitives_byteObject() throws Exception {' - line 468", "'public void testTestWithReturnPrimitives_boolean() throws Exception {' - line 474", "'public void testTestWithReturnPrimitives_booleanObject() throws Exception {' - line 480", "'public void testTestWithReturnPrimitives_char() throws Exception {' - line 486", "'public void testTestWithReturnPrimitives_charObject() throws Exception {' - line 492", "'public void testTestWithReturnPrimitives_float() throws Exception {' - line 498", "'public void testTestWithReturnPrimitives_floatObject() throws Exception {' - line 504", "'public void testTestWithReturnPrimitives_double() throws Exception {' - line 510", "'public void testTestWithReturnPrimitives_doubleObject() throws Exception {' - line 516", "'public void testTestWithReturnPrimitives_void() throws Exception {' - line 522", "'public void testTestWithReturnPrimitives_voidObject() throws Exception {' - line 528", "'public Renderable getRenderable() {' - line 537", "'public void testWithReturnWithinStaplerScope_renderable() throws Exception {' - line 543"]}, "StaplerRoutableFieldTest.java": {"METHODS": ["'public String getUrlName() {' - line 13", "'public void testFieldNotAnnotated() throws Exception {' - line 58", "'public void testFieldNotAnnotated_escapeHatch() throws Exception {' - line 71", "'public void testFieldAnnotatedOk() throws Exception {' - line 92", "'public void testFieldAnnotatedKo() throws Exception {' - line 101", "'public void testFieldDoubleAnnotated() throws Exception {' - line 110", "'public void testStaticFieldNotAnnotated() throws Exception {' - line 119", "'public void testStaticFieldNotAnnotated_escapeHatch() throws Exception {' - line 128", "'public void testStaticFieldAnnotatedOk() throws Exception {' - line 148"]}, "StaplerRoutableActionTest.java": {"METHODS": ["'public void notDoName() { replyOk(); }' - line 19", "'public void doWebMethod1() { replyOk(); }' - line 22", "'public void doWebMethod2() { replyOk(); }' - line 25", "'public void doWebMethod3() throws HttpResponses.HttpResponseException {' - line 27", "'public void doWebMethod4(StaplerRequest request) {' - line 31", "'public void doWebMethod5(@QueryParameter String foo) {' - line 35", "'public void testNewRulesRoutableAction_notDoName() throws Exception {' - line 41", "'public void testNewRulesRoutableAction_webMethod1() throws Exception {' - line 50", "'public void testNewRulesRoutableAction_webMethod3Through5() throws Exception {' - line 55", "'public void testNewRulesRoutableAction_webMethod2() throws Exception {' - line 62", "'public void doWebMethod1() { replyOk(); }' - line 70", "'public void doWebMethod2() { replyOk(); }' - line 74", "'public void testNewRulesNonroutableAction_webMethod1() throws Exception {' - line 78", "'public void testNewRulesNonroutableAction_webMethod2() throws Exception {' - line 84"]}, "StaticRoutingDecisionProviderTest.java": {"METHODS": ["'public FreeStyleProject getJob() {' - line 54", "'public String getString() {' - line 59", "'public Object getObjectString() {' - line 65", "'public Object getObjectCustom() {' - line 73", "'public void doIndex() {' - line 77", "'public void preparation() throws Exception {' - line 86", "'public void resetWhitelist() throws Exception {' - line 92", "'public void test_job_index() throws Exception {' - line 97", "'public void test_string() throws Exception {' - line 104", "'public void test_objectString() throws Exception {' - line 110", "'public void test_objectCustom() throws Exception {' - line 116", "'public void test_objectCustom_withUserControlledSavedWhitelist() throws Throwable {' - line 123", "'public void test_objectCustom_withUserControlledEditedWhitelist() throws Exception {' - line 141", "'public void test_objectCustom_withStandardWhitelist() throws Exception {' - line 175", "'public void doAction(StaplerRequest request) {' - line 228", "'public void doActionWithStaplerDispatchable(StaplerRequest request) {' - line 235", "'public void doActionWithStaplerNotDispatchable(StaplerRequest request) {' - line 242", "'public void doActionWithWebMethod(StaplerRequest request) {' - line 249", "'public void doAction_regular() throws Exception {' - line 255", "'public void doAction_actionWithStaplerDispatchable() throws Exception {' - line 277", "'public void doAction_actionWithWebMethod() throws Exception {' - line 286", "'public Renderable getItem() {' - line 304", "'public Renderable getItemWithStaplerDispatchable() {' - line 311", "'public Renderable getItemWithStaplerNotDispatchable() {' - line 318", "'public void getItem_regular() throws Exception {' - line 324", "'public void getItem_getterWithStaplerDispatchable() throws Exception {' - line 337", "'public void getItem_getterWithStaplerNotDispatchable() throws Exception {' - line 349", "'public void field_regular() throws Exception {' - line 401", "'public void field_regular_returnType() throws Exception {' - line 414", "'public void field_withStaplerDispatchable() throws Exception {' - line 451", "'public void field_withStaplerNotDispatchable() throws Exception {' - line 461", "'public void fieldStatic_regular() throws Exception {' - line 476", "'public void fieldStatic_withStaplerDispatchable() throws Exception {' - line 489", "'public void fieldStatic_withStaplerNotDispatchable() throws Exception {' - line 500"]}, "StaplerDispatchValidatorTest.java": {"METHODS": ["'public void setUp() throws Exception {' - line 48", "'public void canViewStaplerViews() throws Exception {' - line 57", "'public void cannotViewStaplerFragments() throws Exception {' - line 68", "'public void canViewRoot() throws Exception {' - line 76", "'public void canViewIndex() throws Exception {' - line 85", "'public void canViewPagesThatIncludeViews() throws Exception {' - line 94", "'public void canViewPagesThatRedirectToViews() throws Exception {' - line 103", "'public void canViewCompressedViews() throws Exception {' - line 112", "'public void cannotViewFragment() throws Exception {' - line 121", "'public void canSetStatusCodeBeforeValidation() throws Exception {' - line 129", "'public String getIconFileName() {' - line 139", "'public String getDisplayName() {' - line 145", "'return getClass().getSimpleName() + \" Test Data\";' - line 146", "'public String getUrlName() {' - line 151", "'return getClass().getSimpleName().toLowerCase(Locale.ENGLISH);' - line 152"]}, "DynamicTest.java": {"METHODS": ["'public void testRequestsDispatchedToEligibleDynamic() {' - line 23", "'public String getIconFileName() {' - line 40", "'public String getDisplayName() {' - line 46", "'public HttpResponse getResponse1() {' - line 51", "'public HttpResponse doResponse2() {' - line 56", "'public void doDynamic(StaplerRequest req) {' - line 60", "'public String getUrlName() {' - line 66"]}, "Security867Test.java": {"METHODS": ["'public void folderTraversalPrevented_avoidStealingSecretInView() throws Exception {' - line 47", "'private String getContent(JenkinsRule.WebClient wc, String url) throws Exception {' - line 80", "'private String getContentAndCheck200(JenkinsRule.WebClient wc, String url) throws Exception {' - line 85", "'public void folderTraversalPrevented_avoidStealingSecretFromDifferentObject() throws Exception {' - line 93", "'public String getMyConfig() {' - line 125", "'public String getMyConfig() {' - line 149"]}, "Security914Test.java": {"METHODS": ["'public void cannotUseInvalidLocale_toTraverseFolder() throws Exception {' - line 48", "'public void cannotUseInvalidLocale_toAnyFileInSystem() throws Exception {' - line 68"]}, "StaplerAbstractTest.java": {"METHODS": ["'public void setUp() throws Exception {' - line 66", "'public void doIndex() {' - line 114", "'public void valid() {' - line 119", "'public Renderable getRenderable() {' - line 125", "'public void doIndex() {' - line 131", "'protected static void replyOk() {' - line 138", "'protected void assertGetMethodRequestWasBlockedAndResetFlag() {' - line 150", "'protected void assertDoActionRequestWasBlockedAndResetFlag() {' - line 155", "'protected void assertFieldRequestWasBlockedAndResetFlag() {' - line 160", "'protected void assertGetMethodActionRequestWasNotBlocked() {' - line 165", "'protected void assertDoActionRequestWasNotBlocked() {' - line 169", "'protected void assertFieldRequestWasNotBlocked() {' - line 173", "'protected void assertReachable(String url, HttpMethod method) throws IOException {' - line 177", "'protected void assertReachable(String url) throws IOException {' - line 191", "'protected void assertReachableWithSettings(WebRequest request) throws IOException {' - line 195", "'protected void assertReachableWithoutOk(String url) throws IOException {' - line 202", "'protected void assertNotReachable(String url) throws IOException {' - line 211"]}, "Security400Test.java": {"METHODS": ["'public void prepareFilterListener() {' - line 85", "'public void resetFilter() {' - line 98", "'private void assertRequestWasBlockedAndResetFlag() {' - line 102", "'private void assertRequestWasNotBlocked() {' - line 107", "'public void asyncDoRun() throws Exception {' - line 113", "'public Work() {' - line 123", "'public long getRecurrencePeriod() {' - line 128", "'protected void execute(TaskListener listener) throws IOException, InterruptedException {' - line 133", "'public void triggerCronDoRun() throws Exception {' - line 141", "'public void avoidDangerousAccessToSession() throws Exception {' - line 151", "'new MockAuthorizationStrategy()' - line 156", "'public void ensureDoStopStillReachable() throws Exception {' - line 216", "'public void ensureDoStopBuildWorks() throws Exception {' - line 274", "'public void anonCannotReadTextConsole() throws Exception {' - line 377", "'public void anonCannotAccessExecutorApi() throws Exception {' - line 436", "'public void anonCannotAccessJenkinsItemMap() throws Exception {' - line 493", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 519", "'public void ensureLogRecordManagerAccessibleOnlyByAdmin() throws Exception {' - line 544", "'new MockAuthorizationStrategy()' - line 549", "'public void anonCannotHaveTheListOfUsers() throws Exception {' - line 615", "'public void noAccessToAllUsers() throws Exception {' - line 678", "'new MockAuthorizationStrategy()' - line 685", "'private void checkPageIsRedirectedToLogin(Page page) {' - line 714"]}, "StaticRoutingDecisionProvider2Test.java": {"METHODS": ["'public void userControlledWhitelist_empty_Loading() {' - line 57", "'public void userControlledWhitelist_monoline_Loading() {' - line 71", "'public void userControlledWhitelist_multiline_Loading() {' - line 85", "'public void userControlledWhitelist_commentsAreIgnored() {' - line 103", "'public void userControlledWhitelist_emptyLinesAreIgnored() {' - line 116", "'public void userControlledWhitelist_whiteAndBlack() {' - line 127", "'public void defaultList() throws Exception {' - line 140", "'public void userControlledWhitelist_savedCorrectly() throws Exception {' - line 165"]}, "ApiTokenStatsTest.java": {"METHODS": ["'public void prepareConfig() {' - line 66", "'public void regularUsage() throws Exception {' - line 73", "'public void testResilientIfFileDoesNotExist() {' - line 169", "'public void resistantToDuplicatedUuid() throws Exception {' - line 180", "'public void resistantToDuplicatedUuid_withNull() throws Exception {' - line 229", "'public void testInternalComparator() throws Exception {' - line 263", "'public void testDayDifference() throws Exception {' - line 314", "'new Date().toInstant()' - line 327", "'private ApiTokenStats createFromFile(File file) {' - line 339"]}, "ApiTokenStatsRestartTest.java": {"METHODS": ["'public void roundtripWithRestart() throws Throwable {' - line 67", "'private static void checkUserIsConnected(WebClient wc, String username) throws Exception {' - line 152", "'private static void checkUserIsNotConnected(WebClient wc) throws Exception {' - line 160", "'private static void revokeToken(JenkinsRule j, WebClient wc, String login, String tokenUuid) throws Exception {' - line 165", "'new URL(j.getURL(), \"user/\" + login + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/revoke/?tokenUuid=\" + tokenUuid),' - line 167"]}, "ApiTokenPropertyConfigurationTest.java": {"METHODS": ["'public void newUserTokenConfiguration() {' - line 46"]}, "LegacyApiTokenAdministrativeMonitorTest.java": {"METHODS": ["'public void isActive() throws Exception {' - line 70", "'public void takeCareOfUserWithIdNull() throws Exception {' - line 96", "'public void listOfUserWithLegacyTokenIsCorrect() throws Exception {' - line 129", "'public void monitorManagePageFilterAreWorking() throws Exception {' - line 200", "'private void prepareUsersForFilters() throws Exception {' - line 260", "'private void checkNumberOfSelectedTr(HtmlElement document, int expectedCount) {' - line 280", "'public void monitorManagePageCanRevokeToken() throws Exception {' - line 287", "'private HtmlAnchor getFilterByIndex(HtmlPage page, SelectFilter selectFilter) {' - line 327", "'private HtmlButton getRevokeSelected(HtmlPage page) throws IOException {' - line 338", "'private void checkUserWithLegacyTokenListIsEmpty(JenkinsRule.WebClient wc, LegacyApiTokenAdministrativeMonitor monitor) throws Exception {' - line 349", "'private void simulateUseOfLegacyToken(User user) throws Exception {' - line 378", "'private void simulateUseOfToken(User user, String tokenPlainValue) throws Exception {' - line 385", "'private void createUserWithToken(boolean legacy, boolean fresh, boolean recent) throws Exception {' - line 394"]}, "WebSocketAgentsTest.java": {"METHODS": ["'public void smokes() throws Exception {' - line 79", "'public String call() {' - line 96", "'private FatTask() {' - line 104", "'new Random().nextBytes(payload);' - line 106", "'public String call() {' - line 110"]}, "StopBuildsCommandTest.java": {"METHODS": ["'public void shouldStopLastBuild() throws Exception {' - line 61", "'public void shouldNotStopEndedBuild() throws Exception {' - line 73", "'public void shouldStopSeveralWorkingBuilds() throws Exception {' - line 84", "'public void shouldReportNotSupportedType() throws Exception {' - line 102", "'public void shouldDoNothingIfJobNotFound() throws Exception {' - line 112", "'public void shouldStopWorkingBuildsInSeveralJobs() throws Exception {' - line 119", "'public void shouldFilterJobDuplicatesInInput() throws Exception {' - line 125", "'public void shouldReportBuildStopError() throws Exception {' - line 131", "'public void shouldStopSecondJobEvenIfFirstStopFailed() throws Exception {' - line 154", "'public void shouldStopEarlierBuildsEvenIfLatestComplete() throws Exception {' - line 185", "'private void setupAndAssertTwoBuildsStop(final List<String> inputNames) throws Exception {' - line 212", "'private FreeStyleProject createLongRunningProject(final String jobName) throws IOException {' - line 230"]}, "SimpleBuildWrapperTest.java": {"METHODS": ["'@Test public void envOverride() throws Exception {' - line 82", "'@Override public void setUp(Context context, Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {' - line 93", "'@Override public boolean isApplicable(AbstractProject<?, ?> item) {' - line 99", "'@Test public void envOverrideExpand() throws Exception {' - line 105", "'@Override public void setUp(Context context, Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {' - line 126", "'@Override public boolean isApplicable(AbstractProject<?, ?> item) {' - line 134", "'@Override public Computer createComputer() {' - line 145", "'@Override public EnvVars getEnvironment() throws IOException, InterruptedException {' - line 155", "'@Test public void disposer() throws Exception {' - line 163", "'@Override public void setUp(Context context, Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {' - line 172", "'@Override public void tearDown(Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {' - line 180", "'@Override public boolean isApplicable(AbstractProject<?, ?> item) {' - line 186", "'@Test public void disposerForPreCheckoutWrapper() throws Exception {' - line 192", "'@Test public void disposerForPreCheckoutWrapperWithScmError() throws Exception {' - line 201", "'protected boolean runPreCheckout() {' - line 212", "'@Override public boolean isApplicable(AbstractProject<?, ?> item) {' - line 217", "'public void checkout(Run<?, ?> build, Launcher launcher, FilePath workspace, TaskListener listener, File changelogFile, SCMRevisionState baseline) throws IOException, InterruptedException {' - line 225", "'public ChangeLogParser createChangeLogParser() {' - line 230", "'@Test public void failedJobWithInterruptedDisposer() throws Exception {' - line 235", "'@Override public void setUp(Context context, Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {' - line 247", "'@Override public void tearDown(Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {' - line 254", "'@Override public boolean isApplicable(AbstractProject<?, ?> item) {' - line 261", "'@Test public void loggerDecorator() throws Exception {' - line 268", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 272", "'@Override public void setUp(Context context, Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {}' - line 281", "'@Override public ConsoleLogFilter createLoggerDecorator(Run<?, ?> build) {' - line 283", "'@Override public OutputStream decorateLogger(AbstractBuild _ignore, OutputStream logger) throws IOException, InterruptedException {' - line 291", "'@Override protected void eol(byte[] b, int len) throws IOException {' - line 293", "'@Override public boolean isApplicable(AbstractProject<?, ?> item) {' - line 301"]}, "SimpleBuildStepTest.java": {"METHODS": ["'public void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull EnvVars env, @NonNull Launcher launcher, @NonNull TaskListener listener) throws InterruptedException, IOException {' - line 28", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 39", "'public void builderReceivesEnvVars() throws Exception {' - line 52"]}, "RetainVariablesLocalRuleTest.java": {"METHODS": ["'public void retainVariable_removeUnwantedVariables_batch() throws Exception {' - line 57", "'new StringParameterDefinition(\"what\", \"Hello\"),' - line 64", "'new StringParameterDefinition(\"who\", \"World\")' - line 65", "'new StringParameterValue(\"what\", \"hello\"),' - line 74", "'new StringParameterValue(\"who\", \"world\")' - line 75", "'new StringParameterValue(\"what\", \"hello\"),' - line 88", "'new StringParameterValue(\"who\", \"world\")' - line 89", "'public void retainVariable_removeModifiedSystemEnv_batch() throws Exception {' - line 98", "'new StringParameterDefinition(\"what\", \"Hello\"),' - line 105", "'new StringParameterDefinition(\"path\", null)' - line 107", "'new StringParameterValue(\"what\", \"hello\")' - line 118", "'new StringParameterValue(\"what\", \"hello\"),' - line 131", "'new StringParameterValue(\"path\", \"modificationOfPath\")' - line 132", "'new StringParameterValue(\"what\", \"hello\"),' - line 147", "'new StringParameterValue(\"path\", \"modificationOfPath;$PATH\")' - line 148", "'public void retainVariable_removeModifiedSystemEnv_shell() throws Exception {' - line 158", "'new StringParameterDefinition(\"what\", \"Hello\"),' - line 165", "'new StringParameterDefinition(\"path\", null)' - line 167", "'new StringParameterValue(\"what\", \"hello\")' - line 178", "'new StringParameterValue(\"what\", \"hello\"),' - line 191", "'new StringParameterValue(\"path\", \"modificationOfPath\")' - line 192", "'new StringParameterValue(\"what\", \"hello\"),' - line 207", "'new StringParameterValue(\"path\", \"modificationOfPath;$PATH\")' - line 208", "'public void retainVariable_removeUnwantedVariables_shell() throws Exception {' - line 218", "'new StringParameterDefinition(\"what\", \"Hello\"),' - line 225", "'new StringParameterDefinition(\"who\", \"World\")' - line 226", "'new StringParameterValue(\"what\", \"hello\"),' - line 235", "'new StringParameterValue(\"who\", \"world\")' - line 236", "'public void retainVariable_removeSystemVariables_shell() throws Exception {' - line 245", "'public void multipleBuildSteps_haveSeparateRules_batch() throws Exception {' - line 279", "'new StringParameterDefinition(\"what\", \"Hello\"),' - line 288", "'new StringParameterDefinition(\"who\", \"World\")' - line 289", "'new StringParameterValue(\"what\", \"hello\"),' - line 304", "'new StringParameterValue(\"who\", \"world\")' - line 305", "'public void multipleBuildSteps_haveSeparateRules_shell() throws Exception {' - line 316", "'new StringParameterDefinition(\"what\", \"Hello\"),' - line 325", "'new StringParameterDefinition(\"who\", \"World\")' - line 326", "'new StringParameterValue(\"what\", \"hello\"),' - line 341", "'new StringParameterValue(\"who\", \"world\")' - line 342", "'private void assertContainsSequentially(Build<?, ?> build, String... values) throws Exception {' - line 352", "'private String findStringEnclosedBy(Build<?, ?> build, String before, String after) throws Exception {' - line 365", "'private void assertDoesNotContainsSequentially(Build<?, ?> build, String... values) throws Exception {' - line 376"]}, "SetupWizardRestartTest.java": {"METHODS": ["'public void restartKeepsSetupWizardState() throws Throwable {' - line 22"]}, "InstallStateTest.java": {"METHODS": ["'public void shouldPerformCorrectConversionForAllNames() {' - line 53", "'public void shouldNotFailOnNullXMLField() {' - line 67", "'public void shouldNotFailOnEmptyName() {' - line 77", "'public void shouldReturnUnknownStateForUnknownName() {' - line 84", "'private static InstallState forName(String name) {' - line 89", "'return forXml(xml);' - line 94", "'private static InstallState forXml(String xml) {' - line 97"]}, "LoadDetachedPluginsTest.java": {"METHODS": ["'public void upgradeFromJenkins1() throws IOException {' - line 71", "'public void noUpdateSiteWarnings() {' - line 86", "'public void upgradeFromJenkins2() {' - line 97", "'public void newInstallation() {' - line 110", "'public void installDetachedDependencies() {' - line 130", "'private void assertLoader(Class<?> c, String expectedPlugin, JenkinsRule r) {' - line 145", "'public void nonstandardFilenames() {' - line 154", "'private List<PluginWrapper> getInstalledDetachedPlugins(JenkinsRule r, List<DetachedPlugin> detachedPlugins) {' - line 165", "'private void assertNoFailedPlugins(JenkinsRule r) {' - line 179"]}, "InstallUtilTest.java": {"METHODS": ["'public void setup() {' - line 68", "'public void tearDown() {' - line 77", "'public void test_typeTransitions() throws IOException, ServletException {' - line 86", "'public void test_getLastExecVersion() throws Exception {' - line 123", "'private void setStoredVersion(String version) throws Exception {' - line 137", "'public void testSaveAndRestoreInstallingPlugins() throws Exception {' - line 148", "'new UpdateCenter() { // inner classes...' - line 153", "'new UpdateSite(\"foo\", \"http://omg.org\") {' - line 155"]}, "SetupWizardTest.java": {"METHODS": ["'public void initSetupWizard() throws IOException, InterruptedException {' - line 85", "'public void shouldReturnPluginListsByDefault() throws Exception {' - line 97", "'public void shouldReturnUpdateSiteJSONIfSpecified() throws Exception {' - line 112", "'public void shouldReturnWrappedUpdateSiteJSONIfSpecified() throws Exception {' - line 135", "'public void shouldProhibitAccessToPluginListWithoutAuth() throws Exception {' - line 157", "'private String jsonRequest(JenkinsRule.WebClient wc, String path) throws Exception {' - line 164", "'public void init() throws IOException {' - line 186", "'public void init() throws IOException {' - line 204", "'public void testRemoteUpdateSiteFailingValidation() throws Exception {' - line 214", "'public void testRemoteUpdateSiteSkippingValidation() throws Exception {' - line 247", "'public void testRemoteUpdateSitePerformingValidation() throws Exception {' - line 285", "'protected JSONSignatureValidator getJsonSignatureValidator(String name) {' - line 330", "'public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {' - line 349", "'private String getWebServerResource(String target, String version) throws IOException {' - line 361", "'protected Set<TrustAnchor> loadTrustAnchors(CertificateFactory cf) throws IOException {' - line 457"]}, "FingerprintStorageTest.java": {"METHODS": ["'public void testLoadingAndSavingLocalStorageFingerprintWithExternalStorage() throws IOException {' - line 47", "'public void testLoadingAndSavingFingerprintWithExternalStorage() throws IOException {' - line 71", "'public void testDeletingLocalStorageFingerprintWithExternalStorageBeforeMigration() throws IOException {' - line 81", "'new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));' - line 83", "'public void testDeletingLocalStorageFingerprintWithExternalStorageAfterMigration() throws IOException {' - line 91", "'new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));' - line 93", "'public void testDeletingFingerprintWithExternalStorage() throws IOException {' - line 102", "'new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));' - line 105", "'public void testMigrationDeletesFingerprintsInMemoryFromFileStorage() throws IOException {' - line 112", "'private FingerprintStorage configureExternalStorage() {' - line 124"]}, "Security1097Test.java": {"METHODS": ["'public void testPostWorks() throws Exception {' - line 26", "'public void testGet1Fails() throws Exception {' - line 36", "'public void testGet2Fails() throws Exception {' - line 44", "'public void testGetWorksWithEscapeHatch() throws Exception {' - line 52", "'public String getUrlName() {' - line 71", "'public void doConfigSubmit1(StaplerRequest req) throws ServletException {' - line 76", "'public void doConfigSubmit2(@SubmittedForm JSONObject form) {' - line 81"]}, "MockStaplerRequestBuilder.java": {"METHODS": ["'public MockStaplerRequestBuilder(@NonNull JenkinsRule r, String url) {' - line 48", "'public MockStaplerRequestBuilder withStapler(Stapler stapler) {' - line 53", "'public MockStaplerRequestBuilder withGetter(String objectName, Object object) {' - line 58", "'public MockStaplerRequestBuilder withAncestor(AncestorImpl ancestor) {' - line 63", "'public StaplerRequest build() {' - line 68"]}, "TagTest.java": {"METHODS": ["'public void testVariousDefaultTagLibs() throws Exception {' - line 30", "'public void testUserDefinedTagLibrary() throws Exception {' - line 57", "'public void testIncludeTag() throws Exception {' - line 86", "'public String getUrlName() {' - line 187"]}, "BeanUtilsTagLibrary.java": {"METHODS": ["'public BeanUtilsTagLibrary() {' - line 9", "'public Tag createTag(String name, Attributes attributes) throws JellyException {' - line 15", "'public TagScript createTagScript(String name, Attributes attributes) throws JellyException {' - line 20"]}, "DynaTagWithStringProperty.java": {"METHODS": ["'public void setClass(String clazz) {' - line 11", "'public void doTag(XMLOutput output) throws JellyTagException {' - line 16", "'public void setAttribute(String name, Object value) throws JellyTagException {' - line 27", "'public Class getAttributeType(String name) throws JellyTagException {' - line 34"]}, "BasicTagWithObjectProperty.java": {"METHODS": ["'public void setClass(Object clazz) {' - line 10", "'public void doTag(XMLOutput output) throws JellyTagException {' - line 15"]}, "SymbolJenkinsTest.java": {"METHODS": ["'public void missingSymbolFromPluginDefaultsToPlaceholder() throws Throwable {' - line 18", "'private static void _missingSymbolFromPluginDefaultsToPlaceholder(JenkinsRule j) {' - line 22", "'public void resolvingSymbolFromPlugin() throws Throwable {' - line 33", "'private static void _resolvingSymbolFromPlugin(JenkinsRule j) {' - line 37"]}, "TcpSlaveAgentListenerTest.java": {"METHODS": ["'public void headers() throws Exception {' - line 23", "'public void diagnostics() throws Exception {' - line 37"]}, "ExtensionFinderTest.java": {"METHODS": ["'public void failingInstance() {' - line 59", "'public FailingExtension() {' - line 67", "'public void injection() {' - line 84", "'public InjectingExtension() {' - line 99", "'public void legacyInjection() {' - line 110", "'public LegacyInjectingExtension() {' - line 125", "'protected void configure() {' - line 138", "'public void errorRecovery() {' - line 156", "'public BrokenExtension() {' - line 163", "'public void injectMutualRecursion() {' - line 171", "'public void injectInterface() {' - line 190"]}, "ExtensionListTest.java": {"METHODS": ["'public void autoDiscovery() {' - line 48", "'public void nullJenkinsInstance() {' - line 57", "'public void extensionListView() {' - line 64", "'private boolean hasInstanceOf(Collection c, Class type) {' - line 79", "'public Descriptor<Fish> getDescriptor() {' - line 96", "'public void descriptorLookup() {' - line 119", "'public void fishDiscovery() {' - line 129", "'public void legacyDescriptorList() {' - line 158", "'public Car(String name) {' - line 178", "'public Toyota() {' - line 185", "'public static Car honda() { return new Car(\"honda\"); }' - line 191", "'public void ordinals() {' - line 201", "'public void removeAll() {' - line 210", "'public void checkSort() {' - line 220"]}, "PluginManagerUtil.java": {"METHODS": ["'public static JenkinsRule newJenkinsRule() {' - line 43", "'public void before() throws Throwable {' - line 46", "'public static RestartableJenkinsRule newRestartableJenkinsRule() {' - line 53", "'public JenkinsRule createJenkinsRule(Description description) {' - line 56", "'return newJenkinsRule();' - line 57", "'public static void dynamicLoad(String plugin, Jenkins jenkins) throws IOException, InterruptedException, RestartRequiredException {' - line 62", "'public static void dynamicLoad(String plugin, Jenkins jenkins, boolean disable) throws IOException, InterruptedException, RestartRequiredException {' - line 66", "'new File(dest.getPath() + \".disabled\").createNewFile();' - line 71", "'public static DomElement getCheckForUpdatesButton(HtmlPage page) {' - line 76"]}, "LauncherTest.java": {"METHODS": ["'@Test public void remoteKill() throws Exception {' - line 53", "'public Object call() throws RuntimeException {' - line 84", "'@Test public void decorateByEnv() throws Exception {' - line 90", "'@Test public void decoratedByEnvMaintainsIsUnix() {' - line 103", "'@Test public void decoratedByPrefixMaintainsIsUnix() {' - line 115"]}, "CustomPluginManagerTest.java": {"METHODS": ["'public void setup(JenkinsRule jenkinsRule, WithCustomLocalPluginManager recipe) {' - line 63", "'public void tearDown(JenkinsRule jenkinsRule, WithCustomLocalPluginManager recipe) {' - line 71", "'private void check(Class<? extends CustomPluginManager> klass) {' - line 81", "'@Test public void customPluginManager1() {' - line 93", "'public CustomPluginManager1(Jenkins jenkins) {' - line 98", "'@Test public void customPluginManager2() {' - line 106", "'public CustomPluginManager2(ServletContext ctx, File root) {' - line 111", "'@Test public void customPluginManager3() {' - line 119", "'public CustomPluginManager3(File root) {' - line 124", "'@Test public void badCustomPluginManager() {' - line 132", "'public BadCustomPluginManager(File root, ServletContext ctx) {' - line 137"]}, "PluginManagerTest.java": {"METHODS": ["'public void parseRequestedPlugins() throws Exception {' - line 65", "'public void parseInvalidRequestedPlugins() throws Exception {' - line 75", "'public void shouldProperlyParseManifestFromJar() throws IOException {' - line 97", "'public void shouldProperlyRetrieveModificationDate() throws IOException {' - line 114", "'public void updateSiteURLCheckValidation() throws Exception {' - line 125", "'private static void assertAttribute(Manifest manifest, String attributeName, String value) {' - line 156", "'private File createHpiWithManifest() throws IOException {' - line 189", "'private URL toManifestUrl(File jarFile) throws MalformedURLException {' - line 206", "'private FormValidationMatcher(Kind kind) {' - line 215", "'public void describeTo(Description description) {' - line 220", "'protected boolean matchesSafely(FormValidation item, Description mismatchDescription) {' - line 225", "'static FormValidationMatcher validationWithMessage(Kind kind) {' - line 230"]}, "ExceptionTest.java": {"METHODS": ["'public void testAjaxError() throws Exception {' - line 24", "'public String getUrlName() {' - line 37"]}, "ProcStarterTest.java": {"METHODS": ["'public void testNonInitializedEnvsNPE() throws Exception {' - line 58", "'public void testNonExistingPwd() throws Exception {' - line 74", "'public boolean isApplicable(AbstractProject<?, ?> ap) {' - line 91", "'public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 102", "'public Launcher decorateLauncher(AbstractBuild build, Launcher launcher, BuildListener listener) throws Run.RunnerAbortedException {' - line 122", "'public Proc launch(Launcher.ProcStarter starter) throws IOException {' - line 126", "'public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) {' - line 135", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 148", "'public boolean isApplicable(Class<? extends AbstractProject> aClass) {' - line 160"]}, "PluginManagerWhichTest.java": {"METHODS": ["'public void whichPlugin() throws Exception {' - line 39"]}, "AbstractItemSecurity1114Test.java": {"METHODS": ["'public void testAccess() throws Exception {' - line 28", "'public Item getDynamic(String name) {' - line 58", "'public String getIconFileName() {' - line 68", "'public String getDisplayName() {' - line 74", "'public String getUrlName() {' - line 80"]}, "ExtensionListListenerTest.java": {"METHODS": ["'public void test_onChange() throws Exception {' - line 41", "'public void onChange() {' - line 63"]}, "XMLFileTest.java": {"METHODS": ["'public void canStartWithXml_1_1_ConfigsTest() {' - line 21", "'public void silentlyMigrateConfigsTest() throws Exception {' - line 34"]}, "ClassicPluginStrategyTest.java": {"METHODS": ["'public void test_getDetachedPlugins() {' - line 42", "'private DetachedPlugin findPlugin(String shortName, List<DetachedPlugin> list) {' - line 62"]}, "PluginTest.java": {"METHODS": ["'@Test public void doDynamic() throws Exception {' - line 42", "'public void preventTimestamp2_toBeServed() throws Exception {' - line 67"]}, "AboutJenkinsTest.java": {"METHODS": ["'public void onlyAdminOrManageOrSystemReadCanReadAbout() throws Exception {' - line 49"]}, "ProcTest.java": {"METHODS": ["'public void remoteProcOutputSync() throws Exception {' - line 39", "'new Thread(() -> {' - line 46", "'private VirtualChannel createSlaveChannel() throws Exception {' - line 72", "'private ChannelFiller(OutputStream o) {' - line 86", "'public Void call() throws IOException {' - line 91", "'public void ioPumpingWithLocalLaunch() throws Exception {' - line 100", "'public void ioPumpingWithRemoteLaunch() throws Exception {' - line 106", "'new StreamTaskListener(System.out, Charset.defaultCharset()),' - line 109", "'private void doIoPumpingTest(Launcher l) throws IOException, InterruptedException {' - line 113"]}, "PluginManagerInstalledGUITest.java": {"METHODS": ["'public PluginManager getPluginManager() {' - line 55", "'protected Collection<String> loadBundledPlugins() throws Exception {' - line 59", "'public void test_enable_disable_uninstall() throws IOException, SAXException {' - line 79", "'private InstalledPlugins() throws IOException, SAXException {' - line 148", "'public InstalledPlugin get(String pluginId) {' - line 165", "'public String getId() {' - line 185", "'public boolean isPlugin(String pluginId) {' - line 189", "'private HtmlInput getEnableWidget() {' - line 193", "'public void assertEnabled() {' - line 198", "'public void assertNotEnabled() {' - line 203", "'public void clickEnabledWidget() throws IOException {' - line 208", "'public void assertEnabledStateChangeable() {' - line 213", "'public void assertEnabledStateNotChangeable() {' - line 224", "'public void assertUninstallable() {' - line 235", "'public void assertNotUninstallable() {' - line 239", "'public void assertHasDependents() {' - line 243", "'public void assertHasNoDependents() {' - line 247", "'private boolean hasClassName(String className) {' - line 251", "'private boolean hasDisabledDependency() {' - line 257", "'return hasClassName(\"has-disabled-dependency\");' - line 258", "'private boolean allDependentsDisabled() {' - line 261", "'return hasClassName(\"all-dependents-disabled\");' - line 262", "'private boolean hasDependents() {' - line 265", "'return hasClassName(\"has-dependents\");' - line 266"]}, "PluginManagerCheckUpdateCenterTest.java": {"METHODS": ["'public void updateSiteReturn502Test() throws Exception {' - line 41", "'public void updateSiteWrongJsonTest() throws Exception {' - line 50", "'public void updateSiteRightJsonTest() throws Exception {' - line 59", "'public void changeLogLevelInLog() throws Exception {' - line 78", "'private void checkUpdateSite(String urlUpdateSite, String message, boolean isSuccess) throws IOException, SAXException {' - line 113", "'public String getIconFileName() {' - line 140", "'public String getDisplayName() {' - line 145", "'public String getUrlName() {' - line 150", "'public HttpResponse doGetJson(StaplerRequest request) {' - line 154", "'public String getIconFileName() {' - line 163", "'public String getDisplayName() {' - line 168", "'public String getUrlName() {' - line 173", "'public void doGetJson(StaplerRequest request, StaplerResponse response) throws IOException {' - line 177", "'public String getIconFileName() {' - line 188", "'public String getDisplayName() {' - line 193", "'public String getUrlName() {' - line 198", "'public void doDynamic(StaplerRequest staplerRequest, StaplerResponse staplerResponse) throws ServletException, IOException {' - line 203"]}, "RelativePathTest.java": {"METHODS": ["'public void testRelativePath() throws Exception {' - line 26", "'public ListBoxModel doFillAbcItems(@RelativePath(\"..\") @QueryParameter String personName) {' - line 42", "'public String getPersonName() {' - line 52", "'public Model getModel() {' - line 56", "'public Descriptor<RootActionImpl> getDescriptor() {' - line 61", "'public String getUrlName() {' - line 69"]}, "HtmlEscapeTest.java": {"METHODS": ["'public void test1() throws Exception {' - line 22", "'public String getStr() {' - line 34", "'public String getUrlName() {' - line 39"]}, "FilePathTest.java": {"METHODS": ["'@Test public void copyTo() throws Exception {' - line 96", "'@Test public void noFileLeakInCopyTo() throws Exception {' - line 112", "'@Test public void noRaceConditionInCopyTo() throws Exception {' - line 139", "'private void givenSomeContentInFile(File file, int size) throws IOException {' - line 153", "'private List<Future<Integer>> whenFileIsCopied100TimesConcurrently(final File file) throws InterruptedException {' - line 162", "'private void checkNotClosed() throws IOException {' - line 170", "'public void write(int b) throws IOException {' - line 176", "'public void write(byte[] b) throws IOException {' - line 182", "'public void write(byte[] b, int off, int len) throws IOException {' - line 188", "'public void close() {' - line 194", "'@Test public void repeatCopyRecursiveTo() throws Exception {' - line 214", "'@Test public void errorMessageInRemoteCopyRecursive() throws Exception {' - line 227", "'@Test public void archiveBug() throws Exception {' - line 259", "'@Test public void normalization() {' - line 270", "'private void compare(String original, String answer) {' - line 319", "'@Test public void getParent() {' - line 324", "'private FilePath createFilePath(final File base, final String... path) throws IOException {' - line 341", "'@Test public void compressTarUntarRoundTrip() throws Exception {' - line 354", "'@Test public void archiveBigFile() throws Exception {' - line 368", "'private void checkTarUntarRoundTrip(String filePrefix, long fileSize) throws Exception {' - line 374", "'final File tempFile =  new File(tmpDir, filePrefix + \".log\");' - line 376", "'new FilePath(tempFile).digest(), outFile.digest());' - line 394", "'@Test public void list() throws Exception {' - line 397", "'@Test public void listWithExcludes() throws Exception {' - line 408", "'@Test public void listWithDefaultExcludes() throws Exception {' - line 419", "'@Test public void isUnix() {' - line 432", "'@Test public void copyToWithPermission() throws IOException, InterruptedException {' - line 455", "'@Test public void symlinkInTar() throws Exception {' - line 484", "'@Test public void multiSegmentRelativePaths() {' - line 503", "'@Test public void validateAntFileMask() throws Exception {' - line 516", "'private static void assertValidateAntFileMask(String expected, FilePath d, String fileMasks) throws Exception {' - line 533", "'@Test public void validateAntFileMaskBounded() throws Exception {' - line 539", "'@Test public void testValidateCaseSensitivity() throws Exception {' - line 556", "'@Test public void deleteLongPathOnWindows() throws Exception {' - line 575", "'@Test public void installIfNecessaryAvoidsExcessiveDownloadsByUsingIfModifiedSince() throws Exception {' - line 598", "'@Test public void installIfNecessaryPerformsInstallation() throws Exception {' - line 616", "'@Test public void installIfNecessarySkipsDownloadWhenErroneous() throws Exception {' - line 633", "'@Test public void installIfNecessaryFollowsRedirects() throws Exception {' - line 652", "'private URL someUrlToZipFile(final URLConnection con) throws IOException {' - line 672", "'@Override protected URLConnection openConnection(URL u) {' - line 675", "'private InputStream someZippedContent() throws IOException {' - line 683", "'@Test public void moveAllChildrenTo() throws IOException, InterruptedException {' - line 695", "'public void testEOFbrokenFlush() throws IOException, InterruptedException {' - line 718", "'public void chmod() throws Exception {' - line 748", "'public void chmodInvalidPermissions() throws Exception {' - line 760", "'private int chmodAndMode(FilePath path, int mode) throws Exception {' - line 769", "'public void testCreateTempDir() throws IOException, InterruptedException  {' - line 776", "'@Test public void deleteRecursiveOnUnix() throws Exception {' - line 792", "'public void deleteSuffixesRecursive() throws Exception {' - line 809", "'@Test public void deleteRecursiveOnWindows() throws Exception {' - line 821", "'@Test public void copyRecursivePreservesPosixFilePermissions() throws Exception {' - line 838", "'@Test public void copyRecursivePreservesLastModifiedTime() throws Exception {' - line 854", "'public void isDescendant_regularFiles() throws IOException, InterruptedException {' - line 869", "'public void isDescendant_regularSymlinks() throws IOException, InterruptedException {' - line 919", "'public void isDescendant_windowsSpecificSymlinks() throws Exception {' - line 983", "'private void createJunction(File from, File to) throws Exception {' - line 1041", "'public void isDescendant_throwIfParentDoesNotExist_symlink() throws Exception {' - line 1047", "'public void isDescendant_throwIfParentDoesNotExist_directNonexistent() throws Exception {' - line 1059", "'public void isDescendant_throwIfAbsolutePathGiven() throws Exception {' - line 1067", "'public void isDescendant_worksEvenInSymbolicWorkspace() throws Exception {' - line 1075"]}, "ToolLocationTest.java": {"METHODS": ["'public void toolCompatibility() {' - line 26"]}, "BatchCommandInstallerTest.java": {"METHODS": ["'public void validateBatchCommandInstallerCommandEOL() {' - line 17"]}, "ZipExtractionInstallerTest.java": {"METHODS": ["'public void onlyAdminCanReachTheDoCheck() throws Exception {' - line 53"]}, "InstallerTranslatorTest.java": {"METHODS": ["'@Test public void offlineNodeForJDK() throws Exception {' - line 53", "'@Test public void multipleSlavesAndTools() throws Exception {' - line 69", "'public void testMessageLoggedWhenNoInstallerFound() throws Exception {' - line 118", "'public void testNoMessageLoggedWhenAnyInstallerFound() throws Exception {' - line 137"]}, "ToolLocationNodePropertyTest.java": {"METHODS": ["'public void formRoundTrip() throws Exception {' - line 63", "'private void configureDumpEnvBuilder() {' - line 103", "'public void setUp() throws Exception {' - line 111"]}, "CommandInstallerTest.java": {"METHODS": ["'public void validateCommandInstallerCommandEOL() {' - line 17"]}, "BootFailureTest.java": {"METHODS": ["'public void before() {' - line 46", "'public Hudson newHudson() throws Exception {' - line 53", "'protected void doStart() {' - line 76", "'public void tearDown() {' - line 99", "'public void onLoaded() {' - line 111", "'public void runBootFailureScript() throws Exception {' - line 118", "'private static int bootFailures(File home) throws IOException {' - line 150", "'public void interruptedStartup() throws Exception {' - line 156", "'public void onLoaded() {' - line 169"]}, "RingBufferLogHandlerTest.java": {"METHODS": ["'public void tooMuchRecordsShouldNotCrashHandler() {' - line 35"]}, "ProcessTreeTest.java": {"METHODS": ["'@Test public void remoting() throws Exception {' - line 31", "'public Tag call() {' - line 50", "'public Void invoke(OSProcess process, VirtualChannel channel) {' - line 63"]}, "ArgumentListBuilder2Test.java": {"METHODS": ["'public void slaveMask() throws Exception {' - line 69", "'public void ensureArgumentsArePassedViaCmdExeUnmodified() throws Exception {' - line 83", "'public String echoArgs(String... arguments) throws Exception {' - line 125"]}, "DoubleLaunchCheckerTest.java": {"METHODS": ["'public void activated() throws Throwable {' - line 52", "'private static void waitForWarning(JenkinsRule r) throws Throwable {' - line 58"]}, "LineEndingConversionTest.java": {"METHODS": ["'public void validateWindowsEOL() {' - line 19", "'public void validateUnixEOL() {' - line 24"]}, "LogTaskListenerTest.java": {"METHODS": ["'public void annotations() throws Exception {' - line 47", "'public void serialization() throws Exception {' - line 60", "'public Void call() throws RuntimeException {' - line 75"]}, "RobustReflectionConverterTest.java": {"METHODS": ["'public void robustUnmarshalling() {' - line 67", "'private Point read(XStream xs) {' - line 73", "'public void ifWorkaroundNeeded() {' - line 79", "'public void classOwnership() {' - line 87", "'public void implicitCollection() {' - line 122", "'String value();' - line 139", "'public void robustDoesNotSwallowDosException() {' - line 182", "'public void customConverter_useDefaultXStreamException() {' - line 205", "'public void customConverter_wrapped_useCriticalXStreamException() {' - line 220", "'private Set<Object> preparePayload() {' - line 243", "'private CustomSet preparePayloadUsingCustomSet() {' - line 274", "'public int hashCode() {' - line 334", "'public boolean equals(Object o) {' - line 339", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 352", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 361", "'public boolean canConvert(Class type) {' - line 366", "'protected Object createCollection(Class type) {' - line 371"]}, "HudsonIsRestartingTest.java": {"METHODS": ["'public void withPrefix() throws Exception {' - line 21", "'private void checkingPage(JenkinsRule.WebClient wc, String relativePath) throws Exception {' - line 33"]}, "AtomicFileWriterPerfTest.java": {"METHODS": ["'public void poorManPerformanceTestBed() throws Exception {' - line 29"]}, "FormValidationSecurity1893Test.java": {"METHODS": ["'public void checkHeaderPresence() throws Exception {' - line 41"]}, "FormFieldValidatorTest.java": {"METHODS": ["'public void configure() throws Exception {' - line 57", "'public boolean isApplicable(Class jobType) {' - line 65", "'public FormValidation doCheckXyz() {' - line 69", "'public BuildStepMonitor getRequiredMonitorService() {' - line 75", "'public void testCodeMirrorBlur() throws IOException, SAXException {' - line 82", "'public CodeMirrorStep(String command) {' - line 112", "'public FormValidation doCheckCommand(@QueryParameter String command) {' - line 118", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 123", "'public void negative() throws Exception {' - line 134"]}, "FormValidationTest.java": {"METHODS": ["'public void testValidateRequired_OK() {' - line 46", "'public void testValidateRequired_Null() {' - line 52", "'public void testValidateRequired_Empty() {' - line 59", "'public void testMessage() {' - line 67", "'public void aggregateZeroValidations() {' - line 72", "'public void aggregateSingleValidations() {' - line 77", "'public void aggregateSeveralValidations() {' - line 88", "'private FormValidation aggregate(FormValidation... fvs) {' - line 113", "'public void formValidationException() {' - line 118", "'public void testUrlCheck() throws IOException, ServletException {' - line 124", "'protected FormValidation check() throws ServletException, IOException {' - line 127", "'return handleIOException(uri, e);' - line 136"]}, "AlternativeUiTextProviderTest.java": {"METHODS": ["'public void basics() throws Exception {' - line 65", "'public void basicsWithParameter() throws Exception {' - line 79"]}, "HudsonIsLoadingTest.java": {"METHODS": ["'public void withPrefix() throws Exception {' - line 20", "'private void checkingPage(JenkinsRule.WebClient wc, String relativePath) throws Exception {' - line 32"]}, "SecretCompatTest.java": {"METHODS": ["'public void encryptedValueStaysTheSameAfterRoundtrip() throws Exception {' - line 56", "'public void canReadPreSec304Secrets() throws Exception {' - line 83"]}, "XStream2AnnotationTest.java": {"METHODS": ["'public void xStreamAlias() throws Throwable {' - line 46", "'static AnnotatedProcessed get() {' - line 74", "'public AnnotatedProcessed() {' - line 80", "'String xml() throws IOException {' - line 85", "'return getConfigFile().asString().replaceAll(\"\\n *\", \"\").replaceAll(\"<[?].+?[?]>\", \"\");' - line 86", "'static AnnotatedUnprocessed get() {' - line 93", "'public AnnotatedUnprocessed() {' - line 99", "'String xml() throws IOException {' - line 103", "'return getConfigFile().asString().replaceAll(\"\\n *\", \"\").replaceAll(\"<[?].+?[?]>\", \"\");' - line 104", "'void writeXml(String xml) throws IOException {' - line 107", "'static Programmatic get() {' - line 114", "'public Programmatic() {' - line 120", "'String xml() throws IOException {' - line 125", "'return getConfigFile().asString().replaceAll(\"\\n *\", \"\").replaceAll(\"<[?].+?[?]>\", \"\");' - line 126"]}, "XStream2Security383Test.java": {"METHODS": ["'public void tearDown() throws Exception {' - line 50", "'public void setUp() {' - line 55", "'public void testXmlLoad() throws Exception {' - line 61", "'public void testPostJobXml() throws Exception {' - line 88", "'public int read() throws IOException {' - line 123", "'public int read(byte[] b) throws IOException {' - line 128", "'public int read(byte[] b, int off, int len) throws IOException {' - line 133", "'public boolean isFinished() {' - line 138", "'public boolean isReady() {' - line 143", "'public void setReadListener(ReadListener readListener) {' - line 148"]}, "AbstractScmTagActionTest.java": {"METHODS": ["'public void regularTextDisplayedCorrectly() throws Exception {' - line 51", "'private String buildAndExtractTooltipAttribute(FreeStyleProject p) throws Exception {' - line 63", "'public ChangeLogParser createChangeLogParser() {' - line 87", "'public void checkout(@NonNull Run<?, ?> build, @NonNull Launcher launcher, @NonNull FilePath workspace, @NonNull TaskListener listener, @CheckForNull File changelogFile, @CheckForNull SCMRevisionState baseline) {' - line 92", "'public boolean isTagged() {' - line 107", "'public String getIconFileName() {' - line 112", "'public String getDisplayName() {' - line 117", "'public String getTooltip() {' - line 122"]}, "ScmTest.java": {"METHODS": ["'public void projectDeletionAndCallback() throws Exception {' - line 56", "'public boolean processWorkspaceBeforeDeletion(AbstractProject<?, ?> project, FilePath workspace, Node node) {' - line 61", "'private Object writeReplace() { // don't really care about save' - line 66", "'public void abortDuringCheckoutMarksBuildAsAborted() throws Exception {' - line 77", "'private Object writeReplace() { // don't really care about save' - line 88"]}, "ChangeLogSetTest.java": {"METHODS": ["'public void catchingExceptionDuringAnnotation() {' - line 21", "'public void annotate(AbstractBuild<?, ?> build, ChangeLogSet.Entry change, MarkupText text) {' - line 35", "'public void annotate(AbstractBuild<?, ?> build, ChangeLogSet.Entry change, MarkupText text) {' - line 43"]}, "DependencyGraphTest.java": {"METHODS": ["'public void testTriggerJob() throws Exception {' - line 58", "'new BuildTrigger(List.of(down1), Result.SUCCESS));' - line 64", "'private TestDeclarer(Result buildResult, AbstractProject down) {' - line 101", "'public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {' - line 107", "'public void testItemReadPermission() {' - line 128", "'public void testTopologicalSort() throws Exception {' - line 145", "'private void depends(FreeStyleProject a, FreeStyleProject... downstreams) {' - line 182"]}, "ItemGroupMixInTest.java": {"METHODS": ["'@Test public void xmlFileReadCannotResolveClassException() {' - line 73", "'public void xmlFileFailsToLoad() throws Exception {' - line 89", "'public void xmlFileReadExceptionOnLoad() {' - line 125", "'public boolean isApplicable(AbstractProject<?, ?> item) {' - line 142", "'public boolean isApplicable(Class jobType) {' - line 159", "'public BuildStepMonitor getRequiredMonitorService() {' - line 183", "'public boolean isApplicable(Class jobType) {' - line 191", "'@Test public void createProjectFromXMLShouldNoCreateEntities() throws IOException {' - line 197", "'public void copy_checkGoodName() throws IOException {' - line 223", "'public void createProject_checkGoodName() {' - line 235", "'public void createProjectFromXML_checkGoodName() {' - line 244", "'public void doCreateItemWithValidXmlAndBadField() throws Exception {' - line 270"]}, "EnvironmentContributorTest.java": {"METHODS": ["'public void projectScoped() throws Exception {' - line 21", "'public void buildEnvironmentFor(Job j, EnvVars envs, TaskListener listener) {' - line 35"]}, "UpdateCenter2Test.java": {"METHODS": ["'@Test public void install() throws Exception {' - line 54", "'@Test public void getLastUpdatedString() {' - line 64", "'@Test public void installInvalidChecksum() throws Exception {' - line 72"]}, "HelpLinkTest.java": {"METHODS": ["'public void systemConfig() throws Exception {' - line 70", "'public void freestyleConfig() throws Exception {' - line 75", "'public void matrixConfig() throws Exception {' - line 80", "'private void clickAllHelpLinks(AbstractProject p) throws Exception {' - line 84", "'private void clickAllHelpLinks(JenkinsRule.WebClient webClient, AbstractProject p) throws Exception {' - line 89", "'private void clickAllHelpLinks(HtmlPage p) throws Exception {' - line 94", "'public boolean isApplicable(Class jobType) {' - line 107", "'public String getHelpFile() {' - line 112", "'public BuildStepMonitor getRequiredMonitorService() {' - line 118", "'public void negative() throws Exception {' - line 128"]}, "SlaveTest.java": {"METHODS": ["'public void formValidation() throws Exception {' - line 75", "'public void slaveConfigDotXml() throws Exception {' - line 86", "'new XmlSlurper().parseText(xml); // verify that it is XML' - line 91", "'private void post(String url, String xml) throws Exception {' - line 108", "'public void remoteFsCheck() throws Exception {' - line 120", "'public void shouldNotEscapeJnlpSlavesResources() throws Exception {' - line 131", "'private void assertJnlpJarUrlFails(@NonNull Slave slave, @NonNull String url) throws Exception {' - line 159", "'private void assertJnlpJarUrlIsAllowed(@NonNull Slave slave, @NonNull String url) throws Exception {' - line 165", "'public void launcherFiltering() {' - line 179", "'public void retentionFiltering() {' - line 197", "'public void propertyFiltering() {' - line 214", "'public static Set<Descriptor> descriptors() {' - line 235", "'public boolean filterType(@NonNull Class<?> contextClass, @NonNull Descriptor descriptor) {' - line 240", "'public boolean filter(@CheckForNull Object context, @NonNull Descriptor descriptor) {' - line 245"]}, "DirectoryBrowserSupportTest.java": {"METHODS": ["'public void doubleDots() throws Exception {' - line 114", "'//            new WebClient().goTo(\"job/\" + p.getName() + \"/ws/abc/../\", \"application/octet-stream\");' - line 130", "'public void doubleDots2() throws Exception {' - line 143", "'public void nonAsciiChar() throws Exception {' - line 156", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 161", "'public void glob() throws Exception {' - line 173", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 176", "'public void zipDownload() throws Exception {' - line 198", "'public void zipDownloadFileLeakMx_hypothesis() throws Exception {' - line 221", "'public void zipDownloadFileLeakMx() throws Exception {' - line 237", "'private long getOpenFdCount() {' - line 291", "'public void contentSecurityPolicy() throws Exception {' - line 301", "'private File download(UnexpectedPage page) throws IOException {' - line 330", "'public void externalURLDownload() throws Exception {' - line 344", "'public String getUrlName() {' - line 361", "'public String getIconFileName() {' - line 366", "'public String getDisplayName() {' - line 371", "'public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws Exception {' - line 375", "'public ArtifactManager managerFor(Run<?, ?> build) {' - line 390", "'public void archive(FilePath workspace, Launcher launcher, BuildListener listener, Map<String, String> artifacts) throws IOException, InterruptedException {' - line 402", "'public VirtualFile root() {' - line 414", "'public String getName() {' - line 417", "'public URI toURI() {' - line 422", "'public VirtualFile getParent() {' - line 427", "'return root();' - line 428", "'public boolean isDirectory() {' - line 432", "'public boolean isFile() {' - line 437", "'public boolean exists() {' - line 442", "'public VirtualFile[] list() {' - line 447", "'public Collection<String> list(@NonNull String includes, String excludes, boolean useDefaultExcludes) {' - line 452", "'public VirtualFile child(@NonNull String name) {' - line 458", "'public long length() {' - line 463", "'public long lastModified() {' - line 468", "'public boolean canRead() {' - line 473", "'public InputStream open() throws IOException {' - line 478", "'public URL toExternalURL() throws IOException {' - line 483", "'public String getName() {' - line 490", "'public URI toURI() {' - line 496", "'public VirtualFile getParent() {' - line 501", "'public boolean isDirectory() {' - line 506", "'public boolean isFile() {' - line 511", "'public boolean exists() {' - line 516", "'public VirtualFile[] list() {' - line 522", "'public Collection<String> list(@NonNull String includes, String excludes, boolean useDefaultExcludes) {' - line 528", "'public VirtualFile child(@NonNull String name) {' - line 534", "'public long length() {' - line 545", "'public long lastModified() {' - line 550", "'public boolean canRead() {' - line 555", "'public InputStream open() throws IOException {' - line 560", "'public void onLoad(@NonNull Run<?, ?> build) {}' - line 567", "'public boolean delete() {' - line 570", "'public void symlink_outsideWorkspace_areNotAllowed() throws Exception {' - line 577", "'public void symlink_avoidLeakingInformation_aboutIllegalFolder() throws Exception {' - line 716", "'public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {' - line 788", "'private List<String> getListOfEntriesInDownloadedZip(UnexpectedPage zipPage) throws Exception {' - line 925", "'public void directSymlink_forTestingZip() throws Exception {' - line 949", "'public void symlink_insideWorkspace_areNotAllowedAnymore() throws Exception {' - line 1008", "'private String loadContentFromResource(String fileNameInResources) throws IOException, URISyntaxException {' - line 1092", "'public void windows_cannotViewAbsolutePath() throws Exception {' - line 1103", "'public void windows_canViewAbsolutePath_withEscapeHatch() throws Exception {' - line 1118", "'public void tmpNotListed() throws Exception {' - line 1145", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 1149", "'public void tmpNotListedWithGlob() throws Exception {' - line 1165", "'public void noDirectAccessToTmp() throws Exception {' - line 1197", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 1201", "'public void tmpNotListedInPlain() throws Exception {' - line 1234", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 1238", "'public void tmpNotListedInZipWithoutGlob() throws Exception {' - line 1254", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 1258", "'public void tmpNotListedInZipWithGlob() throws Exception {' - line 1307", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 1311", "'public void canViewRelativePath() throws Exception {' - line 1348", "'public ArtifactManager managerFor(Run<?, ?> build) {' - line 1363", "'public void archive(FilePath workspace, Launcher launcher, BuildListener listener, Map<String, String> artifacts) throws IOException, InterruptedException {' - line 1375", "'public VirtualFile root() {' - line 1387", "'public String getName() {' - line 1390", "'public URI toURI() {' - line 1395", "'public VirtualFile getParent() {' - line 1400", "'return root();' - line 1401", "'public boolean isDirectory() {' - line 1405", "'public boolean isFile() {' - line 1410", "'public boolean exists() {' - line 1415", "'public VirtualFile[] list() {' - line 1420", "'public Collection<String> list(String includes, String excludes, boolean useDefaultExcludes) {' - line 1425", "'public VirtualFile child(String name) {' - line 1430", "'public long length() {' - line 1435", "'public long lastModified() {' - line 1440", "'public boolean canRead() {' - line 1445", "'public InputStream open() throws IOException {' - line 1450", "'public URL toExternalURL() throws IOException {' - line 1455", "'public String getName() {' - line 1461", "'public URI toURI() {' - line 1466", "'public VirtualFile getParent() {' - line 1471", "'public boolean isDirectory() {' - line 1476", "'public boolean isFile() {' - line 1481", "'public boolean exists() {' - line 1486", "'public VirtualFile[] list() {' - line 1491", "'public Collection<String> list(String includes, String excludes, boolean useDefaultExcludes) {' - line 1496", "'public VirtualFile child(String name) {' - line 1501", "'public long length() {' - line 1512", "'public long lastModified() {' - line 1517", "'public boolean canRead() {' - line 1522", "'public InputStream open() throws IOException {' - line 1527", "'public void onLoad(Run<?, ?> build) {}' - line 1534", "'public boolean delete() {' - line 1537"]}, "DownloadService2Test.java": {"METHODS": ["'@Test public void updateNow() throws Exception {' - line 45", "'@Test public void loadJSONHTML() throws Exception {' - line 53", "'private static void assertRoots(String expected, String file) throws Exception {' - line 58"]}, "FreestyleJobPublisherTest.java": {"METHODS": ["'public void testFreestyleWithFalsePublisher() throws Exception {' - line 32", "'public void testFreestyleWithExceptionPublisher() throws Exception {' - line 53", "'public void testFreestyleWithIOExceptionPublisher() throws Exception {' - line 77"]}, "PeriodicWorkTest.java": {"METHODS": ["'public void newExtensionsAreScheduled() throws Exception {' - line 20", "'public long getRecurrencePeriod() {' - line 35", "'public long getInitialDelay() {' - line 41", "'protected void doRun() {' - line 47"]}, "ParametersTest.java": {"METHODS": ["'public void parameterTypes() throws Exception {' - line 47", "'new StringParameterDefinition(\"string\", \"defaultValue\", \"string description\"),' - line 53", "'new BooleanParameterDefinition(\"boolean\", true, \"boolean description\"),' - line 54", "'new ChoiceParameterDefinition(\"choice\", \"Choice 1\\nChoice 2\", \"choice description\"),' - line 55", "'new RunParameterDefinition(\"run\", otherProject.getName(), \"run description\", null));' - line 56", "'public void choiceWithLTGT() throws Exception {' - line 104", "'new ChoiceParameterDefinition(\"choice\", \"Choice 1\\nChoice <2>\", \"choice description\"));' - line 107", "'public void sensitiveParameters() throws Exception {' - line 137", "'new PasswordParameterDefinition(\"password\", \"12345\", \"password description\"));' - line 140", "'public void nonSensitiveParameters() throws Exception {' - line 154", "'new StringParameterDefinition(\"string\", \"defaultValue\", \"string description\"));' - line 157", "'public void mixedSensitivity() throws Exception {' - line 171", "'new StringParameterDefinition(\"string\", \"defaultValue\", \"string description\"),' - line 174", "'new PasswordParameterDefinition(\"password\", \"12345\", \"password description\"),' - line 175", "'new StringParameterDefinition(\"string2\", \"Value2\", \"string description\")' - line 176", "'public void fileParameterNotSet() throws Exception {' - line 194", "'new FileParameterDefinition(\"filename\", \"description\"));' - line 197", "'public void unicodeParametersArePresetCorrectly() throws Exception {' - line 213", "'new StringParameterDefinition(\"sname:a\u00b6\u2031\ufef7\", \"svalue:a\u00b6\u2031\ufef7\", \"sdesc:a\u00b6\u2031\ufef7\"),' - line 216", "'new FileParameterDefinition(\"fname:a\u00b6\u2031\ufef7\", \"fdesc:a\u00b6\u2031\ufef7\")' - line 217", "'public void xss() throws Exception {' - line 235", "'public void emptyParameterDefinitionProperty() throws Exception {' - line 270", "'public void translate(String markup, @NonNull Writer output) throws IOException {' - line 290"]}, "UserPropertyTest.java": {"METHODS": ["'public void test() throws Exception {' - line 39", "'public UserProperty newInstance(User user) {' - line 51", "'public boolean isEnabled() {' - line 61", "'public UserProperty newInstance(User user) {' - line 66", "'public void nestedUserReference() throws Exception {' - line 74", "'public static Matcher<User> nestedUserSet() {' - line 93", "'public boolean matches(Object item) {' - line 96", "'public void describeTo(Description description) {' - line 113", "'public SetUserUserProperty() {' - line 126", "'public InnerUserClass getInnerUserClass() {' - line 129", "'public User getOwner() {' - line 133", "'protected void setUser(User u) {' - line 138", "'public Object readResolve() {' - line 143", "'public UserProperty newInstance(User user) {' - line 153", "'public InnerUserClass() {' - line 171", "'public User getUser() {' - line 174", "'public void setUser(User user) {' - line 181", "'private File getUserFile() throws IOException {' - line 191", "'public DescriptorImpl getDescriptor() {' - line 201"]}, "UsageStatisticsTest.java": {"METHODS": ["'public void roundtrip() throws Exception {' - line 74", "'new CombinedCipherInputStream(new ByteArrayInputStream(cipherText), priv, \"AES\")), StandardCharsets.UTF_8);' - line 111", "'private void warmUpNodeMonitorCache() throws InterruptedException {' - line 156", "'private List<JSONObject> sortPlugins(List<JSONObject> list) {' - line 169", "'private JSONObject sortJobTypes(JSONObject object) {' - line 175", "'private void compareWithFile(String fileName, Object object) throws IOException, URISyntaxException {' - line 184"]}, "AbstractItemTest.java": {"METHODS": ["'protected StubAbstractItem() {' - line 18", "'public void save() {' - line 33", "'public void testSetDisplayName() throws Exception {' - line 39", "'public void testGetDefaultDisplayName() {' - line 47", "'public void testSearchNameIsName() {' - line 57", "'public void testGetDisplayNameOrNull() throws Exception {' - line 66", "'public void testSetDisplayNameOrNull() throws Exception {' - line 79", "'protected NameNotEditableItem(ItemGroup parent, String name) {' - line 93", "'public boolean isNameEditable() {' - line 103", "'public void renameMethodShouldThrowExceptionWhenNotIsNameEditable() {' - line 110", "'public void doConfirmRenameMustThrowFormFailureWhenNotIsNameEditable() {' - line 125"]}, "UpdateSiteTest.java": {"METHODS": ["'private static String getResource(String resourceName) throws IOException {' - line 80", "'public static URL extract(String resourceName) throws IOException {' - line 92", "'public void setUpWebServer() throws Exception {' - line 112", "'public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException {' - line 118", "'public void shutdownWebserver() throws Exception {' - line 136", "'@Test public void relativeURLs() throws Exception {' - line 140", "'@Test public void wikiUrlFromSingleSite() throws Exception {' - line 156", "'@Test public void wikiUrlFromMoreSites() throws Exception {' - line 163", "'@Test public void updateDirectlyWithJson() throws Exception {' - line 178", "'@Test public void lackOfDataDoesNotFailWarningsCode() {' - line 185", "'@Test public void incompleteWarningsJson() throws Exception {' - line 194", "'@Test public void getAvailables() throws Exception {' - line 201", "'@Test public void deprecations() throws Exception {' - line 208", "'private UpdateSite getUpdateSite(String path) throws Exception {' - line 238", "'return getUpdateSite(path, UpdateCenter.ID_DEFAULT);' - line 239", "'private UpdateSite getUpdateSite(String path, String id) throws Exception {' - line 242", "'private void overrideUpdateSite(UpdateSite... overrideSites) {' - line 249", "'private PluginWrapper buildPluginWrapper(String name, String wikiUrl) {' - line 255", "'new File(\"/tmp/\" + name + \".jpi\"),' - line 263", "'new File(\"/tmp/\" + name + \".jpi.disabled\"),' - line 267"]}, "JobQueueTest.java": {"METHODS": ["'public void setUp() {' - line 27", "'@Override public  void onCompleted(Run r, TaskListener listener) {' - line 29", "'@Override public void onFinalized(Run r) {' - line 37", "'public void buildPendingWhenBuildRunning() throws Exception {' - line 49", "'public void buildPendingWhenBuildInPostProduction() throws Exception {' - line 69"]}, "QueueCrashTest.java": {"METHODS": ["'public void persistQueueOnCrash() {' - line 19", "'public void doNotPersistQueueOnCrashBeforeSave() {' - line 41", "'private static void assertBuildIsScheduled(JenkinsRule j) {' - line 56", "'private static void assertBuildIsNotScheduled(JenkinsRule j) {' - line 61", "'private static void scheduleSomeBuild(JenkinsRule j) throws IOException {' - line 66"]}, "UserTest.java": {"METHODS": ["'public void blankIdsOrFullNamesShouldNotBeAllowed() {' - line 40", "'public void shouldNotAllowIllegalRestrictedNamesInWrongCase() {' - line 48", "'public void shouldNotAllowIllegalRestrictedNamesEvenIfTrimmed() {' - line 58", "'private void assertIdOrFullNameNotAllowed(String id) {' - line 68"]}, "QueueTest.java": {"METHODS": ["'public void setup() throws IOException {' - line 29", "'public void cancelItemOnaValidItemShouldReturnA204() throws IOException, ServletException {' - line 35", "'public void cancelItemOnANonExistingItemShouldReturnA404()  throws IOException, ServletException {' - line 48", "'public void cancelItemOnANonCancellableItemShouldReturnA422()  throws IOException, ServletException {' - line 60"]}, "LabelLoadStatisticsQueueLengthTest.java": {"METHODS": ["'public String getShortDescription() {' - line 43", "'public void createNodeWithLabels() throws IOException, FormException {' - line 55", "'public void clearQueue() {' - line 70", "'public void queueLengthReflectsBuildableItemsAssignedLabel()' - line 81", "'public void queueLengthReflectsJobsAssignedLabel() throws Exception {' - line 132", "'private FreeStyleProject createTestProject() throws IOException {' - line 181", "'new StringParameterDefinition(PARAMETER_NAME, \"0\")));' - line 186", "'public String getIconFileName() {' - line 218", "'public String getDisplayName() {' - line 223", "'public String getUrlName() {' - line 228", "'public Label getAssignedLabel(@NonNull SubTask p_task) {' - line 233"]}, "AbstractBuildTest.java": {"METHODS": ["'public void reportErrorShouldNotFailForNonPublisherClass() throws Exception {' - line 91", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws IOException {' - line 110", "'public void variablesResolved() throws Exception {' - line 119", "'public void rawConsoleOutput() throws Exception {' - line 136", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 141", "'private void assertCulprits(AbstractBuild<?, ?> b, String... expectedIds) throws IOException, SAXException {' - line 151", "'public void culprits() throws Exception {' - line 179", "'public void lastBuildNextBuild() throws Exception {' - line 234", "'public void doNotInterruptBuildAbruptlyWhenExceptionThrownFromBuildStep() throws Exception {' - line 247", "'public void fixEmptyDisplayName() throws Exception {' - line 256", "'public void fixBlankDisplayName() throws Exception {' - line 263", "'public void validDisplayName() throws Exception {' - line 270", "'public void trimValidDisplayName() throws Exception {' - line 277", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 284", "'public void workspaceLock() throws Exception {' - line 294", "'public BuildStepMonitor getRequiredMonitorService() {' - line 304", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException {' - line 309", "'private Object writeReplace() {' - line 323", "'public void tempDirVariable() throws Exception {' - line 347"]}, "ComputerTest.java": {"METHODS": ["'public void testRelocate() throws Exception {' - line 22", "'public void testThreadPoolForRemotingActsAsSystemUser() throws InterruptedException, ExecutionException {' - line 43"]}, "ComputerConfigDotXmlTest.java": {"METHODS": ["'public void setUp() throws Exception {' - line 95", "'public void tearDown() throws Exception {' - line 104", "'public void configXmlGetShouldFailForUnauthorized() {' - line 110", "'public void configXmlPostShouldFailForUnauthorized() {' - line 120", "'public void configXmlGetShouldYieldNodeConfiguration() throws Exception {' - line 130", "'public void configXmlPostShouldUpdateNodeConfiguration() throws Exception {' - line 150", "'public void emptyNodeMonitorDataWithoutConnect() {' - line 169", "'public void populatedNodeMonitorDataWithConnect() {' - line 177", "'public void cannotChangeNodeType() throws Exception {' - line 187", "'public void nodeNameReferencesParentDir() throws Exception {' - line 210", "'private OutputStream captureOutput() throws IOException {' - line 231", "'public void write(int b) {' - line 238", "'public boolean isReady() {' - line 243", "'public void setWriteListener(WriteListener writeListener) {' - line 248", "'private ServletInputStream xmlNode(final String name) {' - line 256", "'public int read() throws IOException {' - line 267", "'public int read(byte[] b) throws IOException {' - line 272", "'public int read(byte[] b, int off, int len) throws IOException {' - line 277", "'public boolean isFinished() {' - line 282", "'public boolean isReady() {' - line 287", "'public void setReadListener(ReadListener readListener) {' - line 292"]}, "TimeZonePropertyTest.java": {"METHODS": ["'public void testEnsureTimeZoneIsNullByDefault() {' - line 21", "'public void testEnsureInvalidTimeZoneDefaultsToNull() throws IOException {' - line 27", "'public void testSetUserDefinedTimeZone() throws IOException {' - line 40"]}, "AbstractProjectTest.java": {"METHODS": ["'public void configRoundtrip() throws Exception {' - line 100", "'public void wipeWorkspace() throws Exception {' - line 113", "'public void wipeWorkspaceProtected() throws Exception {' - line 130", "'public void wipeWorkspaceProtected2() throws Exception {' - line 152", "'public void optionalBlockDataBindingRoundtrip() throws Exception {' - line 172", "'public void configuringBlockBuildWhenUpstreamBuildingRoundtrip() throws Exception {' - line 187", "'public void pollingAndBuildExclusion() throws Exception {' - line 210", "'public boolean pollChanges(AbstractProject project, Launcher launcher, FilePath workspace, TaskListener listener) {' - line 218", "'private Object writeReplace() {' - line 231", "'public boolean requiresWorkspaceForPolling() {' - line 236", "'public void run() {' - line 248", "'public void testGetBuildAfterGC() {' - line 274", "'public void renameJobLostBuilds() throws Exception {' - line 285", "'public void deleteRedirect() throws Exception {' - line 305", "'private String deleteRedirectTarget(String job) throws Exception {' - line 322", "'public void queueSuccessBehavior() throws Exception {' - line 332", "'public void queueSuccessBehaviorOverHTTP() throws Exception {' - line 351", "'public void vectorTriggers() throws Exception {' - line 384", "'public void removeTrigger() throws Exception {' - line 394", "'public void addTriggerSameType() throws Exception {' - line 404", "'public void addTriggerDifferentType() throws Exception {' - line 418", "'public void configDotXmlSubmissionToDifferentType() throws Exception {' - line 433", "'private HttpURLConnection postConfigDotXml(FreeStyleProject p, String xml) throws Exception {' - line 451", "'@Test public void doConfigDotXmlReset() throws Exception {' - line 463", "'public void loadingWithNPEOnTriggerStart() throws Exception {' - line 476", "'public void resolveForCLI() throws Exception {' - line 484", "'public void start(hudson.model.Item project, boolean newInstance) {' - line 495", "'public boolean isApplicable(hudson.model.Item item) {' - line 503", "'public void upstreamDownstreamExportApi() throws Exception {' - line 512", "'public void ensureWhenNonExistingLabelsProposalsAreMade() throws Exception {' - line 540", "'public void ensureLegitLabelsAreRetrievedCorrectly() throws Exception {' - line 562", "'public void dangerousLabelsAreEscaped() throws Exception {' - line 586", "'public void autoCompleteUpstreamProjects() throws Exception {' - line 630", "'private HtmlPage requestCheckAssignedLabelString(FreeStyleProject p, String label) throws Exception {' - line 647", "'private void testAutoCompleteResponse(JSONObject responseBody, String... projects) {' - line 661"]}, "AutoCompletionCandidatesTest.java": {"METHODS": ["'public void completion() throws Exception {' - line 23", "'private void assertContains(AutoCompletionCandidates c, String... values) {' - line 61"]}, "UpdateCenterCustomTest.java": {"METHODS": ["'public void shouldStartupWithCustomUpdateCenter() {' - line 44", "'protected ServletContext createWebServer() throws Exception {' - line 61", "'public void after() {' - line 68", "'public String getUpdateCenterClassName() {' - line 74", "'public CustomUpdateCenter() {' - line 81", "'public CustomUpdateCenter(UpdateCenterConfiguration config) {' - line 84"]}, "ParametersAction2Test.java": {"METHODS": ["'public void undefinedParameters() throws Exception {' - line 36", "'new StringParameterDefinition(\"foo\", \"foo\"),' - line 39", "'new StringParameterDefinition(\"bar\", \"bar\")' - line 40", "'new StringParameterValue(\"foo\", \"baz\"),' - line 47", "'new StringParameterValue(\"undef\", \"undef\")' - line 48", "'public void undefinedParametersOverride() throws Exception {' - line 54", "'new StringParameterDefinition(\"foo\", \"foo\"),' - line 57", "'new StringParameterDefinition(\"bar\", \"bar\")' - line 58", "'new StringParameterValue(\"foo\", \"baz\"),' - line 67", "'new StringParameterValue(\"undef\", \"undef\")' - line 68", "'public void backwardCompatibility() throws Exception {' - line 78", "'new StringParameterValue(\"foo\", \"baz\"),' - line 96", "'new StringParameterValue(\"undef\", \"undef\")' - line 97", "'public void parametersDefinitionChange() throws Exception {' - line 103", "'new StringParameterDefinition(\"foo\", \"foo\"),' - line 106", "'new StringParameterDefinition(\"bar\", \"bar\"))));' - line 107", "'new StringParameterValue(\"foo\", \"baz\"),' - line 110", "'new StringParameterValue(\"bar\", \"bar\"),' - line 111", "'new StringParameterValue(\"undef\", \"undef\")' - line 112", "'new StringParameterDefinition(\"foo\", \"foo\"),' - line 120", "'new StringParameterDefinition(\"bar\", \"bar\"),' - line 121", "'new StringParameterDefinition(\"undef\", \"undef\"))));' - line 122", "'new StringParameterDefinition(\"foo\", \"foo\"))));' - line 131", "'public void whitelistedParameter() throws Exception {' - line 141", "'new StringParameterDefinition(\"foo\", \"foo\"),' - line 144", "'new StringParameterDefinition(\"bar\", \"bar\"))));' - line 145", "'new StringParameterValue(\"foo\", \"baz\"),' - line 150", "'new StringParameterValue(\"bar\", \"bar\"),' - line 151", "'new StringParameterValue(\"whitelisted1\", \"x\"),' - line 152", "'new StringParameterValue(\"whitelisted2\", \"y\")' - line 153", "'public void whitelistedParameterByOverride() throws Exception {' - line 167", "'new StringParameterDefinition(\"foo\", \"foo\"),' - line 171", "'new StringParameterDefinition(\"bar\", \"bar\"))));' - line 172", "'new StringParameterValue(\"foo\", \"baz\"),' - line 177", "'new StringParameterValue(\"bar\", \"bar\"),' - line 178", "'new StringParameterValue(\"whitelisted1\", \"x\"),' - line 179", "'new StringParameterValue(\"whitelisted2\", \"y\"),' - line 180", "'new StringParameterValue(\"whitelisted3\", \"y\")' - line 181", "'public void whitelistedParameterSameAfterChange() throws Exception {' - line 209", "'new StringParameterDefinition(\"foo\", \"foo\"),' - line 213", "'new StringParameterDefinition(\"bar\", \"bar\"))));' - line 214", "'new StringParameterValue(\"foo\", \"baz\"),' - line 219", "'new StringParameterValue(\"bar\", \"bar\"),' - line 220", "'new StringParameterValue(\"whitelisted1\", \"x\"),' - line 221", "'new StringParameterValue(\"whitelisted2\", \"y\"),' - line 222", "'new StringParameterValue(\"whitelisted3\", \"z\"),' - line 223", "'new StringParameterValue(\"whitelisted4\", \"w\")' - line 224", "'public void nonParameterizedJob() throws Exception {' - line 257", "'new StringParameterValue(\"foo\", \"baz\"),' - line 260", "'new StringParameterValue(\"bar\", \"bar\")' - line 261", "'public void nonParameterizedJobButWhitelisted() throws Exception {' - line 272", "'new StringParameterValue(\"foo\", \"baz\"),' - line 278", "'new StringParameterValue(\"bar\", \"bar\")' - line 279", "'public void ensureNoListReuse() throws Exception {' - line 293", "'public void noInnerClasses() throws Exception {' - line 316", "'public static boolean hasParameterWithName(Iterable<ParameterValue> values, String name) {' - line 324", "'public ParametersCheckBuilder(boolean expectLegacyBehavior) {' - line 338", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener)' - line 343"]}, "SimpleJobTest.java": {"METHODS": ["'public void testGetEstimatedDuration() throws Exception {' - line 25", "'public void testGetEstimatedDurationWithOneRun() throws Exception {' - line 42", "'public void testGetEstimatedDurationWithFailedRun() throws Exception {' - line 51", "'public void testGetEstimatedDurationWithNoRuns() throws Exception {' - line 61", "'public void testGetEstimatedDurationIfPrevious3BuildsFailed() throws Exception {' - line 68", "'public void testGetEstimatedDurationIfNoSuccessfulBuildTakeDurationOfFailedBuild() throws Exception {' - line 101"]}, "RSSTest.java": {"METHODS": ["'public void absoluteURLsPresentInRSS_evenWithoutRootUrlSetup_View() throws Exception {' - line 73", "'public void checkInitialContent_Rss_All_AllView() throws Exception {' - line 91", "'public void checkInitialContent_Rss_Failed_AllView() throws Exception {' - line 100", "'public void checkInitialContent_Atom_All_AllView() throws Exception {' - line 109", "'public void checkWithSingleBuild_Rss_All_AllView() throws Exception {' - line 118", "'public void checkWithSingleBuild_Rss_Failed_AllView() throws Exception {' - line 130", "'public void checkWithSingleBuild_Atom_All_AllView() throws Exception {' - line 142", "'public void absoluteURLsPresentInAtom_evenWithoutRootUrlSetup_View() throws Exception {' - line 154", "'public void latestBuilds_AllView() throws Exception {' - line 172", "'public void checkWithSingleBuild_Rss_All_Computer() throws Exception {' - line 182", "'public void checkWithSingleBuild_Rss_Failed_Computer() throws Exception {' - line 194", "'public void latestBuilds_Computer() throws Exception {' - line 206", "'public void checkWithSingleBuild_Rss_All_Job() throws Exception {' - line 216", "'public void checkWithSingleBuild_Rss_Failed_Job() throws Exception {' - line 228", "'public void checkWithSingleBuild_Rss_All_NewView() throws Exception {' - line 240", "'public void checkWithSingleBuild_Rss_All_User() throws Exception {' - line 256", "'public void checkWithSingleBuild_Rss_Failed_User() throws Exception {' - line 271", "'public void latestBuilds_User() throws Exception {' - line 286", "'public void latestBuilds_User_NotCaused() throws Exception {' - line 298", "'public void checkInitialContent_Atom_AllLog() throws Exception {' - line 310", "'public void checkInitialContent_Atom_SevereLog() throws Exception {' - line 321", "'public void checkInitialContent_Atom_WarningLog() throws Exception {' - line 332", "'private Node checkRssWrapperNodes(Document xmlDocument) {' - line 351", "'private XmlPage getRssFailedPage(String pathPrefix) throws IOException, SAXException {' - line 361", "'return getRssFailedPage(j.createWebClient(), pathPrefix);' - line 362", "'private XmlPage getRssFailedPage(JenkinsRule.WebClient webClient, String pathPrefix) throws IOException, SAXException {' - line 365", "'private void checkRssBasicNodes(Node channelNode, String expectedTitle, int expectedNodes, String path) throws IOException {' - line 370", "'private void checkAtomBasicNodes(Node feedNode, String expectedTitle, int expectedNodes) throws IOException {' - line 377", "'private Node getSingleNode(Node parentNode, String nodeName) {' - line 396", "'private void checkRssTimeNode(Node firstBuild, String nodeName) throws ParseException {' - line 411", "'private void checkAtomTimeNode(Node firstBuild, String nodeName) {' - line 419", "'private XmlPage getRssAllPage(String pathPrefix) throws Exception {' - line 427", "'return getRssAllPage(j.createWebClient(), pathPrefix);' - line 428", "'private XmlPage getRssAllPage(JenkinsRule.WebClient webClient, String pathPrefix) throws Exception {' - line 431", "'private String computeAdjustedPathPrefix(String pathPrefix) {' - line 436", "'private void assertAllRSSLinksContainRootUrl(NodeList allLinks) throws Exception {' - line 440", "'private XmlPage getRssAllAtomPage() throws Exception {' - line 448", "'private void assertAllAtomLinksContainRootUrl(NodeList allLinks) throws Exception {' - line 452", "'private XmlPage getRssLatestPage(JenkinsRule.WebClient webClient, String pathPrefix) throws Exception {' - line 461", "'private FreeStyleProject runSuccessfulBuild() throws Exception {' - line 466", "'private FreeStyleProject runSuccessfulBuild(String userId) throws Exception {' - line 472", "'private void runFailingBuild() throws Exception {' - line 478", "'private void runFailingBuild(String userId) throws Exception {' - line 484", "'private void assertLatestRSSLinks(NodeList allLinks, String path) throws Exception {' - line 490", "'private void checkSingleBuild_Rss(XmlPage page, String pathPrefix, String displayName, String buildType, String buildTitle) throws Exception {' - line 505", "'private void checkSingleBuild_Atom(XmlPage page, String displayName, String buildType, String buildTitle) throws IOException {' - line 521"]}, "RunMapTest.java": {"METHODS": ["'@Test public void reloadWhileBuildIsInProgress() throws Exception {' - line 40", "'@Test public void reloadWhileBuildIsInQueue() throws Exception {' - line 68", "'@Test public void runtimeExceptionInUnmarshalling() throws Exception {' - line 105", "'private Object readResolve() {' - line 121", "'@Test public void remove() throws Exception {' - line 130", "'public void stream() throws Exception {' - line 147", "'public void runLoadCounterFirst() throws Exception {' - line 192", "'public void runLoadCounterLimit() throws Exception {' - line 203"]}, "ViewDescriptorTest.java": {"METHODS": ["'public void canAdd() throws Exception {' - line 53", "'public RestrictiveFolder(ItemGroup parent, String name) {' - line 64", "'public boolean canAdd(TopLevelItem item) {' - line 69", "'@Override public TopLevelItem newInstance(ItemGroup parent, String name) {' - line 75", "'private void assertContains(AutoCompletionCandidates c, String... values) {' - line 83", "'public void invisiblePropertiesOnViewShoudBePersisted() throws Exception {' - line 90", "'public void setSomeProperty(String someProperty) {' - line 145", "'public String getSomeProperty() {' - line 149", "'public ViewProperty reconfigure(StaplerRequest req, JSONObject form) {' - line 158", "'public String getId() {' - line 166", "'public boolean isEnabledFor(View view) {' - line 171", "'public boolean filter(Object context, Descriptor descriptor) {' - line 180"]}, "ListViewTest.java": {"METHODS": ["'@Test public void nullJobNames() {' - line 90", "'public void testJobLinksAreValid() throws Exception {' - line 95", "'private void checkLinkFromViewExistsAndIsValid(Item item, ItemGroup ig, View view, WebClient webClient) throws IOException, SAXException {' - line 126", "'private void checkLinkFromItemExistsAndIsValid(Item item, ItemGroup ig, Item top, WebClient webClient) throws IOException, SAXException {' - line 132", "'@Test public void nonTopLevelItemGroup() throws Exception {' - line 139", "'@Test public void renamesMovesAndDeletes() throws Exception {' - line 152", "'@Test public void renameJobContainedInTopLevelView() throws Exception {' - line 176", "'@Test public void renameContainedJob() throws Exception {' - line 192", "'@Test public void deleteJobContainedInTopLevelView() throws Exception {' - line 211", "'@Test public void deleteContainedJob() throws Exception {' - line 226", "'@Test public void renameJobInViewYouCannotSee() throws Exception {' - line 243", "'@Test public void addJobUsingAPI() throws Exception {' - line 257", "'@Test public void doRemoveJobFromViewNullItem() throws Exception {' - line 276", "'@Test public void doApplyDoNotOverloadElements() throws Exception {' - line 298", "'@Test public void getItemsNames() throws Exception {' - line 314", "'@Test public void getItemsRegex() throws Exception {' - line 334", "'@Test public void withJobViewFilter() throws Exception {' - line 353", "'@Test @LocalData public void migrateStatusFilter() {' - line 369", "'public List<TopLevelItem> filter(List<TopLevelItem> added, List<TopLevelItem> all, View filteringView) {' - line 380", "'@Override public ACL getRootACL() {' - line 386", "'@Override public Collection<String> getGroups() {' - line 390", "'@Override public ACL getACL(View item) {' - line 394", "'@Override public boolean hasPermission2(Authentication a, Permission permission) {' - line 396", "'public int read() throws IOException {' - line 411", "'public int read(byte[] b) throws IOException {' - line 416", "'public int read(byte[] b, int off, int len) throws IOException {' - line 421", "'public boolean isFinished() {' - line 426", "'public boolean isReady() {' - line 431", "'public void setReadListener(ReadListener readListener) {' - line 436"]}, "ManagementLinkTest.java": {"METHODS": ["'public void links() throws Exception {' - line 54", "'public void invisibleLinks() {' - line 68", "'public String getIconFileName() {' - line 76", "'public String getDisplayName() {' - line 81", "'public String getUrlName() {' - line 86"]}, "ViewTest.java": {"METHODS": ["'public void testAddDisplayNamesToSearchIndex() {' - line 26", "'public void getAllItems() {' - line 77", "'public void getAllViewsRecursively() {' - line 104", "'private TopLevelItem createJob(String jobName) {' - line 118", "'protected CompositeView(final String name, View... views) {' - line 129", "'private CompositeView withJobs(TopLevelItem... jobs) {' - line 134", "'public Collection<TopLevelItem> getItems() {' - line 140", "'public Collection<View> getViews() {' - line 145", "'public boolean canDelete(View view) {' - line 150", "'public void deleteView(View view) {' - line 155", "'public View getView(String name) {' - line 159", "'public void onViewRenamed(View view, String oldName, String newName) {' - line 164", "'public ViewsTabBar getViewsTabBar() {' - line 168", "'public List<Action> getViewActions() {' - line 178", "'public boolean contains(TopLevelItem item) {' - line 183", "'protected void submit(StaplerRequest req) {' - line 188", "'public Item doCreateItem(StaplerRequest req, StaplerResponse rsp) {' - line 192"]}, "ComputerSetTest.java": {"METHODS": ["'public void pageRendering() throws Exception {' - line 62", "'public void configuration() throws Exception {' - line 72", "'public void nodeOfflineCli() throws Exception {' - line 79", "'public void getComputerNames() throws Exception {' - line 91", "'public void managePermissionCanConfigure() throws Exception {' - line 100", "'public void testTerminatedNodeStatusPageDoesNotShowTrace() throws Exception {' - line 142", "'public void testTerminatedNodeAjaxExecutorsDoesNotShowTrace() throws Exception {' - line 164"]}, "QueueRestartTest.java": {"METHODS": ["'public void persistQueueOnRestart() throws Throwable {' - line 47", "'public void persistQueueOnConsecutiveRestarts() throws Throwable {' - line 59", "'private static void queueBuild(JenkinsRule j) throws IOException {' - line 68", "'private static void assertBuildFinishes(JenkinsRule j) throws Exception {' - line 78", "'private static void assertBuildIsScheduled(JenkinsRule j) {' - line 89"]}, "RunTest.java": {"METHODS": ["'public void timezoneOfID() throws Exception {' - line 65", "'@Override public Run call() {' - line 74", "'public void artifactListDisambiguation1() throws Exception {' - line 111", "'public void artifactListDisambiguation2() throws Exception {' - line 119", "'public void artifactListDisambiguation3() throws Exception {' - line 127", "'public void getDurationString() {' - line 136", "'public Locale get() {' - line 142", "'public void getLogReturnsAnEmptyListWhenCalledWith0() throws Exception {' - line 164", "'public void getLogReturnsAnRightOrder() throws Exception {' - line 180", "'public void getLogReturnsAllLines() throws Exception {' - line 205", "'public void compareRunsFromSameJobWithDifferentNumbers() throws Exception {' - line 225", "'public void compareRunsFromDifferentParentsWithSameNumber() throws Exception {' - line 247", "'public void willTriggerLogToStartWithNextFullLine() throws Exception {' - line 273", "'public void wontPushOffsetOnRenderingFromBeginning() throws Exception {' - line 278", "'public void willRenderNothingIfOffsetSetOnLastLine() throws Exception {' - line 283", "'private void assertWriteLogToEquals(String expectedOutput, long offset) throws Exception {' - line 287", "'public InputStream getLogInputStream() {' - line 307"]}, "MyViewsPropertyTest.java": {"METHODS": ["'public void testReadResolve() throws IOException {' - line 55", "'public void testSave() throws IOException {' - line 66", "'public void testGetViews() throws IOException {' - line 89", "'public void testGetView() throws IOException {' - line 101", "'public void testGetPrimaryView() throws IOException {' - line 114", "'public void testCanDelete() throws IOException {' - line 128", "'public void testDeleteView() throws IOException {' - line 144", "'public void testOnViewRenamed() throws IOException, FormException {' - line 177", "'public void testAddView() throws Exception {' - line 191", "'public void testDoCreateView() throws Exception {' - line 211", "'public void testGetACL() throws IOException {' - line 232", "'public void testCheckPermission() throws IOException {' - line 244", "'public void testHasPermission() throws IOException {' - line 281", "'public void shouldNotFailWhenMigratingLegacyViewsWithoutPrimaryOne() throws IOException {' - line 301"]}, "AperiodicWorkTest.java": {"METHODS": ["'public void newExtensionsAreScheduled() throws Exception {' - line 20", "'public long getRecurrencePeriod() {' - line 35", "'public long getInitialDelay() {' - line 41", "'public AperiodicWork getNewInstance() {' - line 47", "'protected void doAperiodicRun() {' - line 52"]}, "FileParameterValueTest.java": {"METHODS": ["'@Test public void compareParamsWithSameName() {' - line 40", "'@Test public void compareNullParams() {' - line 49"]}, "UpdateCenterPluginInstallTest.java": {"METHODS": ["'private void setup() {' - line 48", "'public void test_installUnknownPlugin() throws IOException, SAXException {' - line 59", "'public void test_installKnownPlugins() throws IOException, SAXException {' - line 71", "'private JSONObject buildInstallPayload(String... plugins) {' - line 93"]}, "UpdateCenterTest.java": {"METHODS": ["'public void toUpdateCenterCheckUrl_http_noQuery() throws Exception {' - line 17", "'public void toUpdateCenterCheckUrl_https_noQuery() throws Exception {' - line 24", "'public void toUpdateCenterCheckUrl_http_query() throws Exception {' - line 31", "'public void toUpdateCenterCheckUrl_https_query() throws Exception {' - line 38", "'public void toUpdateCenterCheckUrl_file() throws Exception {' - line 45", "'public void noChecksums() {' - line 52", "'public void sha1Match() throws Exception {' - line 60", "'new MockDownloadJob(EMPTY_SHA1, null, null),' - line 62", "'public void sha1Mismatch() {' - line 67", "'new MockDownloadJob(EMPTY_SHA1.replace('k', 'f'), null, null),' - line 69", "'public void sha512ProvidedOnly() throws IOException {' - line 75", "'new MockDownloadJob(EMPTY_SHA1, EMPTY_SHA256, EMPTY_SHA512),' - line 77", "'public void sha512and256IgnoreCase() throws IOException {' - line 82", "'new MockDownloadJob(EMPTY_SHA1, EMPTY_SHA256.toUpperCase(Locale.US), EMPTY_SHA512.toUpperCase(Locale.US)),' - line 84", "'public void sha1DoesNotIgnoreCase() {' - line 89", "'new MockDownloadJob(EMPTY_SHA1, EMPTY_SHA256, EMPTY_SHA512),' - line 91", "'public void noOverlapForComputedAndProvidedChecksums() {' - line 97", "'new MockDownloadJob(EMPTY_SHA1, EMPTY_SHA256, null),' - line 99", "'public void noOverlapForComputedAndProvidedChecksumsForSpecIncompliantJVM() {' - line 105", "'new MockDownloadJob(EMPTY_SHA1, null, null),' - line 107", "'public String getComputedSHA1() {' - line 155", "'public String getComputedSHA256() {' - line 160", "'public String getComputedSHA512() {' - line 165"]}, "JobTest.java": {"METHODS": ["'public void testSetDisplayName() throws Exception {' - line 19", "'public void testSetDisplayNameZeroLength() throws Exception {' - line 31", "'public void use_agent_platform_path_separator_when_contribute_path() throws Throwable {' - line 43"]}, "DirectlyModifiableViewTest.java": {"METHODS": ["'public void manipulateViewContent() throws IOException {' - line 48", "'public void doAddJobToView() throws Exception {' - line 78", "'public void doAddNestedJobToRecursiveView() throws Exception {' - line 95", "'public void doRemoveJobFromView() throws Exception {' - line 140", "'public void failWebMethodForIllegalRequest() throws Exception {' - line 158", "'private Page doPost(View view, String path) throws Exception {' - line 186", "'new URL(j.jenkins.getRootUrl() + view.getUrl() + path),' - line 190", "'private void assertBadStatus(Page page, String message) {' - line 197"]}, "MyViewTest.java": {"METHODS": ["'public void setup() {' - line 60", "'public void testContains() throws Exception {' - line 65", "'public void testDoCreateItem() throws Exception {' - line 81", "'public void testGetItems() throws IOException {' - line 100"]}, "AbstractItemSecurityTest.java": {"METHODS": ["'public void testUpdateByXmlDoesNotProcessForeignResources() throws Exception {' - line 49", "'public void testUpdateByXmlDoesNotFail() throws Exception {' - line 75"]}, "ApiTest.java": {"METHODS": ["'public void xpath() throws Exception {' - line 60", "'@Test public void json() throws Exception {' - line 65", "'public void wrappedZeroItems() throws Exception {' - line 81", "'@Test public void xPathDocumentFunction() throws Exception {' - line 92", "'public void wrappedOneItem() throws Exception {' - line 105", "'public void wrappedMultipleItems() throws Exception {' - line 111", "'public void unwrappedZeroItems() throws Exception {' - line 119", "'public void unwrappedOneItem() throws Exception {' - line 124", "'public void unwrappedLongString() throws Exception {' - line 130", "'public void unwrappedMultipleItems() throws Exception {' - line 146", "'public void parameter() throws Exception {' - line 154", "'public void escapedParameter() throws Exception {' - line 170", "'public void project_notExposedToIFrame() throws Exception {' - line 185", "'public void custom_notExposedToIFrame() throws Exception {' - line 194", "'public void wrapperXss() throws Exception {' - line 206", "'public void wrapperBadName() throws Exception {' - line 218", "'public void wrapperGoodName() throws Exception {' - line 230", "'private void checkWrapperParam(String wrapper, Integer statusCode, String responseMessage) throws IOException, SAXException {' - line 245", "'private void ensureXmlIsNotExposedToIFrame(String itemUrl) throws Exception {' - line 266", "'private void ensureJsonIsNotExposedToIFrame(String itemUrl) throws Exception {' - line 271", "'private void ensurePythonIsNotExposedToIFrame(String itemUrl) throws Exception {' - line 276", "'String getIconFileName() {' - line 285", "'public Api getApi() {' - line 299"]}, "HudsonTest.java": {"METHODS": ["'public void globalConfigRoundtrip() throws Exception {' - line 74", "'public void simpleConfigSubmit() throws Exception {' - line 91", "'private void assertAnt(AntInstallation ant, String name, String home) {' - line 119", "'private void assertJDK(JDK jdk, String name, String home) {' - line 124", "'public void searchIndex() throws Exception {' - line 136", "'public void breadcrumb() throws Exception {' - line 149", "'public void computerConfigureLink() throws Exception {' - line 160", "'public void deleteHudsonComputer() throws Exception {' - line 170", "'public void legacyDescriptorLookup() {' - line 193", "'public void invalidPrimaryView() throws Exception {' - line 208"]}, "ProjectTest.java": {"METHODS": ["'public void testSave() throws IOException, InterruptedException, ReactorException {' - line 126", "'public void testOnCreateFromScratch() throws Exception {' - line 139", "'public void testOnLoad() throws Exception {' - line 151", "'public void testGetEnvironment() throws Exception {' - line 164", "'public void testPerformDelete() throws Exception {' - line 174", "'public void testGetAssignedLabel() throws Exception {' - line 182", "'public void testGetAssignedLabelString() throws Exception {' - line 194", "'public void testGetSomeWorkspace() throws Exception {' - line 206", "'public void testGetSomeBuildWithWorkspace() throws Exception {' - line 219", "'@Test public void workspaceBrowsing() throws Exception {' - line 231", "'public void testGetQuietPeriod() throws IOException {' - line 244", "'public void testGetScmCheckoutStrategy() throws IOException {' - line 254", "'public void testGetScmCheckoutRetryCount() throws Exception {' - line 264", "'public void isBuildable() throws IOException {' - line 279", "'public void testMakeDisabled() throws IOException {' - line 292", "'public void testAddProperty() throws IOException {' - line 306", "'public void testScheduleBuild2() throws Exception {' - line 316", "'public void testSchedulePolling() throws IOException {' - line 334", "'public void testSaveAfterSet() throws Exception {' - line 346", "'public void testGetActions() throws IOException {' - line 368", "'public void testGetCauseOfBlockage() throws Exception {' - line 382", "'private QueueTaskFuture<FreeStyleBuild> waitForStart(FreeStyleProject p) throws InterruptedException, ExecutionException {' - line 408", "'public void testGetSubTasks() throws IOException {' - line 418", "'public void testCreateExecutable() throws IOException {' - line 438", "'public void testCheckout() throws Exception {' - line 452", "'public void testPoll() throws Exception {' - line 469", "'public void testHasParticipant() throws Exception {' - line 493", "'public void testGetRelationship() throws Exception {' - line 508", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 521", "'public void testDoCancelQueue() throws Exception {' - line 552", "'public void testDoDoDelete() throws Exception {' - line 566", "'public void testDoDoWipeOutWorkspace() throws Exception {' - line 596", "'public void testDoDisable() throws Exception {' - line 628", "'public void testDoEnable() throws Exception {' - line 657", "'public void testJobSubmittedShouldSpawnCloud() throws Exception {' - line 692", "'public void testUnrestrictedJobNoLabelByCloudNoQueue() throws Exception {' - line 721", "'public void testRestrictedLabelOnSlaveYesQueue() throws Exception {' - line 765", "'public void testMasterJobPutInQueue() throws Exception {' - line 791", "'public RequiresWorkspaceSCM() { }' - line 833", "'public RequiresWorkspaceSCM(boolean hasChange) {' - line 835", "'public boolean pollChanges(AbstractProject<?, ?> project, Launcher launcher, FilePath workspace, TaskListener listener) {' - line 840", "'public boolean requiresWorkspaceForPolling() {' - line 845", "'protected PollingResult compareRemoteRevisionWith(AbstractProject project, Launcher launcher, FilePath workspace, TaskListener listener, SCMRevisionState baseline) {' - line 854", "'public boolean pollChanges(AbstractProject<?, ?> project, Launcher launcher, FilePath workspace, TaskListener listener) {' - line 866", "'public boolean requiresWorkspaceForPolling() {' - line 871", "'protected PollingResult compareRemoteRevisionWith(AbstractProject project, Launcher launcher, FilePath workspace, TaskListener listener, SCMRevisionState baseline) {' - line 876", "'public FilePath getWorkspace(Job job) {' - line 886", "'public SCMCheckoutStrategyImpl() {' - line 897", "'public Collection getSubTasks() {' - line 906", "'public Executable createExecutable() {' - line 937", "'public Task getOwnerTask() {' - line 942", "'public String getDisplayName() {' - line 947", "'public DummyCloudImpl2() {' - line 979", "'public DummyCloudImpl2(JenkinsRule caller, int delay) {' - line 985", "'public boolean canProvision(Label label) {' - line 1007", "'private Launcher(long time) {' - line 1020", "'public Node call() throws Exception {' - line 1025", "'public Descriptor<Cloud> getDescriptor() {' - line 1043"]}, "AbstractItem2Test.java": {"METHODS": ["'public void badSerialization() throws Throwable {' - line 49"]}, "BuildExecutionTest.java": {"METHODS": ["'@Test public void workspaceReliablyReleased() throws Exception {' - line 43", "'@Override public boolean needsToRunAfterFinalized() {' - line 55", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 59", "'@Override public BuildStepMonitor getRequiredMonitorService() {' - line 63"]}, "CauseTest.java": {"METHODS": ["'@Test public void deeplyNestedCauses() throws Exception {' - line 58", "'@Test public void broadlyNestedCauses() throws Exception {' - line 76", "'@Test public void userIdCausePrintTest() throws Exception {' - line 100", "'public void xssInRemoteCause() throws IOException, SAXException {' - line 138", "'public void preventXssInUpstreamDisplayName() throws Exception {' - line 152", "'public void preventXssInUpstreamDisplayName_deleted() throws Exception {' - line 172", "'public void preventXssInUpstreamShortDescription() throws Exception {' - line 195", "'private void ensureXssIsPrevented(FreeStyleBuild downBuild) throws Exception {' - line 211", "'public void basicCauseIsSafe() throws Exception {' - line 231", "'public SimpleCause(String description) {' - line 253", "'public String getShortDescription() {' - line 258", "'public CustomBuild(FullNameChangingProject job) throws IOException {' - line 264", "'public void setVirtualName(String virtualName) {' - line 276", "'public String getName() {' - line 281", "'protected Class<CustomBuild> getBuildClass() {' - line 290", "'public TopLevelItemDescriptor getDescriptor() {' - line 295", "'public FullNameChangingProject newInstance(ItemGroup parent, String name) {' - line 303"]}, "WorkspaceCleanupThreadTest.java": {"METHODS": ["'@Test public void cleanUpSlaves() throws Exception {' - line 57", "'@Test public void modernMasterWorkspaceLocation() throws Exception {' - line 77", "'@Test public void jobInFolder() throws Exception {' - line 93", "'@Test public void doNothingIfDisabled() throws Exception {' - line 117", "'@Test public void removeOnlyWhatIsOldEnough() throws Exception {' - line 134", "'@Test @WithoutJenkins public void recurrencePeriodIsInHours() {' - line 153", "'new WorkspaceCleanupThread().getRecurrencePeriod()' - line 156", "'@Test public void vetoByScm() throws Exception {' - line 160", "'public void deleteTemporaryDirectory() throws Exception {' - line 178", "'private FilePath createOldWorkspaceOn(Node slave, FreeStyleProject p) throws Exception {' - line 189", "'private void performCleanup() throws InterruptedException, IOException {' - line 199", "'new WorkspaceCleanupThread().execute(StreamTaskListener.fromStdout());' - line 200", "'@Override public Void invoke(File f, VirtualChannel channel) {' - line 226"]}, "RunParameterDefinitionTest.java": {"METHODS": ["'@Test public void configRoundtrip() throws Exception {' - line 51", "'@Test public void inFolders() throws Exception {' - line 61", "'public void testNULLFilter() throws Exception {' - line 90", "'public void testALLFilter() throws Exception {' - line 122", "'public void testCOMPLETEDFilter() throws Exception {' - line 153", "'public void testSUCCESSFULFilter() throws Exception {' - line 184", "'public void testSTABLEFilter() throws Exception {' - line 216", "'public void testLoadEnvironmentVariablesWhenRunParameterJobHasBeenDeleted() throws Exception {' - line 248", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 280", "'public BuildStepMonitor getRequiredMonitorService() {' - line 286", "'public Descriptor<Publisher> getDescriptor() {' - line 291"]}, "ParametersDefinitionPropertyTest.java": {"METHODS": ["'public void customNewInstance() throws Exception {' - line 49", "'public KrazyParameterDefinition(String name, String description, String field) {' - line 67", "'public ParameterValue createValue(StaplerRequest req, JSONObject jo) {' - line 73", "'public ParameterValue createValue(StaplerRequest req) {' - line 78", "'public ParameterDefinition newInstance(StaplerRequest req, JSONObject formData) {' - line 86"]}, "ItemsTest.java": {"METHODS": ["'public static void itemGroups() {' - line 20", "'public void getCanonicalName() {' - line 32", "'public void computeRelativeNamesAfterRenaming() {' - line 54", "'@Test public void getRelativeNameFrom() {' - line 81"]}, "UpdateCenterConnectionStatusTest.java": {"METHODS": ["'public void doConnectionStatus_default_site() throws IOException, SAXException {' - line 47", "'public void doConnectionStatus_unknown_site() throws IOException, SAXException {' - line 65", "'public String getConnectionCheckUrl() {' - line 74", "'public void test_states_allok() {' - line 80", "'public void test_states_internet_failed() {' - line 94", "'public void test_states_uc_failed_timeout() {' - line 105", "'public void test_states_uc_failed_UnknownHost() {' - line 116", "'private TestConfig failInternet() {' - line 131", "'private TestConfig failUCResolve() {' - line 136", "'private TestConfig failUCConnect() {' - line 141", "'public void checkConnection(UpdateCenter.ConnectionCheckJob job, String connectionCheckUrl) throws IOException {' - line 147", "'public void checkUpdateCenter(UpdateCenter.ConnectionCheckJob job, String updateCenterUrl) throws IOException {' - line 154"]}, "UserIdMigratorTest.java": {"METHODS": ["'public void needsMigrationBasic() throws IOException {' - line 51", "'public void needsMigrationFalse() throws IOException {' - line 57", "'public void needsMigrationNoneExisting() throws IOException {' - line 63", "'public void needsMigrationNoUserConfigFiles() throws IOException {' - line 69", "'public void scanExistingUsersNone() throws IOException {' - line 75", "'public void scanExistingUsersNoUsersDirectory() throws IOException {' - line 83", "'public void scanExistingUsersBasic() throws IOException {' - line 90", "'public void scanExistingUsersLegacy() throws IOException {' - line 98", "'public void scanExistingUsersOldLegacy() throws IOException {' - line 106", "'public void emptyUsernameConfigScanned() throws IOException {' - line 114", "'public void scanExistingUsersCaseSensitive() throws IOException {' - line 122", "'public void migrateSimpleUser() throws IOException {' - line 131", "'public void migrateMultipleUsers() throws IOException {' - line 145", "'public void migrateUsersXml() throws IOException {' - line 161", "'public void migrateEntireDirectory() throws IOException {' - line 175", "'static File createTestDirectory(Class clazz, TestName testName) throws IOException {' - line 188", "'static void copyTestDataIfExists(Class clazz, TestName testName, File tempDirectory) throws IOException {' - line 195", "'private UserIdMigrator createUserIdMigrator() throws IOException {' - line 202"]}, "ViewPropertyTest.java": {"METHODS": ["'public void testRoundtrip() throws Exception {' - line 50", "'public ViewPropertyImpl(String name) {' - line 73", "'public void testInvisibleProperty() throws Exception {' - line 82", "'public ViewProperty reconfigure(StaplerRequest req, JSONObject form) {' - line 102"]}, "DownloadServiceTest.java": {"METHODS": ["'public void testLoadJSON() throws Exception {' - line 27", "'private static void assertRoots(String expected, URL resource) throws Exception {' - line 33", "'public void testReduceFunctionWithMavenJsons() throws Exception {' - line 41", "'public void testReduceFunctionWithAntJsons() throws Exception {' - line 60", "'public void testReduceFunctionWithNotDefaultSchemaJsons() throws Exception {' - line 79", "'protected GenericDownloadFromUrlInstaller(String id) {' - line 95", "'public String getDisplayName() {' - line 102", "'public boolean isApplicable(Class<? extends ToolInstallation> toolType) {' - line 107"]}, "DescriptorVisibilityFilterTest.java": {"METHODS": ["'public void jenkins40545() throws Exception {' - line 32", "'public void securityRealmAndAuthStrategyHidden() throws Exception {' - line 51", "'public SecurityComponents createSecurityComponents() { return null; }' - line 63", "'public String getDisplayName() {' - line 69", "'public boolean filter(@CheckForNull Object context, @NonNull Descriptor descriptor) {' - line 77", "'public ACL getRootACL() { return null; }' - line 87", "'public Collection<String> getGroups() { return null; }' - line 91", "'public String getDisplayName() {' - line 97", "'public boolean filter(@CheckForNull Object context, @NonNull Descriptor descriptor) {' - line 105", "'@Override public String getIconFileName() {' - line 114", "'@Override public String getDisplayName() {' - line 118", "'@Override public String getUrlName() {' - line 122"]}, "PasswordParameterDefinitionTest.java": {"METHODS": ["'@Test public void defaultValueKeptSecret() throws Exception {' - line 45", "'@Test public void defaultValueAlwaysAvailable() throws Exception {' - line 53", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 61"]}, "NodeTest.java": {"METHODS": ["'public void before() {' - line 86", "'public void testSetTemporaryOfflineCause() throws Exception {' - line 93", "'public void testOfflineCause() throws Exception {' - line 109", "'public void testOfflineCauseAsAnonymous() throws Exception {' - line 134", "'public void testGetLabelCloud() throws Exception {' - line 160", "'public void testGetAssignedLabels() throws Exception {' - line 179", "'public void testCanTake() throws Exception {' - line 192", "'public void testCreatePath() throws Exception {' - line 231", "'public void testHasPermission() throws Exception {' - line 244", "'public void testGetChannel() throws Exception {' - line 265", "'public void testToComputer() throws Exception {' - line 275", "'@Test public void envPropertiesImmutable() throws Exception {' - line 283", "'public void testGetAssignedLabelWithLabelOrExpression() throws Exception {' - line 300", "'public void testGetAssignedLabelWithLabelAndExpression() throws Exception {' - line 314", "'public void testGetAssignedLabelWithBothAndOrExpression() throws Exception {' - line 328", "'public void testGetAssignedLabelWithSpaceOnly() throws Exception {' - line 364", "'public void builtInComputerConfigDotXml() throws Exception {' - line 377", "'public void assertThatCloudLabel(boolean contains, TagCloud<LabelAtom> tagCloud, String expectedLabel, int expectedWeight) {' - line 392", "'public void assertThatCloudLabelDoesNotContain(TagCloud<LabelAtom> tagCloud, String expectedLabel, int expectedWeight) {' - line 418", "'public void assertThatCloudLabelContains(TagCloud<LabelAtom> tagCloud, String expectedLabel, int expectedWeight) {' - line 425", "'public Collection<LabelAtom> findLabels(@NonNull Node node) {' - line 434", "'public CauseOfBlockage canTake(Queue.BuildableItem item) {' - line 449"]}, "BuildAuthorizationTokenTest.java": {"METHODS": ["'public void setupSecurity() {' - line 30", "'public void triggerJobWithoutSecurityRealm_ShouldSucceed_WithPost() throws Exception {' - line 39", "'public void triggerJobWithoutSecurityRealm_ShouldFail_WithGet() throws Exception {' - line 53", "'public void triggerJobWithoutSecurityRealm_ButWithToken_ShouldSucceed_WithGet() throws Exception {' - line 67", "'public void triggerJobWithTokenShouldSucceedWithPost() throws Exception {' - line 79", "'new URL(jr.getURL(), project.getUrl() + \"build?delay=0&token=\" + token),' - line 83", "'public void triggerJobWithTokenShouldSucceedWithGet() throws Exception {' - line 90", "'new URL(jr.getURL(), project.getUrl() + \"build?delay=0&token=\" + token),' - line 94", "'public void triggerJobsWithoutTokenShouldFail() throws Exception {' - line 102", "'private FreeStyleProject createFreestyleProjectWithToken() throws Exception {' - line 112"]}, "FingerprintTest.java": {"METHODS": ["'@Test public void rangeSet() {' - line 49", "'@Test public void merge() {' - line 81", "'@Test public void merge2() {' - line 100", "'@Test public void merge3() {' - line 117", "'public void retainAll1() {' - line 134", "'public void retainAll2() {' - line 150", "'public void retainAll3() {' - line 166", "'public void removeAll1() {' - line 177", "'public void removeAll2() {' - line 193", "'public void removeAll3() {' - line 209", "'@Test public void deserialize() throws Exception {' - line 218", "'@Test public void loadFingerprintWithoutUsages() throws Exception {' - line 229", "'@Test public void fromString() {' - line 236", "'private void expectIAE(final String expr, final String msg) {' - line 490"]}, "RunActionTest.java": {"METHODS": ["'public void badSerialization() throws Throwable {' - line 45"]}, "ExecutorTest.java": {"METHODS": ["'public void whenAnExecutorDiesHardANewExecutorTakesItsPlace() throws Exception {' - line 42", "'private void waitUntilExecutorSizeIs(Computer c, int executorCollectionSize) throws InterruptedException {' - line 63", "'private Executor getExecutorByNumber(Computer c, int executorNumber) {' - line 71", "'public void abortCause() throws Exception {' - line 84", "'new UserInterruption(johnny),   // test the merge semantics' - line 91", "'new UserInterruption(johnny));' - line 92", "'public void disconnectCause() throws Exception {' - line 105", "'public void apiPermissions() throws Exception {' - line 126", "'public void disconnectCause_WithoutTrace() throws Exception {' - line 163", "'public static FreeStyleBuild startBlockingBuild(FreeStyleProject project) throws Exception {' - line 189", "'private BlockingBuilder(OneShotEvent e) {' - line 204", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 209"]}, "DisplayNameTest.java": {"METHODS": ["'public void testRenameJobWithNoDisplayName() throws Exception {' - line 45", "'public void testRenameJobWithDisplayName() throws Exception {' - line 56", "'public void testCopyJobWithNoDisplayName() throws Exception {' - line 70", "'public void testCopyJobWithDisplayName() throws Exception {' - line 83", "'@Test public void copyJobWithDisplayNameToDifferentFolder() throws Exception {' - line 98"]}, "DescriptorTest.java": {"METHODS": ["'@Test public void getItemTypeDescriptorOrDie() {' - line 59", "'@Test public void overriddenId() throws Exception {' - line 70", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 95", "'@Override public Descriptor<Builder> getDescriptor() {' - line 100", "'@Override public String getId() {' - line 113", "'@Override public Builder newInstance(StaplerRequest req, JSONObject formData) {' - line 117", "'@Override public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 121", "'@Test public void nestedDescribableOverridingId() throws Exception {' - line 130", "'@Override public String toString() {' - line 138", "'return getDescriptor().getDisplayName();' - line 139", "'@Override public String getId() {' - line 147", "'@Override public String getId() {' - line 157", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 170", "'@Test public void nestedDescribableSharingClass() throws Exception {' - line 180", "'@Override public String toString() {' - line 194", "'@Override public Descriptor<D3> getDescriptor() {' - line 198", "'public D3D(String id) {' - line 206", "'@Override public String getId() {' - line 211", "'@Override public D3 newInstance(StaplerRequest req, JSONObject formData) {' - line 215", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 230", "'public void presentStacktraceFromFormException() {' - line 239"]}, "FingerprintCleanupThreadTest.java": {"METHODS": ["'public void testDoesNotLogUnimportantExcessiveLogMessage() throws IOException {' - line 68", "'public void testFingerprintFileIsEmpty() throws IOException {' - line 79", "'public void testGetRecurrencePeriod() {' - line 90", "'public void testNoFingerprintsDir() throws IOException {' - line 96", "'public void testBlockingFacetBlocksDeletion() throws IOException {' - line 107", "'public void testUnblockedFacetsDontBlockDeletion() throws IOException {' - line 122", "'public void testExternalStorageCleanupWithoutLocalFingerprints() throws IOException {' - line 136", "'public void testExternalStorageCleanupWithLocalFingerprints() throws IOException {' - line 152", "'new Fingerprint((Run) null, \"foo.jar\", Util.fromHexString(localFingerprintId));' - line 156", "'new Fingerprint((Run) null, \"bar.jar\", Util.fromHexString(externalFingerprintId));' - line 160", "'public void shouldNotCleanFingerprintsWhenDisabled() throws IOException {' - line 173", "'new Fingerprint((Run) null, \"foo.jar\", Util.fromHexString(localFingerprintId));' - line 179", "'new Fingerprint((Run) null, \"bar.jar\", Util.fromHexString(externalFingerprintId));' - line 183", "'private void configureLocalTestStorage(Fingerprint fingerprint) {' - line 195", "'private void configureExternalTestStorage() {' - line 199", "'private void createFolderStructure() throws IOException {' - line 203", "'private void createTestDir() throws IOException {' - line 215", "'public PrintStream getLogger() {' - line 227", "'protected Fingerprint getFingerprint(Fingerprint fp) {' - line 242", "'protected File getRootDir() {' - line 247", "'protected Fingerprint loadFingerprint(File fingerprintFile) {' - line 252", "'public boolean isReady() {' - line 257", "'public String getDisplayName() {' - line 266", "'public TestFingperprintFacet(Fingerprint fingerprint, long timestamp, boolean deletionBlocked) {' - line 278", "'@Override public boolean isFingerprintDeletionBlocked() {' - line 283", "'public void save(Fingerprint fp) {' - line 313", "'public Fingerprint load(String id) {' - line 318", "'public void delete(String id) {' - line 323", "'public boolean isReady() {' - line 328", "'public void iterateAndCleanupFingerprints(TaskListener taskListener) {' - line 333", "'protected Fingerprint getFingerprint(Fingerprint fp) {' - line 340", "'public String getDisplayName() {' - line 349"]}, "AsynchPeopleTest.java": {"METHODS": ["'@Test public void display() throws Exception {' - line 43"]}, "FreeStyleProjectTest.java": {"METHODS": ["'public void configSubmission() throws Exception {' - line 82", "'public void customWorkspaceAllocation() throws Exception {' - line 106", "'public void customWorkspaceVariableExpansion() throws Exception {' - line 117", "'public void minimalConfigXml() throws Exception {' - line 131", "'public void buildStabilityReports() throws Exception {' - line 153", "'public void configDotXmlWithValidXmlAndBadField() throws Exception {' - line 177", "'public void submitPossibleWithoutJellyTrace() throws Exception {' - line 222", "'public void submitPossibleWithJellyTrace() throws Exception {' - line 236", "'public void cannotCreateJobWithTrailingDot_withoutOtherJob() throws Exception {' - line 254", "'public void cannotCreateJobWithTrailingDot_withExistingJob() throws Exception {' - line 266", "'@Test public void cannotCreateJobWithTrailingDot_exceptIfEscapeHatchIsSet() throws Exception {' - line 279"]}, "ViewJobTest.java": {"METHODS": ["'@Test public void removeRun() throws Exception {' - line 42", "'public J(ItemGroup parent, String name) {' - line 54", "'@Override protected void reload() {' - line 58", "'@Override public TopLevelItemDescriptor getDescriptor() {' - line 62", "'@Override public TopLevelItem newInstance(ItemGroup parent, String name) {' - line 68", "'R nue() throws IOException {' - line 74", "'public R(J j) throws IOException {' - line 85", "'public R(J j, File d) throws IOException {' - line 89"]}, "AbortedFreeStyleBuildTest.java": {"METHODS": ["'public void buildWrapperSeesAbortedStatus() throws Exception {' - line 19", "'public void interruptAsFailure() throws Exception {' - line 30", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException {' - line 36", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException {' - line 47"]}, "UserRestartTest.java": {"METHODS": ["'@Test public void persistedUsers() throws Throwable {' - line 50", "'public void badSerialization() throws Throwable {' - line 68", "'public void legacyConfigMoveCannotEscapeUserFolder() throws Throwable {' - line 105", "'private String base64(String login, String password) {' - line 143"]}, "JobPropertyTest.java": {"METHODS": ["'public void jobPropertySummaryIsShownInMatrixProjectIndexPage() throws Exception {' - line 55", "'public void jobPropertySummaryIsShownInFreeStyleProjectIndexPage() throws Exception {' - line 61", "'private void assertJobPropertySummaryIsShownInIndexPage(Class<? extends TopLevelItem> type) throws Exception {' - line 65", "'public JobPropertyImpl(String propertyString) {' - line 77", "'public String getPropertyString() {' - line 81", "'public boolean isApplicable(Class<? extends Job> jobType) {' - line 89", "'public void configRoundtrip() throws Exception {' - line 99", "'public JobPropertyWithConfigImpl(String name) {' - line 119", "'public void invisibleProperty() throws Exception {' - line 134"]}, "LoadPredictorTest.java": {"METHODS": ["'public Iterable<FutureLoad> predict(MappingWorksheet plan, Computer computer, long start, long end) {' - line 61", "'public void test1() throws Exception {' - line 75", "'private BuildableItem wrap(Queue.Task t) {' - line 91", "'private JobOffer createMockOffer(Executor e) {' - line 95", "'private Computer createMockComputer(int nExecutors) throws Exception {' - line 101"]}, "BuildKeepsRunningWhenFaultySubTasksTest.java": {"METHODS": ["'public void buildFinishesWhenSubTaskFails() throws Exception {' - line 68", "'public SubTask getParent() {' - line 88", "'public void run() {' - line 93", "'public long getEstimatedDuration() {' - line 98", "'public Label getAssignedLabel() {' - line 105", "'public Node getLastBuiltOn() {' - line 110", "'public long getEstimatedDuration() {' - line 115", "'public Object getSameNodeConstraint() {' - line 125", "'public ResourceList getResourceList() {' - line 130", "'public String getDisplayName() {' - line 135"]}, "WideExecutionTest.java": {"METHODS": ["'public Executable createExecutable() {' - line 59", "'public SubTask getParent() {' - line 62", "'public void run() {' - line 67", "'public long getEstimatedDuration() {' - line 78", "'public Task getOwnerTask() {' - line 85", "'public String getDisplayName() {' - line 90", "'public void run() throws Exception {' - line 98"]}, "QueueTaskDispatcherTest.java": {"METHODS": ["'public void canRunBlockageIsDisplayed() throws Exception {' - line 32", "'public CauseOfBlockage canRun(Item item) {' - line 47", "'public String getShortDescription() {' - line 50", "'public void canTakeBlockageIsDisplayed() throws Exception {' - line 59", "'public CauseOfBlockage canTake(Node node, Queue.BuildableItem item) {' - line 82", "'public String getShortDescription() {' - line 85"]}, "MaintainCanTakeStrengtheningTest.java": {"METHODS": ["'private QueueTaskFuture scheduleBuild(String name, String label) throws Exception {' - line 28", "'public void testExceptionOnNodeProperty() throws Exception {' - line 37", "'public CauseOfBlockage canTake(Queue.BuildableItem item) {' - line 70"]}, "ItemListenerTest.java": {"METHODS": ["'public void setUp() {' - line 51", "'@Override public void onCreated(Item item) {' - line 53", "'@Override public void onCopied(Item src, Item item) {' - line 57", "'public void onCreatedViaCLI() {' - line 65"]}, "LabelExpressionTest.java": {"METHODS": ["'public void queueBehavior1() throws Exception {' - line 72", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException {' - line 82", "'public void queueBehavior2() throws Exception {' - line 124", "'public void setLabelString() throws Exception {' - line 146", "'public void parser1() throws Exception {' - line 160", "'public void parser2() throws Exception {' - line 179", "'private void parseAndVerify(String expected, String expr) {' - line 183", "'public void parserError() {' - line 188", "'public void laxParsing() {' - line 201", "'public void dataCompatibilityWithHostNameWithWhitespace() throws Exception {' - line 209", "'public void quote() {' - line 234", "'public void composite() {' - line 247", "'public void dash() {' - line 255", "'public void expression_atom_simple() throws Exception {' - line 260", "'public void expression_atom_simpleLonger() throws Exception {' - line 266", "'public void expression_atom_withDash() throws Exception {' - line 272", "'public void expression_atom_withDashes() throws Exception {' - line 279", "'public void expression_atom_doubleDash() throws Exception {' - line 286", "'public void expression_atom_dashBeforeImplies() throws Exception {' - line 292", "'public void expression_atom_dashAfterImplies() throws Exception {' - line 298", "'public void expression_atom_justDash() throws Exception {' - line 304", "'public void expression_atom_dashBefore() throws Exception {' - line 310", "'public void expression_atom_dashAround() throws Exception {' - line 316", "'public void expression_implies() throws Exception {' - line 321", "'public void expression_implies_withoutSpaces() throws Exception {' - line 328", "'public void expression_and() throws Exception {' - line 334", "'public void expression_and_withoutSpaces() throws Exception {' - line 340", "'private void parseShouldFail(String expr, String message) {' - line 345", "'public void formValidation() throws Exception {' - line 355", "'public void parseLabel() {' - line 371"]}, "LabelAtomPropertyTest.java": {"METHODS": ["'public LabelAtomPropertyImpl(String abc) {' - line 47", "'public void configRoundtrip() throws Exception {' - line 59"]}, "LabelAtomSecurity1986Test.java": {"METHODS": ["'public void nonexisting() {' - line 48", "'public void normal() throws Exception {' - line 55", "'public void startsWithDoubleDotSlash() {' - line 65", "'public void startsWithSlash() throws Exception {' - line 74", "'public void startsWithDoubleDot() throws Exception {' - line 84", "'public void endsWithDoubleDotSlash() {' - line 94", "'public void endsWithDoubleDot() throws Exception {' - line 103", "'public void startsWithDoubleDotBackslash() {' - line 113", "'public void endsWithDoubleDotBackslash() {' - line 123", "'public void middleDotsSlashes() {' - line 133", "'public void middleDotsBackslashes() {' - line 143", "'public void programmaticCreationInvalidName() {' - line 153", "'public void programmaticCreation() throws IOException {' - line 159", "'public void startsWithTripleDotBackslash() {' - line 170"]}, "LabelAtomTest.java": {"METHODS": ["'public void selfLabel() throws Exception {' - line 22", "'public void getNodes() throws Exception {' - line 33", "'public void getClouds() {' - line 48", "'public void isEmpty() throws Exception {' - line 59", "'public boolean canProvision(CloudState s) {' - line 84"]}, "HistoryWidgetTest.java": {"METHODS": ["'public void moreLink() throws Exception {' - line 20", "'public void displayFilterInput() throws Exception {' - line 32"]}, "TriggerStartTest.java": {"METHODS": ["'@Test public void loadCallsStartFalse() throws Exception {' - line 53", "'@Test public void submitCallsStartTrue() throws Exception {' - line 64", "'@Test public void updateByXmlCallsStartTrue() throws Exception {' - line 75", "'@Test public void createProjectFromXmlCallsStartTrue() throws Exception {' - line 86", "'new ByteArrayInputStream((\"<project>\\n  <builders/>\\n  <publishers/>\\n  <buildWrappers/>\\n\" + triggersSection() + \"</project>\").getBytes(StandardCharsets.UTF_8)));' - line 89", "'@Test public void copyCallsStartTrue() throws Exception {' - line 95", "'private String triggersSection() {' - line 106", "'@Override public void start(Item project, boolean newInstance) {' - line 117", "'@Override protected Object readResolve() throws ObjectStreamException {' - line 122", "'@Override public boolean isApplicable(Item item) {' - line 130"]}, "SCMTriggerTest.java": {"METHODS": ["'public void testNoNPE() throws Exception {' - line 35"]}, "SafeTimerTaskTest.java": {"METHODS": ["'public void tearDown() {' - line 30", "'public void changeLogsRoot() throws Exception {' - line 36", "'public LogSpammer() {' - line 59", "'protected void execute(TaskListener listener) {' - line 64", "'public long getRecurrencePeriod() {' - line 69"]}, "InitMilestoneTest.java": {"METHODS": ["'public void testInitMilestones() {' - line 20", "'public void extensionsAugmented() {' - line 40", "'public void pluginsSystemConfigLoaded() {' - line 45", "'public void pluginsSystemConfigAdapted() {' - line 50", "'public void jobLoaded() {' - line 55", "'public void jobConfigAdapted() {' - line 60", "'public List<InitMilestone> getAttained() {' - line 64"]}, "GroovyInitScriptTest.java": {"METHODS": ["'@Test public void errorsHandled() {' - line 40"]}, "AnnotatedLargeTextTest.java": {"METHODS": ["'public void smokes() throws Exception {' - line 57", "'public void oldDeserialization() throws Exception {' - line 74", "'public void badMac() throws Exception {' - line 112", "'static String encodeTo(String url, String text) throws IOException {' - line 156"]}, "UrlAnnotatorTest.java": {"METHODS": ["'public void testAnnotate() {' - line 40", "'public void annotateFileScheme() {' - line 62", "'private String annotate(String plain) {' - line 69"]}, "HyperlinkNoteTest.java": {"METHODS": ["'public void textWithNewlines() throws Exception {' - line 52", "'public void textWithNewlinesModelHyperlinkNote() throws Exception {' - line 66", "'public void textWithSingleQuote() throws Exception {' - line 80", "'private static String annotate(String text) throws IOException {' - line 92"]}, "ConsoleAnnotatorTest.java": {"METHODS": ["'@Test public void completedStatelessLogAnnotation() throws Exception {' - line 57", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 61", "'public ConsoleAnnotator<FreeStyleBuild> newInstance(FreeStyleBuild context) {' - line 92", "'public ConsoleAnnotator<FreeStyleBuild> annotate(FreeStyleBuild build, MarkupText text) {' - line 101", "'@Test public void consoleAnnotationFilterOut() throws Exception {' - line 111", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 115", "'String next() throws IOException {' - line 150", "'@Test public void progressiveOutput() throws Exception {' - line 170", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException {' - line 176", "'public ConsoleAnnotator newInstance(Object context) {' - line 212", "'public ConsoleAnnotator annotate(Object build, MarkupText text) {' - line 221", "'@Test public void consoleAnnotation() throws Exception {' - line 232", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 238", "'public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {' - line 283", "'@Test public void scriptInclusion() throws Exception {' - line 296", "'public ConsoleAnnotator annotate(Object build, MarkupText text, int charPos) {' - line 314", "'public ConsoleAnnotator newInstance(Object context) {' - line 325", "'@Test public void escape() throws Exception {' - line 335", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 339", "'@Test public void pollingOutput() throws Exception {' - line 357", "'public PollingSCM() throws UnsupportedEncodingException {' - line 375", "'protected PollingResult compareRemoteRevisionWith(AbstractProject project, Launcher launcher, FilePath workspace, TaskListener listener, SCMRevisionState baseline) throws IOException {' - line 380", "'public DescriptorImpl() {' - line 388"]}, "ExceptionAnnotationTest.java": {"METHODS": ["'void test(JenkinsRule j) throws Exception {' - line 19", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 23", "'new Throwable().printStackTrace(listener.error(\"Injecting a failure\"));' - line 24"]}, "ConsoleLogFilterTest.java": {"METHODS": ["'@Test public void decorateSlaveLog() throws Exception {' - line 27", "'public OutputStream decorateLogger(Run build, OutputStream logger) {' - line 36", "'public OutputStream decorateLogger(final Computer c, OutputStream out) {' - line 41", "'protected void eol(byte[] b, int len) throws IOException {' - line 44"]}, "JnlpAccessWithSecuredHudsonTest.java": {"METHODS": ["'public void anonymousCanAlwaysLoadJARs() throws Exception {' - line 67", "'public void anonymousCannotGetSecrets() throws Exception {' - line 91", "'public void serviceUsingDirectSecret() throws Exception {' - line 98"]}, "DateConversionTest.java": {"METHODS": ["'public void test() throws Exception {' - line 45"]}, "LoginRedirectTest.java": {"METHODS": ["'public void redirect1() throws Exception {' - line 55", "'public void redirect2() throws Exception {' - line 75"]}, "package-info.java": {"METHODS": []}, "SlaveComputerTest.java": {"METHODS": ["'public void testAgentLogs() throws Exception {' - line 64", "'public void testGetAbsoluteRemotePath() throws Exception {' - line 74", "'public void startupShouldNotFailOnExceptionOnlineListener() throws Exception {' - line 106", "'public void onOnline(Computer c, TaskListener listener) throws IOException {' - line 137", "'public void onOnline(Computer c, TaskListener listener) {' - line 151", "'public void startupShouldFailOnErrorOnlineListener() throws Exception {' - line 161", "'public void onOnline(Computer c, TaskListener listener) {' - line 185", "'private String getRemoteFS(Node node, String user) throws Exception {' - line 202"]}, "NodePropertyTest.java": {"METHODS": ["'public void invisibleProperty() throws Exception {' - line 35", "'public void basicConfigRoundtrip() throws Exception {' - line 64", "'public PropertyImpl(String name) {' - line 84"]}, "EnvironmentVariableNodePropertyTest.java": {"METHODS": ["'public void testAgentPropertyOnAgent() throws Exception {' - line 44", "'public void testControllerPropertyOnBuiltInNode() throws Exception {' - line 54", "'public void testAgentAndControllerPropertyOnAgent() throws Exception {' - line 68", "'public void testAgentAndBuiltInNodePropertyAndParameterOnAgent()' - line 85", "'new StringParameterDefinition(\"KEY\", \"parameterValue\"));' - line 88", "'public void testVariableResolving() throws Exception {' - line 100", "'public void testFormRoundTripForController() throws Exception {' - line 110", "'public void testFormRoundTripForAgent() throws Exception {' - line 128", "'public void setUp() throws Exception {' - line 146", "'private void setVariables(Node node, EnvironmentVariablesNodeProperty.Entry... entries) throws IOException {' - line 153"]}, "NodeProvisionerTest.java": {"METHODS": ["'public void setUp() {' - line 84", "'void block() throws InterruptedException {' - line 107", "'public Builder createBuilder() {' - line 115", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException {' - line 118", "'@Test public void autoProvision() throws Throwable {' - line 130", "'private static void _autoProvision(JenkinsRule r) throws Exception {' - line 135", "'@Test public void loadSpike() throws Throwable {' - line 153", "'private static void _loadSpike(JenkinsRule r) throws Exception {' - line 158", "'@Test public void baselineSlaveUsage() throws Throwable {' - line 175", "'private static void _baselineSlaveUsage(JenkinsRule r) throws Exception {' - line 180", "'@Test public void labels() throws Throwable {' - line 199", "'private static void _labels(JenkinsRule r) throws Exception {' - line 204", "'public void flyweightTasksWithoutMasterExecutors() throws Throwable {' - line 237", "'private static void _flyweightTasksWithoutMasterExecutors(JenkinsRule r) throws Exception {' - line 242", "'public void shouldRunFlyweightTaskOnProvisionedNodeWhenNodeRestricted() throws Throwable {' - line 269", "'private static void _shouldRunFlyweightTaskOnProvisionedNodeWhenNodeRestricted(JenkinsRule r) throws Exception {' - line 274", "'public void testJobWithCloudLabelExpressionProvisionsOnlyOneAgent() throws Throwable {' - line 288", "'private static void _testJobWithCloudLabelExpressionProvisionsOnlyOneAgent(JenkinsRule r) throws Exception {' - line 293", "'public boolean canProvision(Label label) {' - line 345", "'private Launcher() {}' - line 352", "'public Node call() throws Exception {' - line 355", "'public Descriptor<Cloud> getDescriptor() {' - line 364", "'private static FreeStyleProject createJob(Builder builder, JenkinsRule r) throws IOException {' - line 370", "'private static DummyCloudImpl initHudson(int delay, JenkinsRule r) throws IOException {' - line 377", "'private static List<FreeStyleProject> create5SlowJobs(Latch l, JenkinsRule r) throws IOException {' - line 397", "'private static List<Future<FreeStyleBuild>> buildAll(List<FreeStyleProject> jobs) {' - line 409", "'private static void verifySuccessfulCompletion(List<Future<FreeStyleBuild>> builds, JenkinsRule r) throws Exception {' - line 417"]}, "NodeParallelTest.java": {"METHODS": ["'public void createNodesWithParallelThreads() throws InterruptedException, ExecutionException {' - line 36"]}, "CloudTest.java": {"METHODS": ["'public void provisionPermissionShouldBeIndependentFromAdminister() {' - line 37", "'@Override protected Boolean hasPermission(Sid p, Permission permission) {' - line 39", "'public void ensureProvisionPermissionIsLoadable() {' - line 50", "'public void ui() throws Exception {' - line 57", "'public void cloudNameIsEncodedInGetUrl() {' - line 81", "'protected ACloud(String name, String instanceCapStr) {' - line 89", "'@Override public boolean canProvision(Label label) {' - line 97", "'@Override public Class<Cloud> type() {' - line 105", "'@Override public String getIconFileName() {' - line 117", "'@Override public String getDisplayName() {' - line 121", "'@Override public String getUrlName() {' - line 125", "'public void doIndex(StaplerResponse rsp) throws IOException {' - line 129", "'@Override public String getIconFileName() {' - line 137", "'@Override public String getDisplayName() {' - line 141", "'@Override public String getUrlName() {' - line 145"]}, "JNLPLauncherTest.java": {"METHODS": ["'public void testLaunch() throws Exception {' - line 78", "'public void testLaunchWithWorkDir() throws Exception {' - line 88", "'public void testNoWorkDirMigration() {' - line 99", "'public void testDefaults() {' - line 116", "'public void testDelegatingComputerLauncher() throws Exception {' - line 122", "'public void testComputerLauncherFilter() throws Exception {' - line 134", "'private ArgumentListBuilder buildJnlpArgs(Computer c) throws Exception {' - line 156", "'private void launchJnlpAndVerify(Computer c, ArgumentListBuilder args) throws Exception {' - line 176", "'private Computer addTestAgent(boolean enableWorkDir) throws Exception {' - line 206", "'return addTestAgent(new JNLPLauncher(enableWorkDir));' - line 207", "'private Computer addTestAgent(ComputerLauncher launcher) throws Exception {' - line 213", "'public String call() {' - line 226", "'public void testConfigRoundtrip() throws Exception {' - line 234", "'public void testJnlpFileDownload() throws Exception {' - line 248", "'public void testObsoletedJnlpFileDownload() throws Exception {' - line 253", "'private void assertJnlpFileDownload(String filename) throws Exception {' - line 257"]}, "NodeCanTakeTaskTest.java": {"METHODS": ["'public void takeBlockedByProperty() throws Exception {' - line 54", "'public CauseOfBlockage canTake(BuildableItem item) {' - line 79", "'public String getShortDescription() {' - line 82", "'public void becauseNodeIsBusy() throws Exception {' - line 90"]}, "JNLPLauncherRealTest.java": {"METHODS": ["'@Test public void smokes() throws Throwable {' - line 57", "'@Test public void webSocket() throws Throwable {' - line 68", "'private void then(boolean websocket) throws Throwable {' - line 72", "'public void run(JenkinsRule r) throws Throwable {' - line 96"]}, "PingThreadTest.java": {"METHODS": ["'public void failedPingThreadResetsComputerChannel() throws Exception {' - line 61", "'private static void kill(long pid, String signal, char expectedState)' - line 116", "'new ProcessBuilder(\"kill\", signal, Long.toString(pid))' - line 119", "'@Override public Long call() {' - line 145"]}, "AgentInboundUrlTest.java": {"METHODS": ["'public void testInboundAgentUrlOverride() throws Exception {' - line 65"]}, "SystemConfigurationTestCase.java": {"METHODS": ["'public void tearDown() {' - line 47", "'public void pageDecoratorIsListedInPage() throws Exception {' - line 55", "'public boolean configure(StaplerRequest req, JSONObject json) {' - line 72", "'public String getDecoratorId() {' - line 77"]}, "ACLTest.java": {"METHODS": ["'public void bypassStrategyOnSystem() throws Exception {' - line 60", "'public void checkAnyPermissionPassedIfOneIsValid() {' - line 72", "'public void checkAnyPermissionThrowsIfPermissionIsMissing() {' - line 86", "'public void checkAnyPermissionThrowsIfMissingMoreThanOne() {' - line 103", "'public void checkAnyPermissionDoesNotShowDisabledPermissionsInError() {' - line 121", "'public void checkAnyPermissionShouldShowDisabledPermissionsIfNotImplied() {' - line 139", "'public void hasAnyPermissionThrowsIfNoPermissionProvided() {' - line 156", "'public void checkAnyPermissionThrowsIfNoPermissionProvided() {' - line 161", "'public void checkAnyPermissionOnNonAccessControlled() throws Exception {' - line 167", "'public ACL getRootACL() {' - line 186", "'public boolean hasPermission2(Authentication a, Permission permission) {' - line 189", "'public ACL getACL(Job<?, ?> project) {' - line 196", "'public Collection<String> getGroups() {' - line 202", "'public String getIconFileName() {' - line 213", "'public String getDisplayName() {' - line 219", "'public String getUrlName() {' - line 225"]}, "ExtendedReadPermissionTest.java": {"METHODS": ["'@BeforeClass public static void saveEnabled() {' - line 29", "'@AfterClass public static void restoreEnabled() {' - line 34", "'@Before public void security() throws Exception {' - line 38", "'private void setPermissionEnabled(boolean enabled) {' - line 48", "'@Test public void readOnlyConfigAccessWithPermissionEnabled() throws Exception {' - line 52", "'@Test public void readOnlyConfigAccessWithPermissionDisabled() throws Exception {' - line 68", "'@Test public void noConfigAccessWithPermissionEnabled() throws Exception {' - line 77"]}, "HudsonPrivateSecurityRealmSEC2566Test.java": {"METHODS": ["'public void linkExtension() {' - line 26", "'public void setup() throws Exception {' - line 31", "'public void noTimingDifferenceForInternalSecurityRealm() throws Exception {' - line 40"]}, "PermissionGroupTest.java": {"METHODS": ["'@Test public void order() {' - line 45", "'@Test public void duplicatedGroups() {' - line 50", "'@Test public void duplicatedPermissions() {' - line 55"]}, "WhoAmITest.java": {"METHODS": ["'public void whoAmI_regular_doesNotProvideSensitiveInformation() throws Exception {' - line 61", "'public void whoAmI_regularApi_doesNotProvideSensitiveInformation() throws Exception {' - line 102", "'public void whoAmI_basic_doesNotProvideSensitiveInformation() throws Exception {' - line 146", "'public void whoAmI_apiToken_doesNotProvideSensitiveInformation() throws Exception {' - line 176", "'protected UserDetails authenticate2(String username, String password) throws AuthenticationException {' - line 208", "'return createUserDetails(username);' - line 209", "'@Override public UserDetails loadUserByUsername2(String username) throws UsernameNotFoundException {' - line 212", "'return createUserDetails(username);' - line 213", "'@Override public GroupDetails loadGroupByGroupname2(String groupname, boolean fetchMembers) throws UsernameNotFoundException {' - line 216", "'private UserDetails createUserDetails(String username) {' - line 220", "'@Override public String getUsername() {' - line 223", "'public String toString() {' - line 228", "'@Override public String getPassword() {' - line 236", "'@Override public boolean isAccountNonExpired() {' - line 240", "'@Override public boolean isAccountNonLocked() {' - line 244", "'@Override public boolean isCredentialsNonExpired() {' - line 248", "'@Override public boolean isEnabled() {' - line 252"]}, "TokenBasedRememberMeServices2Test.java": {"METHODS": ["'public void resetFailureInduced() {' - line 49", "'public void rememberMeAutoLoginFailure() throws Exception {' - line 54", "'private Cookie getRememberMeCookie(JenkinsRule.WebClient wc) {' - line 78", "'protected UserDetails authenticate2(String username, String password) throws AuthenticationException {' - line 84", "'public GroupDetails loadGroupByGroupname2(String groupname, boolean fetchMembers) throws UsernameNotFoundException {' - line 92", "'public UserDetails loadUserByUsername2(String username) throws UsernameNotFoundException {' - line 97", "'public void basicFlow() throws Exception {' - line 104", "'public UserDetails loadUserByUsername2(String username) throws UsernameNotFoundException {' - line 134", "'public void rememberMeToken_invalid_afterUserSeedReset() throws Exception {' - line 143", "'public void rememberMeToken_stillValid_afterUserSeedReset_ifUserSeedDisabled() throws Exception {' - line 169", "'public void rememberMeToken_shouldNotAccept_expirationDurationLargerThanConfigured() throws Exception {' - line 202", "'public void rememberMeToken_skipExpirationCheck() throws Exception {' - line 241", "'public void rememberMeToken_shouldLoadUserDetailsOnlyOnce() throws Exception {' - line 287", "'private Cookie createRememberMeCookie(TokenBasedRememberMeServices2 tokenService, long deltaDuration, hudson.model.User user) throws Exception {' - line 329", "'private void assertUserConnected(JenkinsRule.WebClient wc, String expectedUsername) throws Exception {' - line 343", "'private void assertUserNotConnected(JenkinsRule.WebClient wc, String notExpectedUsername) throws Exception {' - line 348", "'public void rememberMeToken_shouldNotBeRead_ifOptionIsDisabled() throws Exception {' - line 355"]}, "HudsonPrivateSecurityRealmTest.java": {"METHODS": ["'public void linkExtension() {' - line 84", "'public void setup() throws Exception {' - line 89", "'public void fullNameCollisionPassword() throws Exception {' - line 97", "'public void fullNameCollisionToken() throws Exception {' - line 144", "'private static String basicHeader(String user, String pass) {' - line 188", "'public void signup() throws Exception {' - line 195", "'public void anonymousCantSignup() throws Exception {' - line 215", "'public void systemCantSignup() throws Exception {' - line 231", "'public void fullNameOfUnknownCantSignup() throws Exception {' - line 250", "'public void selfRegistrationTriggerLoggedIn() throws Exception {' - line 266", "'public void selfRegistrationTriggerUserCreation() throws Exception {' - line 286", "'public void userCreationFromRealm() throws Exception {' - line 302", "'public void userCreationWithHashedPasswords() throws Exception {' - line 323", "'private void createFirstAccount(String login) throws Exception {' - line 335", "'new NameValuePair(\"username\", login),' - line 348", "'new NameValuePair(\"password1\", login),' - line 349", "'new NameValuePair(\"password2\", login),' - line 350", "'new NameValuePair(\"fullname\", StringUtils.capitalize(login)),' - line 351", "'new NameValuePair(\"email\", login + \"@\" + login + \".com\")' - line 352", "'private void createAccountByAdmin(String login) throws Exception {' - line 362", "'private void selfRegistration(String login) throws Exception {' - line 390", "'protected void loggedIn(@NonNull String username) {' - line 414", "'protected void userCreated(@NonNull String username) { createdUsers.add(username); }' - line 419", "'public void controlCharacterAreNoMoreValid() throws Exception {' - line 424", "'public void controlCharacterAreNoMoreValid_CustomRegex() throws Exception {' - line 460", "'public void createAccountSupportsHashedPasswords() throws Exception {' - line 501", "'public void createAccountWithHashedPasswordRequiresPrefix() {' - line 516", "'public void hashedPasswordTest() {' - line 523", "'public void ensureHashingVersion_2a_isSupported() {' - line 547", "'public void ensureHashingVersion_2x_isNotSupported() {' - line 552", "'public void ensureHashingVersion_2y_isNotSupported() {' - line 557", "'private void checkUserCanBeCreatedWith(HudsonPrivateSecurityRealm securityRealm, String id, String password, String fullName, String email) throws Exception {' - line 561", "'private void checkUserCannotBeCreatedWith(HudsonPrivateSecurityRealm securityRealm, String id, String password, String fullName, String email) throws Exception {' - line 572", "'private void checkUserCannotBeCreatedWith_custom(HudsonPrivateSecurityRealm securityRealm, String id, String password, String fullName, String email, String regex) throws Exception {' - line 584", "'public void singupNoLongerVulnerableToSessionFixation() throws Exception {' - line 598", "'public void changingPassword_mustInvalidateAllSessions() throws Exception {' - line 627", "'public void notChangingPassword_hasNoImpactOnSeed() throws Exception {' - line 659", "'public void changingPassword_withSeedDisable_hasNoImpact() throws Exception {' - line 686", "'private User prepareRealmAndAlice() throws Exception {' - line 719", "'private void assertUserConnected(JenkinsRule.WebClient wc, String expectedUsername) throws Exception {' - line 727", "'private void assertUserNotConnected(JenkinsRule.WebClient wc, String notExpectedUsername) throws Exception {' - line 732"]}, "LoginTest.java": {"METHODS": ["'public void loginErrorRedirect1() throws Exception {' - line 39", "'private void verifyNotError(WebClient wc) throws IOException, SAXException {' - line 43", "'public void loginErrorRedirect2() throws Exception {' - line 55", "'public void loginError() throws Exception {' - line 64", "'private HtmlForm prepareLoginFormWithRememberMeChecked(WebClient wc) throws IOException, org.xml.sax.SAXException {' - line 77", "'private Object getRememberMeCookie(WebClient wc) {' - line 91", "'public void loginRememberMe() throws Exception {' - line 100", "'public void loginDisabledRememberMe() throws Exception {' - line 114"]}, "AccessDeniedException3Test.java": {"METHODS": ["'public void youAreInGroupHeaders() {' - line 53", "'public void redirectPermissionErrorsToLogin() throws Exception {' - line 69", "'public void captureException() throws Exception {' - line 87", "'public String getUrlName() {' - line 103", "'public HttpResponse doAccessDeniedException3() {' - line 107", "'public HttpResponse doAccessDeniedException2() {' - line 112"]}, "SecurityRealmTest.java": {"METHODS": ["'public void testCacheHeaderInResponse() throws Exception {' - line 60", "'public boolean validateCaptcha(String id, String text) {' - line 82", "'public void generateImage(String id, OutputStream ios) {' - line 87", "'static void addSessionCookie(CookieManager manager, String domain, String path, Date date) {' - line 91", "'public void many_sessions_logout() throws Exception {' - line 100", "'public void getPostLogOutUrl() throws Exception {' - line 149", "'protected String getPostLogOutUrl(StaplerRequest req, org.acegisecurity.Authentication auth) {' - line 174", "'public void submitPossibleWithoutJellyTrace() throws Exception {' - line 184", "'public void submitPossibleWithJellyTrace() throws Exception {' - line 196"]}, "SecurityRealmSecurity2371Test.java": {"METHODS": ["'public static List<Integer> modes() {' - line 56", "'public SecurityRealmSecurity2371Test(Integer mode) {' - line 60", "'public void testSessionChangeOnLogin() throws Exception {' - line 65", "'public void optOut() throws Exception {' - line 97"]}, "DefaultCrumbIssuerTest.java": {"METHODS": ["'@Before public void setIssuer() {' - line 49", "'@Test public void clientIPFromHeader() throws Exception {' - line 62", "'@Test public void headerChange() throws Exception {' - line 71", "'@Test public void proxyIPChanged() throws Exception {' - line 86", "'@Test public void proxyIPChain() throws Exception {' - line 100", "'@Test public void proxyCompatibilityMode() throws Exception {' - line 109", "'@Test public void apiXml() throws Exception {' - line 123", "'@Test public void apiJson() throws Exception {' - line 146", "'@Test public void testRequirePostErrorPageCrumb() throws Exception {' - line 160", "'public void crumbOnlyValidForOneSession() throws Exception {' - line 179", "'private void compareDifferentSessions_tokenAreEqual(boolean areEqual) throws Exception {' - line 193", "'private void replaceAllCrumbInPageBy(HtmlPage page, String newCrumb) {' - line 222", "'public void sessionIncludedEvenForAnonymousCall() throws Exception {' - line 231", "'private void sameCrumbUsedOnDifferentAnonymousRequest_tokenAreEqual(boolean areEqual, String namePrefix) throws Exception {' - line 255", "'public void twoRequestsWithoutSessionGetDifferentCrumbs() throws Exception {' - line 290", "'private WebRequest createRequestForJobCreation(String jobName) throws Exception {' - line 304", "'public void anonCanStillPostRequestUsingBrowsers() throws Exception {' - line 312", "'public void custom_notExposedToIFrame() throws Exception {' - line 328", "'private void ensureXmlIsNotExposedToIFrame(String itemUrl) throws Exception {' - line 334", "'private void ensureJsonIsNotExposedToIFrame(String itemUrl) throws Exception {' - line 339", "'private void ensurePythonIsNotExposedToIFrame(String itemUrl) throws Exception {' - line 344"]}, "CrumbExclusionTest.java": {"METHODS": ["'public void pathInfo() throws Exception {' - line 59", "'public void regular() throws Exception {' - line 81", "'public String getIconFileName() {' - line 93", "'public String getDisplayName() {' - line 99", "'public String getUrlName() {' - line 105", "'public void doIndex() {' - line 110", "'public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 119"]}, "PluginManagerOverrideTest.java": {"METHODS": ["'public void testViewOverrides() throws Exception {' - line 23"]}, "TooManyJobsButNoViewTest.java": {"METHODS": ["'@Before public void setUp() {' - line 36", "'@Test public void initialState() throws Exception {' - line 43", "'private void verifyNoForm() throws IOException, SAXException {' - line 47", "'@Test public void activated() throws Exception {' - line 55", "'public void systemReadNoViewAccessVerifyNoForm() throws Exception {' - line 78", "'private void verifyNoMonitor(JenkinsRule.WebClient wc) throws IOException, SAXException {' - line 96", "'public void systemReadVerifyForm() throws Exception {' - line 103", "'private void verifyMonitor(JenkinsRule.WebClient wc) throws IOException, SAXException {' - line 123"]}, "HudsonHomeDiskUsageMonitorTest.java": {"METHODS": ["'public void flow() throws Exception {' - line 36", "'public void noAccessForNonAdmin() throws Exception {' - line 56", "'private HtmlForm getForm(HudsonHomeDiskUsageMonitor mon) throws IOException, SAXException {' - line 100"]}, "ReverseProxySetupMonitorTest.java": {"METHODS": ["'protected JenkinsRule createJenkinsRule(Description description) {' - line 47", "'public void resetContextPath() {' - line 57", "'public void localhost_correct() {' - line 62", "'public void evaluate() throws Throwable {' - line 65", "'public void localhost_testingForContext() {' - line 76", "'public void evaluate() throws Throwable {' - line 79", "'public void localhost_withoutReferer() {' - line 93", "'public void evaluate() throws Throwable {' - line 96", "'public void localhost_withRefererNotComingFromManage() {' - line 107", "'public void evaluate() throws Throwable {' - line 110", "'public void withRootURL_localhost_missingContext() {' - line 122", "'public void evaluate() throws Throwable {' - line 125", "'public void withRootURL_localhost_wrongContext() {' - line 147", "'public void evaluate() throws Throwable {' - line 150", "'public void desiredContextPathEmpty_localhost() {' - line 170", "'public void evaluate() throws Throwable {' - line 174", "'public void usingIp_butRefererUsingRootUrl() {' - line 191", "'public void evaluate() throws Throwable {' - line 194", "'public void usingIp_withoutReferer() {' - line 205", "'public void evaluate() throws Throwable {' - line 208", "'public void usingIp_withRefererIp() {' - line 219", "'public void evaluate() throws Throwable {' - line 222", "'public void withRootURL_usingIp_withRefererIp() {' - line 237", "'public void evaluate() throws Throwable {' - line 240", "'public void withRootURL_usingIp_missingContext_withRefererIp() {' - line 255", "'public void evaluate() throws Throwable {' - line 258", "'private String getAdminMonitorTestUrl(JenkinsRule j) {' - line 280", "'private URL getRootUrlWithIp(JenkinsRule j) throws Exception {' - line 284"]}, "OldDataMonitorTest.java": {"METHODS": ["'@Test public void robustness() {' - line 66", "'@Test public void memory() throws Exception {' - line 77", "'@Test public void slowDiscard() throws InterruptedException, IOException, ExecutionException {' - line 100", "'new XmlFile(xml));' - line 126", "'@Test public void unlocatableRun() throws Exception {' - line 134", "'private Object writeReplace() {' - line 148", "'private Object readResolve() {' - line 154"]}, "ConsoleCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 60", "'@Test public void consoleShouldFailWithoutJobReadPermission() throws Exception {' - line 65", "'@Test public void consoleShouldBeAccessibleForUserWithRead() throws Exception {' - line 79", "'@Test public void consoleShouldFailWhenProjectDoesNotExist() {' - line 96", "'@Test public void consoleShouldFailWhenLastBuildDoesNotExist() throws Exception {' - line 107", "'@Test public void consoleShouldFailWhenRequestedBuildDoesNotExist() throws Exception {' - line 120", "'@Test public void consoleShouldFailWhenRequestedInvalidBuildNumber() throws Exception {' - line 133", "'@Test public void consoleShouldSuccessWithLastBuild() throws Exception {' - line 157", "'@Test public void consoleShouldSuccessWithSpecifiedBuildNumber() throws Exception {' - line 175", "'@Test public void consoleShouldSuccessWithFollow() throws Exception {' - line 195", "'@Test public void consoleShouldSuccessWithLastNLines() throws Exception {' - line 229", "'@Test public void consoleShouldSuccessWithLastNLinesAndFollow() throws Exception {' - line 250", "'@Test public void consoleShouldFailIfTheBuildIsStuckInTheQueue() throws Exception {' - line 284"]}, "SetBuildDisplayNameCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 46", "'@Test public void referencingBuildThatDoesNotExistsShouldFail() throws Exception {' - line 51", "'@Test public void setDescriptionSuccessfully() throws Exception {' - line 64"]}, "CopyJobCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 52", "'@Test public void copyBetweenFolders() throws Exception {' - line 57", "'@Test public void folderPermissions() throws Exception {' - line 71", "'@Test public void copiedJobIsBuildable() throws Exception {' - line 95", "'@Test public void cannotCopyJobWithTrailingDot_regular() throws Exception {' - line 110", "'@Test public void cannotCopyJobWithTrailingDot_exceptIfEscapeHatchIsSet() throws Exception {' - line 123"]}, "GetNodeCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 48", "'@Test public void getNodeShouldFailWithoutComputerExtendedReadPermission() throws Exception {' - line 53", "'@Test public void getNodeShouldYieldConfigXml() throws Exception {' - line 70", "'@Test public void getNodeShouldFailIfNodeDoesNotExist() {' - line 85", "'public void getNodeShouldFailForBuiltInNode() {' - line 99"]}, "ComputerStateTest.java": {"METHODS": ["'public void connect() throws Exception {' - line 57", "'public void online() throws Exception {' - line 73", "'public void disconnect() throws Exception {' - line 89", "'public void offline() throws Exception {' - line 108", "'public void testUiForConnected() throws Exception {' - line 127", "'private void assertConnected(WebClient wc, DumbSlave slave) throws Exception {' - line 153", "'private void assertLinkDoesNotExist(HtmlPage page, String text) {' - line 166"]}, "GetViewCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 49", "'@Test public void getViewShouldFailWithoutViewReadPermission() throws IOException {' - line 54", "'@Test public void getViewShouldYieldConfigXml() throws Exception {' - line 68", "'@Test public void getViewShouldFailIfViewDoesNotExist() {' - line 83"]}, "WaitNodeOnlineCommandTest.java": {"METHODS": ["'public void setUp() {' - line 55", "'public void waitNodeOnlineShouldFailIfNodeDoesNotExist() {' - line 60", "'public void waitNodeOnlineShouldSucceedOnGoingOnlineNode() throws Exception {' - line 70", "'public void waitNodeOnlineShouldTimeoutOnGoingOfflineNode() throws Exception {' - line 81", "'public void waitNodeOnlineShouldTimeoutOnDisconnectedNode() throws Exception {' - line 106", "'public void waitNodeOnlineShouldTimeoutOnDisconnectingNode() throws Exception {' - line 132", "'public void waitNodeOnlineShouldSuccessOnOnlineNode() throws Exception {' - line 157"]}, "CancelQuietDownCommandTest.java": {"METHODS": ["'public void setUp() {' - line 59", "'public void cancelQuietDownShouldFailWithoutAdministerPermission() {' - line 64", "'public void cancelQuietDownShouldSuccessOnNoQuietDownedJenkins() {' - line 74", "'public void cancelQuietDownShouldSuccessOnQuietDownedJenkins() {' - line 83", "'public void cancelQuietDownShouldResetQuietReason() throws Exception {' - line 94", "'public void cancelQuietDownShouldSuccessOnNoQuietDownedJenkinsAndRunningExecutor() throws Exception {' - line 112", "'public void cancelQuietDownShouldSuccessOnQuietDownedJenkinsAndRunningExecutor() throws Exception {' - line 142"]}, "DeleteViewCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 54", "'@Test public void deleteViewShouldFailWithoutViewDeletePermission() throws IOException {' - line 59", "'@Test public void deleteViewShouldFailWithoutViewReadPermission() throws IOException {' - line 73", "'@Test public void deleteViewShouldSucceed() throws Exception {' - line 87", "'@Test public void deleteViewShouldFailIfViewDoesNotExist() {' - line 100", "'@Test public void deleteViewShouldFailIfViewGroupDoesNotAllowDeletion() {' - line 112", "'@Test public void deleteViewShouldFailIfViewNameIsEmpty() {' - line 124", "'@Test public void deleteViewShouldFailIfViewNameIsSpace() {' - line 135", "'@Test public void deleteViewManyShouldSucceed() throws Exception {' - line 146", "'@Test public void deleteViewManyShouldFailIfFirstViewDoesNotExist() throws Exception {' - line 162", "'@Test public void deleteViewManyShouldFailIfMiddleViewDoesNotExist() throws Exception {' - line 181", "'@Test public void deleteViewManyShouldFailIfLastViewDoesNotExist() throws Exception {' - line 200", "'@Test public void deleteViewManyShouldFailIfMoreViewsDoNotExist() throws Exception {' - line 219", "'@Test public void deleteViewManyShouldSucceedEvenAViewSpecifiedTwice() throws Exception {' - line 240", "'@Test public void deleteViewManyShouldFailWithoutViewDeletePermissionButOthersShouldBeDeleted() throws Exception {' - line 254"]}, "RemoveJobFromViewCommandTest.java": {"METHODS": ["'public CLICommandInvoker getCommand() {' - line 45", "'@Test public void removeJobShouldSucceed() throws Exception {' - line 49", "'@Test public void removeJobManyShouldSucceed() throws Exception {' - line 67", "'@Test public void removeJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {' - line 89"]}, "ListJobsCommandTest.java": {"METHODS": ["'public void setUp() {' - line 39", "'public void failForNonexistentName() {' - line 46", "'public void getAllJobsForEmptyName() throws Exception {' - line 61", "'public void getJobsFromView() throws Exception {' - line 78", "'public void getJobsRecursivelyFromViewGroup() throws Exception {' - line 99", "'private View view() {' - line 127", "'private TopLevelItem job(final String name) {' - line 136", "'private int runWith(final String name) throws Exception {' - line 146", "'private TypeSafeMatcher<ByteArrayOutputStream> empty() {' - line 153", "'protected boolean matchesSafely(ByteArrayOutputStream item) {' - line 158", "'public void describeTo(Description description) {' - line 171", "'private TypeSafeMatcher<ByteArrayOutputStream> listsJobs(final String... expected) {' - line 178", "'protected boolean matchesSafely(ByteArrayOutputStream item) {' - line 183", "'public void describeTo(Description description) {' - line 199"]}, "CreateJobCommandTest.java": {"METHODS": ["'@Test public void folderPermissions() throws Exception {' - line 50", "'@Test public void cannotCreateJobWithTrailingDot_withoutOtherJob() {' - line 67", "'@Test public void cannotCreateJobWithTrailingDot_withExistingJob() {' - line 80", "'@Test public void cannotCreateJobWithTrailingDot_exceptIfEscapeHatchIsSet() {' - line 95"]}, "ClearQueueCommandTest.java": {"METHODS": ["'public void setUp() {' - line 52", "'@Test public void clearQueueShouldFailWithoutAdministerPermission() {' - line 56", "'public void clearQueueShouldSucceedOnEmptyQueue() {' - line 66", "'public void clearQueueShouldSucceed() throws Exception {' - line 77"]}, "CLITest.java": {"METHODS": ["'private void grabCliJar() throws IOException {' - line 86", "'public void interrupt() throws Exception {' - line 93", "'private void doInterrupt(FreeStyleProject p, String... modeArgs) throws Exception {' - line 104", "'public void reportNotJenkins() throws Exception {' - line 122", "'@Override public String getIconFileName() {' - line 139", "'@Override public String getDisplayName() {' - line 143", "'@Override public String getUrlName() {' - line 147", "'@Override public Object getTarget() {' - line 151", "'public void doDynamic(StaplerRequest req, StaplerResponse rsp) {' - line 156", "'public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 161", "'public void redirectToEndpointShouldBeFollowed() throws Exception {' - line 168", "'public void readInputAtOnce() throws Exception {' - line 197", "'@Override public String getIconFileName() {' - line 219", "'@Override public String getDisplayName() {' - line 223", "'@Override public String getUrlName() {' - line 227", "'@Override public Object getTarget() {' - line 231", "'throw doDynamic(Stapler.getCurrentRequest(), Stapler.getCurrentResponse());' - line 232", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException {' - line 240", "'public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 251"]}, "DeleteBuildsCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 60", "'@Test public void deleteBuildsShouldFailWithoutJobReadPermission() throws Exception {' - line 64", "'@Test public void deleteBuildsShouldFailWithoutRunDeletePermission() throws Exception {' - line 75", "'@Test public void deleteBuildsShouldFailIfJobDoesNotExist() {' - line 86", "'@Test public void deleteBuildsShouldFailIfJobNameIsEmpty() throws Exception {' - line 95", "'@Test public void deleteBuildsShouldSuccess() throws Exception {' - line 107", "'@Test public void deleteBuildsShouldSuccessIfBuildDoesNotExist() throws Exception {' - line 119", "'@Test public void deleteBuildsShouldSuccessIfBuildNumberZeroSpecified() throws Exception {' - line 130", "'@Test public void deleteBuildsShouldSuccessEvenTheBuildIsRunning() throws Exception {' - line 141", "'@Test public void deleteBuildsShouldSuccessEvenTheBuildIsStuckInTheQueue() throws Exception {' - line 161", "'@Test public void deleteBuildsManyShouldSuccess() throws Exception {' - line 185", "'@Test public void deleteBuildsManyShouldSuccessEvenABuildIsSpecifiedTwice() throws Exception {' - line 209", "'@Test public void deleteBuildsManyShouldSuccessEvenLastBuildDoesNotExist() throws Exception {' - line 230", "'@Test public void deleteBuildsManyShouldSuccessEvenMiddleBuildDoesNotExist() throws Exception {' - line 251", "'@Test public void deleteBuildsManyShouldSuccessEvenFirstBuildDoesNotExist() throws Exception {' - line 278", "'@Test public void deleteBuildsManyShouldSuccessEvenTheFirstAndLastBuildDoesNotExist() throws Exception {' - line 301"]}, "ReloadConfigurationCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 62", "'public void reloadConfigurationShouldFailWithoutAdministerPermission() {' - line 74", "'public void reloadMasterConfig() throws Exception {' - line 84", "'public void reloadSlaveConfig() throws Exception {' - line 94", "'private void modifyNode(Node node) throws Exception {' - line 103", "'public void reloadUserConfig() throws Exception {' - line 112", "'public void reloadJobConfig() throws Exception {' - line 132", "'public void reloadViewConfig() throws Exception {' - line 147", "'public void reloadDescriptorConfig() throws Exception {' - line 166", "'private void reloadJenkinsConfigurationViaCliAndWait() {' - line 180", "'private void replace(String path, String search, String replace) {' - line 186"]}, "InstallPluginCommandTest.java": {"METHODS": ["'public void fromStdin() {' - line 42"]}, "AddJobToViewCommandTest.java": {"METHODS": ["'public CLICommandInvoker getCommand() {' - line 45", "'@Test public void addJobShouldSucceed() throws Exception {' - line 49", "'@Test public void addJobShouldSucceedEvenAlreadyAdded() throws Exception {' - line 66", "'@Test public void addJobManyShouldSucceed() throws Exception {' - line 85", "'@Test public void addJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {' - line 105"]}, "QuietDownCommandTest.java": {"METHODS": ["'public void setUp() {' - line 72", "'public void quietDownShouldFailWithoutAdministerPermission() {' - line 77", "'public void quietDownShouldSuccess() {' - line 87", "'public void quietDownShouldSuccessWithBlock() {' - line 96", "'public void quietDownShouldSuccessWithTimeout() {' - line 105", "'public void quietDownShouldSuccessWithReason() {' - line 114", "'public void quietDownShouldSuccessWithBlockAndTimeout() {' - line 124", "'public void quietDownShouldSuccessWithBlockAndTimeoutAndReason() {' - line 133", "'public void quietDownShouldFailWithEmptyTimeout() {' - line 143", "'public void quietDownShouldSuccessOnAlreadyQuietDownedJenkins() {' - line 153", "'public void quietDownShouldSuccessWithBlockOnAlreadyQuietDownedJenkins() throws Exception {' - line 164", "'public void quietDownShouldSuccessWithBlockAndTimeoutOnAlreadyQuietDownedJenkins() throws Exception {' - line 175", "'public void quietDownShouldSuccessAndRunningExecutor() throws Exception {' - line 192", "'public void quietDownShouldSuccessWithBlockAndRunningExecutor() throws Exception {' - line 214", "'public void quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor() throws Exception {' - line 255", "'public void quietDownShouldSuccessWithBlockPlusExpiredTimeoutAndRunningExecutor() throws Exception {' - line 296", "'public void quietDownShouldSuccessWithBlockPlusNonExpiredTimeoutAndRunningExecutor() throws Exception {' - line 337", "'public void quietDownShouldSuccessWithBlockAndFinishingExecutor() throws Exception {' - line 379", "'public void quietDownShouldSuccessWithBlockAndNonExpiredTimeoutAndFinishingExecutor() throws Exception {' - line 420", "'private static void get(FutureTask exec_task) {' - line 456", "'private void assertJenkinsInQuietMode() {' - line 465", "'private void assertJenkinsNotInQuietMode() {' - line 473", "'public static void assertJenkinsInQuietMode(final JenkinsRule j) {' - line 480", "'public static void assertJenkinsNotInQuietMode(final JenkinsRule j) {' - line 489"]}, "HelpCommandTest.java": {"METHODS": ["'@Test public void getHelpRunningCommand() {' - line 49", "'@Test public void getHelpUsingJenkinsUI() throws Exception {' - line 72", "'private void assertContainsOverviewOfClassCommand(String text) {' - line 84", "'private void assertContainsUsageOfClassCommand(String text) {' - line 89", "'private void assertContainsOverviewOfMethodCommand(String text) {' - line 96", "'private void assertContainsUsageOfMethodCommand(String text) {' - line 100", "'private static Matcher<String> containsStrings(String... strings) {' - line 106", "'return stringContainsInOrder(Arrays.asList(strings));' - line 107", "'public String getName() {' - line 124", "'public String getShortDescription() {' - line 129", "'protected void printUsageSummary(PrintStream stderr) {' - line 134", "'protected int run() {' - line 139"]}, "CreateViewCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 50", "'@Test public void createViewShouldFailWithoutViewCreatePermission() {' - line 55", "'@Test public void createViewShouldSucceed() {' - line 67", "'@Test public void createViewSpecifyingNameExplicitlyShouldSucceed() {' - line 82", "'@Test public void createViewShouldFailIfViewAlreadyExists() throws IOException {' - line 99", "'@Test public void createViewShouldFailUsingInvalidName() {' - line 114"]}, "OnlineNodeCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 67", "'@Test public void onlineNodeShouldFailWithoutComputerConnectPermission() throws Exception {' - line 71", "'@Test public void onlineNodeShouldFailIfNodeDoesNotExist() {' - line 82", "'@Test public void onlineNodeShouldSucceed() throws Exception {' - line 91", "'@Test public void onlineNodeShouldSucceedOnOnlineNode() throws Exception {' - line 105", "'@Test public void onlineNodeShouldSucceedOnOfflineNode() throws Exception {' - line 120", "'@Test public void onlineNodeShouldSucceedOnDisconnectedNode() throws Exception {' - line 142", "'@Test public void onlineNodeShouldSucceedOnDisconnectingNode() throws Exception {' - line 164", "'@Test public void onlineNodeShouldSucceedOnBuildingOfflineNode() throws Exception {' - line 184", "'@Test public void onlineNodeManyShouldSucceed() throws Exception {' - line 216", "'@Test public void onlineNodeManyShouldFailIfANodeDoesNotExist() throws Exception {' - line 242", "'@Test public void onlineNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {' - line 265", "'@Test public void onlineNodeShouldSucceedOnMaster() {' - line 285", "'public static FreeStyleBuild startBlockingAndFinishingBuild(FreeStyleProject project, OneShotEvent finish) throws Exception {' - line 309", "'private BlockingAndFinishingBuilder(OneShotEvent block, OneShotEvent finish) {' - line 327", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 333"]}, "ListPluginsCommandTest.java": {"METHODS": ["'public void listPluginsExpectedUsage() {' - line 44", "'public void onlyAccessibleForAdmin() {' - line 67"]}, "BuildCommandTest.java": {"METHODS": ["'public void async() throws Exception {' - line 95", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException {' - line 101", "'public void sync() throws Exception {' - line 120", "'public void syncWOutputStreaming() throws Exception {' - line 132", "'public void parameters() throws Exception {' - line 141", "'public void defaultParameters() throws Exception {' - line 151", "'public void consoleOutput() throws Exception {' - line 163", "'public void consoleOutputWhenBuildSchedulingRefused() throws Exception {' - line 173", "'public boolean shouldSchedule(Task task, List<Action> actions) {' - line 184", "'public void refuseToBuildDisabledProject() throws Exception {' - line 190", "'public void refuseToBuildNewlyCopiedProject() throws Exception {' - line 202", "'public void correctlyParseMapValuesContainingEqualsSign() throws Exception {' - line 214", "'public void executorsAliveOnParameterWithNullDefaultValue() throws Exception {' - line 227", "'new StringParameterDefinition(\"string\", \"defaultValue\", \"description\"),' - line 235", "'public ParameterValue createValue(String value) {' - line 271", "'public ParameterValue createValue(StaplerRequest req, JSONObject jo) {' - line 276", "'return createValue(\"BAR\");' - line 277", "'public ParameterValue getDefaultParameterValue() {' - line 281", "'public void fileParameter() throws Exception {' - line 292", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 297"]}, "DeleteNodeCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 49", "'@Test public void deleteNodeShouldFailWithoutNodeDeletePermission() throws Exception {' - line 54", "'@Test public void deleteNodeShouldSucceed() throws Exception {' - line 68", "'@Test public void deleteNodeShouldFailIfNodeDoesNotExist() {' - line 81", "'@Test public void deleteNodeManyShouldSucceed() throws Exception {' - line 93", "'@Test public void deleteNodeManyShouldFailIfFirstNodeDoesNotExist() throws Exception {' - line 109", "'@Test public void deleteNodeManyShouldFailIfMiddleNodeDoesNotExist() throws Exception {' - line 128", "'@Test public void deleteNodeManyShouldFailIfLastNodeDoesNotExist() throws Exception {' - line 147", "'@Test public void deleteNodeManyShouldFailIfMoreNodesDoNotExist() throws Exception {' - line 166", "'@Test public void deleteNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {' - line 187"]}, "ConnectNodeCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 51", "'@Test public void connectNodeShouldFailWithoutComputerConnectPermission() throws Exception {' - line 55", "'@Test public void connectNodeShouldFailIfNodeDoesNotExist() {' - line 67", "'@Test public void connectNodeShouldSucceed() throws Exception {' - line 77", "'@Test public void connectNodeShouldSucceedWithForce() throws Exception {' - line 104", "'@Test public void connectNodeManyShouldSucceed() throws Exception {' - line 132", "'@Test public void connectNodeManyShouldFailIfANodeDoesNotExist() throws Exception {' - line 147", "'@Test public void connectNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {' - line 162", "'@Test public void connectNodeShouldSucceedOnMaster() {' - line 174"]}, "DisablePluginCommandTest.java": {"METHODS": ["'public void canDisablePluginWithOptionalDependerStrategyNone() {' - line 64", "'public void canDisablePluginWithDependentsDisabledStrategyNone() throws IOException {' - line 72", "'public void cannotDisablePluginWithMandatoryDependerStrategyNone() {' - line 88", "'public void cannotDisableDependentPluginWrongOrderStrategyNone() {' - line 100", "'public void canDisableDependentPluginWrongOrderStrategyAll() {' - line 112", "'public void canDisableDependentPluginsRightOrderStrategyNone() {' - line 125", "'public void restartAfterDisable() {' - line 138", "'public void notRestartAfterDisablePluginWithoutArgumentRestart() throws Exception {' - line 151", "'public void returnCodeDisableInvalidPlugin() {' - line 164", "'public void disableAlreadyDisabledPluginNotRestart() throws Exception {' - line 175", "'public void restartAfterDisablePluginsAndErrors() {' - line 193", "'public void disablePluginsStrategyAll() {' - line 210", "'public void disablePluginsStrategyMandatory() {' - line 228", "'public void disablePluginsMessageAlreadyDisabled() {' - line 244", "'public void returnCodeFirstErrorIsDependents() {' - line 262", "'public void returnCodeFirstErrorIsNoSuchPlugin() {' - line 275", "'public void quietModeEmptyOutputSucceed() {' - line 288", "'public void quietModeWithErrorNoSuch() {' - line 305", "'public void quietModeWithErrorDependents() {' - line 322", "'private boolean checkResultWith(CLICommandInvoker.Result result, BiPredicate<String, String> method, String plugin, PluginWrapper.PluginDisableStatus status) {' - line 345", "'private void disablePlugin(String name) throws IOException {' - line 357", "'private void assertPluginDisabled(String name) {' - line 372", "'private void assertPluginEnabled(String name) {' - line 378", "'private void assertJenkinsInQuietMode() {' - line 384", "'private void assertJenkinsNotInQuietMode() {' - line 388", "'private void assumeNotWindows() {' - line 392"]}, "ViewManipulationTestBase.java": {"METHODS": ["'@Before public void setUp() {' - line 55", "'@Test public void jobViewManipulationShouldFailWithJenkinsReadPermissionOnly() throws IOException {' - line 60", "'@Test public void jobViewManipulationShouldFailWithViewReadPermissionOnly() throws IOException {' - line 74", "'@Test public void jobViewManipulationShouldFailWithViewReadAndJobReadPermissionsOnly() throws IOException {' - line 88", "'@Test public void jobViewManipulationShouldFailIfTheViewIsNotDirectlyModifiable() throws Exception {' - line 102", "'@Test public void jobViewManipulationShouldFailIfTheJobDoesNotExist() throws Exception {' - line 119", "'@Test public void jobViewManipulationShouldFailIfTheJobNameIsEmpty() throws Exception {' - line 146", "'@Test public void jobViewManipulationManyShouldFailIfFirstJobDoesNotExist() throws Exception {' - line 161", "'@Test public void jobViewManipulationManyShouldFailIfMiddleJobDoesNotExist() throws Exception {' - line 182", "'@Test public void jobViewManipulationManyShouldFailIfLastJobDoesNotExist() throws Exception {' - line 203", "'@Test public void jobViewManipulationManyShouldFailIfMoreJobsDoNotExist() throws Exception {' - line 224"]}, "SetBuildDescriptionCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 56", "'@Test public void setBuildDescriptionShouldFailWithoutJobReadPermission() throws Exception {' - line 60", "'@Test public void setBuildDescriptionShouldFailWithoutRunUpdatePermission1() throws Exception {' - line 73", "'@Test public void setBuildDescriptionShouldSucceed() throws Exception {' - line 86", "'@Test public void setBuildDescriptionShouldFailIfJobDoesNotExist() {' - line 112", "'@Test public void setBuildDescriptionShouldFailIfJobDoesNotExistButNearExists() throws Exception {' - line 121", "'@Test public void setBuildDescriptionShouldFailIfBuildDoesNotExist() throws Exception {' - line 132", "'private Builder createScriptBuilder(String script) {' - line 152"]}, "CLIEnvVarTest.java": {"METHODS": ["'public void grabCliJar() throws IOException {' - line 45", "'public void testSOptionWithoutJENKINS_URL() throws Exception {' - line 52", "'public void testWithoutSOptionAndWithoutJENKINS_URL() throws Exception {' - line 62", "'public void testJENKINS_URLWithoutSOption() throws Exception {' - line 72", "'public void testSOptionOverridesJENKINS_URL() throws Exception {' - line 96", "'public void testAuthOptionWithoutEnvVars() throws Exception {' - line 109", "'public void testWithoutEnvVarsAndWithoutAuthOption() throws Exception {' - line 125", "'public void testEnvVarsWithoutAuthOption() throws Exception {' - line 142", "'public void testOnlyOneEnvVar() throws Exception {' - line 160", "'public void testAuthOptionOverridesEnvVars() throws Exception {' - line 191", "'private String getToken() {' - line 210", "'private int launch(String... cmdArgs) throws Exception {' - line 220", "'return launch(Collections.emptyMap(), cmdArgs);' - line 221", "'private int launch(Map<String, String> envars, String... cmdArgs) throws Exception {' - line 224", "'return launch(envars, null, null, cmdArgs);' - line 225", "'private int launch(Map<String, String> envars, OutputStream out, OutputStream err, String... cmdArgs) throws Exception {' - line 228"]}, "UpdateNodeCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 52", "'@Test public void updateNodeShouldFailWithoutComputerConfigurePermission() throws Exception {' - line 57", "'@Test public void updateNodeShouldModifyNodeConfiguration() throws Exception {' - line 71", "'@Test public void updateNodeShouldFailIfNodeDoesNotExist() {' - line 90", "'public void updateNodeShouldFailForMaster() {' - line 105", "'public void updateNodeShouldFailForDotDot() throws Exception {' - line 126"]}, "RunRangeCommand2Test.java": {"METHODS": ["'@Before public void setUp() {' - line 56", "'@Test public void dummyRangeShouldFailIfJobNameIsEmptyOnEmptyJenkins() throws Exception {' - line 60", "'@Test public void dummyRangeShouldFailIfJobNameIsSpaceOnEmptyJenkins() throws Exception {' - line 72", "'@Test public void dummyRangeShouldSuccessEvenTheBuildIsRunning() throws Exception {' - line 84", "'@Test public void dummyRangeShouldSuccessEvenTheBuildIsStuckInTheQueue() throws Exception {' - line 98"]}, "RunRangeCommandTest.java": {"METHODS": ["'@BeforeClass public static void setUpClass() throws Exception {' - line 59", "'command = new CLICommandInvoker(j,  new DummyRangeCommand());' - line 60", "'@Test public void dummyRangeShouldFailWithoutJobReadPermission() {' - line 74", "'@Test public void dummyRangeShouldFailIfJobDesNotExist() {' - line 84", "'@Test public void dummyRangeShouldFailIfJobNameIsEmpty() {' - line 93", "'@Test public void dummyRangeShouldFailIfJobNameIsSpace() {' - line 103", "'@Test public void dummyRangeShouldSuccessIfBuildDoesNotExist() {' - line 113", "'@Test public void dummyRangeNumberSingleShouldSuccess() {' - line 127", "'@Test public void dummyRangeNumberSingleShouldSuccessIfBuildNumberIsZero() {' - line 173", "'@Test public void dummyRangeNumberSingleShouldFailIfBuildNumberIsNegative() {' - line 187", "'@Test public void dummyRangeNumberSingleShouldFailIfBuildNumberIsTooBig() {' - line 196", "'@Test public void dummyRangeNumberSingleShouldFailIfBuildNumberIsInvalid() {' - line 205", "'@Test public void dummyRangeNumberSingleShouldSuccessIfBuildNumberIsEmpty() {' - line 221", "'@Test public void dummyRangeNumberSingleShouldFailIfBuildNumberIsSpace() {' - line 229", "'@Test public void dummyRangeNumberSingleShouldSuccessIfBuildNumberIsComma() {' - line 238", "'@Test public void dummyRangeNumberSingleShouldFailIfBuildNumberIsHyphen() {' - line 246", "'@Test public void dummyRangeNumberMultiShouldSuccess() {' - line 255", "'@Test public void dummyRangeNumberMultiShouldSuccessIfSomeBuildDoesNotExist() {' - line 296", "'@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsNegative() {' - line 316", "'@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsTooBig() {' - line 339", "'@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsInvalid() {' - line 362", "'@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsEmpty() {' - line 406", "'@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsSpace() {' - line 429", "'@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsComma() {' - line 452", "'@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsHyphen() {' - line 475", "'@Test public void dummyRangeRangeSingleShouldSuccess() {' - line 498", "'@Test public void dummyRangeRangeSingleShouldSuccessIfSomeBuildDoesNotExist() {' - line 580", "'@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsZeroAndNegative() {' - line 600", "'@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsANegativeNumber() {' - line 686", "'@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsTooBigNumber() {' - line 758", "'@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsInvalidNumber() {' - line 781", "'@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsEmptyNumber() {' - line 825", "'@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsSpace() {' - line 848", "'@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsComma() {' - line 871", "'@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsHyphen() {' - line 894", "'@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeIsInverse() {' - line 917", "'@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeIsInvalid() {' - line 940", "'@Test public void dummyRangeRangeMultiShouldSuccess() {' - line 949", "'public String getShortDescription() {' - line 978", "'protected int act(List<Run<?, ?>> builds) {' - line 983"]}, "DisconnectNodeCommandTest.java": {"METHODS": ["'public void setUp() {' - line 55", "'public void disconnectNodeShouldFailWithoutComputerDisconnectPermission() throws Exception {' - line 60", "'public void disconnectNodeShouldFailIfNodeDoesNotExist() {' - line 73", "'public void disconnectNodeShouldSucceed() throws Exception {' - line 84", "'public void disconnectNodeShouldSucceedWithCause() throws Exception {' - line 121", "'public void disconnectNodeManyShouldSucceed() throws Exception {' - line 158", "'public void disconnectNodeManyShouldSucceedWithCause() throws Exception {' - line 188", "'public void disconnectNodeManyShouldFailIfANodeDoesNotExist() throws Exception {' - line 218", "'public void disconnectNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {' - line 244"]}, "GetJobCommandTest.java": {"METHODS": ["'public void setUp() {' - line 46", "'@Test public void withFolders() throws Exception {' - line 51"]}, "WaitNodeOfflineCommandTest.java": {"METHODS": ["'public void setUp() {' - line 55", "'public void waitNodeOfflineShouldFailIfNodeDoesNotExist() {' - line 60", "'public void waitNodeOfflineShouldSucceedOnOfflineNode() throws Exception {' - line 70", "'public void waitNodeOfflineShouldSucceedOnGoingOfflineNode() throws Exception {' - line 85", "'public void waitNodeOfflineShouldSucceedOnDisconnectedNode() throws Exception {' - line 97", "'public void waitNodeOfflineShouldSucceedOnDisconnectingNode() throws Exception {' - line 112", "'public void waitNodeOfflineShouldTimeoutOnOnlineNode() throws Exception {' - line 124"]}, "GroovyshCommandTest.java": {"METHODS": ["'@Test public void authentication() {' - line 44"]}, "CLIActionTest.java": {"METHODS": ["'public void serveCliActionToAnonymousUserWithoutPermissions() throws Exception {' - line 63", "'public void serveCliActionToAnonymousUserWithAnonymousUserWithPermissions() throws Exception {' - line 72", "'public void authentication() throws Exception {' - line 79", "'private void assertExitCode(int code, boolean useApiToken, File jar, String... args) throws IOException, InterruptedException {' - line 104", "'public void encodingAndLocale() throws Exception {' - line 135", "'public void interleavedStdio() throws Exception {' - line 150", "'public void noPreAuthOptionHandlerInfoLeak() throws Exception {' - line 179", "'public String getShortDescription() {' - line 206", "'protected int run() throws Exception {' - line 211", "'public void largeTransferWebSocket() throws Exception {' - line 220", "'protected int run() throws Exception {' - line 251", "'public String getShortDescription() {' - line 264", "'protected int run() throws Exception {' - line 275", "'public String getShortDescription() {' - line 286"]}, "OfflineNodeCommandTest.java": {"METHODS": ["'public void setUp() {' - line 68", "'public void offlineNodeShouldFailWithoutComputerDisconnectPermission() throws Exception {' - line 73", "'public void offlineNodeShouldFailIfNodeDoesNotExist() {' - line 86", "'public void offlineNodeShouldSucceedOnOnlineNode() throws Exception {' - line 97", "'public void offlineNodeShouldSucceedOnOfflineNode() throws Exception {' - line 115", "'public void offlineNodeShouldSucceedOnDisconnectedNode() throws Exception {' - line 133", "'public void offlineNodeShouldSucceedOnOnlineNodeWithCause() throws Exception {' - line 156", "'public void offlineNodeShouldSucceedOnOfflineNodeWithCause() throws Exception {' - line 174", "'public void offlineNodeShouldSucceedOnDisconnectedNodeWithCause() throws Exception {' - line 192", "'public void offlineNodeShouldSucceedOnBuildingNode() throws Exception {' - line 215", "'public void offlineNodeShouldSucceedOnBuildingNodeWithCause() throws Exception {' - line 241", "'public void offlineNodeManyShouldSucceed() throws Exception {' - line 267", "'public void offlineNodeManyShouldSucceedWithCause() throws Exception {' - line 297", "'public void offlineNodeManyShouldFailIfANodeDoesNotExist() throws Exception {' - line 327", "'public void offlineNodeManyShouldFailIfANodeDoesNotExistWithCause() throws Exception {' - line 353", "'public void offlineNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {' - line 379", "'public void offlineNodeManyShouldSucceedEvenANodeIsSpecifiedTwiceWithCause() throws Exception {' - line 402", "'public void offlineNodeShouldSucceedOnMaster() {' - line 425", "'public void offlineNodeShouldSucceedOnMasterWithCause() {' - line 439"]}, "UpdateViewCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 50", "'@Test public void updateViewShouldFailWithoutViewConfigurePermission() throws Exception {' - line 55", "'@Test public void updateViewWithRenamedClass() throws Exception {' - line 74", "'@Test public void updateViewWithWrongViewTypeShouldFail() throws Exception {' - line 86", "'@Test public void updateViewShouldModifyViewConfiguration() throws Exception {' - line 100", "'@Test public void updateViewShouldFailIfViewDoesNotExist() {' - line 120"]}, "ReloadJobCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 55", "'@Test public void reloadJobShouldFailWithoutJobConfigurePermission() throws Exception {' - line 59", "'@Test public void reloadJobShouldFailWithoutJobReadPermission() throws Exception {' - line 78", "'@Test public void reloadJobShouldSucceed() throws Exception {' - line 97", "'@Test public void reloadJobShouldFailIfJobDoesNotExist() {' - line 115", "'@Test public void reloadJobShouldFailIfJobDoesNotExistButNearExists() throws Exception {' - line 125", "'@Test public void reloadJobManyShouldSucceed() throws Exception {' - line 137", "'@Test public void reloadJobManyShouldFailIfFirstJobDoesNotExist() throws Exception {' - line 164", "'@Test public void reloadJobManyShouldFailIfMiddleJobDoesNotExist() throws Exception {' - line 190", "'@Test public void reloadJobManyShouldFailIfLastJobDoesNotExist() throws Exception {' - line 216", "'@Test public void reloadJobManyShouldFailIfMoreJobsDoNotExist() throws Exception {' - line 242", "'@Test public void reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {' - line 269", "'private Builder createScriptBuilder(String script) {' - line 311"]}, "EnablePluginCommandTest.java": {"METHODS": ["'private void assertPluginEnabled(String name) {' - line 60", "'private void disablePlugin(String name) throws IOException {' - line 66", "'private void assertPluginDisabled(String name) {' - line 72", "'private void assumeNotWindows() {' - line 78", "'private void assertJenkinsInQuietMode() {' - line 82", "'private void assertJenkinsNotInQuietMode() {' - line 86", "'public void enableSinglePlugin() throws IOException {' - line 92", "'public void enableInvalidPluginFails() {' - line 107", "'public void enableDependerEnablesDependee() throws IOException {' - line 114", "'public void enablePluginWithRestart() throws IOException {' - line 128", "'public void enableNoPluginsWithRestartIsNoOp() {' - line 139"]}, "DeleteJobCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 50", "'@Test public void deleteJobShouldFailWithoutJobDeletePermission() throws IOException {' - line 55", "'@Test public void deleteJobShouldFailWithoutJobReadPermission() throws IOException {' - line 68", "'@Test public void deleteJobShouldSucceed() throws Exception {' - line 81", "'@Test public void deleteJobShouldFailIfJobDoesNotExist() {' - line 93", "'@Test public void deleteJobManyShouldSucceed() throws Exception {' - line 104", "'@Test public void deleteJobManyShouldFailIfFirstJobDoesNotExist() throws Exception {' - line 120", "'@Test public void deleteJobManyShouldFailIfMiddleJobDoesNotExist() throws Exception {' - line 139", "'@Test public void deleteJobManyShouldFailIfLastJobDoesNotExist() throws Exception {' - line 158", "'@Test public void deleteJobManyShouldFailIfMoreJobsDoNotExist() throws Exception {' - line 177", "'@Test public void deleteJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {' - line 198"]}, "CreateNodeCommandTest.java": {"METHODS": ["'@Before public void setUp() {' - line 54", "'@Test public void createNodeShouldFailWithoutComputerCreatePermission() {' - line 59", "'@Test public void createNode() {' - line 72", "'@Test public void createNodeSpecifyingNameExplicitly() {' - line 87", "'@Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {' - line 104", "'@Test public void createNodeShouldFailIfNodeAlreadyExist() throws Exception {' - line 123", "'@Test public void createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly() throws Exception {' - line 138", "'public void createNodeShouldFailIfNodeIsNotGood() {' - line 155", "'public void cannotCreateNodeWithTrailingDot_withoutOtherNode() {' - line 174", "'public void cannotCreateNodeWithTrailingDot_withExistingNode() {' - line 192", "'public void cannotCreateNodeWithTrailingDot_exceptIfEscapeHatchIsSet() {' - line 213"]}, "EnableJobCommandTest.java": {"METHODS": ["'public void smokes() throws Exception {' - line 41"]}, "FingerprinterTest.java": {"METHODS": ["'public static void setUp() {' - line 99", "'@Test public void fingerprintDependencies() throws Exception {' - line 103", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 123", "'@Test public void presentFingerprintActionIsReused() throws Exception {' - line 129", "'@Test public void multipleUpstreamDependencies() throws Exception {' - line 141", "'@Test public void multipleDownstreamDependencies() throws Exception {' - line 164", "'@Test public void dependencyExclusion() throws Exception {' - line 188", "'@Test public void circularDependency() throws Exception {' - line 206", "'@Test public void matrixDependency() throws Exception {' - line 221", "'@Test public void projectRename() throws Exception {' - line 245", "'@Test public void actionSerialization() throws Exception {' - line 303", "'public void fingerprintCleanup() throws Exception {' - line 335", "'new FingerprintCleanupThread().execute(StreamTaskListener.fromStdout());' - line 357", "'new FingerprintCleanupThread().execute(StreamTaskListener.fromStdout());' - line 375", "'private FreeStyleProject createFreeStyleProjectWithFingerprints(String[] contents, String[] files) throws Exception {' - line 381", "'private void addFingerprinterToProject(AbstractProject<?, ?> project, String[] contents, String[] files) {' - line 389"]}, "LogRotatorTest.java": {"METHODS": ["'public void successVsFailure() throws Exception {' - line 68", "'public void stableVsUnstable() throws Exception {' - line 86", "'public void artifactDelete() throws Exception {' - line 102", "'public void artifactsRetainedWhileBuilding() throws Exception {' - line 153", "'private static int numberOf(Run<?, ?> run) {' - line 204", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 210", "'public BuildStepMonitor getRequiredMonitorService() {' - line 216", "'public Descriptor<Publisher> getDescriptor() {' - line 221", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener)' - line 239", "'public void release(int upToBuildNumber) {' - line 264", "'public void waitFor(int buildNumber, long timeout, TimeUnit units) throws TimeoutException,' - line 274", "'public BuildStepMonitor getRequiredMonitorService() {' - line 289"]}, "EnvVarsInConfigTasksTest.java": {"METHODS": ["'public void setUp() throws Exception {' - line 37", "'private String withVariable(String s) {' - line 55", "'public void testFreeStyleShellOnAgent() throws Exception {' - line 60", "'public void testFreeStyleMavenOnAgent() throws Exception {' - line 88"]}, "CommandInterpreterTest.java": {"METHODS": ["'public void ensurePluginCommandInterpretersCanBeLoaded() {' - line 25", "'public TestCommandInterpreter(String command) {' - line 45", "'public String[] buildCommandLine(FilePath script) {' - line 50", "'protected String getContents() {' - line 55", "'protected String getFileExtension() {' - line 60", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 68"]}, "ArtifactArchiverTest.java": {"METHODS": ["'public void testNoneCompression() throws Exception {' - line 77", "'public void testEmptyDirectories() throws Exception {' - line 93", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 99", "'public void testAllowEmptyArchive() throws Exception {' - line 123", "'public void testFileMaskNoMatchesFoundException() throws Exception {' - line 135", "'@Test public void symlinks() throws Exception {' - line 148", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 151", "'@Test public void notFollowSymlinks() throws Exception {' - line 181", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 184", "'@Test public void followSymlinksEnabledForOldConfig() throws Exception {' - line 210", "'@Test public void outsideSymlinks() throws Exception {' - line 229", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 232", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 258", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 266", "'public void testArchivingSkippedWhenOnlyIfSuccessfulChecked() throws Exception {' - line 274", "'public void configRoundTrip() throws Exception {' - line 289", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 306", "'public void testDefaultExcludesOn() throws Exception {' - line 323", "'public void testDefaultExcludesOff() throws Exception {' - line 339", "'@Test public void latestOnlyMigration() throws Exception {' - line 354", "'@Test public void fingerprintMigration() throws Exception {' - line 367", "'public void archiveNotReadable() throws Exception {' - line 384", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 393", "'public void lengthOfArtifactIsCorrect_eventForInvalidSymlink() throws Exception {' - line 411", "'@Override public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 414", "'public Object invoke(File f, VirtualChannel channel) throws IOException {' - line 458"]}, "BatchFileTest.java": {"METHODS": ["'public void validateBatchFileCommandEOL() {' - line 31", "'public void validateBatchFileContents() {' - line 37", "'public Proc onLaunch(ProcStarter p) {' - line 52", "'private static Shell createNewBatchTask(String command, Integer unstableReturn) {' - line 57", "'private void nonZeroErrorlevelShouldMakeBuildUnstable(int exitCode) throws Exception {' - line 63", "'public void windowsNonZeroErrorlevelsShouldMakeBuildUnstable() throws Exception {' - line 74", "'private void nonZeroErrorlevelShouldBreakTheBuildByDefault(int exitCode) throws Exception {' - line 81", "'public void windowsNonZeroErrorlevelsShouldBreakTheBuildByDefault() throws Exception {' - line 99", "'private void nonZeroErrorlevelShouldBreakTheBuildIfNotMatching(int exitCode) throws Exception {' - line 106", "'public void windowsErrorlevelsShouldBreakTheBuildIfNotMatching() throws Exception {' - line 119", "'public void windowsErrorlevel0ShouldNeverMakeTheBuildUnstable() throws Exception {' - line 128", "'public void windowsUnstableCodeZeroIsSameAsUnset() {' - line 142", "'public void canLoadUnstableReturnFromDisk() {' - line 152"]}, "ShellTest.java": {"METHODS": ["'public void validateShellCommandEOL() {' - line 38", "'public void validateShellContents() {' - line 44", "'public void testBasic() throws Exception {' - line 50", "'public Proc onLaunch(ProcStarter p) {' - line 88", "'private static Shell createNewShell(String command, Integer unstableReturn) {' - line 93", "'private void nonZeroExitCodeShouldMakeBuildUnstable(int exitCode) throws Exception {' - line 99", "'public void unixExitCodes1To255ShouldMakeBuildUnstable() throws Exception {' - line 110", "'private void nonZeroExitCodeShouldBreakTheBuildByDefault(int exitCode) throws Exception {' - line 117", "'public void unixExitCodes1To255ShouldBreakTheBuildByDefault() throws Exception {' - line 135", "'private void nonZeroExitCodeShouldBreakTheBuildIfNotMatching(int exitCode) throws Exception {' - line 143", "'public void unixExitCodes1To255ShouldBreakTheBuildIfNotMatching() throws Exception {' - line 156", "'public void unixExitCodes0ShouldNeverMakeTheBuildUnstable() throws Exception {' - line 165", "'public void unixUnstableCodeZeroIsSameAsUnset() {' - line 179", "'public void canLoadUnstableReturnFromDisk() {' - line 189"]}, "UserAvatarResolverTest.java": {"METHODS": ["'public void defaultImageIsReturnedIfRegexFails() {' - line 47", "'public void resolverIsUsed() {' - line 53", "'public void noResolverCanFindAvatar() {' - line 60", "'public void iconSizeRegex() {' - line 67", "'public String findAvatarFor(User u, int width, int height) {' - line 77"]}, "MavenTest.java": {"METHODS": ["'@Test public void configRoundtrip() throws Exception {' - line 80", "'@Test public void withNodeProperty() throws Exception {' - line 102", "'@Test public void withParameter() throws Exception {' - line 128", "'new StringParameterDefinition(\"VAR_MAVEN\", \"XXX\"),' - line 145", "'new StringParameterDefinition(\"VAR_JAVA\", \"XXX\")));' - line 146", "'new StringParameterValue(\"VAR_MAVEN\", mavenVar),' - line 152", "'new StringParameterValue(\"VAR_JAVA\", javaVar))).get();' - line 153", "'@Test public void globalConfigAjax() throws Exception {' - line 162", "'private void verify() throws Exception {' - line 179", "'@Test public void sensitiveParameters() throws Exception {' - line 192", "'new StringParameterDefinition(\"string\", \"defaultValue\", \"string description\"),' - line 195", "'new PasswordParameterDefinition(\"password\", \"12345\", \"password description\"),' - line 196", "'new StringParameterDefinition(\"string2\", \"Value2\", \"string description\")' - line 197", "'public void parametersReferencedFromPropertiesShouldRetainBackslashes() throws Exception {' - line 208", "'new EnvironmentVariablesNodeProperty(envVar)' - line 219", "'@Test public void defaultSettingsProvider() throws Exception {' - line 227", "'@Test public void testNullHome() {' - line 255", "'new MavenInstallation(\"_\", \"\", Collections.emptyList()).buildEnvVars(env);' - line 257", "'@Test public void specialCharsInBuildVariablesPassedAsProperties() throws Exception {' - line 262", "'new StringParameterDefinition(\"tilde\", \"~\"),' - line 268", "'new StringParameterDefinition(\"exclamation_mark\", \"!\"),' - line 269", "'new StringParameterDefinition(\"at_sign\", \"@\"),' - line 270", "'new StringParameterDefinition(\"sharp\", \"#\"),' - line 271", "'new StringParameterDefinition(\"dollar\", \"$\"),' - line 272", "'new StringParameterDefinition(\"percent\", \"%\"),' - line 273", "'new StringParameterDefinition(\"circumflex\", \"^\"),' - line 274", "'new StringParameterDefinition(\"ampersand\", \"&\"),' - line 275", "'new StringParameterDefinition(\"asterix\", \"*\"),' - line 276", "'new StringParameterDefinition(\"parentheses\", \"()\"),' - line 277", "'new StringParameterDefinition(\"underscore\", \"_\"),' - line 278", "'new StringParameterDefinition(\"plus\", \"+\"),' - line 279", "'new StringParameterDefinition(\"braces\", \"{}\"),' - line 280", "'new StringParameterDefinition(\"brackets\", \"[]\"),' - line 281", "'new StringParameterDefinition(\"colon\", \":\"),' - line 282", "'new StringParameterDefinition(\"semicolon\", \";\"),' - line 283", "'new StringParameterDefinition(\"quote\", \"\\\"\"),' - line 284", "'new StringParameterDefinition(\"apostrophe\", \"'\"),' - line 285", "'new StringParameterDefinition(\"backslash\", \"\\\\\"),' - line 286", "'new StringParameterDefinition(\"pipe\", \"|\"),' - line 287", "'new StringParameterDefinition(\"angle_brackets\", \"<>\"),' - line 288", "'new StringParameterDefinition(\"comma\", \",\"),' - line 289", "'new StringParameterDefinition(\"period\", \".\"),' - line 290", "'new StringParameterDefinition(\"slash\", \"/\"),' - line 291", "'new StringParameterDefinition(\"question_mark\", \"?\"),' - line 292", "'new StringParameterDefinition(\"space\", \" \")' - line 293", "'@Test public void doPassBuildVariablesOptionally() throws Exception {' - line 299", "'@Test public void doAlwaysPassProperties() throws Exception {' - line 323", "'@Test public void checkMavenInstallationEquals() throws Exception {' - line 344", "'@Test public void checkMavenInstallationNotEquals() throws Exception {' - line 352", "'public void submitPossibleWithoutJellyTrace() throws Exception {' - line 361", "'public void submitPossibleWithJellyTrace() throws Exception {' - line 373"]}, "BuildTriggerTest.java": {"METHODS": ["'public void runMoreQuickly() throws Exception {' - line 86", "'private FreeStyleProject createDownstreamProject() throws Exception {' - line 90", "'private void assertNoDownstreamBuild(FreeStyleProject dp, Run<?, ?> b) throws Exception {' - line 114", "'private FreeStyleBuild assertDownstreamBuild(FreeStyleProject dp, Run<?, ?> b) throws Exception {' - line 122", "'public void buildTrigger() throws Exception {' - line 133", "'public void triggerEvenWhenUnstable() throws Exception {' - line 138", "'public void downstreamProjectSecurity() throws Exception {' - line 144", "'private void assertDoCheck(org.acegisecurity.Authentication auth, @CheckForNull String expectedError, AbstractProject<?, ?> project, String value) {' - line 244", "'public void downstreamProjectShouldObserveCompletedParent() throws Exception {' - line 258", "'public void allDownstreamProjectsShouldObserveCompletedParent() throws Exception {' - line 279", "'private Dep(AbstractProject upstream, AbstractProject downstream) {' - line 310", "'public boolean shouldTriggerBuild(AbstractBuild build, TaskListener listener, List<Action> actions) {' - line 315", "'public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {' - line 334", "'private AssertTriggerBuildCompleted(FreeStyleProject us, WebClient wc) {' - line 346", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws IOException {' - line 352"]}, "CreateItemTest.java": {"METHODS": ["'public void setup() {' - line 60", "'public void testCreateItemFromCopy() throws Exception {' - line 66", "'public void vetoCreateItemFromCopy() throws Exception {' - line 90", "'private void deleteContentTypeHeader(WebRequest request) {' - line 114", "'public void createWithFolderPaths() throws Exception {' - line 119", "'public void onCheckCopy(Item src, ItemGroup parent) throws Failure {' - line 136"]}, "MarkupFormatterTest.java": {"METHODS": ["'public void configRoundtrip() throws Exception {' - line 57", "'public DummyMarkupImpl(String prefix) {' - line 70", "'public void translate(String markup, Writer output) throws IOException {' - line 75", "'public void defaultEscaped() throws Exception {' - line 84", "'public void security2153RequiresPOST() throws Exception {' - line 92", "'public void security2153SetsCSP() throws Exception {' - line 104"]}, "LogRecorderManagerTest.java": {"METHODS": ["'@Test public void loggerConfig() throws Exception {' - line 67", "'@Test public void loggerConfigNotFound() throws Exception {' - line 79", "'@Test public void logRecorderCheckName() {' - line 90", "'@Test public void loggingOnSlaves() throws Exception {' - line 118", "'public void addingLogRecorderToLegacyMapAddsToRecordersList() throws IOException {' - line 172", "'public void addingLogRecorderToListAddsToLegacyRecordersMap() throws IOException {' - line 190", "'@Override public Boolean call() throws Error {' - line 223", "'@Override public Boolean call() throws Error {' - line 243", "'private static String show(List<LogRecord> recs) {' - line 250"]}, "ClockMonitorDescriptorTest.java": {"METHODS": ["'public void testClockMonitor() throws Exception {' - line 26"]}, "DiskSpaceMonitorDescriptorTest.java": {"METHODS": ["'public void remoteDiskSpaceUsage() throws Exception {' - line 28", "'public void parse() throws Exception {' - line 42", "'public void string() {' - line 55"]}, "ResponseTimeMonitorTest.java": {"METHODS": ["'public void skipOfflineAgent() throws Exception {' - line 35", "'public void doNotDisconnectBeforeLaunched() throws Exception {' - line 56"]}, "StatusFilterTest.java": {"METHODS": ["'public void basic() throws Exception {' - line 19"]}, "ListViewColumnTest.java": {"METHODS": ["'public void createView() throws Exception {' - line 16"]}, "GlobalDefaultViewConfigurationTest.java": {"METHODS": ["'public void shouldNotFailIfTheDefaultViewIsMissing() {' - line 50"]}, "SearchTest.java": {"METHODS": ["'public void findAndSuggest() {' - line 40", "'new SearchIndexBuilder()' - line 44", "'public void findClosestSuggestedItem() {' - line 64", "'public SearchIndex getSearchIndex() {' - line 70", "'public String getSearchName() {' - line 75", "'public String getSearchUrl() {' - line 80", "'public SearchIndex getSearchIndex() {' - line 87", "'public String getSearchName() {' - line 92", "'public String getSearchUrl() {' - line 97"]}, "BehaviorTest.java": {"METHODS": ["'public void testCssSelectors() throws Exception {' - line 48", "'private int asInt(ScriptResult r) {' - line 64", "'public void testDuplicateRegistrations() throws Exception {' - line 70", "'public void testSelectorOrdering() throws Exception {' - line 77", "'public String getUrlName() {' - line 86"]}, "TaskTest.java": {"METHODS": ["'@Test public void postLink() throws Exception {' - line 46", "'@RequirePOST public void doPost(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {' - line 58", "'public String getIconFileName() {' - line 65", "'public String getDisplayName() {' - line 70", "'public String getUrlName() {' - line 75"]}, "StopButtonTest.java": {"METHODS": ["'public void noInjectionArePossible() throws Exception {' - line 55", "'private void checkRegularCase(TestRootAction testParams) throws Exception {' - line 65", "'private void checkInjectionInHref(TestRootAction testParams) throws Exception {' - line 74", "'private void checkInjectionInHrefWithConfirm(TestRootAction testParams) throws Exception {' - line 88", "'private void checkInjectionInConfirm(TestRootAction testParams) throws Exception {' - line 102", "'private HtmlAnchor getStopLink(HtmlPage page) {' - line 116", "'public HttpResponse doSubmit(StaplerRequest request) {' - line 145"]}, "UserExperimentalFlagTest.java": {"METHODS": ["'public void testNonExistingClass() throws Exception {' - line 53", "'public void testNonFlagClass() throws Exception {' - line 58", "'public void testExistingClassButNotRegisteredFlag() throws Exception {' - line 63", "'public void testExistingFlagButAnonymousUser() throws Exception {' - line 69", "'public void testPropertyWithValues() throws Exception {' - line 75", "'public void testPropertyWithNull() throws Exception {' - line 88", "'private void assertFlagUsage(String flagClassName, String expectedValue, User user) throws Exception {' - line 101", "'public String getFlagClassName() {' - line 122", "'public void setFlagClassName(String flagClassName) {' - line 126", "'public String getUrlName() {' - line 131", "'public Test1UserExperimentalFlag() {' - line 138", "'public String getDisplayName() {' - line 148", "'public Test2UserExperimentalFlag() {' - line 160", "'public String getDisplayName() {' - line 171"]}, "LayoutTest.java": {"METHODS": ["'@Test public void rejectedLinks() throws Exception {' - line 39"]}, "RenderOnDemandTest.java": {"METHODS": ["'public void testBehaviour() throws Exception {' - line 54", "'public void testMemoryConsumption() throws Exception {' - line 68", "'@Override public Void call() throws Exception {' - line 72", "'@Override public boolean accept(Object obj, Object referredFrom, Field reference) {' - line 77", "'public void testScript() throws Exception {' - line 92", "'public String getUrlName() {' - line 119"]}, "AjaxTest.java": {"METHODS": ["'@Test public void rejectedLinks() throws Exception {' - line 44", "'public void ajaxPageRenderingPossibleWithoutJellyTrace() throws Exception {' - line 62", "'public void ajaxPageRenderingPossibleWithJellyTrace() throws Exception {' - line 73", "'private String getExecutorsWidgetAjaxViewUrl() {' - line 86"]}, "SvgIconTest.java": {"METHODS": ["'public void regularUsage() throws Exception {' - line 51", "'public void onlyQuotesAreEscaped() throws Exception {' - line 63", "'public void preventXssFromTooltip() throws Exception {' - line 80", "'private void ensureXssIsPrevented(TestRootAction testRootAction, String validationPart, String dangerousPart) throws Exception {' - line 89"]}, "IconTest.java": {"METHODS": ["'public void testIcons() throws Exception {' - line 62", "'public String getUrlName() {' - line 85", "'public void testBallColorTd() throws Exception {' - line 91", "'public String getUrlName() {' - line 109", "'public BallColor getBallColorAborted() {' - line 113", "'public StatusIcon getStatusIcon1() {' - line 117", "'public StatusIcon getStatusIcon2() {' - line 121", "'public String getImageOf(String size) {' - line 124", "'public String getDescription() {' - line 129", "'public void testTasks() throws Exception {' - line 137", "'public String getUrlName() {' - line 159", "'private void assertIconToImageOkay(DomElement icon, String imgPath) {' - line 164", "'private void assertIconToImageOkay(DomElement icon, String imgPath, String classSpec) {' - line 168", "'private void assertIconToSvgOkay(DomElement icon, String classSpec) {' - line 176", "'private void assertIconToSvgIconOkay(DomElement icon, String classSpec) {' - line 184", "'private void assertIconToSymbolOkay(DomElement icon) {' - line 191", "'private void dump(HtmlElement element) throws TransformerException {' - line 195", "'private String toString(HtmlElement element) throws TransformerException {' - line 201"]}, "ConfirmationLinkTest.java": {"METHODS": ["'public void noInjectionArePossible() throws Exception {' - line 60", "'private void checkRegularCase(TestRootAction testParams) throws Exception {' - line 71", "'private void checkRegularCasePost(TestRootAction testParams) throws Exception {' - line 81", "'private void assertMethodGetAfterClick() throws Exception {' - line 102", "'private void assertMethodPostAfterClick() throws Exception {' - line 107", "'private Page getPageAfterClick() throws Exception {' - line 112", "'private void checkInjectionInHref(TestRootAction testParams) throws Exception {' - line 120", "'private void checkInjectionInMessage(TestRootAction testParams) throws Exception {' - line 137", "'private void checkInjectionInPost(TestRootAction testParams) throws Exception {' - line 153", "'private HtmlButton getClickableLink(HtmlPage page) throws IOException {' - line 170", "'public String getUrlName() {' - line 199", "'public HttpResponse doSubmit(StaplerRequest request) {' - line 204"]}, "RowSetTest.java": {"METHODS": ["'public void json() throws Exception {' - line 23", "'public void doSubmitTest1(StaplerRequest req) throws Exception {' - line 30", "'public String getUrlName() {' - line 42"]}, "RepeatablePropertyTest.java": {"METHODS": ["'public void setUp() {' - line 67", "'public void testSimple() throws Exception {' - line 72", "'public void testNullFieldNoDefault() throws Exception {' - line 78", "'public void testNullFieldWithDefault() throws Exception {' - line 83", "'public void testFieldNotNullWithDefaultIgnoresDefaults() throws Exception {' - line 89", "'new ExcitingObject(\"This default should be ignored\"),' - line 92", "'new ExcitingObject(\"Ignore me too\")' - line 93", "'public void testNestedRepeatableProperty() throws Exception {' - line 100", "'private void assertFormContents(final String viewName, final ArrayList<ExcitingObject> expected) throws Exception {' - line 121", "'private List<HtmlTextInput> toTextInputList(final List<HtmlElement> inputs) {' - line 129", "'private ArrayList<ExcitingObject> createRepeatable() {' - line 139", "'new ExcitingObject(\"A nice thing\"),' - line 141", "'new ExcitingObject(\"I'm even better\"),' - line 142", "'new ExcitingObject(\"Don't bother, I'm not exciting at all\")' - line 143", "'private HtmlForm getForm(final String viewName) throws Exception {' - line 147", "'public ExcitingObject(final String greatProperty) {' - line 157", "'public String getGreatProperty() {' - line 161", "'public Descriptor<ExcitingObject> getDescriptor() {' - line 166", "'public boolean equals(Object o) {' - line 171", "'public int hashCode() {' - line 181", "'public String toString() {' - line 186", "'public ExcitingDescriptor() {' - line 192", "'public ExcitingObjectContainer(String containerName, List<ExcitingObject> excitingObjectList) {' - line 203", "'public String getContainerName() {' - line 208", "'public List<ExcitingObject> getExcitingObjectList() {' - line 212", "'public Descriptor<RootActionImpl> getDescriptor() {' - line 229", "'public String getUrlName() {' - line 237"]}, "ValidateButtonTest.java": {"METHODS": ["'public void testValidateIsCalled() throws Exception {' - line 70", "'public String getUrlName() {' - line 96", "'public DescriptorImpl getDescriptor() {' - line 101", "'public void doValidateTest1(@QueryParameter(\"a\") String a, @QueryParameter(\"b\") boolean b,' - line 109", "'public void noInjectionArePossible() throws Exception {' - line 127", "'private void checkRegularCase(NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {' - line 136", "'private void checkInjectionInMethod(NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {' - line 150", "'private void checkInjectionInWith(NoInjectionArePossible.DescriptorImpl descriptor) throws Exception {' - line 164", "'private HtmlButton getValidateButton(HtmlPage page) {' - line 178", "'public String getUrlName() {' - line 197", "'public DescriptorImpl getDescriptor() {' - line 202", "'public void doValidateInjection(StaplerRequest request) {' - line 213", "'public void regularUsageOfUsingDescriptorUrl() throws Exception {' - line 221", "'public void xssUsingDescriptorUrl() throws Exception {' - line 227", "'private void checkValidateButtonWork(String projectName) throws Exception {' - line 231", "'public void doSomething(StaplerRequest req) {' - line 266"]}, "FormTest.java": {"METHODS": ["'public void autocompleteOffByDefault() throws IOException, SAXException {' - line 28", "'public void autocompleteOnWhenTrue() throws IOException, SAXException {' - line 38", "'public void inputsCanSetAutocomplete() throws IOException, SAXException {' - line 48", "'public String getUrlName() {' - line 60", "'public String getUrlName() {' - line 68", "'public String getUrlName() {' - line 76"]}, "ExpandableTextboxTest.java": {"METHODS": ["'public void testMultiline() throws Exception {' - line 68", "'protected HtmlPage evaluateAsHtml(String jellyScript) throws Exception {' - line 82", "'public void noInjectionArePossible() throws Exception {' - line 92", "'private void checkRegularCase(TestRootAction testParams) throws Exception {' - line 100", "'private void checkInjectionInName(TestRootAction testParams) throws Exception {' - line 111", "'private HtmlButton getExpandButton(HtmlPage page) {' - line 122", "'public String getUrlName() {' - line 144", "'public HttpResponse doSubmit(StaplerRequest request) {' - line 149", "'public void noXssUsingInputValue() throws Exception {' - line 156", "'public void expandsIntoNewlines() throws Exception {' - line 178", "'public ExpandableTextBoxProperty(String theField) {' - line 198", "'public String getTheField() {' - line 202"]}, "NameRefTest.java": {"METHODS": ["'@Test public void test() throws Exception {' - line 44", "'public HttpResponse doSubmitTest1(StaplerRequest req) throws Exception {' - line 52"]}, "ApplyButtonTest.java": {"METHODS": ["'public void editDescription() throws Exception {' - line 26"]}, "EnumTest.java": {"METHODS": ["'public void testSelectionNoDefault() throws Exception {' - line 26", "'public void testSelectionWithDefault() throws Exception {' - line 40", "'private HtmlForm getForm(String viewName) throws Exception {' - line 51", "'public void doSubmitForm(StaplerRequest req) throws Exception {' - line 63", "'public String getUrlName() {' - line 74"]}, "RowVisibilityGroupTest.java": {"METHODS": ["'public void test1() throws Exception {' - line 53", "'public void test2() throws Exception {' - line 79", "'public Nested(String textbox2) {' - line 123", "'protected Drink(String textbox1, Nested inner) {' - line 132", "'public Beer(String textbox1, Nested inner) {' - line 140", "'public Coke(String textbox1, Nested inner) {' - line 150", "'public void doSubmitTest2(StaplerRequest req) throws Exception {' - line 164", "'public Descriptor<RootActionImpl> getDescriptor() {' - line 171", "'public String getUrlName() {' - line 179"]}, "RepeatableTest.java": {"METHODS": ["'public void setUp() {' - line 69", "'private void doTestSimple(HtmlForm f, JenkinsRule.WebClient wc) throws Exception {' - line 75", "'public void testSimple() throws Exception {' - line 86", "'public void testSimpleCheckNumberOfButtons() throws Exception {' - line 102", "'public void testSimpleCheckNumberOfButtonsEnabledTopButton() throws Exception {' - line 118", "'public Foo(String txt, boolean bool) {' - line 137", "'@Override public String toString() { return \"foo:\" + txt + ':' + bool; }' - line 142", "'private void addData() {' - line 145", "'public void testSimple_ExistingData() throws Exception {' - line 151", "'public void testMinimum() throws Exception {' - line 165", "'public void testMinimum_ExistingData() throws Exception {' - line 182", "'public void testNoData() throws Exception {' - line 198", "'public void testItemsWithDefaults() throws Exception {' - line 210", "'public void testItemsDefaultsIgnoredIfFieldHasData() throws Exception {' - line 216", "'public void testFieldWithDefaults() throws Exception {' - line 222", "'public void testFieldDefaultsIgnoredIfFieldHasData() throws Exception {' - line 228", "'private void addDefaults() {' - line 233", "'private void assertWithDefaults(final String viewName, final JenkinsRule.WebClient wc) throws Exception {' - line 239", "'private void assertDefaultsIgnoredIfHaveData(final String viewName, final JenkinsRule.WebClient wc) throws Exception {' - line 248", "'private void gotoAndSubmitConfig(final String viewName, final JenkinsRule.WebClient wc) throws Exception {' - line 257", "'public void testRadio() throws Exception {' - line 268", "'public FooRadio(String txt, String radio) {' - line 287", "'public void testRadio_ExistingData() throws Exception {' - line 294", "'public void testRadioBlock() throws Exception {' - line 313", "'private Fruit(String name) { this.name = name; }' - line 337", "'public Descriptor<Fruit> getDescriptor() {' - line 340", "'public FruitDescriptor(Class<? extends Fruit> clazz) {' - line 346", "'@Override public String toString() { return name + \" with \" + seeds + \" seeds\"; }' - line 361", "'@Override public String toString() { return (yellow ? \"Yellow\" : \"Green\") + \" \" + name; }' - line 374", "'@Override public String toString() { return fruit + \" \" + word; }' - line 386", "'public void testDropdownList() throws Exception {' - line 390", "'@Override public String toString() {' - line 420", "'public void testNested() throws Exception {' - line 433", "'public void testNestedEnabledTopButton() throws Exception {' - line 462", "'public void testNestedEnabledTopButtonInner() throws Exception {' - line 491", "'public void testNestedEnabledTopButtonOuter() throws Exception {' - line 520", "'private static void clickButton(JenkinsRule.WebClient wc, HtmlForm f, String caption, boolean isTopButton) throws IOException {' - line 547", "'public void testNestedRadio() throws Exception {' - line 553", "'public void testNestedRadioEnabledTopButton() throws Exception {' - line 582", "'private void assertEqualsJsonArray(String golden, Object jsonArray) {' - line 610", "'private static HtmlButton getHtmlButton(HtmlForm form, String buttonCaption, boolean isTopButton) {' - line 625", "'public void doSubmitTest(StaplerRequest req) throws Exception {' - line 660", "'public String getUrlName() {' - line 668"]}, "NumberTest.java": {"METHODS": ["'public void minValidation() throws IOException, SAXException {' - line 28", "'public void maxValidation() throws IOException, SAXException {' - line 60", "'public void minAndMaxValidation() throws IOException, SAXException {' - line 92", "'private String typeValueAndGetErrorMessage(HtmlInput input, String value) throws IOException {' - line 175", "'public String getUrlName() {' - line 186", "'public String getUrlName() {' - line 194", "'public String getUrlName() {' - line 202"]}, "HeteroListTest.java": {"METHODS": ["'public void xssPrevented_heteroList_usingDescriptorDisplayName() throws Exception {' - line 65", "'public void xssPrevented_usingToolInstallation_repeatableAddExisting() throws Exception {' - line 86", "'public void xssPrevented_usingToolInstallation_repeatableAddAfterClick() throws Exception {' - line 100", "'public void xssPrevented_usingToolInstallation_repeatableAddWithExistingUsingInstallationsButton() throws Exception {' - line 121", "'public void xssPrevented_usingToolInstallation_repeatableAddWithExistingAfterOpening() throws Exception {' - line 138", "'public void xssPrevented_usingToolInstallation_repeatableDelete() throws Exception {' - line 165", "'public Descriptor<TestItemDescribable> getDescriptor() {' - line 181", "'public String getDisplayName() {' - line 191", "'public String getIconFileName() {' - line 203", "'public String getDisplayName() {' - line 209", "'public String getUrlName() {' - line 215", "'public Xss(String name, String home, List<? extends ToolProperty<?>> properties) {' - line 222", "'public String getDisplayName() {' - line 233", "'public Xss[] getInstallations() {' - line 238", "'public void setInstallations(Xss... xsses) {' - line 243", "'@Override protected FormValidation checkHomeDirectory(File value) {' - line 255"]}, "BooleanRadioTest.java": {"METHODS": ["'public void test() throws Exception {' - line 26", "'public BooleanRadioTestDescribable(boolean f) {' - line 38", "'public FormValidation doSubmitTest1(StaplerRequest req) throws Exception {' - line 48", "'public String getUrlName() {' - line 60"]}, "SecretTextareaTest.java": {"METHODS": ["'public void setUp() throws IOException {' - line 59", "'public void addEmptySecret() throws Exception {' - line 66", "'public void addSecret() throws Exception {' - line 72", "'public void addSecretAndUpdateDescription() throws Exception {' - line 78", "'public void addSecretAndUpdateSecretWithEmptyValue() throws Exception {' - line 89", "'private void assertTestBuilderDataBoundEqual(TestBuilder other) throws Exception {' - line 102", "'private void setProjectSecret(String secret) throws Exception {' - line 106", "'private HtmlForm goToConfigForm() throws IOException, SAXException {' - line 113", "'private static void clickSecretUpdateButton(HtmlForm configForm) throws IOException {' - line 117", "'private static String getHiddenSecretValue(HtmlForm configForm) {' - line 121", "'private static TestBuilder newDefault() {' - line 130", "'private static TestBuilder fromString(String secret) {' - line 134", "'private static TestBuilder fromStringWithDescription(String secret, String description) {' - line 138", "'public TestBuilder(Secret secret) {' - line 145", "'public Secret getSecret() {' - line 149", "'public String getDescription() {' - line 153", "'public void setDescription(String description) {' - line 158", "'public String getDisplayName() {' - line 166", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 171"]}, "EnumSetTest.java": {"METHODS": ["'public void test1() throws Exception {' - line 27", "'public EnumSetTestDescribable(EnumSet<BallColor> colors) {' - line 38", "'public FormValidation doSubmitTest1(StaplerRequest req) throws Exception {' - line 48", "'public String getUrlName() {' - line 57"]}, "OptionTest.java": {"METHODS": ["'public void optionsAreCorrectlyEscaped() throws Exception {' - line 60", "'private void checkNonDangerousOutputCorrect_simple() throws Exception {' - line 66", "'private void checkNonDangerousOutputCorrect_advanced() throws Exception {' - line 71", "'private String escapeForBody(String str) {' - line 123", "'private String escapeForBody_alternate(String str) {' - line 130", "'private String escapeForValue(String str) {' - line 140", "'private String escapeForBody_uglyButSafe(String str) {' - line 149", "'private String escapeForValue_uglyButSafe(String str) {' - line 160", "'private void checkDangerousOutputNotActive() throws Exception {' - line 173", "'private void benchOfTest_strictContains(String msg, String containsExpected) throws Exception {' - line 182", "'private void benchOfTest_acceptEscapedCharacters(String msg, String containsExpected) throws Exception {' - line 186", "'private void _benchOfTest(String msg, String containsExpected, boolean checkExactCharacters) throws Exception {' - line 190", "'private void checkJelly(int mode, String msgToInject, String bothContainsExpected, boolean checkExactCharacters) throws Exception {' - line 204", "'private void checkGroovy(int mode, String msgToInject, String bothContainsExpected, boolean checkExactCharacters) throws Exception {' - line 232", "'private void checkGroovy(int mode, String msgToInject, String bodyContainsExpected, String valueContainsExpected, boolean checkExactCharacters) throws Exception {' - line 236", "'private void callPageAndCheckIfResultContainsExpected(String url, String bodyContainsExpected, String valueContainsExpected, boolean checkExactCharacters) throws Exception {' - line 258", "'public String getInjection() {' - line 308", "'public void setInjection(String injection) {' - line 312", "'public int getMode() {' - line 316", "'public void setMode(int mode) {' - line 320", "'public boolean isWithValue() {' - line 324", "'public void setWithValue(boolean withValue) {' - line 328", "'public String getIconFileName() {' - line 333", "'public String getDisplayName() {' - line 338", "'public String getUrlName() {' - line 343", "'public String getInjection() {' - line 354", "'public void setInjection(String injection) {' - line 358", "'public int getMode() {' - line 362", "'public void setMode(int mode) {' - line 366", "'public boolean isWithValue() {' - line 370", "'public void setWithValue(boolean withValue) {' - line 374", "'public String getIconFileName() {' - line 379", "'public String getDisplayName() {' - line 384", "'public String getUrlName() {' - line 389"]}, "TextAreaTest.java": {"METHODS": ["'public void validation() throws Exception {' - line 28", "'public TestBuilder() {}' - line 40", "'public String getText1() {' - line 42", "'public String getText2() {' - line 46", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 56", "'public FormValidation doCheckText1(@QueryParameter String value) {' - line 60", "'public FormValidation doCheckText2(@QueryParameter String text1) {' - line 65", "'public void text() throws Exception {' - line 75", "'public TextareaTestBuilder(String text) {' - line 111", "'public String getText() {' - line 115", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 122"]}, "AdvancedButtonTest.java": {"METHODS": ["'public void testNestedOptionalBlock() throws Exception {' - line 30", "'public void testSectionInsideOfAdvanced() throws Exception {' - line 41", "'public String getUrlName() {' - line 52", "'public FormValidation doSubmitNestedOptionalBlock(StaplerRequest req) throws Exception {' - line 56"]}, "ComboBoxTest.java": {"METHODS": ["'public CompoundFieldComboBoxBuilder(CompoundField compoundField, String foo) {' - line 67", "'public boolean isApplicable(Class jobType) {' - line 75", "'public CompoundField getCompoundField() {' - line 89", "'public BuildStepMonitor getRequiredMonitorService() {' - line 95", "'public CompoundField(String abc, String xyz) {' - line 108", "'public String getAbc() {' - line 113", "'public String getXyz() {' - line 117", "'public void testCompoundFieldDependentComboBox() throws Exception {' - line 130", "'public String getDisplayName() {' - line 158", "'public ComboBoxModel doFillXssItems() {' - line 162", "'public void testEnsureXssNotPossible() throws Exception {' - line 170"]}, "DropdownListTest.java": {"METHODS": ["'public void test1() throws Exception {' - line 22", "'public String getUrlName() {' - line 31", "'public FormValidation doSubmitTest1(StaplerRequest req) throws Exception {' - line 35"]}, "PasswordTest.java": {"METHODS": ["'public void secretNotPlainText() throws Exception {' - line 95", "'public String getIconFileName() {' - line 109", "'public String getDisplayName() {' - line 114", "'public String getUrlName() {' - line 119", "'public void testExposedCiphertext() throws Exception {' - line 126", "'public void testCheckMethod() throws Exception {' - line 213", "'public VulnerableProperty(Secret secret) {' - line 236", "'public FormValidation doCheckSecret(@QueryParameter String value) {' - line 245", "'public void testBackgroundSecretConversion() throws Exception {' - line 256", "'public String getSecretWithStringGetterAndSetter() {' - line 309", "'public void setSecretWithStringGetterAndSetter(String secretWithStringGetterAndSetter) {' - line 313", "'public Secret getSecretWithSecretGetterAndSetter() {' - line 317", "'public void setSecretWithSecretGetterAndSetter(Secret secretWithSecretGetterAndSetter) {' - line 321", "'public String getStringWithStringGetterAndSetter() {' - line 325", "'public void setStringWithStringGetterAndSetter(String stringWithStringGetterAndSetter) {' - line 329", "'public Secret getStringWithSecretGetterAndSetter() {' - line 333", "'public void setStringWithSecretGetterAndSetter(Secret stringWithSecretGetterAndSetter) {' - line 337", "'public static PasswordHolderConfiguration getInstance() {' - line 341", "'public void testBuildStep() throws Exception {' - line 347", "'public PasswordHolderBuildStep() {' - line 460", "'public String getSecretWithStringGetterStringSetter() {' - line 464", "'public void setSecretWithStringGetterStringSetter(String secretWithStringGetterStringSetter) {' - line 469", "'public Secret getSecretWithSecretGetterStringSetter() {' - line 473", "'public void setSecretWithSecretGetterStringSetter(String secretWithSecretGetterStringSetter) {' - line 478", "'public String getSecretWithStringGetterSecretSetter() {' - line 482", "'public void setSecretWithStringGetterSecretSetter(Secret secretWithStringGetterSecretSetter) {' - line 487", "'public Secret getSecretWithSecretGetterSecretSetter() {' - line 491", "'public void setSecretWithSecretGetterSecretSetter(Secret secretWithSecretGetterSecretSetter) {' - line 496", "'public String getStringWithStringGetterStringSetter() {' - line 500", "'public void setStringWithStringGetterStringSetter(String stringWithStringGetterStringSetter) {' - line 505", "'public Secret getStringWithSecretGetterStringSetter() {' - line 509", "'public void setStringWithSecretGetterStringSetter(String stringWithSecretGetterStringSetter) {' - line 514", "'public String getStringWithStringGetterSecretSetter() {' - line 518", "'public void setStringWithStringGetterSecretSetter(Secret stringWithStringGetterSecretSetter) {' - line 523", "'public Secret getStringWithSecretGetterSecretSetter() {' - line 527", "'public void setStringWithSecretGetterSecretSetter(Secret stringWithSecretGetterSecretSetter) {' - line 532", "'public void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull Launcher launcher, @NonNull TaskListener listener) throws InterruptedException, IOException {' - line 537", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 545", "'public void testStringlyTypedSecrets() throws Exception {' - line 552", "'public StringlyTypedSecretsBuilder(String mySecret) {' - line 599", "'public String getMySecret() {' - line 603", "'public void perform(@NonNull Run<?, ?> run, @NonNull FilePath workspace, @NonNull Launcher launcher, @NonNull TaskListener listener) throws InterruptedException, IOException {' - line 608", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 616", "'public void testBlankoutOfStringBackedPasswordFieldWithoutItemConfigure() throws Exception {' - line 623", "'public Class<Job> type() {' - line 654", "'public String getIconFileName() {' - line 669", "'public String getDisplayName() {' - line 675", "'public String getUrlName() {' - line 681", "'public Secret getSecretPassword() {' - line 685", "'public String getStringPassword() {' - line 689", "'public void computerExtendedReadNoSecretsRevealed() throws Exception {' - line 695", "'public String getIconFileName() {' - line 738", "'public String getDisplayName() {' - line 743", "'public String getUrlName() {' - line 748"]}, "ListScmBrowsersTest.java": {"METHODS": ["'public void selectBoxesUnique_FreeStyleProject() throws Exception {' - line 28", "'public void selectBoxesUnique_MatrixProject() throws Exception {' - line 33", "'private void check(Item p) throws IOException, SAXException {' - line 37"]}, "ActionsTest.java": {"METHODS": ["'public void override() throws Exception {' - line 44"]}, "ResilientJsonObjectTest.java": {"METHODS": ["'public void databindingShouldIgnoreUnrecognizedJsonProperty() {' - line 19"]}, "UrlHelperTest.java": {"METHODS": ["'public void regularCases() {' - line 12", "'public void fragmentIsForbidden() {' - line 56", "'public void queryIsForbidden() {' - line 63", "'public void otherCharactersAreForbidden() {' - line 70", "'public void ipv4Allowed() {' - line 84", "'public void ipv6Allowed() {' - line 92", "'public void withCustomDomain() {' - line 113", "'public void multipleConsecutiveDashesAreAllowed() {' - line 131", "'public void trailingDotsAreAccepted() {' - line 140", "'public void ensureJavaScriptSchemaIsNotAllowed() {' - line 151"]}, "ResourceBundleUtilTest.java": {"METHODS": ["'public void test_known_locale() {' - line 43", "'public void test_unknown_locale() {' - line 57", "'public void test_unknown_bundle() {' - line 74"]}, "PluginLabelUtilTest.java": {"METHODS": ["'public void testCanonicalLabels() {' - line 10"]}, "AtmostOneTaskExecutorTest.java": {"METHODS": ["'public void doubleBooking() throws Exception {' - line 16"]}, "TimerTest.java": {"METHODS": ["'public void timersArentBlocked() throws InterruptedException {' - line 22", "'protected void doRun() throws Exception {' - line 28", "'protected void doRun() {' - line 36", "'public void timerBogusClassloader() throws Exception {' - line 56", "'public void run() {' - line 66", "'public void run() {' - line 74"]}, "TimeDurationTest.java": {"METHODS": ["'public void fromString() {' - line 11"]}, "VirtualFileTest.java": {"METHODS": ["'@Test public void outsideSymlinks() throws Exception {' - line 86", "'@Test public void mode() throws Exception {' - line 106", "'private static String modeString(int mode) throws IOException {' - line 118", "'@Test public void list() throws Exception {' - line 123", "'public String getName() {' - line 158", "'public URI toURI() {' - line 163", "'public VirtualFile getParent() {' - line 168", "'public boolean isDirectory() {' - line 173", "'public boolean isFile() {' - line 178", "'public boolean exists() throws IOException {' - line 183", "'return isFile() || isDirectory();' - line 184", "'public VirtualFile[] list() {' - line 188", "'public VirtualFile child(String name) {' - line 193", "'public long length() {' - line 198", "'public long lastModified() {' - line 203", "'public boolean canRead() throws IOException {' - line 208", "'return isFile();' - line 209", "'public InputStream open() {' - line 213", "'public void list_IllegalSymlink_FileVF() throws Exception {' - line 220", "'public void list_Glob_NoFollowLinks_FileVF() throws Exception {' - line 233", "'public void list_Glob_NoFollowLinks_FilePathVF() throws Exception {' - line 248", "'public void zip_NoFollowLinks_FilePathVF() throws Exception {' - line 264", "'public void zip_NoFollowLinks_FilePathVF_withPrefix() throws Exception {' - line 292", "'public void zip_NoFollowLinks_FileVF() throws Exception {' - line 322", "'public void zip_NoFollowLinks_FileVF_withPrefix() throws Exception {' - line 350", "'@Test public void readLink() throws Exception {' - line 379", "'public void simpleList_FileVF() throws Exception {' - line 397", "'public void list_NoFollowLinks_FileVF() throws Exception {' - line 412", "'public void list_NoFollowLinks_FilePathVF() throws Exception {' - line 427", "'public void simpleList_WithSymlink_FileVF() throws Exception {' - line 442", "'public void list_NoFollowLinks_ExternalSymlink_FileVF() throws Exception {' - line 460", "'public void list_NoFollowLinks_ExternalSymlink_FilePathVF() throws Exception {' - line 477", "'public void list_Glob_NoFollowLinks_ExternalSymlink_FilePathVF() throws Exception {' - line 494", "'public void list_Glob_NoFollowLinks_ExternalSymlink_FileVF() throws Exception {' - line 511", "'public void list_NoFollowLinks_InternalSymlink_FileVF() throws Exception {' - line 526", "'public void list_NoFollowLinks_InternalSymlink_FilePathVF() throws Exception {' - line 541", "'public void list_NoFollowLinks_NoKids_FileVF() throws Exception {' - line 557", "'public void list_Glob_NoFollowLinks_NoKids_FileVF() throws Exception {' - line 567", "'public void list_Glob_NoFollowLinks_NoKids_FilePathVF() throws Exception {' - line 577", "'public void list_NoFollowLinks_NoKids_FilePathVF() throws Exception {' - line 587", "'public void simpleList_NoKids_FileVF() throws Exception {' - line 596", "'public void simpleList_IllegalSymlink_FileVF() throws Exception {' - line 606", "'public void simpleList_FilePathVF() throws Exception {' - line 618", "'public void simpleList_WithSymlink_FilePathVF() throws Exception {' - line 633", "'public void simpleList_NoKids_FilePathVF() throws Exception {' - line 650", "'public void simpleList_AbstractBase() throws Exception {' - line 659", "'public void list_NoFollowLinks_AbstractBase() throws Exception {' - line 676", "'public void simpleList_WithSymlink_AbstractBase() throws Exception {' - line 693", "'public void list_NoFollowLinks_WithSymlink_AbstractBase() throws Exception {' - line 713", "'public void simpleList_NoKids_AbstractBase() throws Exception {' - line 732", "'private void prepareFileStructureForIsDescendant(File root) throws Exception {' - line 756", "'new FilePath(_a).symlinkTo(a.getAbsolutePath(), TaskListener.NULL);' - line 777", "'new FilePath(_aatxt).symlinkTo(aaTxt.getAbsolutePath(), TaskListener.NULL);' - line 780", "'new FilePath(_b).symlinkTo(b.getAbsolutePath(), TaskListener.NULL);' - line 783", "'new FilePath(_b2).symlinkTo(b.getAbsolutePath(), TaskListener.NULL);' - line 785", "'@Test public void forFile_isDescendant() throws Exception {' - line 789", "'public void forFilePath_isDescendant() throws Exception {' - line 806", "'private void checkCommonAssertionForIsDescendant(VirtualFile virtualRoot, VirtualFile virtualRootChildA, VirtualFile virtualFromA, String absolutePath) throws Exception {' - line 821", "'public void forFile_listOnlyDescendants_withoutIllegal() throws Exception {' - line 879", "'public void forFilePath_listOnlyDescendants_withoutIllegal() throws Exception {' - line 895", "'private void checkCommonAssertionForList(VirtualFile virtualRoot, VirtualFile virtualFromA, VirtualFile virtualFromB) throws Exception {' - line 909", "'public void forAbstractBase_listOnlyDescendants_withoutIllegal() throws Exception {' - line 952", "'public void forAbstractBase_WithAllDescendants_listOnlyDescendants_withoutIllegal() throws Exception {' - line 962", "'private VFMatcher(String description) {' - line 979", "'public void describeTo(Description description) {' - line 984", "'public static VFMatcher hasName(String expectedName) {' - line 988", "'protected boolean matchesSafely(VirtualFile vf) {' - line 991", "'public void testGetParent_FileVF() throws IOException {' - line 999", "'public void testGetUri_FileVF() throws IOException {' - line 1009", "'public void testIsDirectory_IllegalSymLink_FileVF() throws IOException, InterruptedException {' - line 1022", "'public void testReadLink_IllegalSymLink_FileVF() throws IOException, InterruptedException {' - line 1032", "'public void testLength_FileVF() throws IOException {' - line 1041", "'public void testLength_IllegalSymLink_FileVF() throws IOException, InterruptedException {' - line 1051", "'public void testMode_IllegalSymLink_FileVF() throws Exception {' - line 1060", "'public void testLastModified_FileVF() throws Exception {' - line 1068", "'public void testLastModified_IllegalSymLink_FileVF() throws Exception {' - line 1078", "'public void testCanRead_True_FileVF() throws Exception {' - line 1086", "'public void testCanRead_False_FileVF() throws Exception {' - line 1096", "'public void testCanRead_IllegalSymlink_FileVF() throws Exception {' - line 1109", "'public void testOpenNoFollowLinks_AbstractBase() throws Exception {' - line 1118", "'public void testOpenNoFollowLinks_FollowsLink_AbstractBase() throws Exception {' - line 1131", "'public void testOpenNoFollowLinks_NoFollowsLink_FileVF() throws Exception {' - line 1148", "'public void testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FileVF() throws Exception {' - line 1161", "'public void testOpenNoFollowLinks_NoFollowsLinkInternalSymlink_FilePathVF() throws Exception {' - line 1175", "'public void testOpenNoFollowLinks_NoFollowsLink_FilePathVF() throws Exception {' - line 1188", "'public void testSupportIsDescendant_FileVF() throws Exception {' - line 1200", "'public void testSupportsQuickRecursiveListing_FileVF() throws Exception {' - line 1207", "'public void testGetParent_FilePathVF() throws IOException {' - line 1214", "'public void testGetUri_FilePathVF() throws IOException {' - line 1224", "'public void testLength_FilePathVF() throws IOException {' - line 1236", "'public void testLastModified_FilePathVF() throws Exception {' - line 1245", "'public void testCanRead_True_FilePathVF() throws Exception {' - line 1255", "'public void testCanRead_False_FilePathVF() throws Exception {' - line 1265", "'public void testSupportIsDescendant_FilePathVF() throws Exception {' - line 1278", "'public void testSupportsQuickRecursiveListing_FilePathVF() throws Exception {' - line 1285", "'public void testSupportIsDescendant_AbstractBase() {' - line 1292", "'public void testSupportsQuickRecursiveListing_AbstractBase() {' - line 1298", "'public void testReadLink_AbstractBase() throws Exception {' - line 1304", "'public void testMode_AbstractBase() throws Exception {' - line 1312", "'public void testIsDescendant_AbstractBase() throws Exception {' - line 1320", "'public void testExternalUrl() throws Exception {' - line 1326", "'public void testToString() throws IOException {' - line 1332", "'public void testHashCode() throws IOException {' - line 1344", "'public void testEquals_Null() throws IOException {' - line 1354", "'public void testEquals_Different() throws IOException {' - line 1365", "'public void testEquals_Same() throws IOException {' - line 1378", "'public void testEquals_OtherType() throws IOException {' - line 1391", "'public void testCompareTo_Same() throws IOException {' - line 1401", "'public void testCompareTo_LessThan() throws IOException {' - line 1414", "'public void testCompareTo_GreaterThan() throws IOException {' - line 1427", "'public void hasSymlink_AbstractBase() throws IOException {' - line 1440", "'public void hasSymlink_False_FilePathVF() throws IOException {' - line 1448", "'public void hasSymlink_True_FilePathVF() throws IOException, InterruptedException {' - line 1454", "'public void hasSymlink_False_FileVF() throws IOException {' - line 1466", "'public void hasSymlink_True_FileVF() throws IOException, InterruptedException {' - line 1472", "'private File createInvalidDirectorySymlink(String invalidSymlinkName) throws IOException, InterruptedException {' - line 1483", "'private File createInvalidFileSymlink() throws IOException, InterruptedException {' - line 1491", "'private long computeEarlierSystemTime() {' - line 1501", "'public String getName() {' - line 1529", "'public URI toURI() {' - line 1535", "'public VirtualFile getParent() {' - line 1540", "'public boolean isDirectory() {' - line 1545", "'public boolean isFile() {' - line 1550", "'public boolean exists() {' - line 1555", "'public VirtualFile[] list() {' - line 1561", "'protected VirtualFile child(File kid, File root) {' - line 1573", "'public VirtualFile child(@NonNull String name) {' - line 1579", "'return child(new File(file, name), root);' - line 1580", "'public long length() {' - line 1584", "'public long lastModified() {' - line 1589", "'public boolean canRead() {' - line 1594", "'public InputStream open() throws IOException {' - line 1599", "'public boolean supportIsDescendant() {' - line 1616", "'public boolean isDescendant(String childRelativePath) {' - line 1621", "'protected VirtualFile child(File kid, File root) {' - line 1626"]}, "JenkinsJVMTest.java": {"METHODS": ["'public void checkNotJenkinsJVM_WhenNotInAJenkinsJVM() {' - line 9", "'public void checkJenkinsJVM_WhenNotInAJenkinsJVM() {' - line 14", "'public void checkNotJenkinsJVM_WhenInAJenkinsJVM() {' - line 19", "'public void checkJenkinsJVM_WhenInAJenkinsJVM() {' - line 29"]}, "MarkFindingOutputStreamTest.java": {"METHODS": ["'public void findTwice() throws IOException {' - line 23", "'public void partialMatchTurnsOutToBeWrongIn2ndWrite() throws IOException {' - line 30", "'public void closeInTheMiddle() throws IOException {' - line 43", "'public void oneByOne() throws IOException {' - line 51", "'public void writeOneHoldOff() throws IOException {' - line 60", "'private void assertOutput(String s) throws IOException {' - line 68", "'private void assertCount(int n) {' - line 72", "'private void write(String s) throws IOException {' - line 76", "'private void writeOneByOne(String s) throws IOException {' - line 80", "'protected void onMarkFound() {' - line 93"]}, "TreeStringBuilderTest.java": {"METHODS": ["'public void test() {' - line 19", "'public void testRandom() {' - line 34", "'private void verify(final String s, final TreeString t) {' - line 68"]}, "JavaUtilsTest.java": {"METHODS": ["'public void verifyJava8() {' - line 38", "'public void verifyPostJava8() {' - line 44"]}, "FileLockerRule.java": {"METHODS": ["'protected void after() {' - line 52"]}, "PathRemoverTest.java": {"METHODS": ["'public void testForceRemoveFile() throws IOException {' - line 75", "'public void testForceRemoveFile_LockedFile() throws Exception {' - line 86", "'public void testForceRemoveFile_ReadOnly() throws IOException {' - line 125", "'public void testForceRemoveFile_DoesNotExist() throws IOException {' - line 138", "'public void testForceRemoveFile_SymbolicLink() throws IOException {' - line 150", "'public void testForceRemoveFile_DotsInPath() throws IOException {' - line 165", "'public void testForceRemoveFile_ParentIsSymbolicLink() throws IOException {' - line 181", "'public void testForceRemoveDirectoryContents() throws IOException {' - line 198", "'public void testForceRemoveDirectoryContents_LockedFile() throws Exception {' - line 218", "'public void testForceRemoveRecursive() throws IOException {' - line 238", "'public void testForceRemoveRecursive_DeletesAsMuchAsPossibleWithLockedFiles() throws Exception {' - line 255", "'public void testForceRemoveRecursive_RetryOnFailure() throws Exception {' - line 279", "'public void testForceRemoveRecursive_FailsWhenInterrupted() throws Exception {' - line 322", "'public void testForceRemoveRecursive_ContainsSymbolicLinks() throws IOException {' - line 364", "'public void testForceRemoveRecursive_ContainsDotPath() throws IOException {' - line 387", "'public void testForceRemoveRecursive_ParentIsSymbolicLink() throws IOException {' - line 404", "'public void testForceRemoveRecursive_TruncatesNumberOfExceptions() throws IOException {' - line 424", "'private static void mkdirs(File... dirs) {' - line 448", "'private static void touchWithFileName(File... files) throws IOException {' - line 455"]}, "XStreamDOMTest.java": {"METHODS": ["'public void setUp() {' - line 60", "'public void testMarshal() throws IOException {' - line 66", "'private String getTestData1() throws IOException {' - line 74", "'return getTestData(\"XStreamDOMTest.data1.xml\");' - line 75", "'private String getTestData(String resourceName) throws IOException {' - line 78", "'private Foo createSomeFoo() {' - line 83", "'public void testUnmarshal() throws Exception {' - line 91", "'public void testWriteToDOM() throws Exception {' - line 102", "'public void testNoChild() {' - line 114", "'public void testNameEscape() {' - line 123", "'public void testDomInMap() {' - line 138", "'private void assertXStreamDOMEquals(XStreamDOM expected, XStreamDOM actual) {' - line 147", "'public void readFromInputStream() throws Exception {' - line 169", "'public void escapeHandling() throws Exception {' - line 184", "'private void assertNamesAreEscaped(List<XStreamDOM> children) {' - line 204"]}, "RunIdMigratorTest.java": {"METHODS": ["'@BeforeClass public static void timezone() {' - line 61", "'@AfterClass public static void tearDown() {' - line 66", "'@BeforeClass public static void logging() {' - line 71", "'@Before public void init() {' - line 81", "'@Test public void newJob() throws Exception {' - line 86", "'@Test public void legacy() throws Exception {' - line 96", "'new File(dir, \"lastSuccessfulBuild\").delete();' - line 134", "'@Test public void reRunMigration() throws Exception {' - line 138", "'@Test public void reverseImmediately() throws Exception {' - line 177", "'@Test public void reverseAfterNewBuilds() throws Exception {' - line 214", "'@Test public void reverseMatrixAfterNewBuilds() throws Exception {' - line 246", "'@Test public void reverseMavenAfterNewBuilds() throws Exception {' - line 278", "'private void write(String file, String text) throws Exception {' - line 312", "'private void link(String symlink, String dest) throws Exception {' - line 318", "'private String summarize() throws Exception {' - line 322", "'return summarize(dir);' - line 323", "'private static String summarize(File dir) throws Exception {' - line 326", "'@Test public void move() throws Exception {' - line 346"]}, "Security2424Test.java": {"METHODS": ["'public void doesNotAcceptNameWithTrailingDot_regular() {' - line 37", "'public void doesNotAcceptNameWithTrailingDot_withSpaces() {' - line 47", "'public void doesNotAcceptNameWithTrailingDot_exceptIfEscapeHatchIsSet() {' - line 57"]}, "IdStrategyTest.java": {"METHODS": ["'public void caseInsensitive() {' - line 14", "'public void caseInsensitivePassesThroughOldLegacy() {' - line 50", "'public void caseSensitive() {' - line 61", "'public void caseSensitivePassesThroughOldLegacy() {' - line 100", "'public void testEqualsCaseInsensitive() {' - line 109", "'public void testEqualsCaseSensitive() {' - line 119", "'public void testEqualsCaseSensitiveEmailAddress() {' - line 129", "'public void testKeyForCaseInsensitive() {' - line 144", "'public void testKeyForCaseSensitive() {' - line 152", "'public void testKeyForCaseSensitiveEmailAddress() {' - line 160", "'public void testCompareCaseInsensitive() {' - line 173", "'public void testCompareCaseSensitive() {' - line 184", "'public void testCompareCaseSensitiveEmail() {' - line 195", "'private void assertRestrictedNames(IdStrategy idStrategy) {' - line 211"]}, "CoreEnvironmentContributorTest.java": {"METHODS": ["'public void tearDown() throws Exception {' - line 33", "'public void setUp() {' - line 38", "'public void buildEnvironmentForJobShouldntUseCurrentComputer() throws IOException, InterruptedException {' - line 45"]}, "JDKNameTest.java": {"METHODS": ["'public void nullIsDefaultName() {' - line 34", "'public void recognizeOldDefaultName() {' - line 39", "'public void recognizeDefaultName() {' - line 45", "'public void othernameNotDefault() {' - line 50"]}, "JenkinsGetRootUrlTest.java": {"METHODS": ["'public void setUp() {' - line 51", "'public void getConfiguredRootUrl() {' - line 58", "'public void getAccessedRootUrl() {' - line 73", "'public void preferConfiguredOverAccessed() {' - line 88", "'public void doNotInheritProtocolWhenDispatchingRequest() {' - line 104", "'public void doNotInheritProtocolWhenDispatchingRequest2() {' - line 120", "'public void useForwardedProtoWhenPresent() {' - line 135", "'public void useForwardedProtoWithIPv6WhenPresent() {' - line 176", "'private void rootUrlFromRequestIs(final String expectedRootUrl) {' - line 205", "'private void rootUrlIs(final String expectedRootUrl) {' - line 210", "'private void configured(final String configuredHost) {' - line 215", "'private void withHeader(String name, final String value) {' - line 220", "'private void accessing(final String realUrl) {' - line 225", "'@Override public Integer answer(InvocationOnMock invocation) {' - line 235", "'private URL getUrl(final String realUrl) {' - line 245"]}, "LabelAutoCompleteSeederTest.java": {"METHODS": ["'static Stream<Arguments> localParameters()' - line 40", "'public void testAutoCompleteSeeds(String underTest, List<String> expected) {' - line 61"]}, "Build.java": {"METHODS": ["'protected Build(P project) throws IOException {' - line 91", "'protected Build(P job, Calendar timestamp) {' - line 95", "'protected Build(P project, File buildDir) throws IOException {' - line 102", "'public void run() {' - line 112", "'protected Runner createRunner() {' - line 123", "'protected Result doRun(@NonNull BuildListener listener) throws Exception {' - line 142", "'public void post2(@NonNull BuildListener listener) throws IOException, InterruptedException {' - line 177", "'public void cleanUp(@NonNull BuildListener listener) throws Exception {' - line 185", "'private boolean build(@NonNull BuildListener listener, @NonNull Collection<Builder> steps) throws IOException, InterruptedException {' - line 196"]}, "FakeMap.java": {"METHODS": ["'public FakeMap(File dir) {' - line 35", "'protected int getNumberOf(Build build) {' - line 40", "'protected Build retrieve(File dir) throws IOException {' - line 45"]}, "FakeMapBuilder.java": {"METHODS": ["'protected File getDir() {' - line 43", "'public FakeMapBuilder() {' - line 47", "'public FakeMapBuilder add(int n) throws IOException {' - line 50", "'public FakeMapBuilder addUnloadable(int n) {' - line 61", "'public FakeMap make() {' - line 67", "'public Statement apply(final Statement base, Description description) {' - line 73", "'public void evaluate() throws Throwable {' - line 76"]}, "SortedListTest.java": {"METHODS": ["'public void testCeil() {' - line 41", "'public void testFloor() {' - line 52", "'public void testLower() {' - line 63", "'public void testHigher() {' - line 74", "'public void testRange() {' - line 85", "'public void remove() {' - line 95", "'public void testClone() {' - line 106"]}, "SortedIntListTest.java": {"METHODS": ["'public void testLower() {' - line 13", "'@Test public void ceil() {' - line 21", "'@Test public void max() {' - line 39"]}, "AbstractLazyLoadRunMapTest.java": {"METHODS": ["'public FakeMap make() {' - line 77", "'assert getDir() != null;' - line 78", "'protected BuildReference<Build> createReference(Build r) {' - line 81", "'public FakeMap make() {' - line 94", "'protected Build retrieve(File dir) throws IOException {' - line 97", "'public static void setUpClass() {' - line 113", "'public void setUp() throws Exception {' - line 118", "'public void lookup() {' - line 125", "'public void lookup2() {' - line 140", "'public void idempotentLookup() {' - line 145", "'public void lookupWithBogusKeyType() {' - line 153", "'public void firstKey() {' - line 163", "'@Test public void headMap() {' - line 169", "'public void lastKey() {' - line 184", "'public void search() {' - line 190", "'public void searchExactWhenIndexedButSoftReferenceExpired() throws IOException {' - line 198", "'@Test public void exactSearchShouldNotReload() throws Exception {' - line 210", "'public void unloadableData() throws IOException {' - line 231", "'public void eagerLoading() {' - line 240", "'public void fastSubMap() {' - line 248", "'public void identity() {' - line 259", "'public void indexOutOfBounds() throws Exception {' - line 267", "'@Test public void all() {' - line 285", "'public void entrySetIterator() {' - line 324", "'public void entrySetEmpty() {' - line 361", "'public void entrySetSize() {' - line 369", "'@Test public void entrySetChanges() {' - line 375", "'public void entrySetContains() {' - line 383", "'public void toArray() {' - line 390", "'public void slowRetrieve() throws Exception {' - line 404"]}, "HistoryPageFilterTest.java": {"METHODS": ["'public void test_latest_empty_page() {' - line 63", "'public void test_latest_partial_page() throws IOException {' - line 78", "'public void test_latest_longer_list() throws IOException {' - line 102", "'public void test_olderThan_gt_newest() throws IOException {' - line 124", "'public void test_olderThan_lt_oldest() throws IOException {' - line 143", "'public void test_olderThan_leaving_part_page() throws IOException {' - line 159", "'public void test_olderThan_mid_page() throws IOException {' - line 179", "'public void test_newerThan_gt_newest() throws IOException {' - line 197", "'public void test_newerThan_lt_oldest() throws IOException {' - line 213", "'public void test_newerThan_near_oldest() throws IOException {' - line 231", "'public void test_newerThan_near_newest() throws IOException {' - line 251", "'public void test_newerThan_doesntIncludeQueuedItems() throws IOException {' - line 270", "'public void test_laterItemsNotEvaluated() throws IOException {' - line 291", "'public void test_search_runs_by_build_number() throws IOException {' - line 312", "'public void should_be_case_insensitive_by_default() throws IOException {' - line 330", "'public void should_lower_case_search_string_in_case_insensitive_search() throws IOException {' - line 336", "'public void should_search_builds_by_build_variables() {' - line 343", "'new MockBuild(2).withBuildVariables(Map.of(\"env\", \"dummyEnv\")),' - line 345", "'new MockBuild(1).withBuildVariables(Map.of(\"env\", \"otherEnv\")));' - line 346", "'public void should_search_builds_by_build_params() throws IOException {' - line 352", "'new MockBuild(2).withBuildParameters(Map.of(\"env\", \"dummyEnv\")),' - line 354", "'new MockBuild(1).withBuildParameters(Map.of(\"env\", \"otherEnv\")));' - line 355", "'public void should_ignore_sensitive_parameters_in_search_builds_by_build_params() throws IOException {' - line 361", "'new MockBuild(2).withBuildParameters(Map.of(\"plainPassword\", \"pass1plain\")),' - line 363", "'new MockBuild(1).withSensitiveBuildParameters(\"password\", \"pass1\"));' - line 364", "'private void assertOneMatchingBuildForGivenSearchStringAndRunItems(String searchString, Iterable<ModelObject> runs) {' - line 368", "'private List<QueueItem> newQueueItems(long startId, long endId) {' - line 384", "'private Iterable<ModelObject> newRuns(long startId, long endId) throws IOException {' - line 392", "'private HistoryPageFilter<ModelObject> newPage(int maxEntries, Long newerThan, Long olderThan) {' - line 401", "'public int compareTo(Run o) {' - line 426", "'public Result getResult() {' - line 431", "'public boolean isBuilding() {' - line 436", "'public long getQueueId() {' - line 441", "'public int getNumber() {' - line 446", "'public long getQueueId() {' - line 470", "'public int getNumber() {' - line 476", "'private MockBuild(int buildNumber) {' - line 488", "'public int getNumber() {' - line 494", "'MockBuild withBuildVariables(Map<String, String> buildVariables) {' - line 503", "'MockBuild withBuildParameters(Map<String, String> buildParametersAsMap) {' - line 508", "'private List<ParameterValue> buildPropertiesMapToParameterValues(Map<String, String> buildParametersAsMap) {' - line 513", "'MockBuild withSensitiveBuildParameters(String paramName, String paramValue) {' - line 519", "'private StringParameterValue createSensitiveStringParameterValue(final String paramName, final String paramValue) {' - line 536", "'public boolean isSensitive() {' - line 539"]}, "SCMTriggerItemTest.java": {"METHODS": ["'public void noVetoDelegatesPollingToAnSCMedItem() {' - line 18"]}, "HMACConfidentialKeyTest.java": {"METHODS": ["'public void basics() {' - line 19", "'public void loadingExistingKey() {' - line 32"]}, "ConfidentialStoreRule.java": {"METHODS": ["'protected void before() {' - line 10"]}, "CryptoConfidentialKeyTest.java": {"METHODS": ["'public void decryptGetsPlainTextBack() throws Exception {' - line 16", "'public void multipleEncryptsAreIdempotent() throws Exception {' - line 23", "'public void loadingExistingKey() throws Exception {' - line 29"]}, "RedactSecretJsonInErrorMessageSanitizerTest.java": {"METHODS": ["'public void noSecrets() {' - line 36", "'public void simpleWithSecret() {' - line 44", "'public void singleWithRedactedInArray() {' - line 52", "'public void objectRedactedAcceptedButNotProcessed() {' - line 60", "'public void weirdValuesInRedactedAcceptedButNotProcessed() {' - line 68", "'public void ensureTrueAndOneAsStringAreSupportedAsRedactedKey() {' - line 76", "'public void redactFullBranch() {' - line 85", "'public void multipleSecretAtSameLevel() {' - line 93", "'public void redactedKeyWithoutCorrespondences() {' - line 101", "'public void secretsAtMultipleLevels() {' - line 109", "'public void noInteractionBetweenLevels() {' - line 117", "'public void deeplyNestedObject() {' - line 125", "'private void assertRedaction(String from, String to) {' - line 132"]}, "HexStringConfidentialKeyTest.java": {"METHODS": ["'public void hexStringShouldProduceHexString() {' - line 14", "'public void multipleGetsAreIdempotent() {' - line 20", "'public void specifyLengthAndMakeSureItTakesEffect() {' - line 26", "'public void loadingExistingKey() {' - line 33"]}, "RSAConfidentialKeyTest.java": {"METHODS": ["'public void loadingExistingKey() {' - line 39"]}, "ClassFilterImplSanityTest.java": {"METHODS": ["'public void whitelistSanity() throws Exception {' - line 47"]}, "DefaultConfidentialStoreTest.java": {"METHODS": ["'public void roundtrip() throws Exception {' - line 23", "'new File(tmp, \"master.key\").delete();' - line 45"]}, "RSADigitalSignatureConfidentialKeyTest.java": {"METHODS": ["'public void dsigSignAndVerify() throws Exception {' - line 42"]}, "StaplerSignaturesTest.java": {"METHODS": ["'public void testSignaturesSimple() {' - line 18", "'public void testSignaturesInheritance() {' - line 27", "'public void getFoo() {}' - line 55", "'public void getFoo(String arg) {}' - line 57", "'public static void getFoo(int arg) {}' - line 59", "'public static void getFoo(long arg) {}' - line 61", "'public void getFoo(SomeClass arg) {}' - line 63", "'public void doFoo(StaplerRequest req, StaplerResponse rsp) {}' - line 65", "'public void doWhatever(@QueryParameter String arg) {}' - line 68", "'public void getFoo() {}' - line 107", "'public void subtypeExclusive(){}' - line 109", "'public void subtypeExclusive(String arg){}' - line 111", "'public void varargMethod(String... args){}' - line 113"]}, "OperatingSystemEndOfLifeAdminMonitorTest.java": {"METHODS": ["'public OperatingSystemEndOfLifeAdminMonitorTest() throws IOException {' - line 48", "'public void testGetDisplayName() {' - line 55", "'public void testGetAfterEndOfLifeDate() {' - line 60", "'public void testGetDocumentationUrl() {' - line 65", "'public void testGetEndOfLifeDate() {' - line 70", "'public void testGetOperatingSystemName() {' - line 75", "'public void testGetSearchUrl() {' - line 81", "'public void testGetUrl() {' - line 86", "'public void testIsActivated() throws IOException {' - line 91", "'public void testIsSecurity() throws IOException {' - line 97", "'public void testNotIsActivatedWhenIgnoreEndOfLife() throws IOException {' - line 102", "'private String docsUrl(String component) {' - line 107", "'private static Stream<Arguments> testReadDocumentationUrls() {' - line 111", "'public void testReadDocumentationUrls(String fileName, String pattern, String component) throws Exception {' - line 135", "'public void testReadOperatingSystemListEmptySet() {' - line 141", "'public void testReadOperatingSystemListNoEndOfLife() {' - line 147", "'public void testReadOperatingSystemListNoPattern() {' - line 153", "'private static Stream<Arguments> testReadOperatingSystemNames() {' - line 158", "'public void testReadOperatingSystemNames(String fileName, String pattern, String job) throws Exception {' - line 182", "'public void testReadOperatingSystemNameMissingFile() {' - line 188"]}, "XMLUtilsTest.java": {"METHODS": ["'public void testSafeTransformDoesNotProcessForeignResources() throws Exception {' - line 49", "'public void testUpdateByXmlIDoesNotFail() throws Exception {' - line 82", "'public void testGetValue() throws XPathExpressionException, SAXException, IOException {' - line 109", "'public void testParse_with_XXE() {' - line 118"]}, "DetachedPluginsUtilTest.java": {"METHODS": ["'public void checkJaxb() {' - line 19", "'private List<String> mapToPluginShortName(List<DetachedPluginsUtil.DetachedPlugin> detachedPlugins) {' - line 37", "'public void checkSplitPluginsFileFormat() throws IOException {' - line 45"]}, "ResultPair.java": {"METHODS": ["'public ResultPair(String item, boolean valid) {' - line 28"]}, "InetAddressValidatorTest.java": {"METHODS": ["'public InetAddressValidatorTest(String name) {' - line 33", "'protected void setUp() {' - line 38", "'public void testInetAddressesFromTheWild() {' - line 45", "'public void testVALIDATOR_335() {' - line 52", "'public void testVALIDATOR_419() {' - line 56", "'public void testVALIDATOR_445() {' - line 76", "'public void testInetAddressesByClass() {' - line 104", "'public void testReservedInetAddresses() {' - line 124", "'public void testBrokenInetAddresses() {' - line 132", "'public void testIPv6() {' - line 148"]}, "UrlValidatorTest.java": {"METHODS": ["'public void setUp() {' - line 42", "'public void testIsValid() {' - line 49", "'public void testIsValidScheme() {' - line 61", "'public void testIsValid(Object[] testObjects, long options) {' - line 90", "'public void testValidator202() {' - line 134", "'public void testValidator204() {' - line 141", "'public void testValidator218() {' - line 148", "'public void testValidator235() {' - line 155", "'public void testValidator248() {' - line 171", "'public void testValidator288() {' - line 202", "'public void testValidator276() {' - line 237", "'public void testValidator391OK() {' - line 290", "'public void testValidator391FAILS() {' - line 297", "'public void testValidator309() {' - line 304", "'public void testValidator339() {' - line 316", "'public void testValidator339IDN() {' - line 326", "'public void testValidator342() {' - line 336", "'public void testValidator411() {' - line 343", "'public void testValidator464() {' - line 353", "'public void testValidator452() {' - line 361", "'public void testValidator473_1() { // reject null DomainValidator' - line 367", "'new UrlValidator(new String[]{}, null, 0L, null);' - line 368", "'public void testValidator473_2() { // reject null DomainValidator with mismatched allowLocal' - line 372", "'new UrlValidator(new String[]{}, null, 0L, DomainValidator.getInstance(true, items));' - line 374", "'public void testValidator473_3() { // reject null DomainValidator with mismatched allowLocal' - line 378", "'new UrlValidator(new String[]{}, null, UrlValidator.ALLOW_LOCAL_URLS, DomainValidator.getInstance(false, items));' - line 380", "'static boolean incrementTestPartsIndex(int[] testPartsIndex, Object[] testParts) {' - line 383", "'private String testPartsIndextoString() {' - line 406", "'public void testValidateUrl() {' - line 421", "'public void testValidator290() {' - line 426", "'public void testValidator361() {' - line 485", "'public void testValidator363() {' - line 491", "'public void testValidator375() {' - line 512", "'public void testValidator353() { // userinfo' - line 524", "'public void testValidator382() {' - line 538", "'public void testValidator380() {' - line 544", "'public void testValidator420() {' - line 552", "'public void testValidator467() {' - line 560", "'public void testValidator283() {' - line 569", "'public void testFragments() {' - line 576", "'new ResultPair(\"ftp://\", true),' - line 594", "'new ResultPair(\"h3t://\", true),' - line 595", "'new ResultPair(\"3ht://\", false),' - line 596", "'new ResultPair(\"http:/\", false),' - line 597", "'new ResultPair(\"http:\", false),' - line 598", "'new ResultPair(\"http/\", false),' - line 599", "'new ResultPair(\"://\", false)};' - line 600", "'new ResultPair(\"www.google.com.\", true),' - line 603", "'new ResultPair(\"go.com\", true),' - line 604", "'new ResultPair(\"go.au\", true),' - line 605", "'new ResultPair(\"0.0.0.0\", true),' - line 606", "'new ResultPair(\"255.255.255.255\", true),' - line 607", "'new ResultPair(\"256.256.256.256\", false),' - line 608", "'new ResultPair(\"255.com\", true),' - line 609", "'new ResultPair(\"1.2.3.4.5\", false),' - line 610", "'new ResultPair(\"1.2.3.4.\", false),' - line 611", "'new ResultPair(\"1.2.3\", false),' - line 612", "'new ResultPair(\".1.2.3.4\", false),' - line 613", "'new ResultPair(\"go.a\", false),' - line 614", "'new ResultPair(\"go.a1a\", false),' - line 615", "'new ResultPair(\"go.cc\", true),' - line 616", "'new ResultPair(\"go.1aa\", false),' - line 617", "'new ResultPair(\"aaa.\", false),' - line 618", "'new ResultPair(\".aaa\", false),' - line 619", "'new ResultPair(\"aaa\", false),' - line 620", "'new ResultPair(\"\", false),' - line 621", "'new ResultPair(\":65535\", true), // max possible' - line 624", "'new ResultPair(\":65536\", false), // max possible +1' - line 625", "'new ResultPair(\":0\", true),' - line 626", "'new ResultPair(\"\", true),' - line 627", "'new ResultPair(\":-1\", false),' - line 628", "'new ResultPair(\":65636\", false),' - line 629", "'new ResultPair(\":999999999999999999\", false),' - line 630", "'new ResultPair(\":65a\", false),' - line 631", "'new ResultPair(\"/t123\", true),' - line 634", "'new ResultPair(\"/$23\", true),' - line 635", "'new ResultPair(\"/..\", false),' - line 636", "'new ResultPair(\"/../\", false),' - line 637", "'new ResultPair(\"/test1/\", true),' - line 638", "'new ResultPair(\"\", true),' - line 639", "'new ResultPair(\"/test1/file\", true),' - line 640", "'new ResultPair(\"/..//file\", false),' - line 641", "'new ResultPair(\"/test1//file\", false),' - line 642", "'new ResultPair(\"/t123\", true),' - line 646", "'new ResultPair(\"/$23\", true),' - line 647", "'new ResultPair(\"/..\", false),' - line 648", "'new ResultPair(\"/../\", false),' - line 649", "'new ResultPair(\"/test1/\", true),' - line 650", "'new ResultPair(\"/#\", false),' - line 651", "'new ResultPair(\"\", true),' - line 652", "'new ResultPair(\"/test1/file\", true),' - line 653", "'new ResultPair(\"/t123/file\", true),' - line 654", "'new ResultPair(\"/$23/file\", true),' - line 655", "'new ResultPair(\"/../file\", false),' - line 656", "'new ResultPair(\"/..//file\", false),' - line 657", "'new ResultPair(\"/test1//file\", true),' - line 658", "'new ResultPair(\"/#/file\", false),' - line 659", "'new ResultPair(\"?action=edit&mode=up\", true),' - line 663", "'new ResultPair(\"\", true),' - line 664", "'new ResultPair(\"ftp\", false),' - line 677", "'new ResultPair(\"httpd\", false),' - line 678", "'new ResultPair(\"gopher\", true),' - line 679", "'new ResultPair(\"g0-to+.\", true),' - line 680", "'new ResultPair(\"not_valid\", false), // underscore not allowed' - line 681", "'new ResultPair(\"HtTp\", true),' - line 682", "'new ResultPair(\"telnet\", false)};' - line 683", "'public static void main(String[] args) {' - line 690"]}, "DomainValidatorTest.java": {"METHODS": ["'public void setUp() {' - line 55", "'public void testValidDomains() {' - line 59", "'public void testInvalidDomains() {' - line 75", "'public void testTopLevelDomains() {' - line 90", "'public void testAllowLocal() {' - line 113", "'public void testIDN() {' - line 135", "'public void testIDNJava6OrLater() {' - line 139", "'public void testRFC2396domainlabel() { // use fixed valid TLD' - line 152", "'public void testRFC2396toplabel() {' - line 163", "'public void testDomainNoDots() { // rfc1123' - line 177", "'public void testValidator297() {' - line 187", "'public void testValidator306() {' - line 192", "'public void testUnicodeToASCII() {' - line 215", "'public void testIsIDNtoASCIIBroken() {' - line 249", "'public void test_INFRASTRUCTURE_TLDS_sortedAndLowerCase() throws Exception {' - line 276", "'public void test_COUNTRY_CODE_TLDS_sortedAndLowerCase() throws Exception {' - line 282", "'public void test_GENERIC_TLDS_sortedAndLowerCase() throws Exception {' - line 288", "'public void test_LOCAL_TLDS_sortedAndLowerCase() throws Exception {' - line 294", "'public void testEnumIsPublic() {' - line 299", "'public void testGetArray() {' - line 303", "'public static void main(String[] a) throws Exception {' - line 319", "'private static void printMap(final String header, Map<String, String> map, String string) {' - line 418", "'private static long download(File f, String tldurl, long timestamp) throws IOException {' - line 491", "'private static boolean isNotInRootZone(String domain) {' - line 538", "'private static void closeQuietly(Closeable in) {' - line 559", "'private static boolean isInIanaList(String arrayName, Set<String> ianaTlds) throws Exception {' - line 571", "'return isInIanaList(arrayName, array, ianaTlds);' - line 579", "'private static boolean isInIanaList(String name, String [] array, Set<String> ianaTlds) {' - line 587", "'private static boolean isSortedLowerCase(String arrayName) throws Exception {' - line 596", "'return isSortedLowerCase(arrayName, array);' - line 604", "'private static boolean isLowerCase(String string) {' - line 612", "'private static boolean isSortedLowerCase(String name, String [] array) {' - line 617"]}, "RegexValidatorTest.java": {"METHODS": ["'public RegexValidatorTest(String name) {' - line 47", "'public void testSingle() {' - line 54", "'public void testMultipleSensitive() {' - line 82", "'public void testMultipleInsensitive() {' - line 123", "'public void testNullValue() {' - line 164", "'public void testMissingRegex() {' - line 175", "'new RegexValidator((String) null);' - line 179", "'new RegexValidator(\"\");' - line 187", "'new RegexValidator((String[]) null);' - line 195", "'new RegexValidator(new String[0]);' - line 203", "'new RegexValidator(expressions);' - line 212", "'new RegexValidator(expressions);' - line 221", "'public void testExceptions() {' - line 231", "'new RegexValidator(invalidRegex);' - line 234", "'public void testToString() {' - line 243", "'private void checkArray(String label, String[] expect, String[] result) {' - line 257"]}, "IconSetTest.java": {"METHODS": ["'void testIconSetSize() {' - line 16", "'void getSymbol() {' - line 22", "'void getSymbol_cachedSymbolDoesntReturnAttributes() {' - line 32", "'void getSymbol_cachedSymbolAllowsSettingAllAttributes() {' - line 44", "'void getSymbol_notSettingTooltipDoesntAddTooltipAttribute() {' - line 63"]}, "IconSetJenkins68805Test.java": {"METHODS": ["'void getSymbol_notSettingTooltipDoesntAddTooltipAttribute_evenWithAmpersand() {' - line 19"]}, "SymbolTest.java": {"METHODS": ["'void getSymbol() {' - line 37", "'void htmlTooltipOverridesTooltip() {' - line 55", "'void invalidRawString() {' - line 69", "'void rawStringCore() {' - line 79", "'void rawStringPlugin() {' - line 87", "'void getSymbol_cachedSymbolDoesntReturnAttributes() {' - line 95", "'void getSymbol_cachedSymbolAllowsSettingAllAttributes() {' - line 116", "'void getSymbol_notSettingTooltipDoesntAddTooltipAttribute() {' - line 151", "'void missingSymbolDefaultsToPlaceholder() {' - line 166", "'void getSymbol_notSettingTooltipDoesntAddTooltipAttribute_evenWithAmpersand() {' - line 177", "'void getSymbol_idInSymbolIsPresent() {' - line 197"]}, "GrantedAuthorityTest.java": {"METHODS": ["'public void authenticated() {' - line 34"]}, "AuthenticationExceptionTest.java": {"METHODS": ["'@Test public void usernameNotFoundException() {' - line 35", "'@Test public void dataAccessException() {' - line 39"]}, "AuthenticationTest.java": {"METHODS": ["'public void system() {' - line 51", "'public void anonymous() {' - line 59", "'public void user() {' - line 70", "'private void assertEquality(Authentication acegi, org.springframework.security.core.Authentication spring) {' - line 75", "'public void principal() {' - line 101", "'private void assertPrincipal(Authentication acegi) {' - line 107", "'public void custom() {' - line 116", "'public Object getCredentials() {' - line 125", "'public Object getPrincipal() {' - line 130"]}, "OuterClassWithPublicFinalField.java": {"METHODS": ["'public String getMyField() {' - line 6"]}, "FieldUtilsTest.java": {"METHODS": ["'public void setProtectedFieldValue_Should_fail_silently_to_set_public_final_fields_in_InnerClass() {' - line 13", "'public void setProtectedFieldValue_Should_fail_silently_to_set_public_final_fields_in_OuterClass() {' - line 21", "'public void setProtectedFieldValue_Should_Succeed() {' - line 28", "'public void setNonExistingField_Should_Fail() {' - line 35", "'public String getMyField() {' - line 44", "'public String getMyNonFinalField() {' - line 54"]}, "UserDetailsTest.java": {"METHODS": ["'public void typePreserved() {' - line 40", "'String getStuff();' - line 53", "'public String getStuff() {' - line 66"]}, "BulkChangeTest.java": {"METHODS": ["'public void setX(int x) throws IOException {' - line 48", "'public void setY(int y) throws IOException {' - line 53", "'public void set(int x, int y) throws IOException {' - line 58", "'public void save() {' - line 64", "'public void noBulkChange() throws Exception {' - line 74", "'public void bulkChange() throws Exception {' - line 84", "'public void nestedBulkChange() throws Exception {' - line 99"]}, "FunctionsTest.java": {"METHODS": ["'public void testGetActionUrl_absoluteUriWithAuthority() {' - line 68", "'public void testGetActionUrl_absoluteUriWithoutAuthority() {' - line 83", "'public void testGetActionUrl_absolutePath() {' - line 96", "'public void testGetActionUrl_relativePath() {' - line 114", "'public void testGetRelativeLinkTo_JobContainedInView() {' - line 133", "'public void testGetRelativeLinkTo_JobFromComputer() {' - line 155", "'public void testGetRelativeLinkTo_JobNotContainedInView() {' - line 175", "'public void testGetRelativeLinkTo_JobContainedInViewWithinItemGroup() {' - line 198", "'@Test public void getRelativeLinkTo_MavenModules() {' - line 221", "'public void testGetRelativeDisplayName() {' - line 241", "'public void testGetRelativeDisplayNameInsideItemGroup() {' - line 249", "'private void createMockAncestors(StaplerRequest req, Ancestor... ancestors) {' - line 268", "'private TopLevelItem createMockItem(ItemGroup p, String shortUrl) {' - line 273", "'return createMockItem(p, shortUrl, shortUrl);' - line 274", "'private TopLevelItem createMockItem(ItemGroup p, String shortUrl, String url) {' - line 277", "'private Jenkins createMockJenkins(MockedStatic<Jenkins> mockedJenkins) {' - line 285", "'private static Ancestor createAncestor(Object o, String relativePath) {' - line 291", "'public void testGetActionUrl_unparseable() {' - line 299", "'private static Action createMockAction(String uri) {' - line 303", "'private static StaplerRequest createMockRequest(String contextPath) {' - line 309", "'public void testHumanReadableFileSize() {' - line 317", "'public void testBreakableString() {' - line 336", "'private void assertBrokenAs(String plain, String... chunks) {' - line 356", "'@Test public void printLogRecordHtml() {' - line 364", "'@Test public void printLogRecordHtmlNoLogger() {' - line 370", "'public void extractPluginNameFromIconSrcHandlesNull() {' - line 376", "'public void extractPluginNameFromIconSrcHandlesEmptyString() {' - line 383", "'public void extractPluginNameFromIconSrcOnlyReturnsPluginFromStart() {' - line 390", "'public void extractPluginNameFromIconSrcExtractsPlugin() {' - line 397", "'public void extractPluginNameFromIconSrcWhichContainsPluginWordInThePluginName() {' - line 404", "'@Test public void printThrowable() {' - line 411", "'new Stack(\"java.io.IOException: java.lang.NullPointerException\", \"p.C.flush:77\", \"p.C.method1:18\", \"m.Main.main:1\").' - line 524", "'public void printStackTrace(PrintWriter s) {' - line 563", "'private static VersionNumber getVersion() {' - line 602", "'private static void assertPrintThrowable(Throwable t, String traditional, String custom) {' - line 610", "'public String toString() {' - line 635", "'public void tryGetIcon_shouldReturnNullForNull() throws Exception {' - line 652", "'public void tryGetIcon_shouldReturnNullForSymbol() throws Exception {' - line 657", "'public void tryGetIcon_shouldReturnMetadataForExactSpec() throws Exception {' - line 662", "'public void tryGetIcon_shouldReturnMetadataForExtraSpec() throws Exception {' - line 667", "'public void tryGetIcon_shouldReturnMetadataForFilename() throws Exception {' - line 672", "'public void tryGetIcon_shouldReturnMetadataForUrl() throws Exception {' - line 677", "'public void tryGetIcon_shouldReturnNullForUnknown() throws Exception {' - line 682", "'public void guessIcon() throws Exception {' - line 687"]}, "UtilTest.java": {"METHODS": ["'public void testReplaceMacro() {' - line 77", "'public void testTimeSpanString() {' - line 112", "'public void testEncodeSpaces() {' - line 156", "'public void testRawEncode() {' - line 166", "'public void testFullEncode() {' - line 194", "'public void testTryParseNumber() {' - line 222", "'public void testSymlink() throws Exception {' - line 230", "'new FilePath(new File(d, \"a\")).touch(0);' - line 237", "'public void testIsSymlink() throws IOException, InterruptedException {' - line 278", "'new FilePath(new File(d, \"original\")).touch(0);' - line 285", "'public void testIsSymlink_onWindows_junction() throws Exception {' - line 308", "'public void testIsSymlink_ParentIsJunction() throws IOException, InterruptedException {' - line 318", "'new FilePath(file).touch(System.currentTimeMillis());' - line 322", "'public void testIsSymlink_ParentIsSymlink() throws IOException, InterruptedException {' - line 332", "'new FilePath(file).touch(System.currentTimeMillis());' - line 336", "'public void testHtmlEscape() {' - line 344", "'public void testDigestThreadSafety() throws InterruptedException {' - line 357", "'public void run() {' - line 393", "'public void testIsAbsoluteUri() {' - line 406", "'public void testIsSafeToRedirectTo() {' - line 418", "'public void loadFile() throws IOException {' - line 437", "'public void loadProperties() throws IOException {' - line 470", "'public void isRelativePathUnix() {' - line 480", "'public void isRelativePathWindows() {' - line 493", "'private static RelativePathMatcher aRelativePath() {' - line 513", "'public boolean matches(Object item) {' - line 520", "'public void describeTo(Description description) {' - line 525", "'public void testIsDescendant() throws IOException {' - line 531", "'public void testModeToPermissions() throws Exception {' - line 569", "'public void testPermissionsToMode() {' - line 588", "'public void testDifferenceDays() throws Exception {' - line 602", "'private Date parseDate(String dateString) throws ParseException {' - line 627", "'public void resolveSymlinkToFile() throws Exception {' - line 633", "'public void createDirectories() throws Exception {' - line 672", "'public void createDirectoriesInRoot() throws Exception {' - line 703", "'public void ifOverriddenSuccess() {' - line 718", "'public void ifOverriddenFailure() {' - line 723", "'protected String method() {' - line 729", "'protected String method() {' - line 740"]}, "MarkupTextTest.java": {"METHODS": ["'public void test1() {' - line 39", "'public void boundary() {' - line 50", "'public void findTokensOnSubText() {' - line 59", "'public void literalTextSurround() {' - line 71", "'public void adjacent() {' - line 83", "'public void escape() {' - line 96", "'public void preEscape() {' - line 106", "'public void subTextSubText() {' - line 115"]}, "ProxyConfigurationTest.java": {"METHODS": ["'public void noProxyHost() {' - line 34"]}, "EnvVarsTest.java": {"METHODS": ["'public void caseInsensitive() {' - line 46", "'public void overrideExpandingAll() {' - line 53", "'public void overrideOrderCalculatorSimple() {' - line 73", "'public void overrideOrderCalculatorInOrder() {' - line 89", "'public void overrideOrderCalculatorMultiple() {' - line 104", "'public void overrideOrderCalculatorSelfReference() {' - line 117", "'public void overrideOrderCalculatorCyclic() {' - line 128", "'public void putIfNotNull() {' - line 146", "'public void putAllNonNull() {' - line 155"]}, "XmlFileTest.java": {"METHODS": ["'public void canReadXml1_0Test() throws IOException {' - line 21", "'XmlFile xmlFile =  new XmlFile(xs, new File(configUrl.getFile()));' - line 26", "'public void xml1_0_withSpecialCharsShouldFail() {' - line 35", "'XmlFile xmlFile =  new XmlFile(xs, new File(configUrl.getFile()));' - line 40", "'public void canReadXml1_1Test() throws IOException {' - line 55", "'XmlFile xmlFile =  new XmlFile(xs, new File(configUrl.getFile()));' - line 60", "'public void canReadXmlWithControlCharsTest() throws IOException {' - line 69", "'XmlFile xmlFile =  new XmlFile(xs, new File(configUrl.getFile()));' - line 74"]}, "RemoveWindowsDirectoryJunctionTest.java": {"METHODS": ["'public void windowsOnly() {' - line 26", "'public void testJunctionIsRemovedButNotContents() throws Exception {' - line 32"]}, "ChannelRule.java": {"METHODS": ["'@Override protected void before() throws Exception {' - line 28", "'public Channel call() throws Exception {' - line 37", "'public Channel call() throws Exception {' - line 43", "'@Override protected void after() {' - line 51"]}, "PluginWrapperTest.java": {"METHODS": ["'public static void before() {' - line 39", "'public static void after() {' - line 46", "'public void dependencyTest() {' - line 53", "'public void optionalDependencyTest() {' - line 62", "'public void jenkinsCoreTooOld() {' - line 71", "'public void dependencyNotInstalled() {' - line 79", "'public void dependencyOutdated() {' - line 87", "'public void dependencyFailedToLoad() {' - line 96", "'public void insertJarsIntoClassPath() throws Exception {' - line 106", "'private void assertInjectingJarsWorks(ClassLoader cl) throws Exception {' - line 112", "'private void assertContains(Throwable ex, String... patterns) {' - line 125", "'private PluginWrapperBuilder pluginWrapper(String name) {' - line 132", "'private PluginWrapperBuilder(String name) {' - line 152", "'public PluginWrapperBuilder version(String version) {' - line 156", "'public PluginWrapperBuilder requiredCoreVersion(String requiredCoreVersion) {' - line 161", "'public PluginWrapperBuilder classloader(ClassLoader classloader) {' - line 166", "'public PluginWrapperBuilder deps(String... deps) {' - line 171", "'private PluginWrapper buildLoaded() {' - line 178", "'private PluginWrapper buildFailed() {' - line 184", "'private PluginWrapper build() {' - line 190", "'new File(\"/tmp/\" + name + \".jpi\"),' - line 199", "'new File(\"/tmp/\" + name + \".jpi.disabled\"),' - line 203", "'public void isSnapshot() {' - line 212", "'private static int countEnumerationElements(Enumeration<?> enumeration) {' - line 221"]}, "CopyOnWriteListTest.java": {"METHODS": ["'public void serialization() {' - line 51"]}, "IsOverriddenTest.java": {"METHODS": ["'public void isOverriddenTest() {' - line 50", "'public void isOverriddenNegativeTest() {' - line 63", "'public void badHierarchyIsReported() {' - line 69", "'public void avoidPrivateMethodsInspection() {' - line 77", "'private void aPrivateMethod() {}' - line 84", "'public void setX(T t) {}' - line 86", "'public T getX() { return null; }' - line 88", "'protected void method() {}' - line 92", "'private void aPrivateMethod() {}' - line 94", "'public void setX(Integer i) {}' - line 96", "'public Integer getX() { return 0; }' - line 98", "'public void finalOverrides() {' - line 105", "'void m1();' - line 141", "'public void m1() {}' - line 147", "'public void m1() {}' - line 155", "'public void m2() {}' - line 158", "'public void m1() {}' - line 162", "'public void baseInterface() {' - line 170", "'String foo();' - line 224", "'String bar();' - line 226", "'@Override public String foo() { return \"foo\"; }' - line 241", "'@Override public String bar() { return \"bar\"; }' - line 245"]}, "CompoundEnumerationTest.java": {"METHODS": ["'public void smokes() {' - line 13", "'public void empty() {' - line 24", "'public void gaps() {' - line 44", "'private static List<Integer> rangeClosed(int startInclusive, int endInclusive) {' - line 68"]}, "RetrierTest.java": {"METHODS": ["'public void performedAtThirdAttemptTest() throws Exception {' - line 18", "'public void sleepWorksTest() throws Exception {' - line 54", "'public void failedActionAfterThreeAttemptsTest() throws Exception {' - line 110", "'public void failedActionWithExceptionAfterThreeAttemptsWithoutListenerTest() throws Exception {' - line 148", "'public void failedActionWithAllowedExceptionWithListenerChangingResultTest() throws Exception {' - line 187", "'public void failedActionWithAllowedExceptionByInheritanceTest() throws Exception {' - line 229", "'public void failedActionWithUnAllowedExceptionTest() {' - line 272"]}, "Point.java": {"METHODS": []}, "IteratorsTest.java": {"METHODS": ["'public void reverseSequence() {' - line 46", "'public void sequence() {' - line 55", "'public void wrap() {' - line 64", "'public void limit() {' - line 79", "'public void skip() {' - line 88"]}, "CopyOnWriteMapTest.java": {"METHODS": ["'@Test public void hashSerialization() {' - line 47", "'@Test public void treeSerialization() {' - line 91", "'@Test public void equalsHashCodeToString() {' - line 121"]}, "SecretRewriterTest.java": {"METHODS": ["'public void singleFileRewrite() throws Exception {' - line 37", "'private String roundtrip(String before) throws Exception {' - line 50", "'private String encryptOld(String str) throws Exception {' - line 60", "'private String encryptNew(String str) {' - line 66", "'public void recursionDetection() throws Exception {' - line 74", "'new FilePath(t).child(\"c/symlink\").symlinkTo(\"..\", st);' - line 97", "'new FilePath(t).child(\"b/symlink\").symlinkTo(\".\", st);' - line 98", "'new FilePath(t).child(\"a/symlink\").symlinkTo(t2.getAbsolutePath(), st);' - line 99"]}, "RobustMapConverterTest.java": {"METHODS": ["'public void dosIsPrevented_customProgrammaticallyTimeout() {' - line 47", "'public void dosIsPrevented_customPropertyTimeout() {' - line 65", "'public void dosIsPrevented_defaultTimeout() {' - line 93"]}, "DirScannerTest.java": {"METHODS": ["'@Test public void globShouldUseDefaultExcludes() throws Exception {' - line 42", "'@Test public void globShouldIgnoreDefaultExcludesByRequest() throws Exception {' - line 65", "'public void visit(File f, String relativePath) {' - line 98"]}, "MultipartFormDataParserTest.java": {"METHODS": ["'public void testIsMultipart() {' - line 35"]}, "RunListTest.java": {"METHODS": ["'private void setUpByTimestampRuns() {' - line 44", "'public void byTimestampAllRuns() {' - line 62", "'public void byTimestampFirstRun() {' - line 72", "'public void byTimestampLastRun() {' - line 82"]}, "GraphTest.java": {"METHODS": ["'public void testDimensions() {' - line 36"]}, "DescribableListTest.java": {"METHODS": ["'public void exceptionDuringUnmarshalling() {' - line 43", "'public void replace() throws Exception {' - line 56", "'public String toString() {' - line 72", "'public Descriptor<Datum> getDescriptor() {' - line 87", "'public String toString() {' - line 92", "'public boolean canConvert(Class type) {' - line 99", "'public Object fromString(String str) {' - line 104"]}, "ArgumentListBuilderTest.java": {"METHODS": ["'public void assertEmptyMask() {' - line 46", "'public void assertLastArgumentIsMasked() {' - line 58", "'public void assertSeveralMaskedArguments() {' - line 70", "'public void assertPrependAfterAddingMasked() {' - line 84", "'public void assertPrependBeforeAddingMasked() {' - line 97", "'public void testToWindowsCommand() {' - line 110", "'public void testToWindowsCommandMasked() {' - line 152", "'public void assertMaskOnClone() {' - line 179", "'public void assertKeyValuePairsWithMask() {' - line 203", "'public void assertKeyValuePairs() {' - line 215", "'public void addKeyValuePairsFromPropertyString() throws IOException {' - line 226", "'public void numberOfBackslashesInPropertiesShouldBePreservedAfterMacroExpansion() throws IOException {' - line 243"]}, "TextFileTest.java": {"METHODS": ["'public void head() throws Exception {' - line 21", "'public void shortHead() throws Exception {' - line 32", "'public void tail() throws Exception {' - line 41", "'public void shortTail() throws Exception {' - line 51", "'public void tailShiftJIS() throws Exception {' - line 66"]}, "CyclicGraphDetectorTest.java": {"METHODS": ["'private Edge(String src, String dst) {' - line 20", "'Graph e(String src, String dst) {' - line 27", "'Set<String> nodes() {' - line 32", "'Set<String> edges(String from) {' - line 41", "'void check() throws Exception {' - line 53", "'protected Set<String> getEdges(String s) {' - line 56", "'return edges(s);' - line 57", "'void mustContainCycle(String... members) {' - line 62", "'public void cycle1() {' - line 74", "'new Graph().e(\"A\", \"B\").e(\"B\", \"C\").e(\"C\", \"A\").mustContainCycle(\"A\", \"B\", \"C\");' - line 75", "'public void cycle2() {' - line 79", "'new Graph().e(\"A\", \"B\").e(\"B\", \"C\").e(\"C\", \"C\").mustContainCycle(\"C\");' - line 80", "'public void cycle3() {' - line 84", "'new Graph().e(\"A\", \"B\").e(\"B\", \"C\").e(\"C\", \"D\").e(\"B\", \"E\").e(\"E\", \"D\").e(\"E\", \"A\").mustContainCycle(\"A\", \"B\", \"E\");' - line 85"]}, "ConsistentHashTest.java": {"METHODS": ["'public void basic() {' - line 50", "'public void unevenDistribution() {' - line 79", "'public void removal() {' - line 104", "'public void emptyBehavior() {' - line 129", "'public void countAllPoints() {' - line 138", "'public void defaultReplicationIsOneHundred() {' - line 150", "'public void setCustomDefaultReplication() {' - line 158", "'public void usesCustomHash() {' - line 166", "'public void speed() {' - line 182"]}, "SecretUtilTest.java": {"METHODS": ["'public void decrypt() {' - line 10", "'public void decryptJustSpace() {' - line 19", "'public void decryptWithSpace() {' - line 27", "'public void decryptWithSpaces() {' - line 35"]}, "XStream2EncodingTest.java": {"METHODS": ["'private static void useNonUTF8() {' - line 44", "'private static void clearDefaultEncodingAfter() {' - line 50", "'private static void clearDefaultEncoding() {' - line 54", "'@Test public void toXMLUnspecifiedEncoding() throws Exception {' - line 66", "'@Test public void toXMLUTF8() throws Exception {' - line 86"]}, "XStream2Test.java": {"METHODS": ["'public void marshalValue() {' - line 71", "'public void xStream11Compatibility() {' - line 87", "'public void xmlRoundTrip() {' - line 104", "'public void unmarshalThrowableMissingField() {' - line 130", "'private Level disableLogging() {' - line 154", "'private void enableLogging(Level oldLevel) {' - line 160", "'public void immutableMap() {' - line 173", "'private void roundtripImmutableMap(XStream2 xs, ImmutableMap<?, ?> m) {' - line 188", "'private void roundtripImmutableMapAsPlainMap(XStream2 xs, ImmutableMap<?, ?> m) {' - line 201", "'public void immutableList() {' - line 222", "'private void roundtripImmutableList(XStream2 xs, ImmutableList<?> l) {' - line 237", "'private void roundtripImmutableListAsPlainList(XStream2 xs, ImmutableList<?> l) {' - line 250", "'public void emptyStack() {' - line 264", "'public void compatibilityAlias() {' - line 271", "'public void dynamicProxyBlocked() {' - line 292", "'public void oops() {' - line 306", "'public void trimVersion() {' - line 312", "'public void unmarshalToDefault_populated() {' - line 320", "'public void unmarshalToDefault_default() {' - line 379", "'public void unmarshalToDefault_empty() {' - line 417", "'private Object fromXMLNullingOut(String xml, Object root) {' - line 442", "'public WithDefaults() {' - line 457", "'public String getStringDefaultValue() {' - line 474", "'public void setStringDefaultValue(String stringDefaultValue) {' - line 478", "'public String getStringDefaultNull() {' - line 482", "'public void setStringDefaultNull(String stringDefaultNull) {' - line 486", "'public String[] getArrayDefaultValue() {' - line 490", "'public void setArrayDefaultValue(String[] arrayDefaultValue) {' - line 494", "'public String[] getArrayDefaultEmpty() {' - line 498", "'public void setArrayDefaultEmpty(String[] arrayDefaultEmpty) {' - line 502", "'public String[] getArrayDefaultNull() {' - line 506", "'public void setArrayDefaultNull(String[] arrayDefaultNull) {' - line 510", "'public List<String> getListDefaultValue() {' - line 514", "'public void setListDefaultValue(List<String> listDefaultValue) {' - line 518", "'public List<String> getListDefaultEmpty() {' - line 522", "'public void setListDefaultEmpty(List<String> listDefaultEmpty) {' - line 526", "'public List<String> getListDefaultNull() {' - line 530", "'public void setListDefaultNull(List<String> listDefaultNull) {' - line 534", "'public void crashXstream() {' - line 541", "'public void annotations() {' - line 546", "'public void testEmoji() throws Exception {' - line 580", "'public void testEmojiEscaped() throws Exception {' - line 590", "'public void writeEmoji() throws Exception {' - line 600", "'public void nullsWithoutEncodingDeclaration() throws Exception {' - line 615", "'new XStream2().toXML(b, new StringWriter());' - line 619", "'public void nullsWithEncodingDeclaration() throws Exception {' - line 628", "'new XStream2().toXMLUTF8(b, new ByteArrayOutputStream());' - line 632"]}, "RobustCollectionConverterTest.java": {"METHODS": ["'public void workingByDefaultWithSimplePayload() {' - line 49", "'public void dosIsPrevented_customProgrammaticallyTimeout() {' - line 79", "'public void dosIsPrevented_customPropertyTimeout() {' - line 96", "'public void dosIsPrevented_defaultTimeout() {' - line 124", "'private Set<Object> preparePayload() {' - line 140"]}, "FileChannelWriterTest.java": {"METHODS": ["'public void setUp() throws Exception {' - line 25", "'public void write() throws Exception {' - line 31", "'public void flush() throws Exception {' - line 40", "'public void close() throws Exception {' - line 48", "'private void assertContent(String string) throws IOException {' - line 56"]}, "SecretTest.java": {"METHODS": ["'public void encrypt() {' - line 54", "'public void encryptedValuePattern() {' - line 71", "'public void decrypt() {' - line 90", "'public void serialization() {' - line 95", "'public void testCompatibilityFromString() {' - line 114", "'public void migrationFromLegacyKeyToConfidentialStore() throws Exception {' - line 127"]}, "JSONObjectResponseTest.java": {"METHODS": ["'public void test() {' - line 38"]}, "PackedMapTest.java": {"METHODS": ["'public void basic() {' - line 20"]}, "AtomicFileWriterTest.java": {"METHODS": ["'public static void computePermissions() throws IOException {' - line 46", "'private static boolean isPosixSupported(File newFile) throws IOException {' - line 56", "'public void setUp() throws IOException {' - line 68", "'public void symlinkToDirectory() throws Exception {' - line 75", "'new AtomicFileWriter(childFileInSymlinkToDir, StandardCharsets.UTF_8);' - line 85", "'public void createFile() {' - line 89", "'public void writeToAtomicFile() throws Exception {' - line 95", "'public void commitToFile() throws Exception {' - line 110", "'public void abortDeletesTmpFile() throws Exception {' - line 124", "'public void indexOutOfBoundsLeavesOriginalUntouched() throws Exception {' - line 137", "'public void badPath() throws Exception {' - line 144", "'public void checkPermissionsRespectUmask() throws IOException {' - line 159"]}, "ZipArchiverTest.java": {"METHODS": ["'public void backwardsSlashesOnWindows() throws IOException {' - line 22", "'public void huge64bitFile() throws IOException {' - line 47"]}, "TarArchiverTest.java": {"METHODS": ["'@Test public void permission() throws Exception {' - line 54", "'private static void run(FilePath dir, String... cmds) throws InterruptedException {' - line 105", "'@Test public void brokenSymlinks() throws Exception {' - line 114", "'new FilePath(dir).tar(out, \"**\");' - line 119", "'@Test public void growingFileTar() throws Exception {' - line 129", "'new FilePath(tmp.getRoot()).tar(out, \"**\");' - line 136", "'public void run() {' - line 153", "'public void doFinish() throws Exception {' - line 168"]}, "RewindableRotatingFileOutputStreamTest.java": {"METHODS": ["'public void rotation() throws IOException, InterruptedException {' - line 25", "'public void deletedFolder() throws Exception {' - line 47"]}, "BuildStatusSummaryTest.java": {"METHODS": ["'public void before() {' - line 24", "'private void mockBuilds(Class<? extends Run> buildClass) {' - line 28", "'public void testStatusUnknownIfRunIsStillBuilding() {' - line 38", "'public void testSuccess() {' - line 47", "'public void testFixed() {' - line 78", "'public void testFailure() {' - line 97", "'public void testBecameFailure() {' - line 108", "'public void testFailureSince() {' - line 120", "'public void testBecameUnstable() {' - line 136", "'public void testUnstableAfterFailure() {' - line 147", "'public void testNonTestRelatedUnstable() {' - line 158", "'public void testNonTestRelatedBecameUnstable() {' - line 169", "'public void testAborted() {' - line 180", "'public void testNotBuilt() {' - line 189"]}, "ResourceListTest.java": {"METHODS": ["'public void setUp() {' - line 49", "'public void emptyLists() {' - line 76", "'public void simpleR() {' - line 89", "'public void simpleRW() {' - line 103", "'public void simpleW() {' - line 117", "'public void parentChildR() {' - line 140", "'public void parentChildW() {' - line 155", "'public void parentChildR3() {' - line 170", "'public void parentChildW3() {' - line 185", "'public void multiWrite1() {' - line 216", "'public void multiWriteN() {' - line 235", "'public void multiRead1() {' - line 251", "'public void multiReadN() {' - line 267"]}, "DisplayNameListenerTest.java": {"METHODS": ["'public void testOnCopied() throws Exception {' - line 34", "'public void testOnRenamedOldNameEqualsDisplayName() throws Exception {' - line 51", "'public void testOnRenamedOldNameNotEqualDisplayName() throws Exception {' - line 65"]}, "UserIdMapperTest.java": {"METHODS": ["'public void testNonexistentFileLoads() throws IOException {' - line 49", "'public void testEmptyGet() throws IOException {' - line 54", "'public void testSimplePutGet() throws IOException {' - line 60", "'public void testMultiple() throws IOException {' - line 68", "'public void testMultipleSaved() throws IOException {' - line 82", "'public void testRepeatPut() throws IOException {' - line 101", "'public void testIsNotMapped() throws IOException {' - line 110", "'public void testIsMapped() throws IOException {' - line 116", "'public void testInitialUserIds() throws IOException {' - line 124", "'public void testSingleUserIds() throws IOException {' - line 130", "'public void testMultipleUserIds() throws IOException {' - line 139", "'public void testRemove() throws IOException {' - line 150", "'public void testRemoveAfterSave() throws IOException {' - line 159", "'public void testPutGetCaseInsensitive() throws IOException {' - line 174", "'public void testPutGetCaseSensitive() throws IOException {' - line 182", "'public void testIsMappedCaseInsensitive() throws IOException {' - line 191", "'public void testIsMappedCaseSensitive() throws IOException {' - line 199", "'public void testRemoveCaseInsensitive() throws IOException {' - line 208", "'public void testRemoveCaseSensitive() throws IOException {' - line 217", "'public void testRepeatRemove() throws IOException {' - line 227", "'public void testClear() throws IOException {' - line 237", "'public void testReload() throws IOException {' - line 247", "'public void testDirectoryFormatBasic() throws IOException {' - line 257", "'public void testDirectoryFormatLongerUserId() throws IOException {' - line 265", "'public void testDirectoryFormatAllSuppressedCharacters() throws IOException {' - line 273", "'public void testDirectoryFormatSingleCharacter() throws IOException {' - line 281", "'public void testDirectoryFormatMixed() throws IOException {' - line 289", "'public void testXmlFileCorrupted() {' - line 297", "'public void testDuplicatedUserId() throws IOException {' - line 302", "'private UserIdMapper createUserIdMapper(IdStrategy idStrategy) throws IOException {' - line 308"]}, "ParameterDefinitionTest.java": {"METHODS": ["'public void compareStringParameterDefinition() {' - line 11", "'public void newMethod() {' - line 39", "'public void compareBooleanParameterDefinition() {' - line 48", "'public void newMethod() {' - line 55", "'public void compareChoiceParameterDefinition() {' - line 65", "'public void newMethod() {' - line 71", "'public void comparePasswordParameterDefinition() {' - line 82", "'public void newMethod() {' - line 88", "'public void compareFileParameterDefinition() {' - line 99", "'public void newMethod() {' - line 105", "'public void compareRunParameterDefinition() {' - line 116", "'public void newMethod() {' - line 123", "'public void compareChildsWithoutEqualsAndHashCode() {' - line 134", "'public void newMethod() {' - line 143", "'public void newMethod() {' - line 148"]}, "ParametersActionTest.java": {"METHODS": ["'public void setUp() {' - line 22", "'public void mergeShouldOverrideParameters() {' - line 29", "'public void mergeShouldCombineDisparateParameters() {' - line 42", "'public void mergeShouldHandleEmptyOverrides() {' - line 55", "'public void mergeShouldHandleNullOverrides() {' - line 63", "'public void mergeShouldReturnNewInstanceWithOverride() {' - line 71", "'public void createUpdatedShouldReturnNewInstanceWithNullOverride() {' - line 81", "'public void checkNullParameterValues() {' - line 89"]}, "TaskActionTest.java": {"METHODS": ["'protected void perform(TaskListener listener) throws Exception {' - line 22", "'void start() {' - line 28", "'public String getIconFileName() {' - line 34", "'public String getDisplayName() {' - line 39", "'public String getUrlName() {' - line 44", "'protected Permission getPermission() {' - line 49", "'protected ACL getACL() {' - line 54", "'public void annotatedText() throws Exception {' - line 60"]}, "LoadStatisticsTest.java": {"METHODS": ["'public void graph() throws IOException {' - line 49", "'public int computeIdleExecutors() {' - line 53", "'public int computeTotalExecutors() {' - line 58", "'public int computeQueueLength() {' - line 63", "'protected Iterable<Node> getNodes() {' - line 68", "'protected boolean matches(Queue.Item item, SubTask subTask) {' - line 73", "'public void isModernWorks() {' - line 104", "'protected Modern(int initialOnlineExecutors, int initialBusyExecutors) {' - line 111", "'public int computeIdleExecutors() {' - line 116", "'public int computeTotalExecutors() {' - line 121", "'public int computeQueueLength() {' - line 126", "'protected Iterable<Node> getNodes() {' - line 131", "'protected boolean matches(Queue.Item item, SubTask subTask) {' - line 136"]}, "StubJob.java": {"METHODS": ["'public boolean isBuildable() {' - line 44", "'protected SortedMap _getRuns() {' - line 50", "'protected void removeRun(Run run) {' - line 56", "'@Override public File getBuildDir() {' - line 61", "'public void save() {' - line 69", "'@Override public ItemGroup getParent() {' - line 73"]}, "ChoiceParameterDefinitionTest.java": {"METHODS": ["'public void shouldValidateChoices() {' - line 16", "'public void testCheckChoices() {' - line 25", "'public void testNullDefaultParameter() {' - line 34", "'public void createNullChoice() {' - line 40", "'public void checkValue_Null() {' - line 48", "'public void createBlankChoice() {' - line 55", "'public void checkValue_Blank() {' - line 63", "'public void createEmptyChoice() {' - line 70", "'public void checkValue_Empty() {' - line 78", "'public void checkValue_Single() {' - line 86", "'public void checkValue_Multiple() {' - line 94", "'public void checkValue_Invalid() {' - line 105", "'public void checkValue_WrongValueType() {' - line 115", "'public void createValue_Invalid() {' - line 125", "'private void assertCreation(String stringValue, String[] choices, boolean valid) {' - line 132", "'private void assertCheckValue(String stringValue, String[] choices, boolean valid) {' - line 138"]}, "RunParameterValueTest.java": {"METHODS": ["'@Test public void robustness() {' - line 35"]}, "ActionableTest.java": {"METHODS": ["'public void replaceAction() {' - line 48", "'public String getDisplayName() {' - line 62", "'public String getSearchUrl() {' - line 67", "'public List<Action> getActions() {' - line 74", "'public void testExtensionOverrides() {' - line 81", "'public void addOrReplaceAction() {' - line 111", "'public void replaceActions() {' - line 129", "'public void removeAction() {' - line 143", "'public void removeActions() {' - line 159", "'public void addAction() {' - line 173", "'public void addAction_null() {' - line 184", "'public void replaceAction_null() {' - line 189", "'public void replaceActions_null() {' - line 194", "'public void replaceActions_null_null() {' - line 199", "'public void addOrReplaceAction_null() {' - line 204", "'public void removeAction_null() {' - line 209", "'public void removeActions_null() {' - line 214", "'@Override public String getDisplayName() {' - line 219", "'@Override public String getSearchUrl() {' - line 223"]}, "TestUserIdMapper.java": {"METHODS": ["'protected File getUsersDirectory() {' - line 16", "'protected IdStrategy getIdStrategy() {' - line 21"]}, "TimeSeriesTest.java": {"METHODS": ["'public void test1() {' - line 37"]}, "MockItem.java": {"METHODS": ["'public MockItem(long id) {' - line 35", "'public MockItem(Queue.Task task) {' - line 39", "'public MockItem(Queue.Task task, List<Action> actions, long id) {' - line 43", "'public CauseOfBlockage getCauseOfBlockage() {' - line 51", "'void enter(Queue q) {' - line 59", "'boolean leave(Queue q) {' - line 66", "'public String getDisplayName() {' - line 72", "'public String getName() {' - line 77", "'public String getFullDisplayName() {' - line 82", "'public String getUrl() {' - line 87"]}, "EnvironmentContributingActionTest.java": {"METHODS": ["'public void buildEnvironment(@NonNull Run<?, ?> run, @NonNull EnvVars env) {' - line 16", "'boolean wasNewMethodCalled() {' - line 20", "'public void buildEnvVars(AbstractBuild<?, ?> abstractBuild, EnvVars envVars) {' - line 30", "'boolean wasDeprecatedMethodCalled() {' - line 34", "'public void buildEnvVars(AbstractBuild<?, ?> abstractBuild, EnvVars envVars) {' - line 45", "'public void buildEnvironment(@NonNull Run<?, ?> run, @NonNull EnvVars env) {' - line 50", "'boolean wasDeprecatedMethodCalled() {' - line 54", "'boolean wasRunCalled() {' - line 58", "'public void testOverrideRunMethodAndCallNewMethod() {' - line 66", "'public void testOverrideRunMethodAndCallDeprecatedMethod() {' - line 80", "'public void testOverrideAbstractBuildAndCallNewMethodWithAbstractBuild() {' - line 94", "'public void testOverrideAbstractBuildAndCallNewMethodWithRun() {' - line 107", "'public void testOverrideAbstractBuildAndCallDeprecatedMethod() {' - line 120", "'public void testOverrideBothAndCallNewMethod() {' - line 130", "'public void testOverrideBothAndCallDeprecatedMethod() {' - line 140"]}, "BallColorTest.java": {"METHODS": ["'public void iconClassName() {' - line 12"]}, "AbstractQueueTaskTest.java": {"METHODS": ["'public void causeOfBlockageOverrides() {' - line 39", "'public boolean isBuildBlocked() {' - line 48", "'return getCauseOfBlockage() != null;' - line 49", "'public String getWhyBlocked() {' - line 53", "'public String getName() {' - line 59", "'public String getFullDisplayName() {' - line 64", "'public void checkAbortPermission() {' - line 69", "'public boolean hasAbortPermission() {' - line 73", "'public String getUrl() {' - line 78", "'public String getDisplayName() {' - line 83"]}, "SCMListenerTest.java": {"METHODS": ["'@Test public void onChangeLogParsed() throws Exception {' - line 44", "'@Override public void onChangeLogParsed(AbstractBuild<?, ?> build, BuildListener listener, ChangeLogSet<?> changelog) {' - line 77", "'@Override public void onChangeLogParsed(Run<?, ?> build, SCM scm, TaskListener listener, ChangeLogSet<?> changelog) {' - line 83", "'@Override public void onChangeLogParsed(AbstractBuild<?, ?> build, BuildListener listener, ChangeLogSet<?> changelog) throws Exception {' - line 89"]}, "TimerTriggerTest.java": {"METHODS": ["'public void testNoNPE() {' - line 39", "'new TimerTrigger(\"\").run();' - line 40", "'public void testTimeZoneOffset() throws Exception {' - line 45"]}, "OfflineCauseTest.java": {"METHODS": ["'public void testChannelTermination_NoStacktrace() {' - line 11"]}, "ComputerLauncherTest.java": {"METHODS": ["'@Test public void jdk7() {' - line 41", "'@Test public void openJDK7() {' - line 52", "'@Test public void jdk6() {' - line 64", "'@Test public void jdk5() {' - line 75", "'new PrintStream(OutputStream.nullOutputStream()),' - line 80", "'@Test public void j2sdk4() {' - line 89", "'new PrintStream(OutputStream.nullOutputStream()),' - line 94", "'@Test public void jdk8() throws IOException {' - line 103", "'@Test public void openJDK8() throws IOException {' - line 107", "'@Test public void jdk10() throws IOException { // predicted' - line 111", "'@Test public void adoptOpenJDK11() throws IOException {' - line 116", "'@Test public void amazonCorrettoJDK11() throws IOException {' - line 123", "'@Test public void openJDK1106() throws IOException {' - line 130", "'@Test public void azulZuluOpenJDK11() throws IOException {' - line 137", "'private static void assertChecked(String text, String spec) throws IOException {' - line 143"]}, "DelegatingComputerLauncherTest.java": {"METHODS": ["'public DummyOne() {' - line 23", "'public DummyTwo() {' - line 34", "'public void testRecursionAvoidance() {' - line 45"]}, "ChannelPingerTest.java": {"METHODS": ["'public void tearDown() throws Exception {' - line 27", "'public void setUp() {' - line 32", "'public void preserveSystemProperties() {' - line 37", "'public void restoreSystemProperties() {' - line 44", "'private void preserveSystemProperty(String propertyName) {' - line 54", "'public void testDefaults() throws IOException, InterruptedException {' - line 60", "'public void testFromSystemProperties() throws IOException, InterruptedException {' - line 71", "'public void testFromOldSystemProperty() throws IOException, InterruptedException {' - line 83", "'public void testNewSystemPropertyTrumpsOld() throws IOException, InterruptedException {' - line 94", "'public void testSetUpRemotePingEquality() {' - line 106"]}, "CloudProvisioningListenerTest.java": {"METHODS": ["'public CauseOfBlockage canProvision(Cloud cloud, Cloud.CloudState state, int numExecutors) {' - line 15", "'public void noOverride() {' - line 22", "'public void override() {' - line 29"]}, "ViewOptionHandlerTest.java": {"METHODS": ["'public void tearDown() throws Exception {' - line 68", "'@Before public void setUp() {' - line 72", "'@Test public void resolveTopLevelView() throws Exception {' - line 90", "'private void mockJenkins(MockedStatic<Jenkins> mocked, Jenkins jenkins) {' - line 100", "'public boolean hasPermission2(@NonNull Authentication a, @NonNull Permission p) {' - line 106", "'@Test public void resolveNestedView() throws Exception {' - line 112", "'@Test public void resolveOuterView() throws Exception {' - line 122", "'@Test public void ignoreLeadingAndTrailingSlashes() throws Exception {' - line 132", "'@Test public void reportNonexistentTopLevelView() throws Exception {' - line 142", "'@Test public void reportNonexistentNestedView() throws Exception {' - line 156", "'@Test public void reportNonexistentInnerView() throws Exception {' - line 170", "'@Test public void reportTraversingViewThatIsNotAViewGroup() throws Exception {' - line 184", "'@Test public void reportEmptyViewNameRequestAsNull() {' - line 198", "'@Test public void reportViewSpaceNameRequestAsIAE() {' - line 207", "'@Test public void reportNullViewAsNPE() {' - line 218", "'@Test public void refuseToReadOuterView() throws Exception {' - line 227", "'@Test public void refuseToReadNestedView() throws Exception {' - line 247", "'@Test public void refuseToReadInnerView() throws Exception {' - line 266", "'private void denyAccessOn(View view) {' - line 284", "'private void parse(final String... params) throws CmdLineException {' - line 290", "'public String getParameter(int idx) {' - line 293", "'public int size() {' - line 298", "'protected CompositeView(String name) {' - line 305"]}, "BuildStepCompatibilityLayerTest.java": {"METHODS": ["'public void testPerformExpectAbstractMethodError() {' - line 19", "'public void testPerform() throws InterruptedException, IOException {' - line 30", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) {' - line 36"]}, "Maven3MojoNoteTest.java": {"METHODS": ["'public void testAnnotateMavenPlugin() {' - line 11", "'public void testAnnotateCodehausPlugin() {' - line 16", "'public void testAnnotateOtherPlugin() {' - line 22", "'private void check(final String decorated, final String input) {' - line 26", "'private String annotate(String text) {' - line 31", "'new Maven3MojoNote().annotate(new Object(), markupText, 0);' - line 33"]}, "DCOMSandbox.java": {"METHODS": ["'public static void main(String[] args) throws Exception {' - line 27", "'new JIComOxidStub(\"129.145.133.224\", \"\", \"bogus\", \"bogus\").serverAlive();' - line 28", "'protected String getSyntax() {' - line 44", "'public void serverAlive() throws Exception {' - line 58", "'public int getOpnum() {' - line 67", "'public void write(NetworkDataRepresentation ndr) {' - line 72", "'public void read(NetworkDataRepresentation ndr) {' - line 77"]}, "SUTester.java": {"METHODS": ["'public static void main(String[] args) throws Throwable {' - line 11", "'public Object call() throws Throwable {' - line 17"]}, "WindowsUtilTest.java": {"METHODS": ["'public void testQuoteArgument() {' - line 36", "'public void testQuoteArgument_OnlyQuotesWhenNecessary() {' - line 44", "'public void testQuoteArgumentForCmd() {' - line 51", "'public void testQuoteArgumentForCmd_OnlyQuotesWhenNecessary() {' - line 59"]}, "CronTabEventualityTest.java": {"METHODS": ["'public static Collection<Object[]> parameters() {' - line 19", "'private Calendar createLimit(Calendar start, int field, int amount) {' - line 27", "'public CronTabEventualityTest(String name, Hash hash) {' - line 36", "'public void testYearlyWillBeEventuallyTriggeredWithinOneYear() {' - line 43", "'public void testAnnuallyWillBeEventuallyTriggeredWithinOneYear() {' - line 51", "'public void testMonthlyWillBeEventuallyTriggeredWithinOneMonth() {' - line 58", "'public void testWeeklyWillBeEventuallyTriggeredWithinOneWeek() {' - line 65", "'public void testDailyWillBeEventuallyTriggeredWithinOneDay() {' - line 72", "'public void testMidnightWillBeEventuallyTriggeredWithinOneDay() {' - line 79", "'public void testHourlyWillBeEventuallyTriggeredWithinOneHour() {' - line 86", "'public void testFirstDayOfMonthWillBeEventuallyTriggeredWithinOneMonth() {' - line 93", "'public void testFirstSundayOfMonthWillBeEventuallyTriggeredWithinOneMonthAndOneWeek() {' - line 100", "'private void checkEventuality(Calendar start, String crontabFormat, Calendar limit) {' - line 109"]}, "CronTabTest.java": {"METHODS": ["'public void test1() {' - line 50", "'new CronTab(\"@yearly\");' - line 51", "'new CronTab(\"@weekly\");' - line 52", "'new CronTab(\"@midnight\");' - line 53", "'new CronTab(\"@monthly\");' - line 54", "'new CronTab(\"0 0 * 1-10/3 *\");' - line 55", "'public void testCeil1() throws Exception {' - line 59", "'c =     new GregorianCalendar(2000, Calendar.MARCH, 1, 1, 40);' - line 65", "'public void testCeil2() throws Exception {' - line 70", "'public void testCeil3() throws Exception {' - line 78", "'public void testCeil3_DoW7() throws Exception {' - line 88", "'public void testCeil4() {' - line 101", "'public void testCeil5() {' - line 123", "'public void testFloor1() throws Exception {' - line 141", "'c =     new GregorianCalendar(2000, Calendar.MARCH, 1, 1, 10);' - line 147", "'public void testFloor2() throws Exception {' - line 152", "'public void testFloor3() throws Exception {' - line 160", "'public void testFloor4() throws Exception {' - line 170", "'@Test public void checkSanity() throws Exception {' - line 181", "'private void compare(Calendar expected, Calendar actual) {' - line 207", "'public void testHash1() throws Exception {' - line 213", "'public int next(int n) {' - line 216", "'private static String bitset(long bits) {' - line 227", "'public void testHash2() throws Exception {' - line 238", "'public int next(int n) {' - line 241", "'@Test public void hashedMinute() throws Exception {' - line 252", "'@Test public void hashSkips() throws Exception {' - line 261", "'@Test public void repeatedHash() throws Exception {' - line 285", "'@Test public void rangeBoundsCheckOK() throws Exception {' - line 296", "'new CronTab(\"H(0-59) H(0-23) H(1-31) H(1-12) H(0-7)\");' - line 297", "'@Test public void rangeBoundsCheckFailHour() {' - line 300", "'@Test public void rangeBoundsCheckFailMinute() {' - line 314", "'@Test public void testTimezone() throws Exception {' - line 329", "'@Test(timeout = 1000L) public void testLongMonths() throws Exception {' - line 343", "'new CronTab(\"0 0 31 7 *\").floor(cal); // would infinite loop' - line 346", "'@Test(timeout = 1000L) public void testCeilLongMonths() throws Exception {' - line 350", "'new CronTab(\"0 0 31 * *\").ceil(cal); // would infinite loop' - line 353"]}, "CronTabDayOfWeekLocaleTest.java": {"METHODS": ["'public static Collection<Object[]> parameters() {' - line 27", "'public CronTabDayOfWeekLocaleTest(Locale locale) {' - line 41", "'public void hudson8656() throws Exception {' - line 51", "'public void isSundayAndNextRunIsMonday() throws Exception {' - line 66", "'public void isSundayAndPreviousRunIsMonday() throws Exception {' - line 81", "'public void isSundayAndNextRunIsTuesday() throws Exception {' - line 96", "'public void isSundayAndPreviousRunIsTuesday() throws Exception {' - line 111", "'public void isSundayAndNextRunIsWednesday() throws Exception {' - line 126", "'public void isSundayAndPreviousRunIsWednesday() throws Exception {' - line 141", "'public void isSundayAndNextRunIsThursday() throws Exception {' - line 156", "'public void isSundayAndPreviousRunIsThursday() throws Exception {' - line 171", "'public void isSundayAndNextRunIsFriday() throws Exception {' - line 186", "'public void isSundayAndPreviousRunIsFriday() throws Exception {' - line 201", "'public void isSundayAndNextRunIsSaturday() throws Exception {' - line 216", "'public void isSundayAndPreviousRunIsSaturday() throws Exception {' - line 231", "'public void isSundayAndNextRunIsNextSunday() throws Exception {' - line 246", "'public void isSundayAndPreviousRunIsPreviousSunday() throws Exception {' - line 261", "'public void isSundayAndNextRunIsNextSunday7() throws Exception {' - line 277", "'public void isSundayAndPreviousRunIsPreviousSunday7() throws Exception {' - line 292", "'public void isSaturdayAndNextRunIsSundayAsterisk() throws Exception {' - line 307", "'public void isSundayAndPreviousRunIsSaturdayAsterisk() throws Exception {' - line 322", "'private void compare(final Calendar expected, final Calendar actual) {' - line 336"]}, "LogRecorderTest.java": {"METHODS": ["'@Test public void targetIncludes() {' - line 48", "'@Test public void targetMatches() {' - line 57", "'@Test public void testClearing() throws IOException {' - line 69", "'@Test public void testSpecificExclusion() {' - line 89", "'private static LogRecord createLogRecord(String logger, Level level, String message) {' - line 120", "'private static boolean includes(String target, String logger) {' - line 127", "'private static Boolean matches(String target, String logger) {' - line 132", "'return matches(target, logger, Level.INFO);' - line 133", "'private static Boolean matches(String target, String logger, Level loggerLevel) {' - line 136", "'public void autocompletionTest() {' - line 142", "'private static void isCandidate(Set<String> candidates, String candidate) {' - line 166", "'private static void isNotCandidate(Set<String> candidates, String candidate) {' - line 170"]}, "RestartRequiredException.java": {"METHODS": ["'public RestartRequiredException(Localizable message) {' - line 36", "'public RestartRequiredException(Localizable message, Throwable cause) {' - line 40"]}, "MetaLocaleDrivenResourceProvider.java": {"METHODS": ["'public URL lookup(@NonNull String s) {' - line 48"]}, "DailyCheck.java": {"METHODS": ["'public DailyCheck() {' - line 56", "'@Override public long getRecurrencePeriod() {' - line 60", "'@Override public long getInitialDelay() {' - line 64", "'@Override protected void execute(TaskListener listener) throws IOException, InterruptedException {' - line 68"]}, "MasterToSlaveFileCallable.java": {"METHODS": ["'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 20"]}, "ExtensionRefreshException.java": {"METHODS": ["'public ExtensionRefreshException() {' - line 34", "'public ExtensionRefreshException(String message) {' - line 37", "'public ExtensionRefreshException(String message, Throwable cause) {' - line 41", "'public ExtensionRefreshException(Throwable cause) {' - line 45"]}, "ExtensionComponentSet.java": {"METHODS": ["'public static ExtensionComponentSet union(final Collection<? extends ExtensionComponentSet> base) {' - line 91", "'public static ExtensionComponentSet union(ExtensionComponentSet... members) {' - line 103", "'return union(Arrays.asList(members));' - line 104", "'public static ExtensionComponentSet allOf(final ExtensionFinder f) {' - line 110"]}, "SlaveToMasterFileCallable.java": {"METHODS": ["'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 28", "'protected Object readResolve() {' - line 33", "'private void warnOnController() {' - line 38"]}, "JenkinsHttpSessionListener.java": {"METHODS": ["'public void sessionCreated(HttpSessionEvent httpSessionEvent) {' - line 48", "'public void sessionDestroyed(HttpSessionEvent httpSessionEvent) {' - line 59"]}, "ExtensionFilter.java": {"METHODS": ["'public static ExtensionList<ExtensionFilter> all() {' - line 88"]}, "UserAgentURLConnectionDecorator.java": {"METHODS": ["'public void decorate(URLConnection con) throws IOException {' - line 51", "'public static String getUserAgent() {' - line 58"]}, "AgentProtocol.java": {"METHODS": ["'public boolean isOptIn() {' - line 51", "'public boolean isRequired() {' - line 62", "'public boolean isDeprecated() {' - line 71", "'public String getDisplayName() {' - line 92", "'return getName();' - line 93", "'public static ExtensionList<AgentProtocol> all() {' - line 104", "'public static AgentProtocol of(String protocolName) {' - line 109"]}, "YesNoMaybe.java": {"METHODS": ["'public static Boolean toBoolean(YesNoMaybe v) {' - line 42", "'public Boolean toBool() {' - line 48"]}, "InitReactorRunner.java": {"METHODS": ["'public void run(Reactor reactor) throws InterruptedException, ReactorException, IOException {' - line 38", "'private ReactorListener buildReactorListener() throws IOException {' - line 62", "'public void onTaskStarted(Task t) {' - line 67", "'public void onTaskCompleted(Task t) {' - line 72", "'public void onTaskFailed(Task t, Throwable err, boolean fatal) {' - line 77", "'public void onAttained(Milestone milestone) {' - line 82", "'public static String getDisplayName(Task t) {' - line 98", "'protected void onInitMilestoneAttained(InitMilestone milestone) {' - line 110"]}, "ProxyInjector.java": {"METHODS": ["'public void injectMembers(Object instance) {' - line 51", "'return resolve().getMembersInjector(typeLiteral);' - line 57", "'return resolve().getMembersInjector(type);' - line 62", "'return resolve().getBindings();' - line 67", "'return resolve().getAllBindings();' - line 72", "'return resolve().getBinding(key);' - line 77", "'return resolve().getBinding(type);' - line 82", "'return resolve().getExistingBinding(key);' - line 87", "'return resolve().findBindingsByType(type);' - line 92", "'return resolve().getProvider(key);' - line 97", "'return resolve().getProvider(type);' - line 102", "'return resolve().getInstance(key);' - line 107", "'return resolve().getInstance(type);' - line 112", "'public Injector getParent() {' - line 116", "'return resolve().getParent();' - line 117", "'public Injector createChildInjector(Iterable<? extends Module> modules) {' - line 121", "'return resolve().createChildInjector(modules);' - line 122", "'public Injector createChildInjector(Module... modules) {' - line 126", "'return resolve().createChildInjector(modules);' - line 127", "'return resolve().getScopeBindings();' - line 132", "'public Set<TypeConverterBinding> getTypeConverterBindings() {' - line 136", "'return resolve().getTypeConverterBindings();' - line 137", "'public List<Element> getElements() {' - line 141", "'return resolve().getElements();' - line 142", "'return resolve().getAllMembersInjectorInjectionPoints();' - line 147"]}, "I18n.java": {"METHODS": ["'public String getIconFileName() {' - line 46", "'public String getDisplayName() {' - line 51", "'public String getUrlName() {' - line 56", "'public HttpResponse doResourceBundle(StaplerRequest request) {' - line 76"]}, "ClassLoaderReflectionToolkit.java": {"METHODS": ["'private static Object getClassLoadingLock(ClassLoader cl, String name) {' - line 65", "'return invoke(GetClassLoadingLock.GET_CLASS_LOADING_LOCK, RuntimeException.class, cl, name);' - line 69"]}, "MissingDependencyException.java": {"METHODS": ["'public MissingDependencyException(String pluginShortName, List<Dependency> missingDependencies) {' - line 43", "'public List<Dependency> getMissingDependencies() {' - line 50", "'public String getPluginShortName() {' - line 54"]}, "PluginSubtypeMarker.java": {"METHODS": ["'public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {' - line 59", "'public Void visitType(TypeElement e, Void aVoid) {' - line 63", "'public Void visitUnknown(Element e, Void aVoid) {' - line 79", "'public SourceVersion getSupportedSourceVersion() {' - line 100", "'private void write(TypeElement c) throws IOException {' - line 104", "'private Element asElement(TypeMirror m) {' - line 112"]}, "PluginLocaleDrivenResourceProvider.java": {"METHODS": ["'URL lookup(@NonNull String s);' - line 45"]}, "GlobalToolConfiguration.java": {"METHODS": ["'public String getIconFileName() {' - line 52", "'public String getDisplayName() {' - line 57", "'public String getDescription() {' - line 62", "'public String getUrlName() {' - line 67", "'public Permission getRequiredPermission() {' - line 72", "'public Category getCategory() {' - line 78", "'private boolean configure(StaplerRequest req, JSONObject json) throws Descriptor.FormException, IOException {' - line 89", "'private boolean configureDescriptor(StaplerRequest req, JSONObject json, Descriptor<?> d) throws Descriptor.FormException {' - line 102"]}, "ToolConfigurationCategory.java": {"METHODS": ["'public String getShortDescription() {' - line 14", "'public String getDisplayName() {' - line 19"]}, "UrlHelper.java": {"METHODS": ["'public static boolean isValidRootUrl(String url) {' - line 69", "'private CustomUrlValidator() {' - line 75", "'protected boolean isValidAuthority(String authority) {' - line 80", "'protected boolean isValidQuery(String query) {' - line 94"]}, "InterceptingScheduledExecutorService.java": {"METHODS": ["'protected InterceptingScheduledExecutorService(ScheduledExecutorService base) {' - line 37", "'protected ScheduledExecutorService delegate() {' - line 42", "'return delegate().schedule(wrap(command), delay, unit);' - line 48", "'return delegate().schedule(wrap(callable), delay, unit);' - line 53", "'return delegate().scheduleAtFixedRate(wrap(command), initialDelay, period, unit);' - line 58", "'return delegate().scheduleWithFixedDelay(wrap(command), initialDelay, delay, unit);' - line 63"]}, "Timer.java": {"METHODS": ["'new ErrorLoggingScheduledThreadPoolExecutor(10, new NamingThreadFactory(new ClassLoaderSanityThreadFactory(new DaemonThreadFactory()), \"jenkins.util.Timer\")),' - line 47", "'private Timer() {}' - line 66"]}, "JSONSignatureValidator.java": {"METHODS": ["'public JSONSignatureValidator(String name) {' - line 48", "'public FormValidation verifySignature(JSONObject o) throws IOException {' - line 56", "'private FormValidation checkSpecificSignature(JSONObject json, JSONObject signatureJson, MessageDigest digest, String digestEntry, Signature signature, String signatureEntry, String digestName) throws IOException {' - line 159", "'private boolean verifySignature(Signature signature, String providedSignature) {' - line 214", "'private boolean digestMatches(byte[] digest, String providedDigest) {' - line 243", "'protected Set<TrustAnchor> loadTrustAnchors(CertificateFactory cf) throws IOException {' - line 249"]}, "SetContextClassLoader.java": {"METHODS": ["'*     void foo() {' - line 28", "'public SetContextClassLoader() {' - line 63", "'public SetContextClassLoader(Class<?> clazz) {' - line 74", "'public SetContextClassLoader(ClassLoader cl) {' - line 85", "'public void close() {' - line 92"]}, "TimeDuration.java": {"METHODS": ["'public TimeDuration(long millis) {' - line 18", "'public int getTime() {' - line 31", "'public long getTimeInMillis() {' - line 38", "'public int getTimeInSeconds() {' - line 46", "'public long as(TimeUnit t) {' - line 51", "'public static TimeDuration fromString(@CheckForNull String delay) {' - line 61", "'public Object convert(Class type, Object value) {' - line 83", "'return fromString((String) value);' - line 87"]}, "FullDuplexHttpService.java": {"METHODS": ["'protected FullDuplexHttpService(UUID uuid) {' - line 78", "'protected Response(Map<UUID, FullDuplexHttpService> services) {' - line 160", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 165"]}, "HttpServletFilter.java": {"METHODS": ["'boolean handle(HttpServletRequest req, HttpServletResponse rsp) throws IOException, ServletException;' - line 60", "'static void register() throws ServletException {' - line 64", "'public void doFilter(ServletRequest req, ServletResponse rsp, FilterChain chain) throws IOException, ServletException {' - line 67", "'public void init(FilterConfig filterConfig) {' - line 79", "'public void destroy() {' - line 83"]}, "ErrorLoggingScheduledThreadPoolExecutor.java": {"METHODS": ["'@Override protected void afterExecute(Runnable r, Throwable t) {' - line 61"]}, "ProgressiveRendering.java": {"METHODS": ["'protected ProgressiveRendering() {' - line 95", "'@Override public void run() {' - line 114", "'@Override public void run() {' - line 134", "'private void release() {' - line 145", "'private static RequestImpl createMockRequest() {' - line 160", "'@Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {' - line 182", "'private static void setCurrentRequest(RequestImpl request) {' - line 194", "'protected ExecutorService executorService() {' - line 294", "'protected long timeout() {' - line 304"]}, "Listeners.java": {"METHODS": ["'private Listeners() {}' - line 73"]}, "VirtualFile.java": {"METHODS": ["'return list();' - line 194", "'public boolean supportsQuickRecursiveListing() {' - line 198", "'public boolean hasSymlink(OpenOption... openOptions) throws IOException {' - line 215", "'return list(glob.replace('\\\\', '/'), null, true).toArray(MemoryReductionUtil.EMPTY_STRING_ARRAY);' - line 243", "'return list(includes, excludes, useDefaultExcludes, new OpenOption[0]);' - line 259", "'public boolean containsSymLinkChild(OpenOption... openOptions) throws IOException {' - line 298", "'public boolean containsTmpDirChild(OpenOption... openOptions) throws IOException {' - line 303", "'public Collection<String> call() throws IOException {' - line 321", "'private static void collectFiles(VirtualFile d, Collection<String> names, String prefix) throws IOException {' - line 327", "'private List<TokenizedPattern> patterns(String patts) {' - line 338", "'private void sendOneZipEntry(ZipOutputStream zos, VirtualFile vf, String relativePath, String prefix, OpenOption... openOptions) throws IOException {' - line 388", "'public int mode() throws IOException {' - line 436", "'public InputStream open(OpenOption... openOptions) throws IOException {' - line 462", "'return open();' - line 463", "'return getName().compareToIgnoreCase(o.getName());' - line 471", "'return toURI().hashCode();' - line 487", "'return toURI().toString();' - line 495", "'public boolean supportIsDescendant() {' - line 539", "'public boolean isDescendant(String childRelativePath) throws IOException {' - line 550", "'String joinWithForwardSlashes(Collection<String> relativePath) {' - line 554", "'public static VirtualFile forFile(final File f) {' - line 565", "'@Override public String getName() {' - line 579", "'@Override public URI toURI() {' - line 583", "'@Override public VirtualFile getParent() {' - line 587", "'@Override public boolean isDirectory() throws IOException {' - line 591", "'@Override public boolean isFile() throws IOException {' - line 598", "'@Override public boolean exists() throws IOException {' - line 605", "'@Override public String readLink() throws IOException {' - line 612", "'@Override public VirtualFile[] list() throws IOException {' - line 619", "'public VirtualFile[] list(OpenOption... openOptions) throws IOException {' - line 636", "'@Override public boolean supportsQuickRecursiveListing() {' - line 648", "'public Collection<String> list(String includes, String excludes, boolean useDefaultExcludes) throws IOException {' - line 672", "'public boolean hasSymlink(OpenOption... openOptions) throws IOException {' - line 699", "'@Override public VirtualFile child(String name) {' - line 704", "'@Override public long length() throws IOException {' - line 708", "'@Override public int mode() throws IOException {' - line 715", "'@Override public long lastModified() throws IOException {' - line 722", "'@Override public boolean canRead() throws IOException {' - line 729", "'@Override public InputStream open() throws IOException {' - line 736", "'public InputStream open(OpenOption... openOptions) throws IOException {' - line 748", "'public boolean containsSymLinkChild(OpenOption... openOptions) {' - line 755", "'private String determineRootPath() {' - line 766", "'private boolean isIllegalSymlink() {' - line 770", "'public boolean supportIsDescendant() {' - line 792", "'public boolean isDescendant(String potentialChildRelativePath) throws IOException {' - line 801", "'private String computeRelativePathToRoot() {' - line 840", "'return joinWithForwardSlashes(relativePath);' - line 852", "'public static VirtualFile forFilePath(final FilePath f) {' - line 861", "'@Override public String getName() {' - line 875", "'@Override public URI toURI() {' - line 879", "'@Override public VirtualFile getParent() {' - line 887", "'@Override public boolean isDirectory() throws IOException {' - line 891", "'@Override public boolean isFile() throws IOException {' - line 899", "'return exists() && !isDirectory();' - line 901", "'@Override public boolean exists() throws IOException {' - line 904", "'@Override public String readLink() throws IOException {' - line 912", "'@Override public VirtualFile[] list() throws IOException {' - line 920", "'return convertChildrenToVirtualFile(kids);' - line 923", "'private VirtualFile[] convertChildrenToVirtualFile(List<FilePath> kids) {' - line 929", "'public VirtualFile[] list(OpenOption... openOptions) throws IOException {' - line 939", "'return convertChildrenToVirtualFile(kids);' - line 942", "'public boolean containsSymLinkChild(OpenOption... openOptions) throws IOException {' - line 949", "'public boolean hasSymlink(OpenOption... openOptions) throws IOException {' - line 958", "'@Override public boolean supportsQuickRecursiveListing() {' - line 966", "'@Override public Collection<String> list(String includes, String excludes, boolean useDefaultExcludes) throws IOException {' - line 992", "'@Override public VirtualFile child(String name) {' - line 1023", "'@Override public long length() throws IOException {' - line 1027", "'@Override public int mode() throws IOException {' - line 1035", "'@Override public long lastModified() throws IOException {' - line 1043", "'@Override public boolean canRead() throws IOException {' - line 1051", "'@Override public InputStream open() throws IOException {' - line 1059", "'@Override public InputStream open(OpenOption... openOptions) throws IOException {' - line 1067", "'public boolean supportIsDescendant() {' - line 1088", "'public boolean isDescendant(String potentialChildRelativePath) throws IOException {' - line 1097", "'private String computeRelativePathToRoot() {' - line 1137", "'return joinWithForwardSlashes(relativePath);' - line 1149", "'@Override public List<String> invoke(File f, VirtualChannel channel) throws IOException {' - line 1171", "'public void visit(File f, String relativePath) {' - line 1178", "'@Override public Boolean invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {' - line 1190"]}, "JenkinsClassLoader.java": {"METHODS": ["'URL findResource(String name);' - line 22", "'Enumeration<URL> findResources(String name) throws IOException;' - line 25", "'Object getClassLoadingLock(String className);' - line 28"]}, "BuildListenerAdapter.java": {"METHODS": ["'public BuildListenerAdapter(TaskListener delegate) {' - line 42", "'@Override public PrintStream getLogger() {' - line 46", "'@Override public void annotate(ConsoleNote ann) throws IOException {' - line 51", "'@Override public void hyperlink(String url, String text) throws IOException {' - line 55", "'@Override public PrintWriter error(String msg) {' - line 59", "'@Override public PrintWriter error(String format, Object... args) {' - line 63", "'@Override public PrintWriter fatalError(String msg) {' - line 67", "'@Override public PrintWriter fatalError(String format, Object... args) {' - line 71", "'public static BuildListener wrap(TaskListener l) {' - line 75"]}, "JenkinsJVM.java": {"METHODS": ["'protected JenkinsJVM() {' - line 23", "'public static boolean isJenkinsJVM() {' - line 33", "'public static void checkJenkinsJVM() {' - line 43", "'public static void checkNotJenkinsJVM() {' - line 55", "'protected static void setJenkinsJVM(boolean jenkinsJVM) {' - line 69"]}, "AtmostOneTaskExecutor.java": {"METHODS": ["'public AtmostOneTaskExecutor(ExecutorService base, Callable<V> task) {' - line 68", "'public AtmostOneTaskExecutor(Callable<V> task) {' - line 73", "'new DaemonThreadFactory(),' - line 75", "'public Void call() throws Exception {' - line 100"]}, "URLClassLoader2.java": {"METHODS": ["'public URLClassLoader2(URL[] urls) {' - line 19", "'public URLClassLoader2(URL[] urls, ClassLoader parent) {' - line 23", "'public void addURL(URL url) {' - line 28", "'public Object getClassLoadingLock(String className) {' - line 43"]}, "SystemProperties.java": {"METHODS": ["'String getString(String key);' - line 85", "'public void contextInitialized(ServletContextEvent event) {' - line 101", "'public void contextDestroyed(ServletContextEvent event) {' - line 117", "'public static void allowOnAgent(String key) {' - line 130", "'public void preOnline(Computer c, Channel channel, FilePath root, TaskListener listener) throws IOException, InterruptedException {' - line 138", "'public Void call() throws RuntimeException {' - line 156", "'public String getString(String key) {' - line 170", "'private SystemProperties() {}' - line 181", "'public static String getString(String key) {' - line 196", "'return getString(key, null);' - line 197", "'public static String getString(String key, @CheckForNull String def) {' - line 213", "'return getString(key, def, Level.CONFIG);' - line 214", "'public static String getString(String key, @CheckForNull String def, Level logLevel) {' - line 231", "'public static boolean getBoolean(String name) {' - line 268", "'return getBoolean(name, false);' - line 269", "'public static boolean getBoolean(String name, boolean def) {' - line 287", "'public static Boolean optBoolean(String name) {' - line 306", "'public static Integer getInteger(String name) {' - line 322", "'return getInteger(name, null);' - line 323", "'public static Integer getInteger(String name, Integer def) {' - line 340", "'return getInteger(name, def, Level.CONFIG);' - line 341", "'public static Integer getInteger(String name, Integer def, Level logLevel) {' - line 359", "'public static Long getLong(String name) {' - line 386", "'return getLong(name, null);' - line 387", "'public static Long getLong(String name, Long def) {' - line 404", "'return getLong(name, def, Level.CONFIG);' - line 405", "'public static Long getLong(String name, Long def, Level logLevel) {' - line 423"]}, "NonLocalizable.java": {"METHODS": ["'public NonLocalizable(String nonLocalizable) {' - line 19", "'public String toString(Locale locale) {' - line 25", "'public String toString() {' - line 30"]}, "HttpSessionListener.java": {"METHODS": ["'public static ExtensionList<HttpSessionListener> all() {' - line 48", "'public void sessionCreated(HttpSessionEvent httpSessionEvent) {' - line 53", "'public void sessionDestroyed(HttpSessionEvent httpSessionEvent) {' - line 57"]}, "MemoryReductionUtil.java": {"METHODS": ["'public static int preallocatedHashmapCapacity(int elementsToHold) {' - line 36", "'public static Map getPresizedMutableMap(int elementCount) {' - line 47", "'public static String[] internInPlace(String[] input) {' - line 55"]}, "TreeStringBuilder.java": {"METHODS": ["'private Child(final TreeString node) {' - line 30", "'public Child intern(final String s) {' - line 38", "'private void makeWritable() {' - line 76", "'private Child split(final String prefix) {' - line 87", "'private int commonPrefix(final String a, final String b) {' - line 100", "'private void dedup(final Map<String, char[]> table) {' - line 114", "'public TreeString intern(final String s) {' - line 125", "'public TreeString intern(final TreeString s) {' - line 133", "'public void dedup() {' - line 142"]}, "ErrorLoggingExecutorService.java": {"METHODS": ["'public ErrorLoggingExecutorService(ExecutorService base) {' - line 42", "'protected Runnable wrap(Runnable r) {' - line 47"]}, "DirectedGraph.java": {"METHODS": ["'public SCC(int index) {' - line 49", "'public Iterator<N> iterator() {' - line 54", "'public int size() {' - line 59", "'Collection<N> edges() {' - line 86", "'return forward(n);' - line 87", "'public List<SCC<N>> getStronglyConnectedComponents() {' - line 97", "'void traverse() {' - line 113", "'void visit(Node v) {' - line 120", "'new Tarjan().traverse();' - line 150"]}, "PluginLabelUtil.java": {"METHODS": ["'private static String canonicalLabel(String label) {' - line 39", "'public static String[] canonicalLabels(JSONArray labels) {' - line 59"]}, "MarkFindingOutputStream.java": {"METHODS": ["'protected MarkFindingOutputStream(OutputStream base) {' - line 17", "'public void write(byte[] b, int off, int len) throws IOException {' - line 50", "'public void flush() throws IOException {' - line 90", "'public void close() throws IOException {' - line 96", "'private void flushPartialMatch() throws IOException {' - line 101", "'private static byte[] toUTF8(String s) {' - line 114"]}, "InterceptingExecutorService.java": {"METHODS": ["'protected InterceptingExecutorService(ExecutorService base) {' - line 21", "'protected ExecutorService delegate() {' - line 29", "'return delegate().submit(wrap(task));' - line 35", "'return delegate().submit(wrap(task), result);' - line 40", "'return delegate().submit(wrap(task));' - line 45", "'return delegate().invokeAll(wrap(tasks));' - line 50", "'return delegate().invokeAll(wrap(tasks), timeout, unit);' - line 55", "'return delegate().invokeAny(wrap(tasks));' - line 60", "'return delegate().invokeAny(wrap(tasks), timeout, unit);' - line 65", "'public void execute(Runnable command) {' - line 69", "'public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException {' - line 75", "'return delegate().awaitTermination(timeout, unit);' - line 76", "'public boolean isShutdown() {' - line 80", "'return delegate().isShutdown();' - line 81", "'public boolean isTerminated() {' - line 85", "'return delegate().isTerminated();' - line 86", "'public void shutdown() {' - line 90", "'public List<Runnable> shutdownNow() {' - line 95", "'return delegate().shutdownNow();' - line 96", "'public String toString() {' - line 100", "'return delegate().toString();' - line 101"]}, "TreeString.java": {"METHODS": ["'assert getLabel().startsWith(prefix);' - line 87", "'private int depth() {' - line 102", "'public boolean equals(final Object rhs) {' - line 111", "'public int hashCode() {' - line 120", "'assert toString().hashCode() == h;' - line 127", "'public String toString() {' - line 135", "'public boolean isBlank() {' - line 166", "'public static String toString(final TreeString t) {' - line 170", "'public static TreeString of(final String s) {' - line 181", "'public ConverterImpl(final XStream xs) {}' - line 193", "'public Object unmarshal(final HierarchicalStreamReader reader, final UnmarshallingContext context) {' - line 202", "'public boolean canConvert(final Class type) {' - line 215"]}, "ContextResettingExecutorService.java": {"METHODS": ["'public ContextResettingExecutorService(ExecutorService base) {' - line 14", "'protected Runnable wrap(final Runnable r) {' - line 19", "'public void run() {' - line 22", "'public V call() throws Exception {' - line 40"]}, "ResourceBundleUtil.java": {"METHODS": ["'private ResourceBundleUtil() {' - line 51", "'return getBundle(baseName, Locale.getDefault());' - line 61", "'private static JSONObject toJSONObject(@NonNull ResourceBundle bundle) {' - line 127"]}, "JavaVMArguments.java": {"METHODS": ["'public static List<String> current() {' - line 22"]}, "ServerTcpPort.java": {"METHODS": ["'public ServerTcpPort(int value, String type) {' - line 16", "'public ServerTcpPort(JSONObject o) {' - line 21", "'public int getPort() {' - line 29"]}, "JavaUtils.java": {"METHODS": ["'private JavaUtils() {' - line 38", "'public static boolean isRunningWithJava8OrBelow() {' - line 46", "'public static boolean isRunningWithPostJava8() {' - line 55", "'public static JavaSpecificationVersion getCurrentJavaRuntimeVersionNumber() {' - line 63", "'public static String getCurrentRuntimeJavaVersion() {' - line 77"]}, "CompositeIOException.java": {"METHODS": ["'public CompositeIOException(String message, @NonNull List<IOException> exceptions) {' - line 62", "'public CompositeIOException(String message, IOException... exceptions) {' - line 75", "'public List<IOException> getExceptions() {' - line 79", "'public UncheckedIOException asUncheckedIOException() {' - line 83", "'private static String getDiscardedExceptionsMessage(List<IOException> exceptions) {' - line 87"]}, "FileBoolean.java": {"METHODS": ["'public FileBoolean(File file) {' - line 26", "'public FileBoolean(Class owner, String name) {' - line 30", "'public boolean get() {' - line 37", "'public boolean fastGet() {' - line 44", "'if (state == null)    return get();' - line 45", "'public boolean isOn() { return get(); }' - line 49", "'public boolean isOff() { return !get(); }' - line 51", "'public void set(boolean b) {' - line 53", "'public void on() {' - line 61", "'public void off() {' - line 71"]}, "OnMaster.java": {"METHODS": ["'//        public void onChannelBuilding(ChannelBuilder builder, @Nullable Object context) {' - line 23", "'//        public ClassFilterImpl(ClassFilter delegate, String... blacklist) {' - line 35", "'//        protected boolean isBlacklisted(String name) {' - line 41", "'//        protected boolean isBlacklisted(Class c) {' - line 46"]}, "PathRemover.java": {"METHODS": ["'public static PathRemover newSimpleRemover() {' - line 51", "'public static PathRemover newRemoverWithStrategy(@NonNull RetryStrategy retryStrategy) {' - line 55", "'public static PathRemover newFilteredRobustRemover(@NonNull PathChecker pathChecker, int maxRetries, boolean gcAfterFailedRemove, long waitBetweenRetries) {' - line 59", "'private PathRemover(@NonNull RetryStrategy retryStrategy, @NonNull PathChecker pathChecker) {' - line 66", "'public void forceRemoveFile(@NonNull Path path) throws IOException {' - line 71", "'public void forceRemoveDirectoryContents(@NonNull Path path) throws IOException {' - line 81", "'public void forceRemoveRecursive(@NonNull Path path) throws IOException {' - line 90", "'void check(@NonNull Path path) throws SecurityException;' - line 102", "'boolean shouldRetry(int retriesAttempted);' - line 110", "'private PausingGCRetryStrategy(int maxRetries, boolean gcAfterFailedRemove, long waitBetweenRetries) {' - line 131", "'private void gcIfEnabled() {' - line 139", "'public boolean shouldRetry(int retriesAttempted) {' - line 149", "'public String failureMessage(@NonNull Path fileToRemove, int retryCount) {' - line 164", "'private Optional<IOException> tryRemoveFile(@NonNull Path path) {' - line 199", "'private List<IOException> tryRemoveRecursive(@NonNull Path path) {' - line 208", "'private List<IOException> tryRemoveDirectoryContents(@NonNull Path path) {' - line 216", "'private void removeOrMakeRemovableThenRemove(@NonNull Path path) throws IOException {' - line 230", "'private static void makeRemovable(@NonNull Path path) throws IOException {' - line 253", "'private static void makeWritable(@NonNull Path path) throws IOException {' - line 276"]}, "XMLUtils.java": {"METHODS": ["'public static void safeTransform(@NonNull Source source, @NonNull Result out) throws TransformerException,' - line 57", "'return parse(fileInputStream);' - line 165", "'return parse(fileReader);' - line 183", "'return getValue(xpath, file, Charset.defaultCharset().toString());' - line 204", "'return getValue(xpath, document);' - line 221", "'public static String getValue(String xpath, Document document) throws XPathExpressionException {' - line 233", "'private static void _transform(Source source, Result out) throws TransformerException {' - line 243", "'private static DocumentBuilderFactory newDocumentBuilderFactory() {' - line 253", "'private static void setDocumentBuilderFactoryFeature(DocumentBuilderFactory documentBuilderFactory, String feature, boolean state) {' - line 270"]}, "RestrictiveEntityResolver.java": {"METHODS": ["'private RestrictiveEntityResolver() {' - line 18", "'public InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {' - line 26"]}, "FilteredFunctionContext.java": {"METHODS": ["'public FilteredFunctionContext(Set<String> illegalFunctions) {' - line 55", "'public FilteredFunctionContext() {' - line 60", "'public Function getFunction(String namespaceURI, String prefix, String localName) throws UnresolvableException {' - line 65"]}, "AbstractGroovyViewModule.java": {"METHODS": ["'protected AbstractGroovyViewModule(JellyBuilder b) {' - line 32", "'public Object methodMissing(String name, Object args) {' - line 40", "'public Object propertyMissing(String name) {' - line 44", "'public void propertyMissing(String name, Object value) {' - line 48"]}, "GroovyHookScript.java": {"METHODS": ["'public GroovyHookScript(String hook) {' - line 50", "'private GroovyHookScript(String hook, Jenkins j) {' - line 54", "'public GroovyHookScript(String hook, @NonNull ServletContext servletContext, @NonNull File jenkinsHome, @NonNull ClassLoader loader) {' - line 58", "'public GroovyHookScript bind(String name, Object o) {' - line 65", "'public Binding getBindings() {' - line 70", "'public void run() {' - line 74", "'protected void execute(URL bundled) throws IOException {' - line 114", "'protected void execute(File f) {' - line 121", "'protected void execute(GroovyCodeSource s) {' - line 133", "'protected GroovyShell createShell() {' - line 144"]}, "JenkinsANTLRErrorListener.java": {"METHODS": ["'public JenkinsANTLRErrorListener() {' - line 15", "'public JenkinsANTLRErrorListener(Supplier<String> errorMessageSupplier) {' - line 19", "'private static String formatMessage(int line, int column, String message) {' - line 38"]}, "CriticalXStreamException.java": {"METHODS": ["'public CriticalXStreamException(XStreamException cause) {' - line 37"]}, "SafeURLConverter.java": {"METHODS": ["'public Object fromString(String str) {' - line 46"]}, "XStreamDOM.java": {"METHODS": ["'public XStreamDOM(String tagName, Map<String, String> attributes, String value) {' - line 130", "'public XStreamDOM(String tagName, Map<String, String> attributes, List<XStreamDOM> children) {' - line 137", "'private XStreamDOM(String tagName, String[] attributes, List<XStreamDOM> children, String value) {' - line 144", "'private String[] toAttributeList(Map<String, String> attributes) {' - line 151", "'public String getTagName() {' - line 161", "'public XStreamDOM expandMacro(VariableResolver<String> vars) {' - line 182", "'public String getAttribute(String name) {' - line 200", "'public int getAttributeCount() {' - line 207", "'String getAttributeName(int index) {' - line 211", "'public String getAttribute(int index) {' - line 215", "'public String getValue() {' - line 219", "'public List<XStreamDOM> getChildren() {' - line 223", "'public HierarchicalStreamReader newReader() {' - line 230", "'public static WriterImpl newWriter() {' - line 238", "'public void writeTo(OutputStream os) {' - line 245", "'public void writeTo(Writer w) {' - line 249", "'public void writeTo(HierarchicalStreamWriter w) {' - line 253", "'new ConverterImpl().marshal(this, w, null);' - line 254", "'public static XStreamDOM from(XStream xs, Object obj) {' - line 260", "'public static XStreamDOM from(InputStream in) {' - line 266", "'return from(XStream2.getDefaultDriver().createReader(in));' - line 267", "'public static XStreamDOM from(Reader in) {' - line 270", "'return from(XStream2.getDefaultDriver().createReader(in));' - line 271", "'public static XStreamDOM from(HierarchicalStreamReader in) {' - line 274", "'private Pointer(XStreamDOM node) {' - line 290", "'public String peekNextChild() {' - line 294", "'public boolean hasMoreChildren() {' - line 300", "'public String xpath() {' - line 304", "'private Pointer current() {' - line 331", "'public Object getCurrent() {' - line 336", "'return current().node;' - line 337", "'public boolean hasMoreChildren() {' - line 341", "'return current().hasMoreChildren();' - line 342", "'public HierarchicalStreamReader underlyingReader() {' - line 346", "'public void moveDown() {' - line 351", "'public void moveUp() {' - line 357", "'public Iterator getAttributeNames() {' - line 362", "'public void appendErrors(ErrorWriter errorWriter) {' - line 367", "'public void close() {' - line 382", "'public String peekNextChild() {' - line 386", "'return current().peekNextChild();' - line 387", "'public String getNodeName() {' - line 391", "'return unescapeXmlName(current().node.tagName);' - line 392", "'public String getValue() {' - line 396", "'public String getAttribute(String name) {' - line 401", "'return current().node.getAttribute(name);' - line 402", "'public String getAttribute(int index) {' - line 406", "'return current().node.getAttribute(index);' - line 407", "'public int getAttributeCount() {' - line 411", "'return current().node.getAttributeCount();' - line 412", "'public String getAttributeName(int index) {' - line 416", "'return unescapeXmlName(current().node.getAttributeName(index));' - line 417", "'private Pending(String tagName) {' - line 428", "'void addChild(XStreamDOM dom) {' - line 432", "'XStreamDOM toDOM() {' - line 438", "'public WriterImpl() {' - line 445", "'public void startNode(String name) {' - line 450", "'public void endNode() {' - line 457", "'public void addAttribute(String name, String value) {' - line 463", "'public void setValue(String text) {' - line 470", "'public void flush() {' - line 475", "'public void close() {' - line 479", "'public HierarchicalStreamWriter underlyingWriter() {' - line 483", "'public XStreamDOM getOutput() {' - line 487", "'public boolean canConvert(Class type) {' - line 495", "'private String unescape(String s) {' - line 506", "'private String escape(String s) {' - line 510", "'public void marshal(Object source, HierarchicalStreamWriter w, MarshallingContext context) {' - line 515", "'public XStreamDOM unmarshal(HierarchicalStreamReader r, UnmarshallingContext context) {' - line 534", "'public XStreamDOM unmarshalElement(HierarchicalStreamReader r, UnmarshallingContext context) {' - line 541"]}, "SCMCheckoutStrategy.java": {"METHODS": ["'public void preCheckout(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 69", "'public void checkout(AbstractBuildExecution execution) throws IOException, InterruptedException {' - line 83", "'public SCMCheckoutStrategyDescriptor getDescriptor() {' - line 88"]}, "DefaultSCMCheckoutStrategyImpl.java": {"METHODS": ["'public DefaultSCMCheckoutStrategyImpl() {}' - line 14", "'public String getDisplayName() {' - line 20", "'public boolean isApplicable(AbstractProject project) {' - line 25"]}, "RunWithSCM.java": {"METHODS": ["'Set<String> getCulpritIds();' - line 67", "'boolean shouldCalculateCulprits();' - line 74", "'return calculateCulprits();' - line 92", "'public Iterator<User> iterator() {' - line 99", "'protected User adapt(String id) {' - line 102", "'public int size() {' - line 110"]}, "SCMDecisionHandler.java": {"METHODS": ["'public static ExtensionList<SCMDecisionHandler> all() {' - line 52", "'public static SCMDecisionHandler firstShouldPollVeto(@NonNull Item item) {' - line 62", "'public static List<SCMDecisionHandler> listShouldPollVetos(@NonNull Item item) {' - line 77"]}, "SCMCheckoutStrategyDescriptor.java": {"METHODS": ["'protected SCMCheckoutStrategyDescriptor(Class<? extends SCMCheckoutStrategy> clazz) {' - line 14", "'protected SCMCheckoutStrategyDescriptor() {' - line 18", "'public static List<SCMCheckoutStrategyDescriptor> _for(AbstractProject p) {' - line 34"]}, "CauseOfInterruption.java": {"METHODS": ["'public void print(TaskListener listener) {' - line 70", "'public UserInterruption(@NonNull User user) {' - line 82", "'public UserInterruption(@NonNull String userId) {' - line 86", "'public String getUserId() {' - line 96", "'public User getUser() {' - line 106", "'public User getUserOrNull() {' - line 117", "'public String getShortDescription() {' - line 122", "'public void print(TaskListener listener) {' - line 127", "'public boolean equals(Object o) {' - line 135", "'public int hashCode() {' - line 142"]}, "BuildDiscarderDescriptor.java": {"METHODS": ["'protected BuildDiscarderDescriptor(Class clazz) {' - line 11", "'protected BuildDiscarderDescriptor() {' - line 15"]}, "GlobalNodePropertiesConfiguration.java": {"METHODS": ["'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 18"]}, "CoreEnvironmentContributor.java": {"METHODS": ["'public void buildEnvironmentFor(Run r, EnvVars env, TaskListener listener) throws IOException, InterruptedException {' - line 25", "'public void buildEnvironmentFor(Job j, EnvVars env, TaskListener listener) throws IOException, InterruptedException {' - line 41"]}, "UnlabeledLoadStatistics.java": {"METHODS": ["'public int computeIdleExecutors() {' - line 55", "'public int computeTotalExecutors() {' - line 67", "'public int computeQueueLength() {' - line 79", "'protected Iterable<Node> getNodes() {' - line 84", "'protected boolean matches(Queue.Item item, SubTask subTask) {' - line 89", "'public Iterator<Node> iterator() {' - line 96", "'protected UnlabeledNodesIterator() {' - line 103", "'protected boolean filter(Node n) {' - line 108", "'public void remove() {' - line 113"]}, "NodeListener.java": {"METHODS": ["'protected void onCreated(@NonNull Node node) {}' - line 47", "'protected void onUpdated(@NonNull Node oldOne, @NonNull Node newOne) {}' - line 52", "'protected void onDeleted(@NonNull Node node) {}' - line 57", "'public static void fireOnCreated(@NonNull Node node) {' - line 64", "'public static void fireOnUpdated(@NonNull Node oldOne, @NonNull Node newOne) {' - line 74", "'public static void fireOnDeleted(@NonNull Node node) {' - line 83"]}, "GlobalPluginConfiguration.java": {"METHODS": ["'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 23"]}, "GlobalConfiguration.java": {"METHODS": ["'protected GlobalConfiguration() {' - line 45", "'public String getGlobalConfigPage() {' - line 55", "'return getConfigPage();' - line 56", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 65"]}, "GlobalSCMRetryCountConfiguration.java": {"METHODS": ["'public int getScmCheckoutRetryCount() {' - line 42", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 47", "'public Permission getRequiredGlobalConfigPagePermission() {' - line 61"]}, "OptionalJobProperty.java": {"METHODS": ["'public OptionalJobPropertyDescriptor getDescriptor() {' - line 41", "'protected OptionalJobPropertyDescriptor(Class<? extends JobProperty<?>> clazz) {' - line 47", "'protected OptionalJobPropertyDescriptor() {}' - line 51"]}, "Configuration.java": {"METHODS": ["'public static boolean getBooleanConfigParameter(String name, boolean defaultValue) {' - line 35", "'public static String getStringConfigParameter(String name, String defaultValue) {' - line 40"]}, "PeepholePermalink.java": {"METHODS": ["'public boolean test(Run<?, ?> run) {' - line 77", "'return apply(run);' - line 78", "'protected File getPermalinkFile(Job<?, ?> job) {' - line 83", "'protected void updateCache(@NonNull Job<?, ?> job, @CheckForNull Run<?, ?> b) {' - line 179", "'public void onDeleted(Run run) {' - line 210", "'public void onCompleted(Run<?, ?> run, @NonNull TaskListener listener) {' - line 225"]}, "DirectlyModifiableTopLevelItemGroup.java": {"METHODS": ["'boolean canAdd(TopLevelItem item);' - line 42", "'void remove(TopLevelItem item) throws IOException, IllegalArgumentException;' - line 64"]}, "SimpleGlobalBuildDiscarderStrategy.java": {"METHODS": ["'public SimpleGlobalBuildDiscarderStrategy(BuildDiscarder discarder) {' - line 44", "'public BuildDiscarder getDiscarder() {' - line 48", "'public boolean isApplicable(Job<?, ?> job) {' - line 53", "'public void apply(Job<?, ?> job) throws IOException, InterruptedException {' - line 58", "'public String getDisplayName() {' - line 69"]}, "InvalidBuildsDir.java": {"METHODS": ["'public InvalidBuildsDir(String message) {' - line 7", "'public String getMessage() {' - line 12"]}, "DependencyDeclarer.java": {"METHODS": ["'void buildDependencyGraph(AbstractProject owner, DependencyGraph graph);' - line 64"]}, "BuildDiscarderProperty.java": {"METHODS": ["'public BuildDiscarderProperty(BuildDiscarder strategy) {' - line 44", "'public BuildDiscarder getStrategy() {' - line 48", "'public String getDisplayName() {' - line 58", "'public boolean filter(Object context, Descriptor descriptor) {' - line 73"]}, "MasterBuildConfiguration.java": {"METHODS": ["'public int getNumExecutors() {' - line 40", "'public String getLabelString() {' - line 44", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 49"]}, "DefaultUserCanonicalIdResolver.java": {"METHODS": ["'public String resolveCanonicalId(String idOrFullName, Map<String, ?> context) {' - line 44", "'public int getPriority() {' - line 52", "'public String getDisplayName() {' - line 64"]}, "AbstractTopLevelItem.java": {"METHODS": ["'protected AbstractTopLevelItem(ItemGroup parent, String name) {' - line 16", "'public TopLevelItemDescriptor getDescriptor() {' - line 26"]}, "ArtifactManagerFactory.java": {"METHODS": ["'@Override public ArtifactManagerFactoryDescriptor getDescriptor() {' - line 51"]}, "GlobalConfigurationCategory.java": {"METHODS": ["'public static ExtensionList<GlobalConfigurationCategory> all() {' - line 38", "'public String getShortDescription() {' - line 63", "'public String getDisplayName() {' - line 68", "'public String getShortDescription() {' - line 79", "'public String getDisplayName() {' - line 84"]}, "ModelObjectWithContextMenu.java": {"METHODS": ["'ContextMenu doContextMenu(StaplerRequest request, StaplerResponse response) throws Exception;' - line 60", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object o) throws IOException, ServletException {' - line 76", "'public ContextMenu add(String url, String text) {' - line 80", "'public ContextMenu addAll(Collection<? extends Action> actions) {' - line 85", "'public ContextMenu add(Action a) {' - line 94", "'return add(url, icon.getClassSpec(), text);' - line 106", "'return add(url, icon, text);' - line 109", "'public ContextMenu add(String url, String icon, String text) {' - line 113", "'public ContextMenu add(String url, String icon, String text, boolean post) {' - line 120", "'public ContextMenu add(String url, String icon, String text, boolean post, boolean requiresConfirmation) {' - line 130", "'public ContextMenu add(String url, String icon, String iconXml, String text, boolean post, boolean requiresConfirmation) {' - line 141", "'public ContextMenu add(String url, String icon, String iconXml, String text, boolean post, boolean requiresConfirmation, Badge badge) {' - line 153", "'public ContextMenu add(String url, String icon, String iconXml, String text, boolean post, boolean requiresConfirmation, Badge badge, String message) {' - line 166", "'public ContextMenu addHeader(String title) {' - line 185", "'return add(item);' - line 188", "'public ContextMenu addSeparator() {' - line 196", "'return add(item);' - line 199", "'public ContextMenu add(MenuItem item) {' - line 207", "'public ContextMenu add(Node n) {' - line 217", "'return add(new MenuItem()' - line 219", "'public ContextMenu add(Computer c) {' - line 230", "'return add(new MenuItem()' - line 231", "'public ContextMenu add(Cloud c) {' - line 237", "'return add(new MenuItem()' - line 238", "'public ContextMenu add(Job job) {' - line 249", "'return add(new MenuItem()' - line 250", "'public ContextMenu from(ModelObjectWithContextMenu self, StaplerRequest request, StaplerResponse response) throws JellyException, IOException {' - line 270", "'return from(self, request, response, \"sidepanel\");' - line 271", "'public ContextMenu from(ModelObjectWithContextMenu self, StaplerRequest request, StaplerResponse response, String view) throws JellyException, IOException {' - line 274", "'public Script compile() throws JellyException {' - line 284", "'public void run(JellyContext context, XMLOutput output) throws JellyTagException {' - line 289", "'public String getIconXml() {' - line 374", "'public Badge getBadge() {' - line 383", "'public String getMessage() {' - line 388", "'public MenuItem(String url, String icon, String displayName) {' - line 392", "'public MenuItem() {' - line 396", "'public MenuItem withUrl(String url) {' - line 399", "'public MenuItem withContextRelativeUrl(String url) {' - line 411", "'public MenuItem withIcon(String icon) {' - line 417", "'public MenuItem withIcon(BallColor color) {' - line 422", "'return withStockIcon(color.getImage());' - line 423", "'public MenuItem withStockIcon(String icon) {' - line 432", "'public MenuItem withIconClass(String iconClass) {' - line 437", "'public MenuItem withDisplayName(String displayName) {' - line 443", "'public MenuItem withDisplayName(ModelObject o) {' - line 448", "'return withDisplayName(o.getDisplayName());' - line 449", "'private String getResourceUrl() {' - line 452", "'boolean isVisible();' - line 477"]}, "RunAction2.java": {"METHODS": ["'void onAttached(Run<?, ?> r);' - line 39", "'void onLoad(Run<?, ?> r);' - line 44"]}, "IdStrategy.java": {"METHODS": ["'public String filenameOf(@NonNull String id) {' - line 69", "'public String legacyFilenameOf(@NonNull String id) {' - line 82", "'public String idFromFilename(@NonNull String filename) {' - line 95", "'public String keyFor(@NonNull String id) {' - line 107", "'public boolean equals(@NonNull String id1, @NonNull String id2) {' - line 122", "'return compare(id1, id2) == 0;' - line 123", "'public IdStrategyDescriptor getDescriptor() {' - line 139", "'public boolean equals(Object obj) {' - line 150", "'public int hashCode() {' - line 155", "'return getClass().hashCode();' - line 156", "'public String toString() {' - line 160", "'return getClass().getName();' - line 161", "'Character convertPseudoUnicode(String matchedGroup) {' - line 186", "'public CaseInsensitive() {}' - line 198", "'public String idFromFilename(@NonNull String filename) {' - line 201", "'public String keyFor(@NonNull String id) {' - line 208", "'public boolean equals(@NonNull String id1, @NonNull String id2) {' - line 213", "'public int compare(@NonNull String id1, @NonNull String id2) {' - line 218", "'public String getDisplayName() {' - line 227", "'public CaseSensitive() {}' - line 241", "'public String idFromFilename(@NonNull String filename) {' - line 244", "'return applyPatternRepeatedly(PSEUDO_UNICODE_PATTERN, id, this::convertPseudoUnicode);' - line 246", "'private Character convertCapitalizedAscii(String encoded) {' - line 249", "'public boolean equals(@NonNull String id1, @NonNull String id2) {' - line 254", "'public int compare(@NonNull String id1, @NonNull String id2) {' - line 259", "'public String getDisplayName() {' - line 268", "'public CaseSensitiveEmailAddress() {}' - line 288", "'public boolean equals(@NonNull String id1, @NonNull String id2) {' - line 291", "'public String keyFor(@NonNull String id) {' - line 297", "'public int compare(@NonNull String id1, @NonNull String id2) {' - line 304", "'return keyFor(id1).compareTo(keyFor(id2));' - line 305", "'public String getDisplayName() {' - line 313"]}, "Jenkins.java": {"METHODS": ["'public CloudList(Jenkins h) {' - line 541", "'public CloudList() {// needed for XStream deserialization' - line 545", "'public Cloud getByName(String name) {' - line 548", "'protected void onModified() throws IOException {' - line 556", "'protected List<View> views() { return views; }' - line 603", "'protected String primaryView() { return primaryView; }' - line 606", "'protected void primaryView(String name) { primaryView = name; }' - line 609", "'private static int getSlaveAgentPortInitialValue(int def) {' - line 635", "'protected void add(TopLevelItem item) {' - line 779", "'protected File getRootDirFor(String name) {' - line 784", "'public static Jenkins get() throws IllegalStateException {' - line 813", "'public static Jenkins getActiveInstance() throws IllegalStateException {' - line 827", "'return get();' - line 828", "'public static Jenkins getInstanceOrNull() {' - line 848", "'public static Jenkins getInstance() {' - line 857", "'return getInstanceOrNull();' - line 858", "'protected Jenkins(File root, ServletContext context) throws IOException, InterruptedException, ReactorException {' - line 896", "'protected Jenkins(File root, ServletContext context, PluginManager pluginManager) throws IOException, InterruptedException, ReactorException {' - line 908", "'new FileBoolean(new File(root, \"secret.key.not-so-secret\")).on();' - line 954", "'protected void doRun() throws Exception {' - line 1016", "'protected Object readResolve() {' - line 1063", "'public ProxyConfiguration getProxy() {' - line 1101", "'public void setProxy(@CheckForNull ProxyConfiguration proxy) {' - line 1111", "'public InstallState getInstallState() {' - line 1120", "'public void setInstallState(@NonNull InstallState newState) {' - line 1133", "'private void executeReactor(final InitStrategy is, TaskBuilder... builders) throws IOException, InterruptedException, ReactorException {' - line 1149", "'protected void runTask(Task task) throws Exception {' - line 1155", "'private boolean containsLinkageError(Throwable x) {' - line 1181", "'new InitReactorRunner() {' - line 1190", "'protected void onInitMilestoneAttained(InitMilestone milestone) {' - line 1192", "'public TcpSlaveAgentListener getTcpSlaveAgentListener() {' - line 1205", "'public AdjunctManager getAdjuncts(String dummy) {' - line 1214", "'public int getSlaveAgentPort() {' - line 1219", "'public boolean isSlaveAgentPortEnforced() {' - line 1226", "'public void setSlaveAgentPort(int port) throws IOException {' - line 1234", "'private void forceSetSlaveAgentPort(int port) throws IOException {' - line 1242", "'private void launchTcpSlaveAgentListener() throws IOException {' - line 1332", "'public String getDisplayName() {' - line 1370", "'public String getSystemPropertyName() {' - line 1374", "'public int getExpectedPort() {' - line 1378", "'public void doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 1384", "'public boolean isActivated() {' - line 1390", "'public void setNodeName(String name) {' - line 1397", "'public String getNodeDescription() {' - line 1402", "'public String getDescription() {' - line 1407", "'public PluginManager getPluginManager() {' - line 1412", "'public UpdateCenter getUpdateCenter() {' - line 1416", "'public Boolean isNoUsageStatistics() {' - line 1426", "'public boolean isUsageStatisticsCollected() {' - line 1436", "'public void setNoUsageStatistics(Boolean noUsageStatistics) throws IOException {' - line 1444", "'public boolean hasPeople() {' - line 1465", "'public Api getApi() {' - line 1469", "'public String getSecretKey() {' - line 1483", "'public SecretKey getSecretKeyAsAES128() {' - line 1494", "'public String getLegacyInstanceId() {' - line 1509", "'public Descriptor<SCM> getScm(String shortClassName) {' - line 1516", "'return findDescriptor(shortClassName, SCM.all());' - line 1517", "'return findDescriptor(shortClassName, RepositoryBrowser.all());' - line 1524", "'public Descriptor<Builder> getBuilder(String shortClassName) {' - line 1530", "'return findDescriptor(shortClassName, Builder.all());' - line 1531", "'public Descriptor<BuildWrapper> getBuildWrapper(String shortClassName) {' - line 1537", "'return findDescriptor(shortClassName, BuildWrapper.all());' - line 1538", "'public Descriptor<Publisher> getPublisher(String shortClassName) {' - line 1544", "'return findDescriptor(shortClassName, Publisher.all());' - line 1545", "'public TriggerDescriptor getTrigger(String shortClassName) {' - line 1551", "'return findDescriptor(shortClassName, RetentionStrategy.all());' - line 1559", "'public JobPropertyDescriptor getJobProperty(String shortClassName) {' - line 1565", "'public ComputerSet getComputer() {' - line 1576", "'public CloudSet getCloud() {' - line 1584", "'public Descriptor getDescriptor(String id) {' - line 1599", "'public Descriptor getDescriptorByName(String id) {' - line 1625", "'return getDescriptor(id);' - line 1626", "'public Descriptor getDescriptor(Class<? extends Describable> type) {' - line 1636", "'public Descriptor getDescriptorOrDie(Class<? extends Describable> type) {' - line 1651", "'public Descriptor<SecurityRealm> getSecurityRealms(String shortClassName) {' - line 1671", "'return findDescriptor(shortClassName, SecurityRealm.all());' - line 1672", "'Descriptor<T> findDescriptor(String shortClassName, Collection<? extends Descriptor<T>> descriptors) {' - line 1679", "'protected void updateNewComputer(Node n) {' - line 1688", "'protected void updateComputerList() {' - line 1692", "'public CopyOnWriteList<SCMListener> getSCMListeners() {' - line 1698", "'public Plugin getPlugin(String shortName) {' - line 1712", "'public String getSystemMessage() {' - line 1758", "'public void setMarkupFormatter(MarkupFormatter f) {' - line 1779", "'public void setSystemMessage(String message) throws IOException {' - line 1786", "'public FederatedLoginService getFederatedLoginService(String name) {' - line 1792", "'public List<FederatedLoginService> getFederatedLoginServices() {' - line 1800", "'public Launcher createLauncher(TaskListener listener) {' - line 1805", "'public String getFullName() {' - line 1811", "'public String getFullDisplayName() {' - line 1816", "'public List<Action> getActions() {' - line 1836", "'public List<TopLevelItem> getItems() {' - line 1847", "'return getItems(t -> true);' - line 1848", "'public List<TopLevelItem> getItems(Predicate<TopLevelItem> pred) {' - line 1858", "'public List<Project> getProjects() {' - line 1899", "'public Collection<String> getJobNames() {' - line 1906", "'public List<Action> getViewActions() {' - line 1915", "'return getActions();' - line 1916", "'public Collection<String> getTopLevelItemNames() {' - line 1922", "'public View getView(@CheckForNull String name) {' - line 1937", "'public Collection<View> getViews() {' - line 1946", "'public void addView(@NonNull View v) throws IOException {' - line 1951", "'public void setViews(Collection<View> views) throws IOException {' - line 1965", "'public boolean canDelete(View view) {' - line 1976", "'public void onViewRenamed(View view, String oldName, String newName) {' - line 1986", "'public View getPrimaryView() {' - line 1995", "'public void setPrimaryView(@NonNull View v) {' - line 1999", "'public ViewsTabBar getViewsTabBar() {' - line 2004", "'public void setViewsTabBar(ViewsTabBar viewsTabBar) {' - line 2008", "'public Jenkins getItemGroup() {' - line 2013", "'public MyViewsTabBar getMyViewsTabBar() {' - line 2017", "'public void setMyViewsTabBar(MyViewsTabBar myViewsTabBar) {' - line 2021", "'public boolean isUpgradedFromBefore(VersionNumber v) {' - line 2039", "'public Computer[] getComputers() {' - line 2051", "'public Label getLabel(String expr) {' - line 2075", "'return getLabelAtom(expr);' - line 2090", "'public Set<Label> getLabels() {' - line 2119", "'public Set<LabelAtom> getLabelAtoms() {' - line 2128", "'public Queue getQueue() {' - line 2138", "'public String getDisplayName() {' - line 2143", "'public List<JDK> getJDKs() {' - line 2147", "'public void setJDKs(Collection<? extends JDK> jdks) {' - line 2158", "'public JDK getJDK(String name) {' - line 2165", "'public Cloud getCloud(String name) {' - line 2191", "'public List<Node> getNodes() {' - line 2206", "'public Nodes getNodesObject() {' - line 2215", "'public void addNode(Node n) throws IOException {' - line 2224", "'public void removeNode(@NonNull Node n) throws IOException {' - line 2231", "'public boolean updateNode(Node n) throws IOException {' - line 2245", "'public void setNodes(final List<? extends Node> n) throws IOException {' - line 2249", "'void trimLabels(Node... nodes) {' - line 2276", "'private void trimLabels(@CheckForNull Set<LabelAtom> includedLabels) {' - line 2286", "'public AdministrativeMonitor getAdministrativeMonitor(String id) {' - line 2312", "'public List<AdministrativeMonitor> getActiveAdministrativeMonitors() {' - line 2324", "'public NodeDescriptor getDescriptor() {' - line 2339", "'public boolean isInstantiable() {' - line 2348", "'public FormValidation doCheckNumExecutors(@QueryParameter String value) {' - line 2352", "'public Object getDynamic(String token) {' - line 2357", "'public int getQuietPeriod() {' - line 2365", "'public void setQuietPeriod(Integer quietPeriod) throws IOException {' - line 2375", "'public int getScmCheckoutRetryCount() {' - line 2383", "'public void setScmCheckoutRetryCount(int scmCheckoutRetryCount) throws IOException {' - line 2387", "'public String getSearchUrl() {' - line 2393", "'public SearchIndexBuilder makeSearchIndex() {' - line 2398", "'protected SearchItem get(String key) { return getItemByFullName(key, TopLevelItem.class); }' - line 2407", "'protected Collection<TopLevelItem> all() { return getAllItems(TopLevelItem.class); }' - line 2410", "'protected Iterable<TopLevelItem> allAsIterable() {' - line 2414", "'return allItems(TopLevelItem.class);' - line 2415", "'protected Computer get(String key) { return getComputer(key); }' - line 2421", "'protected Collection<Computer> all() { return computers.values(); }' - line 2424", "'protected User get(String key) { return User.get(key, false); }' - line 2428", "'protected Collection<User> all() { return User.getAll(); }' - line 2431", "'protected View get(String key) { return getView(key); }' - line 2435", "'protected Collection<View> all() { return getAllViews(); }' - line 2438", "'public String getUrlChildPrefix() {' - line 2444", "'return getRootUrlFromRequest();' - line 2472", "'public String getConfiguredRootUrl() {' - line 2480", "'public boolean isRootUrlSecure() {' - line 2491", "'private static String getXForwardedHeader(StaplerRequest req, String header, String defaultValue) {' - line 2568", "'public File getRootDir() {' - line 2578", "'public FilePath getWorkspaceFor(TopLevelItem item) {' - line 2583", "'public File getBuildDirFor(Job job) {' - line 2594", "'return expandVariablesForDirectory(buildsDir, job);' - line 2595", "'public boolean isDefaultBuildDir() {' - line 2604", "'boolean isDefaultWorkspaceDir() {' - line 2609", "'private File expandVariablesForDirectory(String base, Item item) {' - line 2613", "'public static String expandVariablesForDirectory(String base, String itemFullName, String itemRootDir) {' - line 2618", "'public String getRawWorkspaceDir() {' - line 2628", "'public String getRawBuildsDir() {' - line 2632", "'public void setRawBuildsDir(String buildsDir) {' - line 2637", "'public FilePath createPath(String absolutePath) {' - line 2646", "'public ClockDifference getClockDifference() {' - line 2651", "'public ClockDifference call() throws IOException {' - line 2662", "'public LogRecorderManager getLog() {' - line 2671", "'public void setLog(LogRecorderManager log) {' - line 2682", "'public boolean isUseSecurity() {' - line 2692", "'public boolean isUseProjectNamingStrategy() {' - line 2696", "'public boolean isUseCrumbs() {' - line 2705", "'public SecurityMode getSecurity() {' - line 2712", "'public SecurityRealm getSecurityRealm() {' - line 2727", "'public void setSecurityRealm(@CheckForNull SecurityRealm securityRealm) {' - line 2736", "'private void resetFilter(@CheckForNull SecurityRealm securityRealm, @CheckForNull IdStrategy oldUserIdStrategy) {' - line 2753", "'public void setAuthorizationStrategy(@CheckForNull AuthorizationStrategy a) {' - line 2779", "'public boolean isDisableRememberMe() {' - line 2787", "'public void setDisableRememberMe(boolean disableRememberMe) {' - line 2791", "'public void disableSecurity() {' - line 2795", "'public void setProjectNamingStrategy(ProjectNamingStrategy ns) {' - line 2801", "'public Lifecycle getLifecycle() {' - line 2808", "'return lookup(Injector.class);' - line 2819", "'public ExtensionList getExtensionList(String extensionType) throws ClassNotFoundException {' - line 2844", "'return getExtensionList(pluginManager.uberClassLoader.loadClass(extensionType));' - line 2845", "'public void refreshExtensions() throws ExtensionRefreshException {' - line 2865", "'public ACL getACL() {' - line 2909", "'public AuthorizationStrategy getAuthorizationStrategy() {' - line 2917", "'public ProjectNamingStrategy getProjectNamingStrategy() {' - line 2925", "'public boolean isQuietingDown() {' - line 2937", "'public boolean isPreparingSafeRestart() {' - line 2947", "'public String getQuietDownReason() {' - line 2963", "'public boolean isTerminating() {' - line 2971", "'public InitMilestone getInitLevel() {' - line 2982", "'public void setNumExecutors(/* @javax.annotation.Nonnegative*/ int n) throws IOException, IllegalArgumentException {' - line 2992", "'@Override public TopLevelItem getItem(String name) throws AccessDeniedException {' - line 3010", "'public Item getItem(String pathName, ItemGroup context) {' - line 3039", "'return getItemByFullName(pathName);' - line 3044", "'return getItemByFullName(pathName);' - line 3081", "'return getItem(pathName, context != null ? context.getParent() : null);' - line 3085", "'return getItem(pathName, context != null ? context.getParent() : null, type);' - line 3096", "'public File getRootDirFor(TopLevelItem child) {' - line 3100", "'return getRootDirFor(child.getName());' - line 3101", "'private File getRootDirFor(String name) {' - line 3104", "'return getItemByFullName(fullName, Item.class);' - line 3144", "'return createProject(type, name, true);' - line 3160", "'public void onRenamed(TopLevelItem job, String oldName, String newName) throws IOException {' - line 3206", "'public void onDeleted(TopLevelItem item) throws IOException {' - line 3219", "'@Override public boolean canAdd(TopLevelItem item) {' - line 3228", "'@Override public void remove(TopLevelItem item) throws IOException, IllegalArgumentException {' - line 3240", "'public FingerprintMap getFingerprintMap() {' - line 3244", "'public Object getFingerprint(String md5sum) throws IOException {' - line 3250", "'public Fingerprint _getFingerprint(String md5sum) throws IOException {' - line 3260", "'private XmlFile getConfigFile() {' - line 3267", "'public int getNumExecutors() {' - line 3272", "'public Mode getMode() {' - line 3277", "'public void setMode(Mode m) throws IOException {' - line 3281", "'public String getLabelString() {' - line 3287", "'return fixNull(label).trim();' - line 3288", "'public void setLabelString(String label) throws IOException {' - line 3292", "'public LabelAtom getSelfLabel() {' - line 3299", "'return getLabelAtom(nodeNameAndSelfLabelOverride);' - line 3301", "'return getLabelAtom(\"built-in\");' - line 3304", "'return getLabelAtom(\"master\");' - line 3306", "'public Computer createComputer() {' - line 3325", "'private void loadConfig() throws IOException {' - line 3329", "'private void setBuildsAndWorkspacesDir() throws IOException, InvalidBuildsDir {' - line 3350", "'/*private*/ static void checkRawBuildsDir(String newBuildsDirValue) throws InvalidBuildsDir {' - line 3387", "'public void run(Reactor session) throws Exception {' - line 3440", "'public void run(Reactor session) throws Exception {' - line 3458", "'public void run(Reactor reactor) {' - line 3472", "'public void run(Reactor session) throws Exception {' - line 3488", "'new IllegalStateException(\"call trace\"));' - line 3559", "'private void saveQuietly() {' - line 3588", "'public void cleanUp() {' - line 3599", "'private void fireBeforeShutdown(List<Throwable> errors) {' - line 3672", "'private void _cleanUpRunTerminators(List<Throwable> errors) {' - line 3691", "'new Reactor(tf).execute(Runnable::run, new ReactorListener() {' - line 3695", "'public void onTaskStarted(Task t) {' - line 3699", "'public void onTaskCompleted(Task t) {' - line 3704", "'public void onTaskFailed(Task t, Throwable err, boolean fatal) {' - line 3709", "'public void onAttained(Milestone milestone) {' - line 3714", "'private void _cleanUpInterruptReloadThread(List<Throwable> errors) {' - line 3763", "'private void _cleanUpShutdownTriggers(List<Throwable> errors) {' - line 3783", "'public void run() {' - line 3791", "'private void _cleanUpShutdownTimer(List<Throwable> errors) {' - line 3817", "'private void _cleanUpShutdownTcpSlaveAgent(List<Throwable> errors) {' - line 3837", "'private void _cleanUpShutdownPluginManager(List<Throwable> errors) {' - line 3856", "'private void _cleanUpPersistQueue(List<Throwable> errors) {' - line 3875", "'private void _cleanUpShutdownThreadPoolForLoad(List<Throwable> errors) {' - line 3896", "'private void _cleanUpAwaitDisconnects(List<Throwable> errors, Set<Future<?>> pending) {' - line 3916", "'private void _cleanUpPluginServletFilters(List<Throwable> errors) {' - line 3942", "'private void _cleanUpReleaseAllLoggers(List<Throwable> errors) {' - line 3959", "'private void _cleanUpCancelDependencyGraphCalculation() {' - line 3976", "'public Object getDynamic(String token) {' - line 3988", "'public CrumbIssuer getCrumbIssuer() {' - line 4040", "'public void setCrumbIssuer(CrumbIssuer issuer) {' - line 4044", "'private boolean configureDescriptor(StaplerRequest req, JSONObject json, Descriptor<?> d) throws FormException {' - line 4052", "'return doQuietDown(false, 0, null);' - line 4093", "'return doQuietDown(block, timeout, null);' - line 4110", "'return doQuietDown(block, timeout, message, false);' - line 4129", "'public HttpResponse doToggleCollapse() throws ServletException, IOException {' - line 4173", "'public void doClassicThreadDump(StaplerResponse rsp) throws IOException, ServletException {' - line 4186", "'public TopLevelItem createProjectFromXML(String name, InputStream xml) throws IOException {' - line 4238", "'public static void checkGoodName(String name) throws Failure {' - line 4267", "'private static String toPrintableName(String name) {' - line 4294", "'public void doSecured(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 4311", "'public void doLoginEntry(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 4333", "'public void doLogout(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 4363", "'new Thread(\"Jenkins config reload thread\") {' - line 4391", "'public void run() {' - line 4393", "'new JenkinsReloadFailed(e).publish(servletContext, root);' - line 4399", "'public void reload() throws IOException, InterruptedException, ReactorException {' - line 4411", "'public void doDoFingerprintCheck(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 4435", "'public void doGc(StaplerResponse rsp) throws IOException {' - line 4452", "'public void doException() {' - line 4465", "'public ContextMenu doContextMenu(StaplerRequest request, StaplerResponse response) throws IOException, JellyException {' - line 4470", "'public ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {' - line 4482", "'public HeapDump getHeapDump() throws IOException {' - line 4493", "'public void doSimulateOutOfMemory() throws IOException {' - line 4503", "'public DirectoryBrowserSupport doUserContent() {' - line 4516", "'public void doRestart(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, RestartNotSupportedException {' - line 4526", "'public HttpResponse doSafeRestart(StaplerRequest req) throws IOException, ServletException, RestartNotSupportedException {' - line 4551", "'return doSafeRestart(req, null);' - line 4552", "'public HttpResponse doSafeRestart(StaplerRequest req, @QueryParameter(\"message\") String message) throws IOException, ServletException, RestartNotSupportedException {' - line 4560", "'return doCancelQuietDown();' - line 4567", "'private static Lifecycle restartableLifecycle() throws RestartNotSupportedException {' - line 4577", "'public void restart() throws RestartNotSupportedException {' - line 4589", "'new Thread(\"restart thread\") {' - line 4593", "'public void run() {' - line 4596", "'public void safeRestart() throws RestartNotSupportedException {' - line 4620", "'public void safeRestart(String message) throws RestartNotSupportedException {' - line 4629", "'new Thread(\"safe-restart thread\") {' - line 4634", "'public void run() {' - line 4637", "'public void onRestart() {' - line 4665", "'public boolean isReadyToRestart() throws IOException, InterruptedException {' - line 4673", "'protected RestartCause() {' - line 4678", "'public void doExit(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 4690", "'new Thread(\"exit thread\") {' - line 4702", "'public void run() {' - line 4705", "'public HttpResponse doSafeExit(StaplerRequest req) throws IOException {' - line 4724", "'new Thread(\"safe-exit thread\") {' - line 4729", "'public void run() {' - line 4732", "'public void doScript(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 4779", "'public void doScriptText(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 4786", "'public static void _doScript(StaplerRequest req, StaplerResponse rsp, RequestDispatcher view, VirtualChannel channel, ACL acl) throws IOException, ServletException {' - line 4793", "'public void doEval(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 4825", "'new JellyRequestDispatcher(this, script).forward(req, rsp);' - line 4831", "'public void doSignup(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 4840", "'public void doIconSize(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 4851", "'public void doFingerprintCleanup(StaplerResponse rsp) throws IOException {' - line 4866", "'public void doWorkspaceCleanup(StaplerResponse rsp) throws IOException {' - line 4875", "'public FormValidation doDefaultJDKCheck(StaplerRequest request, @QueryParameter String value) {' - line 4886", "'public FormValidation doCheckViewName(@QueryParameter String value) {' - line 4903", "'public FormValidation doViewExistsCheck(@QueryParameter String value) {' - line 4929", "'public void doResources(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 4949", "'public FormValidation doCheckURIEncoding(StaplerRequest request) throws IOException {' - line 4986", "'public static boolean isCheckURIEncodingEnabled() {' - line 4997", "'public Future<DependencyGraph> getFutureDependencyGraph() {' - line 5001", "'public void rebuildDependencyGraph() {' - line 5021", "'public Future<DependencyGraph> rebuildDependencyGraphAsync() {' - line 5038", "'private Future<DependencyGraph> scheduleCalculationOfFutureDependencyGraph(int delay, TimeUnit unit) {' - line 5049", "'public DependencyGraph getDependencyGraph() {' - line 5079", "'public List<ManagementLink> getManagementLinks() {' - line 5084", "'public SetupWizard getSetupWizard() {' - line 5110", "'public User getMe() {' - line 5117", "'public List<Widget> getWidgets() {' - line 5132", "'public Object getTarget() {' - line 5137", "'public boolean isSubjectToMandatoryReadPermissionCheck(String restOfPath) {' - line 5156", "'private boolean isAgentJnlpPath(String restOfPath, String prefix) {' - line 5178", "'public Collection<String> getUnprotectedRootActions() {' - line 5189", "'public View getStaplerFallback() {' - line 5207", "'return getPrimaryView();' - line 5208", "'boolean isDisplayNameUnique(String displayName, String currentJobName) {' - line 5217", "'else if (displayName.equals(item.getDisplayName())) {' - line 5229", "'boolean isNameUnique(String name, String currentJobName) {' - line 5242", "'else if (item.getName().equals(currentJobName)) {' - line 5249", "'else if (!isDisplayNameUnique(displayName, jobName)) {' - line 5275", "'protected MasterComputer() {' - line 5284", "'public String getName() {' - line 5292", "'public boolean isConnecting() {' - line 5297", "'public String getDisplayName() {' - line 5303", "'public String getCaption() {' - line 5308", "'public String getUrl() {' - line 5313", "'public RetentionStrategy getRetentionStrategy() {' - line 5318", "'protected boolean isAlive() {' - line 5327", "'public Boolean isUnix() {' - line 5332", "'public HttpResponse doDoDelete() throws IOException {' - line 5340", "'public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, FormException {' - line 5346", "'public void doConfigDotXml(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 5352", "'public boolean hasPermission(Permission permission) {' - line 5357", "'public VirtualChannel getChannel() {' - line 5367", "'public Charset getDefaultCharset() {' - line 5372", "'public List<LogRecord> getLogRecords() throws IOException, InterruptedException {' - line 5377", "'public void doLaunchSlaveAgent(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 5383", "'private static void computeVersion(ServletContext context) {' - line 5440", "'public @CheckForNull static VersionNumber getVersion() {' - line 5507", "'return toVersion(VERSION);' - line 5508", "'public @CheckForNull static VersionNumber getStoredVersion() {' - line 5520", "'return toVersion(Jenkins.get().version);' - line 5521", "'public boolean shouldShowStackTrace() {' - line 5555", "'private static void _setJenkinsJVM(boolean jenkinsJVM) {' - line 5810", "'boolean isSafeRestart() {' - line 5835", "'void setSafeRestart(boolean safeRestart) {' - line 5839"]}, "RunIdMigrator.java": {"METHODS": ["'public RunIdMigrator() {}' - line 95", "'private boolean load(File dir) {' - line 100", "'private void save(File dir) {' - line 120", "'public void created(File dir) {' - line 143", "'private static String getUnmigrationCommandLine(File jenkinsHome) {' - line 174", "'private void doMigrate(File dir) {' - line 196", "'static void move(File src, File dest) throws IOException {' - line 282", "'public static void main(String... args) throws Exception {' - line 317", "'new RunIdMigrator().unmigrateJobsDir(jobs);' - line 326", "'private static File constructFile(String arg) {' - line 330", "'private void unmigrateJobsDir(File jobs) throws Exception {' - line 334", "'private void unmigrateBuildsDir(File builds) throws Exception {' - line 370", "'public String getIconFileName() {' - line 422", "'public String getDisplayName() {' - line 427", "'public String getUrlName() {' - line 432", "'public Object getTarget() {' - line 437", "'public String getCommand() {' - line 442"]}, "TransientFingerprintFacetFactory.java": {"METHODS": ["'public static ExtensionList<TransientFingerprintFacetFactory> all() {' - line 48"]}, "GlobalBuildDiscarderListener.java": {"METHODS": ["'public void onFinalized(Run run) {' - line 46"]}, "GlobalQuietPeriodConfiguration.java": {"METHODS": ["'public int getQuietPeriod() {' - line 41", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 46", "'public Permission getRequiredGlobalConfigPagePermission() {' - line 64"]}, "GlobalBuildDiscarderConfiguration.java": {"METHODS": ["'public static GlobalBuildDiscarderConfiguration get() {' - line 46", "'public GlobalBuildDiscarderConfiguration() {' - line 50", "'private Object readResolve() {' - line 57", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 67"]}, "BackgroundGlobalBuildDiscarder.java": {"METHODS": ["'public BackgroundGlobalBuildDiscarder() {' - line 47", "'protected void execute(TaskListener listener) throws IOException, InterruptedException {' - line 52", "'public static void processJob(TaskListener listener, Job job) {' - line 58", "'public long getRecurrencePeriod() {' - line 76"]}, "Uptime.java": {"METHODS": ["'public long getStartTime() {' - line 19", "'public long getUptime() {' - line 23", "'public void init() {' - line 28"]}, "ArtifactManagerConfiguration.java": {"METHODS": ["'private Object readResolve() {' - line 48", "'@Override public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 57"]}, "ArtifactManager.java": {"METHODS": []}, "GlobalBuildDiscarderStrategyDescriptor.java": {"METHODS": []}, "JobGlobalBuildDiscarderStrategy.java": {"METHODS": ["'public JobGlobalBuildDiscarderStrategy() {' - line 42", "'public boolean isApplicable(Job<?, ?> job) {' - line 47", "'public void apply(Job<?, ?> job) throws IOException, InterruptedException {' - line 52", "'public String getDisplayName() {' - line 60"]}, "InterruptedBuildAction.java": {"METHODS": ["'public InterruptedBuildAction(Collection<? extends CauseOfInterruption> causes) {' - line 45", "'public List<CauseOfInterruption> getCauses() {' - line 50"]}, "IdStrategyDescriptor.java": {"METHODS": []}, "StandardArtifactManager.java": {"METHODS": ["'public StandardArtifactManager(Run<?, ?> build) {' - line 61", "'@Override public void archive(FilePath workspace, Launcher launcher, BuildListener listener, final Map<String, String> artifacts) throws IOException, InterruptedException {' - line 69", "'@Override public VirtualFile root() {' - line 86", "'private File getArtifactsDir() {' - line 91"]}, "BlockedBecauseOfBuildInProgress.java": {"METHODS": ["'public BlockedBecauseOfBuildInProgress(@NonNull Run<?, ?> build) {' - line 46", "'@Override public String getShortDescription() {' - line 50"]}, "SimplePageDecorator.java": {"METHODS": ["'protected SimplePageDecorator()  {' - line 41", "'public static List<SimplePageDecorator> all() {' - line 65", "'public static SimplePageDecorator first() {' - line 73"]}, "ParameterizedJobMixIn.java": {"METHODS": ["'return scheduleBuild(asJob().getQuietPeriod(), new Cause.LegacyCodeCause());' - line 99", "'return scheduleBuild(asJob().getQuietPeriod(), c);' - line 104", "'return scheduleBuild(quietPeriod, new Cause.LegacyCodeCause());' - line 110", "'return scheduleBuild2(quietPeriod, c != null ? List.of(new CauseAction(c)) : Collections.emptyList()) != null;' - line 115", "'@Override protected Job asJob() {' - line 143", "'private List<ParameterValue> getDefaultParametersValues() {' - line 160", "'return asJob().getProperty(ParametersDefinitionProperty.class) != null;' - line 186", "'public static CauseAction getBuildCause(ParameterizedJob job, StaplerRequest req) {' - line 270", "'return isParameterized() ? AlternativeUiTextProvider.get(BUILD_NOW_TEXT, asJob(), Messages.ParameterizedJobMixIn_build_with_parameters())' - line 295", "'static ParameterizedJob resolveForCLI(@Argument(required = true, metaVar = \"NAME\", usage = \"Job name\") String name) throws CmdLineException {' - line 330", "'@Override protected JobT asJob() {' - line 348", "'return getParameterizedJobMixIn().getBuildNowText();' - line 371", "'return getParameterizedJobMixIn().scheduleBuild(c);' - line 376", "'return getParameterizedJobMixIn().scheduleBuild(quietPeriod, c);' - line 381", "'return getParameterizedJobMixIn().scheduleBuild2(quietPeriod, actions);' - line 393", "'return getParameterizedJobMixIn().isParameterized();' - line 441"]}, "DefaultSimplePageDecorator.java": {"METHODS": []}, "ProjectNamingStrategy.java": {"METHODS": ["'public ProjectNamingStrategyDescriptor getDescriptor() {' - line 53", "'public void checkName(String name) throws Failure {' - line 71", "'public void checkName(String parentName, String name) throws Failure {' - line 87", "'public boolean isForceExistingJobs() {' - line 97", "'public DefaultProjectNamingStrategy() {' - line 114", "'public void checkName(String origName) throws Failure {' - line 118", "'private Object readResolve() {' - line 125", "'public String getDisplayName() {' - line 133", "'public String getHelpFile() {' - line 138", "'public PatternProjectNamingStrategy(String namePattern, boolean forceExistingJobs) {' - line 160", "'public PatternProjectNamingStrategy(String namePattern, String description, boolean forceExistingJobs) {' - line 166", "'public void checkName(String name) {' - line 173", "'public String getNamePattern() {' - line 183", "'public String getDescription() {' - line 188", "'public boolean isForceExistingJobs() {' - line 193", "'public String getDisplayName() {' - line 204", "'public String getHelpFile() {' - line 209", "'public FormValidation doCheckNamePattern(@QueryParameter String value)' - line 213"]}, "ModelObjectWithChildren.java": {"METHODS": ["'ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse response) throws Exception;' - line 22"]}, "BuiltInNodeMigration.java": {"METHODS": ["'public boolean isActivated() {' - line 48", "'public void doAct(StaplerRequest req, StaplerResponse rsp, @QueryParameter String yes, @QueryParameter String no) throws IOException, ServletException {' - line 53", "'public String getDisplayName() {' - line 63"]}, "RenameAction.java": {"METHODS": ["'public String getIconFileName() {' - line 39", "'public String getDisplayName() {' - line 44", "'public String getUrlName() {' - line 49", "'public Class<AbstractItem> type() {' - line 57"]}, "GlobalProjectNamingStrategyConfiguration.java": {"METHODS": ["'public boolean configure(StaplerRequest req, JSONObject json) throws hudson.model.Descriptor.FormException {' - line 42", "'public Permission getRequiredGlobalConfigPagePermission() {' - line 65"]}, "BuildDiscarder.java": {"METHODS": ["'public BuildDiscarderDescriptor getDescriptor() {' - line 42", "'public ConverterImpl(Mapper m) {' - line 56", "'protected Object instantiateNewInstance(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 59", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 66", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 72", "'public boolean canConvert(Class type) {' - line 78"]}, "FingerprintFacet.java": {"METHODS": ["'protected FingerprintFacet(@NonNull Fingerprint fingerprint, long timestamp) {' - line 69", "'public void createActions(List<Action> result) {' - line 93", "'public long getTimestamp() {' - line 101", "'public boolean isFingerprintDeletionBlocked() {' - line 110", "'public void _setOwner(Fingerprint fingerprint) {' - line 119"]}, "ModifiableTopLevelItemGroup.java": {"METHODS": ["'TopLevelItem createProjectFromXML(String name, InputStream xml) throws IOException;' - line 64", "'TopLevelItem createProject(TopLevelItemDescriptor type, String name, boolean notify) throws IOException;' - line 75"]}, "GlobalCloudConfiguration.java": {"METHODS": ["'public String getIconFileName() {' - line 24", "'public String getDisplayName() {' - line 30", "'public String getUrlName() {' - line 35"]}, "Nodes.java": {"METHODS": ["'public List<Node> getNodes() {' - line 100", "'public void setNodes(final @NonNull Collection<? extends Node> nodes) throws IOException {' - line 110", "'public void run() {' - line 113", "'public void addNode(final @NonNull Node node) throws IOException {' - line 134", "'public void run() {' - line 153", "'private void persistNode(final @NonNull Node node)  throws IOException {' - line 175", "'new File(new File(getNodesDir(), node.getNodeName()), \"config.xml\"));' - line 181", "'public boolean updateNode(final @NonNull Node node) throws IOException {' - line 197", "'public Boolean call() throws Exception {' - line 202", "'public boolean replaceNode(final Node oldOne, final @NonNull Node newOne) throws IOException {' - line 232", "'public void run() {' - line 241", "'public void removeNode(final @NonNull Node node) throws IOException {' - line 267", "'public void run() {' - line 271", "'public void save() throws IOException {' - line 291", "'public Node getNode(String name) {' - line 319", "'public void load() throws IOException {' - line 328", "'public void run() {' - line 347", "'private File getNodesDir() throws IOException {' - line 361", "'public boolean isLegacy() {' - line 374"]}, "GlobalBuildDiscarderStrategy.java": {"METHODS": ["'public void apply(Job<? extends Job, ? extends Run> job) throws IOException, InterruptedException {' - line 55", "'public void apply(Run<?, ?> run) throws IOException, InterruptedException {' - line 68"]}, "ArtifactManagerFactoryDescriptor.java": {"METHODS": []}, "TransientActionFactory.java": {"METHODS": []}, "AssetManager.java": {"METHODS": ["'public String getIconFileName() {' - line 32", "'public String getDisplayName() {' - line 37", "'public String getUrlName() {' - line 42", "'public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 49"]}, "JenkinsLocationConfiguration.java": {"METHODS": ["'public void setAdminAddress(@CheckForNull String adminAddress) {' - line 122", "'public void setUrl(@CheckForNull String jenkinsUrl) {' - line 137", "'private void preventRootUrlBeingInvalid() {' - line 151", "'private boolean isInvalidRootUrl(@Nullable String value) {' - line 158", "'private void updateSecureSessionFlag() {' - line 167", "'public FormValidation doCheckUrl(@QueryParameter String value) {' - line 198", "'public FormValidation doCheckAdminAddress(@QueryParameter String value) {' - line 209"]}, "AsynchronousExecution.java": {"METHODS": ["'protected AsynchronousExecution() {}' - line 70"]}, "CompositeCauseOfBlockage.java": {"METHODS": ["'public CompositeCauseOfBlockage(List<CauseOfBlockage> delegates) {' - line 42", "'public String getShortDescription() {' - line 50", "'public void print(TaskListener listener) {' - line 55"]}, "ItemDeletion.java": {"METHODS": ["'private boolean _contains(@NonNull Item item) {' - line 60", "'public static boolean contains(@NonNull Item item) {' - line 85", "'public static boolean isRegistered(@NonNull Item item) {' - line 105", "'public static boolean register(@NonNull Item item) {' - line 125", "'public static void deregister(@NonNull Item item) {' - line 143", "'private static ItemDeletion instance() {' - line 161", "'public boolean shouldSchedule(Queue.Task p, List<Action> actions) {' - line 166"]}, "QueueItem.java": {"METHODS": ["'boolean isStuck();' - line 20", "'return getTask().hasAbortPermission();' - line 33", "'long getId();' - line 41", "'String getCausesDescription();' - line 47", "'String getWhy();' - line 54", "'String getParams();' - line 60", "'String getInQueueForString();' - line 67", "'return getTask().getFullDisplayName();' - line 75"]}, "StandaloneProjectsCategory.java": {"METHODS": ["'public String getId() {' - line 39", "'public String getDescription() {' - line 44", "'public String getDisplayName() {' - line 49", "'public int getMinToShow() {' - line 54"]}, "ItemCategory.java": {"METHODS": ["'private void setOrder(int order) {' - line 85", "'public int getOrder() {' - line 89", "'public static ItemCategory getCategory(TopLevelItemDescriptor descriptor) {' - line 99", "'public String getId() {' - line 121", "'public String getDescription() {' - line 126", "'public String getDisplayName() {' - line 131", "'public int getMinToShow() {' - line 136"]}, "Categories.java": {"METHODS": ["'public Categories() {' - line 55", "'public List<Category> getItems() {' - line 60", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 65", "'public Category getItem(@NonNull String id) {' - line 70"]}, "Category.java": {"METHODS": ["'public Category(String id, String name, String description, int order, int minToShow, List<Map<String, Serializable>> items) {' - line 56", "'public String getId() {' - line 66", "'public String getName() {' - line 71", "'public String getDescription() {' - line 76", "'public int getOrder() {' - line 81", "'public int getMinToShow() {' - line 86"]}, "NestedProjectsCategory.java": {"METHODS": ["'public String getId() {' - line 48", "'public String getDescription() {' - line 53", "'public String getDisplayName() {' - line 58", "'public int getMinToShow() {' - line 63"]}, "IdentityRootAction.java": {"METHODS": ["'public String getIconFileName() {' - line 21", "'public String getDisplayName() {' - line 26", "'public String getUrlName() {' - line 31", "'public String getPublicKey() {' - line 42", "'public String getFingerprint() {' - line 67"]}, "InstanceIdentityProvider.java": {"METHODS": ["'protected PUB getPublicKey() {' - line 101", "'protected PRIV getPrivateKey() {' - line 113", "'private KeyTypes(Class<PUB> pubKeyType, Class<PRIV> privKeyType) {' - line 150", "'public Class<PUB> getPublicKeyClass() {' - line 197", "'public Class<PRIV> getPrivateKeyClass() {' - line 206", "'public KeyPair getKeyPair() {' - line 219", "'public PUB getPublicKey() {' - line 244", "'public PRIV getPrivateKey() {' - line 269", "'public X509Certificate getCertificate() {' - line 295"]}, "LabelAutoCompleteSeeder.java": {"METHODS": ["'public LabelAutoCompleteSeeder(@NonNull String source) {' - line 22", "'public List<String> getSeeds() {' - line 32"]}, "LabelValidator.java": {"METHODS": ["'FormValidation check(@NonNull Item item, @NonNull Label label);' - line 27"]}, "UserExperimentalFlag.java": {"METHODS": ["'protected UserExperimentalFlag(@NonNull String flagKey) {' - line 42", "'public String getFlagDescriptionPage() {' - line 109", "'public String getFlagConfigPage() {' - line 113", "'public static ExtensionList<UserExperimentalFlag> all() {' - line 119"]}, "UserExperimentalFlagsProperty.java": {"METHODS": ["'public UserExperimentalFlagsProperty() {' - line 50", "'public UserExperimentalFlagsProperty(Map<String, String> flags) {' - line 53", "'public UserProperty newInstance(@Nullable StaplerRequest req, @NonNull JSONObject formData) throws FormException {' - line 75"]}, "RemovePrototypeUserExperimentalFlag.java": {"METHODS": ["'public RemovePrototypeUserExperimentalFlag() {' - line 33", "'public Boolean getDefaultValue() {' - line 39", "'public String getDisplayName() {' - line 44", "'public String getShortDescription() {' - line 50"]}, "BooleanUserExperimentalFlag.java": {"METHODS": ["'protected BooleanUserExperimentalFlag(@NonNull String flagKey) {' - line 32", "'public Object serializeValue(Boolean rawValue) {' - line 42", "'protected Boolean deserializeValue(Object serializedValue) {' - line 50"]}, "LazyLoadRunMapEntrySet.java": {"METHODS": ["'public int size() {' - line 40", "'return all().size();' - line 41", "'public boolean isEmpty() {' - line 45", "'public boolean contains(Object o) {' - line 50", "'public boolean hasNext() {' - line 68", "'return entryOf(last);' - line 79", "'public void remove() {' - line 87", "'public Object[] toArray() {' - line 102", "'return all().toArray();' - line 103", "'return all().toArray(a);' - line 108", "'public boolean add(Map.Entry<Integer, R> integerREntry) {' - line 112", "'public boolean remove(Object o) {' - line 117"]}, "Boundary.java": {"METHODS": ["'public int apply(int binarySearchOutput) {' - line 56"]}, "BuildReferenceMapAdapter.java": {"METHODS": ["'private R unwrap(@Nullable BuildReference<R> ref) {' - line 34", "'private BuildReference<R> wrap(@Nullable R value) {' - line 43", "'public Integer firstKey() {' - line 72", "'public Integer lastKey() {' - line 77", "'public Set<Integer> keySet() {' - line 82", "'public Collection<R> values() {' - line 87", "'public int size() {' - line 97", "'public boolean isEmpty() {' - line 102", "'public boolean containsKey(Object key) {' - line 107", "'public boolean containsValue(Object value) {' - line 112", "'public R get(Object key) {' - line 117", "'return unwrap(core.get(key));' - line 118", "'public R put(Integer key, R value) {' - line 122", "'return unwrap(core.put(key, wrap(value)));' - line 123", "'public R remove(Object key) {' - line 127", "'return unwrap(core.remove(key));' - line 128", "'public void putAll(Map<? extends Integer, ? extends R> m) {' - line 132", "'public void clear() {' - line 138", "'public boolean equals(Object o) {' - line 143", "'public int hashCode() {' - line 148", "'@Override public String toString() {' - line 152", "'private CollectionAdapter(Collection<BuildReference<R>> core) {' - line 159", "'public int size() {' - line 164", "'public boolean isEmpty() {' - line 169", "'public boolean contains(Object o) {' - line 174", "'public Iterator<R> iterator() {' - line 180", "'protected R adapt(BuildReference<R> ref) {' - line 185", "'return unwrap(ref);' - line 186", "'public Object[] toArray() {' - line 192", "'public boolean add(R value) {' - line 206", "'public boolean remove(Object o) {' - line 211", "'public boolean containsAll(Collection<?> c) {' - line 218", "'public boolean addAll(Collection<? extends R> c) {' - line 227", "'public boolean removeAll(Collection<?> c) {' - line 236", "'public boolean retainAll(Collection<?> c) {' - line 245", "'public void clear() {' - line 251", "'public boolean equals(Object o) {' - line 256", "'public int hashCode() {' - line 261", "'private SetAdapter(Set<Entry<Integer, BuildReference<R>>> core) {' - line 269", "'public int size() {' - line 274", "'public boolean isEmpty() {' - line 279", "'public boolean contains(Object o) {' - line 284", "'return _unwrap(e);' - line 294", "'public Object[] toArray() {' - line 300", "'public boolean add(Entry<Integer, R> value) {' - line 314", "'public boolean remove(Object o) {' - line 319", "'public boolean containsAll(Collection<?> c) {' - line 326", "'public boolean addAll(Collection<? extends Entry<Integer, R>> c) {' - line 335", "'public boolean removeAll(Collection<?> c) {' - line 344", "'public boolean retainAll(Collection<?> c) {' - line 353", "'public void clear() {' - line 359", "'public boolean equals(Object o) {' - line 364", "'public int hashCode() {' - line 369"]}, "SortedIntList.java": {"METHODS": ["'public int find(int probe) {' - line 62", "'public boolean contains(Object o) {' - line 67", "'public boolean contains(int i) {' - line 71", "'return find(i) >= 0;' - line 72", "'public Integer get(int index) {' - line 76", "'public int size() {' - line 82", "'public int max() {' - line 86", "'public boolean add(Integer i) {' - line 91", "'return add(i.intValue());' - line 92", "'public boolean add(int i) {' - line 95", "'private void ensureCapacity(int i) {' - line 101", "'public int lower(int v) {' - line 112", "'public int higher(int v) {' - line 119", "'public int floor(int v) {' - line 126", "'public int ceil(int v) {' - line 133", "'public boolean isInRange(int idx) {' - line 137", "'public void sort() {' - line 141", "'public void copyInto(int[] dest) {' - line 145", "'public void removeValue(int n) {' - line 149"]}, "LazyBuildMixIn.java": {"METHODS": ["'protected LazyBuildMixIn() {}' - line 75", "'public void onLoad(ItemGroup<? extends Item> parent, String name) throws IOException {' - line 107", "'private RunMap<RunT> createBuildRunMap() {' - line 143", "'public RunT create(File dir) throws IOException {' - line 146", "'return loadBuild(dir);' - line 147", "'public RunT loadBuild(File dir) throws IOException {' - line 169", "'return getBuildClass().getConstructor(asJob().getClass(), File.class).newInstance(asJob(), dir);' - line 171", "'throw handleInvocationTargetException(e);' - line 175", "'return newBuild();' - line 190", "'throw handleInvocationTargetException(e);' - line 197", "'private IOException handleInvocationTargetException(InvocationTargetException e) {' - line 205", "'public List<RunT> getEstimatedDurationCandidates() {' - line 274", "'private BuildReference<RunT> none() {' - line 354", "'protected RunMixIn() {}' - line 360", "'@Override public void onLocationChanged(Item item, String oldFullName, String newFullName) {' - line 468"]}, "AbstractLazyLoadRunMap.java": {"METHODS": ["'public Set<Integer> keySet() {' - line 113", "'public Iterator<Integer> iterator() {' - line 118", "'public boolean hasNext() {' - line 123", "'public Integer next() {' - line 128", "'public void remove() {' - line 133", "'public Spliterator<Integer> spliterator() {' - line 140", "'public boolean tryAdvance(IntConsumer action) {' - line 147", "'public Comparator<Integer> getComparator() {' - line 159", "'public int size() {' - line 166", "'public boolean isEmpty() {' - line 171", "'public void clear() {' - line 176", "'public boolean contains(Object k) {' - line 181", "'public Collection<R> values() {' - line 191", "'public Iterator<R> iterator() {' - line 196", "'public boolean hasNext() {' - line 201", "'public R next() {' - line 206", "'public void remove() {' - line 211", "'public Spliterator<R> spliterator() {' - line 218", "'public int size() {' - line 224", "'public boolean isEmpty() {' - line 229", "'public void clear() {' - line 234", "'public boolean contains(Object v) {' - line 239", "'private Index() {' - line 267", "'private Index(Index rhs) {' - line 271", "'protected AbstractLazyLoadRunMap(File dir) {' - line 291", "'protected void initBaseDir(File dir) {' - line 296", "'private void loadNumberOnDisk() {' - line 334", "'public boolean isEmpty() {' - line 358", "'return search(Integer.MAX_VALUE, DESC) == null;' - line 359", "'assert baseDirInitialized();' - line 364", "'return subMap(Integer.MAX_VALUE, toKey);' - line 404", "'return subMap(fromKey, Integer.MIN_VALUE);' - line 409", "'public Integer firstKey() {' - line 413", "'return getNumberOf(r);' - line 416", "'public Integer lastKey() {' - line 420", "'return getNumberOf(r);' - line 423", "'public R newestBuild() {' - line 426", "'return search(Integer.MAX_VALUE, DESC);' - line 427", "'public R oldestBuild() {' - line 430", "'return search(Integer.MIN_VALUE, ASC);' - line 431", "'public R get(Object key) {' - line 435", "'return get(n);' - line 438", "'public R get(int n) {' - line 443", "'return getByNumber(n);' - line 444", "'public boolean runExists(int number) {' - line 455", "'return getByNumber(n);' - line 473", "'public R getById(String id) {' - line 505", "'return getByNumber(Integer.parseInt(id));' - line 506", "'public R getByNumber(int n) {' - line 509", "'return load(n, null);' - line 529", "'public R put(R value) {' - line 547", "'return _put(value);' - line 548", "'protected R _put(R value) {' - line 551", "'return put(getNumberOf(value), value);' - line 552", "'return unwrap(old);' - line 573", "'private R unwrap(BuildReference<R> ref) {' - line 576", "'private Index copy() {' - line 619", "'private R load(int n, Index editInPlace) {' - line 628", "'private R load(File dataDir, Index editInPlace) {' - line 646", "'protected String getIdOf(R r) {' - line 675", "'protected BuildReference<R> createReference(R r) {' - line 682", "'public int hashCode() {' - line 726", "'public boolean equals(Object o) {' - line 731"]}, "BuildReference.java": {"METHODS": ["'public BuildReference(String id, R referent) {' - line 40", "'public boolean equals(Object o) {' - line 65", "'public int hashCode() {' - line 75", "'@Override public String toString() {' - line 79", "'@Override public R get() {' - line 182", "'@Override public R get() {' - line 188"]}, "SortedList.java": {"METHODS": ["'assert isSorted();' - line 42", "'public int find(T probe) {' - line 52", "'public boolean contains(Object o) {' - line 57", "'return find((T) o) >= 0;' - line 58", "'public T get(int idx) {' - line 62", "'public int size() {' - line 67", "'public T remove(int index) {' - line 72", "'public boolean remove(Object o) {' - line 77", "'public int lower(T v) {' - line 87", "'public int higher(T v) {' - line 97", "'public int floor(T v) {' - line 107", "'public int ceil(T v) {' - line 117", "'public boolean isInRange(int idx) {' - line 121", "'private boolean isSorted() {' - line 125"]}, "HistoryPageFilter.java": {"METHODS": ["'public HistoryPageFilter(int maxEntries) {' - line 80", "'public void setNewerThan(Long newerThan) {' - line 88", "'public void setOlderThan(Long olderThan) {' - line 99", "'public void setSearchString(@NonNull String searchString) {' - line 110", "'public void add(@NonNull Iterable<T> runItems) {' - line 120", "'public void add(@NonNull Iterable<T> runItems, @NonNull List<QueueItem> queueItems) {' - line 131", "'public int size() {' - line 223", "'private void sort(List<?> items) {' - line 227", "'public int compare(Object o1, Object o2) {' - line 233", "'private long getNextBuildNumber(@NonNull Object entry) {' - line 242", "'private void addQueueItem(QueueItem item) {' - line 256", "'private void addRun(Run run) {' - line 262", "'private void updateNewestOldest(long entryId) {' - line 274", "'private boolean add(Object entry) {' - line 279", "'private boolean isFull() {' - line 300", "'return size() >= maxEntries;' - line 301", "'private int getFillCount() {' - line 309", "'private boolean fitsSearchParams(@NonNull QueueItem item) {' - line 313", "'private boolean fitsSearchParams(@NonNull Run run) {' - line 323", "'private boolean fitsSearchString(Object data) {' - line 351", "'private boolean fitsSearchBuildVariables(AbstractBuild<?, ?> runAsBuild) {' - line 371", "'private boolean fitsSearchBuildParameters(ParametersAction parametersAction) {' - line 381"]}, "HasWidgets.java": {"METHODS": ["'return getWidgets().stream().filter(w -> name.equals(w.getUrlName())).findFirst().orElse(null);' - line 82"]}, "WidgetFactory.java": {"METHODS": []}, "ExecutorsWidget.java": {"METHODS": ["'public ExecutorsWidget(@NonNull String ownerUrl, @NonNull List<Computer> computers) {' - line 27", "'protected String getOwnerUrl() {' - line 33", "'public List<Computer> getComputers() {' - line 37", "'public Class<View> type() {' - line 44", "'public Class<ExecutorsWidget> widgetType() {' - line 49", "'public Collection<ExecutorsWidget> createFor(@NonNull View target) {' - line 55", "'public Class<Computer> type() {' - line 63", "'public Class<ExecutorsWidget> widgetType() {' - line 68", "'public Collection<ExecutorsWidget> createFor(@NonNull Computer target) {' - line 74", "'public Class<ComputerSet> type() {' - line 82", "'public Class<ExecutorsWidget> widgetType() {' - line 87", "'public Collection<ExecutorsWidget> createFor(@NonNull ComputerSet target) {' - line 93"]}, "BuildQueueWidget.java": {"METHODS": ["'public BuildQueueWidget(@NonNull String ownerUrl, @NonNull List<QueueItem> queueItems) {' - line 54", "'public BuildQueueWidget(@NonNull String ownerUrl, @NonNull List<QueueItem> queueItems, boolean filtered) {' - line 58", "'public String getOwnerUrl() {' - line 65", "'public List<QueueItem> getQueueItems() {' - line 71", "'public boolean isFiltered() {' - line 76", "'public Class<View> type() {' - line 83", "'public Class<BuildQueueWidget> widgetType() {' - line 88", "'public Collection<BuildQueueWidget> createFor(@NonNull View target) {' - line 94", "'public Class<ComputerSet> type() {' - line 102", "'public Class<BuildQueueWidget> widgetType() {' - line 107", "'public Collection<BuildQueueWidget> createFor(@NonNull ComputerSet target) {' - line 113"]}, "JenkinsWidgetFactory.java": {"METHODS": ["'public Class<View> type() {' - line 47", "'public Class<Widget> widgetType() {' - line 52", "'public Collection<Widget> createFor(@NonNull View target) {' - line 58"]}, "HistoryPageEntry.java": {"METHODS": ["'public HistoryPageEntry(T entry) {' - line 44", "'public T getEntry() {' - line 48", "'public long getEntryId() {' - line 52", "'return getEntryId(entry);' - line 53", "'protected static long getEntryId(@NonNull Object entry) {' - line 56"]}, "BuildTimeTrend.java": {"METHODS": ["'@Override protected void calculate(Run<?, ?> build, JSONObject element) {' - line 38"]}, "RunListProgressiveRendering.java": {"METHODS": ["'public void setBuilds(Iterable<? extends Run<?, ?>> builds) {' - line 53", "'@Override protected void compute() throws Exception {' - line 57"]}, "BuildListTable.java": {"METHODS": ["'@Override protected void calculate(Run<?, ?> build, JSONObject element) {' - line 38"]}, "Telemetry.java": {"METHODS": ["'public String getId() {' - line 86", "'return getClass().getName();' - line 87", "'public static ExtensionList<Telemetry> all() {' - line 128", "'public static boolean isDisabled() {' - line 136", "'public boolean isActivePeriod() {' - line 151", "'public TelemetryReporter() {' - line 177", "'public long getRecurrencePeriod() {' - line 182", "'protected void execute(TaskListener listener) throws IOException, InterruptedException {' - line 187"]}, "Correlator.java": {"METHODS": ["'public Correlator() {' - line 46", "'public String getCorrelationId() {' - line 55", "'void setCorrelationId(String correlationId) {' - line 61", "'public Descriptor<Correlator> getDescriptor() {' - line 66"]}, "SecuritySystemProperties.java": {"METHODS": ["'public String getId() {' - line 51", "'public LocalDate getStart() {' - line 57", "'public LocalDate getEnd() {' - line 63", "'public String getDisplayName() {' - line 69", "'public JSONObject createContent() {' - line 75", "'private static String clientDateString() {' - line 108", "'private static void putBoolean(Map<String, String> propertiesMap, String systemProperty, boolean defaultValue) {' - line 115", "'private static void putStringInfo(Map<String, String> propertiesMap, String systemProperty) {' - line 119"]}, "DistributedBuilds.java": {"METHODS": ["'public String getDisplayName() {' - line 47", "'public LocalDate getStart() {' - line 53", "'public LocalDate getEnd() {' - line 59", "'public JSONObject createContent() {' - line 64"]}, "UserLanguages.java": {"METHODS": ["'public String getId() {' - line 53", "'public String getDisplayName() {' - line 59", "'public LocalDate getStart() {' - line 65", "'public LocalDate getEnd() {' - line 71", "'public JSONObject createContent() {' - line 76", "'public boolean handle(HttpServletRequest req, HttpServletResponse rsp) throws IOException, ServletException {' - line 94"]}, "StaplerDispatches.java": {"METHODS": ["'public LocalDate getStart() {' - line 50", "'public LocalDate getEnd() {' - line 56", "'public String getDisplayName() {' - line 62", "'public JSONObject createContent() {' - line 67", "'private Object buildDispatches() {' - line 78", "'protected void record(StaplerRequest staplerRequest, String s) {' - line 88"]}, "OptionalPermissions.java": {"METHODS": ["'public String getDisplayName() {' - line 60", "'public LocalDate getStart() {' - line 65", "'public LocalDate getEnd() {' - line 70", "'public JSONObject createContent() {' - line 75"]}, "SCMTriggerItem.java": {"METHODS": ["'Item asItem();' - line 53", "'int getNextBuildNumber();' - line 56", "'int getQuietPeriod();' - line 59", "'@Override public Item asItem() {' - line 128", "'@Override public int getNextBuildNumber() {' - line 132", "'@Override public int getQuietPeriod() {' - line 136", "'@Override public PollingResult poll(TaskListener listener) {' - line 144", "'@Override public SCMTrigger getSCMTrigger() {' - line 153", "'return resolveMultiScmIfConfigured(delegate.asProject().getScm());' - line 158", "'private SCMTriggerItems() {}' - line 177"]}, "TriggeredItem.java": {"METHODS": []}, "ReverseBuildTrigger.java": {"METHODS": ["'public ReverseBuildTrigger(String upstreamProjects, Result threshold) {' - line 100", "'public ReverseBuildTrigger(String upstreamProjects) {' - line 106", "'public String getUpstreamProjects() {' - line 115", "'public Result getThreshold() {' - line 119", "'public void setThreshold(Result r) {' - line 124", "'private boolean shouldTrigger(Run upstreamBuild, TaskListener listener) {' - line 128", "'@Override public void buildDependencyGraph(final AbstractProject downstream, DependencyGraph graph) {' - line 172", "'@Override public boolean shouldTriggerBuild(AbstractBuild upstreamBuild, TaskListener listener, List<Action> actions) {' - line 175", "'return shouldTrigger(upstreamBuild, listener);' - line 176", "'@Override public void start(@NonNull Job project, boolean newInstance) {' - line 182", "'@Override public void stop() {' - line 187", "'@Override public String getDisplayName() {' - line 196", "'@Override public boolean isApplicable(Item item) {' - line 200", "'public AutoCompletionCandidates doAutoCompleteUpstreamProjects(@QueryParameter String value, @AncestorInPath Item self, @AncestorInPath ItemGroup container) {' - line 204", "'public FormValidation doCheckUpstreamProjects(@AncestorInPath Job project, @QueryParameter String value) {' - line 208", "'static RunListenerImpl get() {' - line 237", "'@Override public void onCompleted(@NonNull Run r, @NonNull TaskListener listener) {' - line 272", "'public void onLocationChanged(Item item, final String oldFullName, final String newFullName) {' - line 308"]}, "PluginsLink.java": {"METHODS": ["'public String getIconFileName() {' - line 41", "'public String getDisplayName() {' - line 46", "'public String getDescription() {' - line 51", "'public String getUrlName() {' - line 56", "'public Permission getRequiredPermission() {' - line 62", "'public Category getCategory() {' - line 68", "'public Badge getBadge() {' - line 73"]}, "ReloadLink.java": {"METHODS": ["'public String getIconFileName() {' - line 40", "'public String getDisplayName() {' - line 45", "'public String getDescription() {' - line 50", "'public String getUrlName() {' - line 55", "'@Override public boolean getRequiresConfirmation() {' - line 59", "'public boolean getRequiresPOST() {' - line 64", "'public Permission getRequiredPermission() {' - line 70", "'public Category getCategory() {' - line 76"]}, "AsynchronousAdministrativeMonitor.java": {"METHODS": ["'public boolean isFixingActive() {' - line 43", "'public AnnotatedLargeText getLogText() {' - line 50", "'protected File getLogFile() {' - line 59", "'protected File getBaseDir() {' - line 69", "'public void run() {' - line 105", "'private void doRun(@NonNull TaskListener listener) {' - line 128"]}, "ShutdownLink.java": {"METHODS": ["'public String getIconFileName() {' - line 48", "'public String getDisplayName() {' - line 53", "'public String getDescription() {' - line 58", "'public String getUrlName() {' - line 63", "'public Permission getRequiredPermission() {' - line 88", "'public Category getCategory() {' - line 94"]}, "AdministrativeMonitorsDecorator.java": {"METHODS": ["'public AdministrativeMonitorsDecorator() {' - line 54", "'public String getDisplayName() {' - line 67", "'public Collection<AdministrativeMonitor> filterNonSecurityAdministrativeMonitors(Collection<AdministrativeMonitor> activeMonitors) {' - line 72", "'public Collection<AdministrativeMonitor> filterSecurityAdministrativeMonitors(Collection<AdministrativeMonitor> activeMonitors) {' - line 77", "'private Collection<AdministrativeMonitor> filterActiveAdministrativeMonitors(Collection<AdministrativeMonitor> activeMonitors, boolean isSecurity) {' - line 84", "'public List<AdministrativeMonitor> getNonSecurityAdministrativeMonitors() {' - line 95", "'public List<AdministrativeMonitor> getSecurityAdministrativeMonitors() {' - line 108", "'private Collection<AdministrativeMonitor> getAllActiveAdministrativeMonitors() {' - line 120", "'public Collection<AdministrativeMonitor> getMonitorsToDisplay() {' - line 142", "'return getAllActiveAdministrativeMonitors();' - line 176"]}, "CliLink.java": {"METHODS": ["'public String getIconFileName() {' - line 40", "'public String getDisplayName() {' - line 45", "'public String getDescription() {' - line 50", "'public Permission getRequiredPermission() {' - line 56", "'public String getUrlName() {' - line 61", "'public Category getCategory() {' - line 67"]}, "Badge.java": {"METHODS": ["'public Badge(@NonNull String text, @NonNull String tooltip, @NonNull Severity severity) {' - line 69", "'public String getText() {' - line 81", "'public String getTooltip() {' - line 91", "'public String getSeverity() {' - line 101"]}, "NodesLink.java": {"METHODS": ["'public String getIconFileName() {' - line 40", "'public String getDisplayName() {' - line 45", "'public String getDescription() {' - line 50", "'public Permission getRequiredPermission() {' - line 56", "'public String getUrlName() {' - line 61", "'public Category getCategory() {' - line 67"]}, "ConsoleLink.java": {"METHODS": ["'public String getIconFileName() {' - line 40", "'public String getDisplayName() {' - line 45", "'public String getDescription() {' - line 50", "'public String getUrlName() {' - line 55", "'public Permission getRequiredPermission() {' - line 60", "'public Category getCategory() {' - line 66"]}, "SystemLogLink.java": {"METHODS": ["'public String getIconFileName() {' - line 40", "'public String getDisplayName() {' - line 45", "'public String getDescription() {' - line 50", "'public String getUrlName() {' - line 55", "'public Permission getRequiredPermission() {' - line 61", "'public Category getCategory() {' - line 67"]}, "SystemInfoLink.java": {"METHODS": ["'public String getIconFileName() {' - line 40", "'public String getDisplayName() {' - line 45", "'public String getDescription() {' - line 50", "'public Permission getRequiredPermission() {' - line 56", "'public String getUrlName() {' - line 62", "'public Category getCategory() {' - line 68"]}, "StatisticsLink.java": {"METHODS": ["'public String getIconFileName() {' - line 40", "'public String getDisplayName() {' - line 45", "'public String getDescription() {' - line 50", "'public Permission getRequiredPermission() {' - line 56", "'public String getUrlName() {' - line 61", "'public Category getCategory() {' - line 67"]}, "AdministrativeMonitorsConfiguration.java": {"METHODS": ["'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 42"]}, "AdministrativeMonitorsApi.java": {"METHODS": ["'public void doNonSecurityPopupContent(StaplerRequest req, StaplerResponse resp) throws IOException, ServletException {' - line 18", "'public void doSecurityPopupContent(StaplerRequest req, StaplerResponse resp) throws IOException, ServletException {' - line 24", "'public String getIconFileName() {' - line 30", "'public String getDisplayName() {' - line 35", "'public String getUrlName() {' - line 40", "'private AdministrativeMonitorsDecorator getDecorator() {' - line 44"]}, "ConfigureLink.java": {"METHODS": ["'public String getIconFileName() {' - line 40", "'public String getDisplayName() {' - line 45", "'public String getDescription() {' - line 50", "'public Permission getRequiredPermission() {' - line 56", "'public String getUrlName() {' - line 61", "'public Category getCategory() {' - line 67"]}, "AdministrativeMonitorsApiData.java": {"METHODS": ["'public List<AdministrativeMonitor> getMonitorsList() {' - line 16", "'public boolean hasActiveMonitors() {' - line 20"]}, "ControllerExecutorsNoAgents.java": {"METHODS": ["'public String getDisplayName() {' - line 44", "'public boolean isSecurity() {' - line 49", "'public void doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 54", "'public boolean isActivated() {' - line 66"]}, "CompletedInitializationMonitor.java": {"METHODS": ["'public String getDisplayName() {' - line 45", "'public boolean isActivated() {' - line 50"]}, "URICheckEncodingMonitor.java": {"METHODS": ["'public boolean isCheckEnabled() {' - line 23", "'public boolean isActivated() {' - line 28", "'public String getDisplayName() {' - line 33", "'public FormValidation doCheckURIEncoding(StaplerRequest request) throws IOException {' - line 37"]}, "RootUrlNotSetMonitor.java": {"METHODS": ["'public String getDisplayName() {' - line 50", "'public boolean isActivated() {' - line 55", "'public boolean isUrlNull() {' - line 62", "'public Permission getRequiredPermission() {' - line 68"]}, "SecurityIsOffMonitor.java": {"METHODS": ["'public String getDisplayName() {' - line 24", "'public boolean isActivated() {' - line 29", "'public boolean isSecurity() {' - line 34", "'public void doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 42"]}, "ControllerExecutorsAgents.java": {"METHODS": ["'public String getDisplayName() {' - line 44", "'public boolean isSecurity() {' - line 49", "'public boolean isActivated() {' - line 54", "'public void doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 60"]}, "JnlpSlaveAgentProtocol4.java": {"METHODS": ["'private char[] constructPassword() {' - line 135", "'public boolean isOptIn() {' - line 140", "'public String getDisplayName() {' - line 145", "'public String getName() {' - line 150", "'public void handle(Socket socket) throws IOException, InterruptedException {' - line 155"]}, "DefaultJnlpSlaveReceiver.java": {"METHODS": ["'public boolean owns(String clientName) {' - line 63", "'private static ComputerLauncher getDelegate(ComputerLauncher launcher) {' - line 68", "'public void afterProperties(@NonNull JnlpConnectionState event) {' - line 89", "'public void beforeChannel(@NonNull JnlpConnectionState event) {' - line 153", "'public void afterChannel(@NonNull JnlpConnectionState event) {' - line 171", "'public void channelClosed(@NonNull JnlpConnectionState event) {' - line 188", "'public SlaveComputer getNode() {' - line 210", "'public OutputStream getLog() {' - line 215", "'public void setLog(@NonNull OutputStream log) {' - line 219"]}, "IOHubProvider.java": {"METHODS": ["'public IOHubProvider() {' - line 50", "'public IOHub getHub() {' - line 59", "'public void cleanUp() throws IOException {' - line 64"]}, "WorkspaceLocator.java": {"METHODS": ["'public static ExtensionList<WorkspaceLocator> all() {' - line 33"]}, "NioChannelSelector.java": {"METHODS": ["'public NioChannelSelector() {' - line 22", "'public NioChannelHub getHub() {' - line 35", "'public void cleanUp() throws IOException {' - line 40"]}, "RemotingVersionInfo.java": {"METHODS": ["'private RemotingVersionInfo() {}' - line 50", "'private static VersionNumber extractVersion(@NonNull Properties props, @NonNull String propertyName)' - line 67", "'public static VersionNumber getEmbeddedVersion() {' - line 96", "'public static VersionNumber getMinimumSupportedVersion() {' - line 109"]}, "EncryptedSlaveAgentJnlpFile.java": {"METHODS": ["'public EncryptedSlaveAgentJnlpFile(AccessControlled it, String viewName, String slaveName, Permission connectPermission) {' - line 64", "'public void generateResponse(StaplerRequest req, final StaplerResponse res, Object node) throws IOException, ServletException {' - line 72", "'@Override public ServletOutputStream getOutputStream() {' - line 77", "'@Override public PrintWriter getWriter() {' - line 81", "'public boolean isReady() {' - line 123", "'public void setWriteListener(WriteListener writeListener) {' - line 128", "'public void write(int b) throws IOException {' - line 139", "'public void write(byte[] b) throws IOException {' - line 144", "'public void write(byte[] b, int off, int len) throws IOException {' - line 149", "'byte[] getBytes() {' - line 157"]}, "PingFailureAnalyzer.java": {"METHODS": ["'public static ExtensionList<PingFailureAnalyzer> all() {' - line 28"]}, "StandardOutputSwapper.java": {"METHODS": ["'public void preOnline(Computer c, Channel channel, FilePath root, TaskListener listener)  {' - line 29", "'public Boolean call() throws Exception {' - line 42", "'private void _swap(StandardOutputStream stdout) throws Exception {' - line 60", "'private void swap(StandardOutputStream stdout) throws IOException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException, UnsatisfiedLinkError {' - line 69"]}, "JnlpSlaveAgentProtocol.java": {"METHODS": []}, "JnlpAgentReceiver.java": {"METHODS": ["'new HMACConfidentialKey(JnlpSlaveAgentProtocol.class, \"secret\");' - line 40", "'public static ExtensionList<JnlpAgentReceiver> all() {' - line 46", "'public static boolean exists(String clientName) {' - line 50", "'public static String generateCookie() {' - line 61", "'public boolean exists(String clientName) {' - line 69", "'public String getSecretOf(@NonNull String clientName) {' - line 74"]}, "RemotingWorkDirSettings.java": {"METHODS": ["'public RemotingWorkDirSettings() {' - line 76", "'public boolean isDisabled() {' - line 87", "'public boolean isUseAgentRootDir() {' - line 96", "'public boolean isFailIfWorkDirIsMissing() {' - line 105", "'public String getWorkDirPath() {' - line 116", "'public String getInternalDir() {' - line 121", "'public Descriptor<RemotingWorkDirSettings> getDescriptor() {' - line 126", "'public List<String> toCommandLineArgs(@NonNull SlaveComputer computer) {' - line 135", "'public String toCommandLineString(@NonNull SlaveComputer computer) {' - line 175", "'public static RemotingWorkDirSettings getDisabledDefaults() {' - line 218", "'public static RemotingWorkDirSettings getEnabledDefaults() {' - line 226"]}, "ThreadDumpSlaveInfo.java": {"METHODS": ["'public String getDisplayName() {' - line 11"]}, "SystemPropertySlaveInfo.java": {"METHODS": ["'public String getDisplayName() {' - line 13", "'public Permission getRequiredPermission() {' - line 18"]}, "SlaveSystemInfo.java": {"METHODS": ["'public static ExtensionList<SlaveSystemInfo> all() {' - line 24", "'public Permission getRequiredPermission() {' - line 35"]}, "ClassLoaderStatisticsSlaveInfo.java": {"METHODS": ["'public String getDisplayName() {' - line 13", "'public Permission getRequiredPermission() {' - line 18"]}, "EnvVarsSlaveInfo.java": {"METHODS": ["'public String getDisplayName() {' - line 13", "'public Permission getRequiredPermission() {' - line 18"]}, "WinswSlaveRestarter.java": {"METHODS": ["'public boolean canWork() {' - line 18", "'return exec(\"status\") == 0;' - line 24", "'private int exec(String cmd) throws InterruptedException, IOException {' - line 31", "'public void restart() throws Exception {' - line 45"]}, "SlaveRestarter.java": {"METHODS": ["'public static ExtensionList<SlaveRestarter> all() {' - line 39"]}, "JnlpSlaveRestarterInstaller.java": {"METHODS": ["'public void onOnline(final Computer c, final TaskListener listener) throws IOException, InterruptedException {' - line 42", "'public Void call() throws Exception {' - line 58", "'private static void install(Computer c, TaskListener listener) {' - line 63", "'public List<SlaveRestarter> call() throws IOException {' - line 87", "'public void onReconnect() {' - line 108"]}, "UnixSlaveRestarter.java": {"METHODS": ["'public boolean canWork() {' - line 29", "'public void restart() throws Exception {' - line 52", "'private static String getCurrentExecutable() {' - line 70"]}, "HexStringConfidentialKey.java": {"METHODS": ["'public HexStringConfidentialKey(String id, int length) {' - line 25", "'public HexStringConfidentialKey(Class owner, String shortName, int length) {' - line 32"]}, "CustomClassFilter.java": {"METHODS": ["'public Static() {' - line 95", "'public Boolean permits(Class<?> c) {' - line 110", "'return permits(c.getName());' - line 111", "'public Boolean permits(String name) {' - line 115", "'public Boolean permits(Class<?> c) {' - line 143", "'return permits(c.getName());' - line 144", "'public Boolean permits(String name) {' - line 148", "'public static void load() throws IOException {' - line 153"]}, "ResourceDomainFilter.java": {"METHODS": ["'public boolean handle(HttpServletRequest req, HttpServletResponse rsp) throws IOException, ServletException {' - line 55"]}, "UpdateSiteWarningsConfiguration.java": {"METHODS": ["'public Set<String> getIgnoredWarnings() {' - line 63", "'public void setIgnoredWarnings(Set<String> ignoredWarnings) {' - line 68", "'public boolean isIgnored(@NonNull UpdateSite.Warning warning) {' - line 72", "'public PluginWrapper getPlugin(@NonNull UpdateSite.Warning warning) {' - line 77", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 113"]}, "RSADigitalSignatureConfidentialKey.java": {"METHODS": ["'public RSADigitalSignatureConfidentialKey(String id) {' - line 38", "'public RSADigitalSignatureConfidentialKey(Class owner, String shortName) {' - line 42", "'public String sign(String msg) {' - line 49"]}, "RSAConfidentialKey.java": {"METHODS": ["'protected RSAConfidentialKey(String id) {' - line 55", "'protected RSAConfidentialKey(Class owner, String shortName) {' - line 59", "'new RSAPublicKeySpec(pks.getModulus(), pks.getPublicExponent()));' - line 92", "'public RSAPublicKey getPublicKey() {' - line 101", "'public String getEncodedPublicKey() {' - line 109"]}, "ApiTokenProperty.java": {"METHODS": ["'public ApiTokenProperty() {' - line 119", "'protected void setUser(User u) {' - line 123", "'public String getApiToken() {' - line 157", "'return hasPermissionToSeeToken()' - line 162", "'public boolean hasLegacyToken() {' - line 171", "'public boolean matchesPassword(String token) {' - line 192", "'private boolean hasPermissionToSeeToken() {' - line 210", "'return canCurrentUserControlObject(SHOW_LEGACY_TOKEN_TO_ADMINS, user);' - line 212", "'private static boolean canCurrentUserControlObject(boolean trustAdmins, User propertyOwner) {' - line 215", "'public Collection<TokenInfoAndStats> getTokenList() {' - line 235", "'public TokenInfoAndStats(@NonNull ApiTokenStore.HashedToken token, @NonNull ApiTokenStats.SingleTokenStats stats) {' - line 259", "'public UserProperty reconfigure(StaplerRequest req, @CheckForNull JSONObject form) throws FormException {' - line 276", "'private void addJSONTokenIntoMap(Map<String, JSONObject> tokenMap, JSONObject tokenData) {' - line 311", "'public void changeApiToken() throws IOException {' - line 321", "'private void _changeApiToken() {' - line 338", "'public void deleteApiToken() {' - line 348", "'public ApiTokenStore getTokenStore() {' - line 353", "'public ApiTokenStats getTokenStats() {' - line 358", "'public void revokeAllTokens() throws IOException {' - line 380", "'public void revokeAllTokensExceptOne(@NonNull String tokenUuid) throws IOException {' - line 388", "'public void revokeToken(@NonNull String tokenUuid) throws IOException {' - line 396", "'public String getDisplayName() {' - line 413", "'public String getNoLegacyToken() {' - line 418", "'public ApiTokenProperty newInstance(User user) {' - line 437", "'return forceNewInstance(user, false);' - line 439", "'return forceNewInstance(user, true);' - line 442", "'private ApiTokenProperty forceNewInstance(User user, boolean withLegacyToken) {' - line 445", "'public boolean isStatisticsEnabled() {' - line 455", "'public boolean mustDisplayLegacyApiToken(User propertyOwner) {' - line 461", "'public boolean hasCurrentUserRightToGenerateNewToken(User propertyOwner) {' - line 471", "'return canCurrentUserControlObject(ADMIN_CAN_GENERATE_NEW_TOKENS, propertyOwner);' - line 472", "'public HttpResponse doChangeToken(@AncestorInPath User u, StaplerResponse rsp) throws IOException {' - line 480", "'public HttpResponse doGenerateNewToken(@AncestorInPath User u, @QueryParameter String newTokenName) throws IOException {' - line 508", "'public HttpResponse doRevokeAll(@AncestorInPath User u) throws IOException {' - line 625"]}, "SecurityListener.java": {"METHODS": ["'protected void authenticated2(@NonNull UserDetails details) {' - line 53", "'protected void authenticated(@NonNull org.acegisecurity.userdetails.UserDetails details) {}' - line 61", "'protected void failedToAuthenticate(@NonNull String username){}' - line 70", "'protected void loggedIn(@NonNull String username){}' - line 78", "'protected void userCreated(@NonNull String username) {}' - line 87", "'protected void failedToLogIn(@NonNull String username){}' - line 94", "'protected void loggedOut(@NonNull String username){}' - line 100", "'public static void fireAuthenticated2(@NonNull UserDetails details) {' - line 105", "'public static void fireAuthenticated(@NonNull org.acegisecurity.userdetails.UserDetails details) {' - line 125", "'public static void fireUserCreated(@NonNull String username) {' - line 130", "'public static void fireFailedToAuthenticate(@NonNull String username) {' - line 138", "'public static void fireLoggedIn(@NonNull String username) {' - line 146", "'public static void fireFailedToLogIn(@NonNull String username) {' - line 154", "'public static void fireLoggedOut(@NonNull String username) {' - line 162", "'private static List<SecurityListener> all() {' - line 169"]}, "UserDetailsCache.java": {"METHODS": ["'public UserDetailsCache() {' - line 66", "'public static UserDetailsCache get() {' - line 85", "'public UserDetails getCached(String idOrFullName) throws UsernameNotFoundException {' - line 99", "'public UserDetails loadUserByUsername(String idOrFullName) throws UsernameNotFoundException, ExecutionException {' - line 120", "'public void invalidateAll() {' - line 140", "'public void invalidate(final String idOrFullName) {' - line 149", "'private Retriever(final String idOrFullName) {' - line 161", "'public UserDetails call() throws Exception {' - line 166"]}, "QueueItemAuthenticatorConfiguration.java": {"METHODS": ["'private Object readResolve() {' - line 26", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 49", "'public List<QueueItemAuthenticator> getAuthenticators() {' - line 67", "'return get().getAuthenticators();' - line 68"]}, "HMACConfidentialKey.java": {"METHODS": ["'public HMACConfidentialKey(String id, int length) {' - line 41", "'public HMACConfidentialKey(String id) {' - line 49", "'public HMACConfidentialKey(Class owner, String shortName, int length) {' - line 57", "'public HMACConfidentialKey(Class owner, String shortName) {' - line 61", "'return chop(mac.doFinal(message));' - line 74", "'public boolean checkMac(byte[] message, byte[] mac) {' - line 80", "'public String mac(String message) {' - line 88", "'public boolean checkMac(String message, String mac) {' - line 95", "'private byte[] chop(byte[] mac) {' - line 99", "'public Mac createMac() {' - line 110"]}, "CryptoConfidentialKey.java": {"METHODS": ["'public CryptoConfidentialKey(String id) {' - line 25", "'public CryptoConfidentialKey(Class owner, String shortName) {' - line 29", "'public Cipher encrypt() {' - line 57", "'public Cipher encrypt(byte[] iv) {' - line 73", "'public Cipher decrypt(byte[] iv) {' - line 89", "'public byte[] newIv(int length) {' - line 106", "'public byte[] newIv() {' - line 117", "'return newIv(DEFAULT_IV_LENGTH);' - line 118", "'public Cipher decrypt() {' - line 126"]}, "ResourceDomainRootAction.java": {"METHODS": ["'public String getIconFileName() {' - line 82", "'public String getDisplayName() {' - line 88", "'public String getUrlName() {' - line 94", "'public static ResourceDomainRootAction get() {' - line 98", "'public void doIndex(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 102", "'public Object getDynamic(String id, StaplerRequest req, StaplerResponse rsp) throws Exception {' - line 110", "'private Redirection(String url) {' - line 137", "'public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 141", "'public String getRedirectUrl(@NonNull Token token, @NonNull String restOfPath) {' - line 149", "'private static String getResourceRootUrl() {' - line 158", "'public Token getToken(@NonNull DirectoryBrowserSupport dbs, @NonNull StaplerRequest req) {' - line 171", "'public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 206", "'public String toString() {' - line 263", "'private String encode() {' - line 280", "'private static Token decode(String value) {' - line 287"]}, "RekeySecretAdminMonitor.java": {"METHODS": ["'public RekeySecretAdminMonitor() throws IOException {' - line 55", "'&&  new FileBoolean(new File(j.getRootDir(), \"secret.key.not-so-secret\")).isOff())' - line 62", "'public boolean isActivated() {' - line 68", "'public boolean isDone() {' - line 75", "'public void setNeeded() {' - line 79", "'public boolean isScanOnBoot() {' - line 83", "'public boolean isSecurity() {' - line 88", "'public HttpResponse doScan(StaplerRequest req) throws IOException, GeneralSecurityException {' - line 93", "'private FileBoolean state(String name) {' - line 109", "'public void scanOnReboot() throws InterruptedException, IOException, GeneralSecurityException {' - line 115", "'public String getDisplayName() {' - line 126", "'protected File getLogFile() {' - line 134", "'protected void fix(TaskListener listener) throws Exception {' - line 139", "'new RekeySecretAdminMonitor().done.on();' - line 149"]}, "ResourceDomainRecommendation.java": {"METHODS": ["'public String getDisplayName() {' - line 54", "'public boolean isActivated() {' - line 59", "'public HttpResponse doAct(@QueryParameter String redirect, @QueryParameter String dismiss) throws IOException {' - line 66", "'public Permission getRequiredPermission() {' - line 79", "'public boolean isSecurity() {' - line 84"]}, "BasicHeaderRealPasswordAuthenticator.java": {"METHODS": ["'public Authentication authenticate2(HttpServletRequest req, HttpServletResponse rsp, String username, String password) throws IOException, ServletException {' - line 50", "'new UsernamePasswordAuthenticationToken(username, password);' - line 55"]}, "SecureRequester.java": {"METHODS": ["'boolean permit(StaplerRequest req, Object bean);' - line 30", "'@Override public boolean permit(StaplerRequest req, Object bean) {' - line 44"]}, "QueueItemAuthenticatorProvider.java": {"METHODS": ["'public static Iterable<QueueItemAuthenticator> authenticators() {' - line 23", "'private IteratorImpl() {' - line 31", "'public boolean hasNext() {' - line 36", "'public QueueItemAuthenticator next() {' - line 48", "'public void remove() {' - line 56", "'public Iterator<QueueItemAuthenticator> iterator() {' - line 63"]}, "Roles.java": {"METHODS": ["'private Roles() {}' - line 32"]}, "RedactSecretJsonInErrorMessageSanitizer.java": {"METHODS": ["'private RedactSecretJsonInErrorMessageSanitizer() {}' - line 46", "'public JSONObject sanitize(JSONObject jsonObject) {' - line 49", "'return copyAndSanitizeObject(jsonObject);' - line 50", "'private Set<String> retrieveRedactedKeys(JSONObject jsonObject) {' - line 56", "'private Object copyAndSanitize(Object value) {' - line 79", "'return copyAndSanitizeObject((JSONObject) value);' - line 81", "'return copyAndSanitizeArray((JSONArray) value);' - line 83", "'private JSONObject copyAndSanitizeObject(JSONObject jsonObject) {' - line 91", "'private JSONArray copyAndSanitizeArray(JSONArray jsonArray) {' - line 108"]}, "BasicHeaderApiTokenAuthenticator.java": {"METHODS": ["'public Authentication authenticate2(HttpServletRequest req, HttpServletResponse rsp, String username, String password) throws ServletException {' - line 30"]}, "ResourceDomainConfiguration.java": {"METHODS": ["'public ResourceDomainConfiguration() {' - line 79", "'public FormValidation doCheckUrl(@QueryParameter(\"url\") String resourceRootUrlString) {' - line 85", "'return checkUrl(resourceRootUrlString, true);' - line 88", "'private FormValidation checkUrl(String resourceRootUrlString, boolean allowOnlineIdentityCheck) {' - line 91", "'public String getUrl() {' - line 192", "'public void setUrl(@CheckForNull String url) {' - line 196", "'public static boolean isResourceRequest(HttpServletRequest req) {' - line 218", "'public static boolean isResourceDomainConfigured() {' - line 255", "'public static ResourceDomainConfiguration get() {' - line 265"]}, "NonSerializableSecurityContext.java": {"METHODS": ["'public NonSerializableSecurityContext() {' - line 52", "'public NonSerializableSecurityContext(Authentication authentication) {' - line 55", "'public boolean equals(Object obj) {' - line 60", "'public Authentication getAuthentication() {' - line 78", "'public int hashCode() {' - line 83", "'public void setAuthentication(Authentication authentication) {' - line 92", "'public String toString() {' - line 97"]}, "ConfidentialKey.java": {"METHODS": ["'protected ConfidentialKey(String id) {' - line 40", "'protected void store(byte[] payload) throws IOException {' - line 48", "'public String getId() {' - line 52"]}, "QueueItemAuthenticator.java": {"METHODS": ["'return authenticate2(item.task);' - line 44", "'return authenticate2(new Queue.WaitingItem(Calendar.getInstance(), task, Collections.emptyList()));' - line 71", "'public QueueItemAuthenticatorDescriptor getDescriptor() {' - line 103"]}, "ConfidentialStore.java": {"METHODS": ["'void clear() {' - line 118", "'protected void store(ConfidentialKey key, byte[] payload) throws IOException {' - line 123", "'protected byte[] load(ConfidentialKey key) throws IOException {' - line 129", "'SecureRandom secureRandom() {' - line 136", "'public byte[] randomBytes(int size) {' - line 141"]}, "ApiCrumbExclusion.java": {"METHODS": ["'public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 45"]}, "DefaultConfidentialStore.java": {"METHODS": ["'public DefaultConfidentialStore() throws IOException, InterruptedException {' - line 48", "'public DefaultConfidentialStore(File rootDir) throws IOException, InterruptedException {' - line 52", "'new FilePath(rootDir).chmod(0700);' - line 57", "'protected void store(ConfidentialKey key, byte[] payload) throws IOException {' - line 73", "'protected byte[] load(ConfidentialKey key) throws IOException {' - line 96", "'return verifyMagic(bytes);' - line 106", "'private byte[] verifyMagic(byte[] payload) {' - line 124", "'private File getFileFor(ConfidentialKey key) {' - line 137", "'SecureRandom secureRandom() {' - line 142", "'public byte[] randomBytes(int size) {' - line 147"]}, "ImpersonatingUserDetailsService2.java": {"METHODS": ["'public ImpersonatingUserDetailsService2(UserDetailsService base) {' - line 21", "'public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {' - line 26", "'return attemptToImpersonate(username, e);' - line 30", "'protected UserDetails attemptToImpersonate(String username, RuntimeException e) {' - line 34"]}, "SecurityContextExecutorService.java": {"METHODS": ["'public SecurityContextExecutorService(ExecutorService service) {' - line 47", "'protected Runnable wrap(final Runnable r) {' - line 52", "'public void run() {' - line 56", "'public V call() throws Exception {' - line 73"]}, "SuspiciousRequestFilter.java": {"METHODS": ["'public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 28", "'public void init(FilterConfig filterConfig) throws ServletException {' - line 42", "'public void destroy() {' - line 46"]}, "ApiTokenFilter.java": {"METHODS": []}, "LastGrantedAuthoritiesProperty.java": {"METHODS": ["'public UserProperty reconfigure(StaplerRequest req, JSONObject form) throws FormException {' - line 45", "'public void update(@NonNull Authentication auth) throws IOException {' - line 86", "'public void invalidate() throws IOException {' - line 102", "'protected void loggedIn(@NonNull String username) {' - line 116", "'protected void failedToLogIn(@NonNull String username) {' - line 133", "'public boolean isEnabled() {' - line 165", "'public UserProperty newInstance(User user) {' - line 170"]}, "FrameOptionsPageDecorator.java": {"METHODS": []}, "BasicApiTokenHelper.java": {"METHODS": []}, "ChannelConfigurator.java": {"METHODS": ["'public void onChannelBuilding(ChannelBuilder builder, @Nullable Object context) {}' - line 39", "'public static ExtensionList<ChannelConfigurator> all() {' - line 44"]}, "BasicHeaderProcessor.java": {"METHODS": ["'public void init(FilterConfig filterConfig) throws ServletException {' - line 50", "'public void setAuthenticationEntryPoint(AuthenticationEntryPoint authenticationEntryPoint) {' - line 53", "'public void setRememberMeServices(RememberMeServices rememberMeServices) {' - line 57", "'public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 62", "'protected boolean authenticationIsRequired(String username) {' - line 108", "'protected void success(HttpServletRequest req, HttpServletResponse rsp, FilterChain chain, Authentication auth) throws IOException, ServletException {' - line 134", "'protected void fail(HttpServletRequest req, HttpServletResponse rsp, BadCredentialsException failure) throws IOException, ServletException {' - line 142", "'public void destroy() {' - line 155"]}, "AuthenticationSuccessHandler.java": {"METHODS": ["'protected String determineTargetUrl(HttpServletRequest request, HttpServletResponse response, Authentication authentication) {' - line 41", "'return getDefaultTargetUrl();' - line 54"]}, "UpdateSiteWarningsMonitor.java": {"METHODS": ["'public boolean isActivated() {' - line 82", "'public boolean isSecurity() {' - line 90", "'public HttpResponse doForward(@QueryParameter String fix, @QueryParameter String configure) {' - line 146", "'public boolean hasApplicableHiddenWarnings() {' - line 164", "'return getActiveWarnings().size() < configuration.getApplicableWarnings().size();' - line 166", "'public Permission getRequiredPermission() {' - line 170", "'public String getDisplayName() {' - line 175"]}, "NotReallyRoleSensitiveCallable.java": {"METHODS": ["'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 14"]}, "ImpersonatingExecutorService.java": {"METHODS": ["'public ImpersonatingExecutorService(ExecutorService base, Authentication authentication) {' - line 48", "'public ImpersonatingExecutorService(ExecutorService base, org.acegisecurity.Authentication authentication) {' - line 57", "'protected Runnable wrap(final Runnable r) {' - line 62", "'public void run() {' - line 65", "'public V call() throws Exception {' - line 77"]}, "SlaveToMasterCallable.java": {"METHODS": ["'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 13"]}, "BasicHeaderAuthenticator.java": {"METHODS": ["'public Authentication authenticate2(HttpServletRequest req, HttpServletResponse rsp, String username, String password) throws IOException, ServletException {' - line 40", "'public static ExtensionList<BasicHeaderAuthenticator> all() {' - line 59"]}, "QueueItemAuthenticatorDescriptor.java": {"METHODS": []}, "MasterToSlaveCallable.java": {"METHODS": ["'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 21"]}, "ImpersonatingScheduledExecutorService.java": {"METHODS": ["'public ImpersonatingScheduledExecutorService(ScheduledExecutorService base, Authentication authentication) {' - line 47", "'public ImpersonatingScheduledExecutorService(ScheduledExecutorService base, org.acegisecurity.Authentication authentication) {' - line 56", "'protected Runnable wrap(final Runnable r) {' - line 61", "'public void run() {' - line 64", "'public V call() throws Exception {' - line 76"]}, "AcegiSecurityExceptionFilter.java": {"METHODS": ["'public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 49", "'throw translate(x, IOException::new);' - line 53", "'throw translate(x, ServletException::new);' - line 55", "'throw translate(x, RuntimeException::new);' - line 57", "'return convertedCause(t.getCause());' - line 76", "'public void init(FilterConfig filterConfig) throws ServletException {}' - line 83", "'public void destroy() {}' - line 86"]}, "ClassFilterImpl.java": {"METHODS": ["'public static void register() {' - line 82", "'public static void unregister() {' - line 98", "'private static void mockOff() {' - line 102", "'public boolean isBlacklisted(Class _c) {' - line 126", "'private boolean isLocationWhitelisted(String _loc) {' - line 191", "'private static boolean isPluginManifest(Manifest mf) {' - line 290", "'public boolean isBlacklisted(String name) {' - line 297", "'private void notifyRejected(@CheckForNull Class<?> clazz, @CheckForNull String clazzName, String message) {' - line 330"]}, "ImpersonatingUserDetailsService.java": {"METHODS": ["'public ImpersonatingUserDetailsService(UserDetailsService base) {' - line 24", "'public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException, DataAccessException {' - line 29", "'return attemptToImpersonate(username, e);' - line 33", "'protected UserDetails attemptToImpersonate(String username, RuntimeException e) {' - line 37"]}, "CSRFAdministrativeMonitor.java": {"METHODS": ["'public String getDisplayName() {' - line 43", "'public boolean isActivated() {' - line 48", "'public boolean isSecurity() {' - line 53"]}, "UserSeedSecurityListener.java": {"METHODS": ["'protected void loggedIn(@NonNull String username) {' - line 45", "'protected void authenticated2(@NonNull UserDetails details) {' - line 50", "'private static void putUserSeedInSession(String username, boolean overwriteSessionSeed) {' - line 54"]}, "UserSeedProperty.java": {"METHODS": ["'private UserSeedProperty() {' - line 84", "'public void renewSeed() {' - line 92", "'private void renewSeedInternal() {' - line 98", "'public UserSeedProperty newInstance(User user) {' - line 118", "'public boolean isCurrentUser(@NonNull User target) {' - line 124", "'public boolean isEnabled() {' - line 152"]}, "UserSeedChangeListener.java": {"METHODS": ["'public static void fireUserSeedRenewed(@NonNull User user) {' - line 52", "'private static List<UserSeedChangeListener> all() {' - line 56"]}, "CallableDirectionChecker.java": {"METHODS": ["'public void check(RoleSensitive subject, @NonNull Collection<Role> expected) throws SecurityException {' - line 41", "'public void onChannelBuilding(ChannelBuilder builder, Object context) {' - line 64"]}, "AdminWhitelistRule.java": {"METHODS": ["'public AdminWhitelistRule() {' - line 20", "'public boolean getMasterKillSwitch() {' - line 23", "'public void setMasterKillSwitch(boolean state) {' - line 27"]}, "StaticRoutingDecisionProvider.java": {"METHODS": ["'public StaticRoutingDecisionProvider() {' - line 69", "'public static StaticRoutingDecisionProvider get() {' - line 76", "'private void resetMetaClassCache() {' - line 123", "'private File getConfigFile() {' - line 247", "'private void parseFileIntoList(List<String> lines, Set<String> whitelist, Set<String> blacklist) {' - line 251"]}, "TypedFilter.java": {"METHODS": ["'private boolean isClassAcceptable(Class<?> clazz) {' - line 29", "'private static boolean isStaplerRelevantCached(@NonNull Class<?> clazz) {' - line 51", "'public static boolean isStaplerRelevant(@NonNull Class<?> clazz) {' - line 62", "'return isSpecificClassStaplerRelevant(clazz) || isSuperTypesStaplerRelevant(clazz);' - line 63", "'private static boolean isSuperTypesStaplerRelevant(@NonNull Class<?> clazz) {' - line 66", "'private static boolean isSpecificClassStaplerRelevant(@NonNull Class<?> clazz) {' - line 79", "'private static boolean isRoutableMethod(@NonNull Method m) {' - line 104", "'public boolean keep(@NonNull FieldRef fieldRef) {' - line 133", "'public boolean keep(@NonNull Function function) {' - line 190"]}, "DoActionFilter.java": {"METHODS": ["'public boolean keep(@NonNull Function m) {' - line 52"]}, "RoutingDecisionProvider.java": {"METHODS": []}, "WebMethodConstants.java": {"METHODS": []}, "StaplerDispatchValidator.java": {"METHODS": ["'private static YesNoMaybe setStatus(@NonNull StaplerRequest req, @NonNull YesNoMaybe status) {' - line 97", "'private static YesNoMaybe computeStatusIfNull(@NonNull StaplerRequest req, @NonNull Supplier<YesNoMaybe> statusIfNull) {' - line 112", "'return setStatus(req, statusIfNull.get());' - line 117", "'public StaplerDispatchValidator() {' - line 123", "'public void allowDispatch(@NonNull StaplerRequest req, @NonNull StaplerResponse rsp) {' - line 165", "'public void requireDispatchAllowed(@NonNull StaplerRequest req, @NonNull StaplerResponse rsp) throws CancelRequestHandlingException {' - line 173", "'static StaplerDispatchValidator getInstance(@NonNull ServletContext context) {' - line 185", "'void loadWhitelist(@NonNull InputStream in) throws IOException {' - line 190", "'return computeIfAbsent(clazz.getName(), name -> create(clazz));' - line 225", "'return computeIfAbsent(className, this::create);' - line 229", "'return findParents(loader.loadClass(className));' - line 262", "'private void load() {' - line 270", "'private void loadWhitelist(@NonNull List<String> whitelistLines) {' - line 289", "'private Validator(@NonNull Supplier<Collection<Validator>> parentsSupplier) {' - line 320", "'private Validator(@NonNull Supplier<Collection<Validator>> parentsSupplier, @NonNull Collection<String> allowed, @NonNull Collection<String> denied) {' - line 324", "'private YesNoMaybe isViewValid(@NonNull String viewName) {' - line 342", "'private void allowView(@NonNull String viewName) {' - line 358", "'private void denyView(@NonNull String viewName) {' - line 362"]}, "StaplerFilteredActionListener.java": {"METHODS": ["'public boolean onDoActionTrigger(Function f, StaplerRequest req, StaplerResponse rsp, Object node) {' - line 51", "'public boolean onGetterTrigger(Function f, StaplerRequest req, StaplerResponse rsp, Object node, String expression) {' - line 60", "'public boolean onFieldTrigger(FieldRef f, StaplerRequest req, StaplerResponse staplerResponse, Object node, String expression) {' - line 69", "'public boolean onDispatchTrigger(StaplerRequest req, StaplerResponse rsp, Object node, String viewName) {' - line 78"]}, "TokenUuidAndPlainValue.java": {"METHODS": ["'public TokenUuidAndPlainValue(String tokenUuid, String plainValue) {' - line 47"]}, "LegacyApiTokenAdministrativeMonitor.java": {"METHODS": ["'public LegacyApiTokenAdministrativeMonitor() {' - line 57", "'public String getDisplayName() {' - line 62", "'public boolean isActivated() {' - line 67", "'public boolean isSecurity() {' - line 76", "'public HttpResponse doIndex() throws IOException {' - line 80", "'public List<User> getImpactedUserList() {' - line 86", "'public boolean hasFreshToken(@NonNull User user, ApiTokenProperty.TokenInfoAndStats legacyStats) {' - line 120", "'public boolean hasMoreRecentlyUsedToken(@NonNull User user, ApiTokenProperty.TokenInfoAndStats legacyStats) {' - line 144", "'public HttpResponse doRevokeAllSelected(@JsonBody RevokeAllSelectedModel content) throws IOException {' - line 170"]}, "ApiTokenStats.java": {"METHODS": ["'private Object readResolve() {' - line 70", "'private void init() {' - line 75", "'private void keepLastUpdatedUnique() {' - line 86", "'void setParent(@NonNull File parent) {' - line 111", "'private boolean areStatsDisabled() {' - line 115", "'return updateUsageForIdIfNeeded(tokenUuid);' - line 161", "'return findById(tokenUuid)' - line 186", "'private SingleTokenStats(String tokenUuid) {' - line 323", "'private Object readResolve() {' - line 327", "'private void notifyUse() {' - line 335", "'public String getTokenUuid() {' - line 340", "'public int getUseCounter() {' - line 345", "'public Date getLastUseDate() {' - line 350", "'public long getNumDaysUse() {' - line 359"]}, "ApiTokenStore.java": {"METHODS": ["'public ApiTokenStore() {' - line 74", "'private Object readResolve() {' - line 78", "'private void init() {' - line 83", "'private void addToken(HashedToken token) {' - line 95", "'private void deleteAllLegacyAndGenerateNewOne(@NonNull Secret newLegacyApiToken, boolean migrationFromExistingLegacy) {' - line 139", "'private void deleteAllLegacyTokens() {' - line 144", "'private void addLegacyToken(@NonNull Secret legacyToken, boolean migrationFromExistingLegacy) {' - line 149", "'return hashedBytes(secretValueInPlainText.getBytes(StandardCharsets.US_ASCII));' - line 236", "'return searchMatch(plainToken);' - line 261", "'private boolean isLegacyToken(@NonNull String token) {' - line 267", "'private HashValue(String version, String hash) {' - line 359", "'private HashedToken() {' - line 376", "'private Object readResolve() {' - line 380", "'private void init() {' - line 385", "'public void rename(String newName) {' - line 417", "'public boolean match(byte[] hashedBytes) {' - line 421", "'public String getName() {' - line 435", "'public Date getCreationDate() {' - line 440", "'public long getNumDaysCreation() {' - line 448", "'public String getUuid() {' - line 453", "'public boolean isLegacy() {' - line 457", "'public void setName(String name) {' - line 461"]}, "ApiTokenPropertyConfiguration.java": {"METHODS": ["'public static ApiTokenPropertyConfiguration get() {' - line 58", "'public boolean hasExistingConfigFile() {' - line 62", "'return getConfigFile().exists();' - line 63", "'public boolean isTokenGenerationOnCreationEnabled() {' - line 66", "'public void setTokenGenerationOnCreationEnabled(boolean tokenGenerationOnCreationEnabled) {' - line 70", "'public boolean isCreationOfLegacyTokenEnabled() {' - line 75", "'public void setCreationOfLegacyTokenEnabled(boolean creationOfLegacyTokenEnabled) {' - line 79", "'public boolean isUsageStatisticsEnabled() {' - line 84", "'public void setUsageStatisticsEnabled(boolean usageStatisticsEnabled) {' - line 88", "'public GlobalConfigurationCategory getCategory() {' - line 94"]}, "ApiTokenPropertyEnabledNewLegacyAdministrativeMonitor.java": {"METHODS": ["'public String getDisplayName() {' - line 45", "'public boolean isActivated() {' - line 50", "'public boolean isSecurity() {' - line 55", "'public HttpResponse doAct(@QueryParameter String no) throws IOException {' - line 60"]}, "ApiTokenPropertyDisabledDefaultAdministrativeMonitor.java": {"METHODS": ["'public String getDisplayName() {' - line 45", "'public boolean isActivated() {' - line 50", "'public boolean isSecurity() {' - line 55", "'public HttpResponse doAct(@QueryParameter String no) throws IOException {' - line 60"]}, "HsErrPidFile.java": {"METHODS": ["'public HsErrPidFile(HsErrPidList owner, File file) {' - line 21", "'public String getName() {' - line 26", "'public String getPath() {' - line 30", "'public long getLastModified() {' - line 34", "'public Date getLastModifiedDate() {' - line 38", "'public String getTimeSpanString() {' - line 42", "'public HttpResponse doDownload() throws IOException {' - line 46", "'public HttpResponse doDelete() throws IOException {' - line 52"]}, "HsErrPidList.java": {"METHODS": ["'public HsErrPidList() {' - line 49", "'public String getDisplayName() {' - line 86", "'public List<HsErrPidFile> getFiles() {' - line 94", "'private void scan(String pattern) {' - line 99", "'private void scanFile(File log) {' - line 124", "'private File getSecretKeyFile() {' - line 150", "'private boolean findHeader(BufferedReader r) throws IOException {' - line 154", "'public boolean isActivated() {' - line 166"]}, "WebSocketAgents.java": {"METHODS": ["'public String getUrlName() {' - line 68", "'public HttpResponse doIndex(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 72", "'protected void opened() {' - line 129", "'protected void binary(byte[] payload, int offset, int len) {' - line 144", "'protected void closed(int statusCode, String reason) {' - line 154", "'protected void error(Throwable cause) {' - line 163", "'protected void write(ByteBuffer headerAndData) throws IOException {' - line 174", "'public Capability getRemoteCapability() throws IOException {' - line 185", "'public void closeWrite() throws IOException {' - line 190", "'public void closeRead() throws IOException {' - line 196"]}, "CloudSet.java": {"METHODS": ["'public Descriptor<CloudSet> getDescriptor() {' - line 63", "'public Cloud getDynamic(String token) {' - line 67", "'public Object getTarget() {' - line 73", "'public String getIconFileName() {' - line 79", "'public String getDisplayName() {' - line 84", "'public String getUrlName() {' - line 89", "'public String getSearchUrl() {' - line 94", "'public String getCloudUrl(StaplerRequest request, Jenkins jenkins, Cloud cloud) {' - line 100", "'public Cloud getCloudByIndex(int index) {' - line 111", "'public boolean isCloudAvailable() {' - line 116", "'public String getCloudUpdateCenterCategoryLabel() {' - line 121", "'public Cloud getDynamic(String name, StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 132", "'public boolean hasClouds() {' - line 144", "'public String checkName(String name) throws Failure {' - line 152", "'public FormValidation doCheckName(@QueryParameter String value) {' - line 167", "'private void handleNewCloudPage(Descriptor<Cloud> descriptor, String name, StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, Descriptor.FormException {' - line 224", "'public AutoCompletionCandidates doAutoCompleteCopyNewItemFrom(@QueryParameter final String value) {' - line 257", "'public Object getTarget() {' - line 266"]}, "AgentComputerUtil.java": {"METHODS": ["'private AgentComputerUtil() {' - line 33", "'public static VirtualChannel getChannelToController() {' - line 46", "'public static VirtualChannel getChannelToMaster() {' - line 66", "'return getChannelToController();' - line 67"]}, "CloudsLink.java": {"METHODS": ["'public String getDisplayName() {' - line 38", "'public String getDescription() {' - line 43", "'public String getIconFileName() {' - line 48", "'public String getUrlName() {' - line 53", "'public Category getCategory() {' - line 59", "'public Permission getRequiredPermission() {' - line 65"]}, "SafeRestartCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 49", "'protected int run() throws Exception {' - line 54"]}, "StopBuildsCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 51", "'protected int run() throws Exception {' - line 56", "'private void stopJobBuilds(final Job job) {' - line 82"]}, "JavaVersionRecommendationAdminMonitor.java": {"METHODS": ["'public JavaVersionRecommendationAdminMonitor() {' - line 48", "'public boolean isActivated() {' - line 55", "'public String getDisplayName() {' - line 60", "'public Permission getRequiredPermission() {' - line 65", "'public HttpResponse doAct(@QueryParameter String no) throws IOException {' - line 74"]}, "OperatingSystemEndOfLifeAdminMonitor.java": {"METHODS": ["'public OperatingSystemEndOfLifeAdminMonitor(String id) throws IOException {' - line 83", "'public OperatingSystemEndOfLifeAdminMonitor() throws IOException {' - line 88", "'private void fillOperatingSystemList() throws IOException {' - line 92", "'void readOperatingSystemList(String initialOperatingSystemJson) throws IOException {' - line 105", "'private File getDataFile(@NonNull JSONObject system) {' - line 170", "'String readOperatingSystemName(File dataFile, @NonNull String patternStr) {' - line 182", "'public String getOperatingSystemName() {' - line 207", "'public String getEndOfLifeDate() {' - line 212", "'public boolean getAfterEndOfLifeDate() {' - line 216", "'public String getDocumentationUrl() {' - line 221", "'String readDocumentationUrl(File dataFile, @NonNull String patternStr) {' - line 227", "'return buildDocumentationUrl(operatingSystemName);' - line 232", "'private String buildDocumentationUrl(String operatingSystemName) {' - line 235", "'public HttpResponse doAct(@QueryParameter String no) throws IOException {' - line 256", "'public boolean isActivated() {' - line 269", "'public Permission getRequiredPermission() {' - line 283", "'public String getDisplayName() {' - line 288"]}, "FormElementPathPageDecorator.java": {"METHODS": ["'public boolean isEnabled() {' - line 14"]}, "WebSocketEcho.java": {"METHODS": ["'public String getUrlName() {' - line 41", "'public HttpResponse doIndex() {' - line 45", "'protected void text(String message) throws IOException {' - line 49", "'protected void binary(byte[] payload, int offset, int len) throws IOException {' - line 54"]}, "WebSockets.java": {"METHODS": ["'private static Provider findProvider() {' - line 49", "'public static HttpResponse upgrade(WebSocketSession session) {' - line 63", "'public void onWebSocketConnect(Object providerSession) {' - line 73", "'public Object getProviderSession() {' - line 80", "'public void onWebSocketClose(int statusCode, String reason) {' - line 85", "'public void onWebSocketError(Throwable cause) {' - line 91", "'public void onWebSocketBinary(byte[] payload, int offset, int length) {' - line 100", "'public void onWebSocketText(String message) {' - line 109", "'public static boolean isSupported() {' - line 125", "'private WebSockets() {}' - line 129"]}, "WebSocketSession.java": {"METHODS": ["'protected WebSocketSession() {}' - line 65", "'void startPings() {' - line 67", "'void stopPings() {' - line 81", "'protected void opened() {' - line 88", "'protected void closed(int statusCode, String reason) {' - line 91", "'protected void error(Throwable cause) {' - line 94", "'protected void binary(byte[] payload, int offset, int len) throws IOException {' - line 98", "'protected void text(String message) throws IOException {' - line 102"]}, "SimpleBuildWrapper.java": {"METHODS": ["'public boolean requiresWorkspace() {' - line 77", "'public void setUp(Context context, Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {' - line 98", "'public void setUp(Context context, Run<?, ?> build, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {' - line 123", "'public Context createContext() {' - line 138", "'public Context() {' - line 157", "'private Context(boolean wrapperRequiresWorkspace) {' - line 167", "'public void env(String key, String value) {' - line 176", "'public void setDisposer(@NonNull Disposer disposer) {' - line 195", "'public void tearDown(Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {' - line 245", "'public void tearDown(Run<?, ?> build, TaskListener listener) throws IOException, InterruptedException {' - line 268", "'protected boolean runPreCheckout() {' - line 284", "'@Override public void buildEnvVars(Map<String, String> env) {' - line 315", "'@Override public boolean tearDown(AbstractBuild build, BuildListener listener) throws IOException, InterruptedException {' - line 323", "'@Override public Launcher decorateLauncher(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException, Run.RunnerAbortedException {' - line 351", "'@Override public void makeBuildVariables(AbstractBuild build, Map<String, String> variables) {' - line 365", "'@Override public void makeSensitiveBuildVariables(AbstractBuild build, Set<String> sensitiveVariables) {' - line 374"]}, "SimpleBuildStep.java": {"METHODS": ["'public Class<Job> type() {' - line 189"]}, "EnvVarsFilterLocalRule.java": {"METHODS": []}, "EnvVarsFilterGlobalRule.java": {"METHODS": ["'boolean isApplicable(@CheckForNull Run<?, ?> run, @NonNull Object builder, @NonNull Launcher launcher);' - line 60"]}, "EnvVarsFilterableBuilder.java": {"METHODS": []}, "EnvVarsFilterRuleWrapper.java": {"METHODS": ["'public EnvVarsFilterRuleWrapper(@NonNull List<EnvVarsFilterRule> rules) {' - line 49", "'public void filter(@NonNull EnvVars envVars, @NonNull Launcher launcher, @NonNull TaskListener listener) throws EnvVarsFilterException {' - line 70"]}, "EnvVarsFilterGlobalConfiguration.java": {"METHODS": ["'public EnvVarsFilterGlobalConfiguration() {' - line 54", "'public static EnvVarsFilterGlobalConfiguration get() {' - line 58", "'public static ExtensionList<Descriptor<EnvVarsFilterGlobalRule>> getAllGlobalRules() {' - line 63", "'public static List<EnvVarsFilterGlobalRule> getAllActivatedGlobalRules() {' - line 67", "'return get().activatedGlobalRules;' - line 68", "'public GlobalConfigurationCategory getCategory() {' - line 72", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 77"]}, "EnvVarsFilterRule.java": {"METHODS": ["'void filter(@NonNull EnvVars envVars, @NonNull EnvVarsFilterRuleContext context) throws EnvVarsFilterException;' - line 45"]}, "EnvVarsFilterException.java": {"METHODS": ["'public EnvVarsFilterException(String message) {' - line 42", "'EnvVarsFilterException withRule(@NonNull EnvVarsFilterRule rule) {' - line 47", "'EnvVarsFilterRule getRule() {' - line 58"]}, "EnvVarsFilterRuleContext.java": {"METHODS": ["'public EnvVarsFilterRuleContext(@NonNull Launcher launcher, @NonNull TaskListener taskListener) {' - line 42", "'public Launcher getLauncher() {' - line 47", "'public TaskListener getTaskListener() {' - line 51"]}, "EnvVarsFilterLocalRuleDescriptor.java": {"METHODS": ["'public static List<EnvVarsFilterLocalRuleDescriptor> allApplicableFor(Class<? extends EnvVarsFilterableBuilder> builderClass) {' - line 46"]}, "RetainVariablesLocalRule.java": {"METHODS": ["'public RetainVariablesLocalRule() {' - line 77", "'public void setVariables(@NonNull String variables) {' - line 81", "'private static List<String> convertStringToList(@NonNull String variablesCommaSeparated) {' - line 85", "'public void setRetainCharacteristicEnvVars(boolean retainCharacteristicEnvVars) {' - line 105", "'public boolean isRetainCharacteristicEnvVars() {' - line 116", "'private List<String> variablesToRetain() {' - line 120", "'public void filter(@NonNull EnvVars envVars, @NonNull EnvVarsFilterRuleContext context) {' - line 129", "'public ProcessVariablesHandling getProcessVariablesHandling() {' - line 175", "'public void setProcessVariablesHandling(ProcessVariablesHandling processVariablesHandling) {' - line 180", "'public DescriptorImpl() {' - line 190", "'public FormValidation doCheckRetainCharacteristicEnvVars(@QueryParameter boolean value) {' - line 195", "'public boolean isApplicable(@NonNull Class<? extends EnvVarsFilterableBuilder> builderClass) {' - line 208", "'public String getDisplayName() {' - line 223"]}, "DetachedPluginsUtil.java": {"METHODS": ["'private DetachedPluginsUtil() {' - line 67", "'List<DetachedPlugin> getDetachedPlugins() {' - line 103", "'List<DetachedPlugin> getDetachedPlugins(@NonNull VersionNumber since) {' - line 115", "'return getDetachedPlugins().stream()' - line 116", "'public static boolean isDetachedPlugin(@NonNull String pluginId) {' - line 128", "'public static Stream<String> configLines(InputStream is) throws IOException {' - line 138", "'private DetachedPlugin(String shortName, String splitWhen, String requiredVersion) {' - line 169", "'public String getShortName() {' - line 180", "'public VersionNumber getSplitWhen() {' - line 189", "'public VersionNumber getRequiredVersion() {' - line 199", "'public String toString() {' - line 204"]}, "UrlValidator.java": {"METHODS": ["'public static UrlValidator getInstance() {' - line 187", "'public UrlValidator() {' - line 196", "'public UrlValidator(String[] schemes) {' - line 208", "'public UrlValidator(long options) {' - line 218", "'public UrlValidator(String[] schemes, long options) {' - line 229", "'public UrlValidator(RegexValidator authorityValidator, long options) {' - line 242", "'public UrlValidator(String[] schemes, RegexValidator authorityValidator, long options) {' - line 255", "'public UrlValidator(String[] schemes, RegexValidator authorityValidator, long options, DomainValidator domainValidator) {' - line 270", "'public boolean isValid(String value) {' - line 305", "'protected boolean isValidScheme(String scheme) {' - line 359", "'protected boolean isValidAuthority(String authority) {' - line 385", "'protected boolean isValidPath(String path) {' - line 447", "'protected boolean isValidQuery(String query) {' - line 481", "'protected boolean isValidFragment(String fragment) {' - line 494", "'return isOff(NO_FRAGMENTS);' - line 499", "'protected int countToken(String token, String target) {' - line 508", "'private boolean isOn(long flag) {' - line 529", "'private static boolean isOn(long flag, long options) {' - line 542", "'private boolean isOff(long flag) {' - line 554"]}, "DomainValidator.java": {"METHODS": ["'new RegexValidator(DOMAIN_NAME_REGEX);' - line 126", "'new RegexValidator(DOMAIN_LABEL_REGEX);' - line 132", "'private DomainValidator(boolean allowLocal) {' - line 197", "'private DomainValidator(boolean allowLocal,  List<Item> items) {' - line 212", "'public boolean isValid(String domain) {' - line 277", "'return isValidTld(groups[0]);' - line 291", "'public boolean isValidTld(String tld) {' - line 326", "'return isValidInfrastructureTld(tld)' - line 330", "'public boolean isValidInfrastructureTld(String iTld) {' - line 342", "'return arrayContains(INFRASTRUCTURE_TLDS, key);' - line 344", "'public boolean isValidGenericTld(String gTld) {' - line 354", "'public boolean isValidCountryCodeTld(String ccTld) {' - line 367", "'public boolean isValidLocalTld(String lTld) {' - line 380", "'public boolean isAllowLocal() {' - line 392", "'private String chompLeadingDot(String str) {' - line 396", "'public Item(ArrayType type, String[] values) {' - line 2092", "'static String unicodeToASCII(String input) {' - line 2253", "'private static boolean keepsTrailingDot() {' - line 2287", "'private static boolean isOnlyASCII(String input) {' - line 2299", "'private static boolean arrayContains(String[] sortedArray, String key) {' - line 2318"]}, "InetAddressValidator.java": {"METHODS": ["'public static InetAddressValidator getInstance() {' - line 73", "'public boolean isValid(String inetAddress) {' - line 82", "'return isValidInet4Address(inetAddress) || isValidInet6Address(inetAddress);' - line 83", "'public boolean isValidInet4Address(String inet4Address) {' - line 91", "'public boolean isValidInet6Address(String inet6Address) {' - line 133"]}, "RegexValidator.java": {"METHODS": ["'public RegexValidator(String regex) {' - line 89", "'public RegexValidator(String regex, boolean caseSensitive) {' - line 102", "'public RegexValidator(String[] regexs) {' - line 113", "'public RegexValidator(String[] regexs, boolean caseSensitive) {' - line 126", "'public boolean isValid(String value) {' - line 147", "'public String[] match(String value) {' - line 167", "'public String validate(String value) {' - line 194", "'public String toString() {' - line 223"]}, "SettingsProvider.java": {"METHODS": ["'public static SettingsProvider parseSettingsProvider(StaplerRequest req) throws Descriptor.FormException, ServletException {' - line 26", "'public static FilePath getSettingsFilePath(SettingsProvider settings, AbstractBuild<?, ?> build, TaskListener listener) {' - line 45", "'public static String getSettingsRemotePath(SettingsProvider settings, AbstractBuild<?, ?> build, TaskListener listener) {' - line 64"]}, "SettingsProviderDescriptor.java": {"METHODS": []}, "GlobalSettingsProviderDescriptor.java": {"METHODS": []}, "GlobalSettingsProvider.java": {"METHODS": ["'public static GlobalSettingsProvider parseSettingsProvider(StaplerRequest req) throws Descriptor.FormException, ServletException {' - line 28", "'public static FilePath getSettingsFilePath(GlobalSettingsProvider settings, AbstractBuild<?, ?> build, TaskListener listener) {' - line 47", "'public static String getSettingsRemotePath(GlobalSettingsProvider provider, AbstractBuild<?, ?> build, TaskListener listener) {' - line 66"]}, "FilePathSettingsProvider.java": {"METHODS": ["'public FilePathSettingsProvider(String path) {' - line 20", "'public String getPath() {' - line 24", "'public FilePath supplySettings(AbstractBuild<?, ?> build, TaskListener listener) {' - line 29", "'public String getDisplayName() {' - line 46"]}, "DefaultSettingsProvider.java": {"METHODS": ["'public DefaultSettingsProvider() {' - line 18", "'public FilePath supplySettings(AbstractBuild<?, ?> project, TaskListener listener) {' - line 22", "'public String getDisplayName() {' - line 31"]}, "DefaultGlobalSettingsProvider.java": {"METHODS": ["'public DefaultGlobalSettingsProvider() {' - line 18", "'public FilePath supplySettings(AbstractBuild<?, ?> project, TaskListener listener) {' - line 22", "'public String getDisplayName() {' - line 31"]}, "GlobalMavenConfig.java": {"METHODS": ["'public void setGlobalSettingsProvider(GlobalSettingsProvider globalSettingsProvider) {' - line 21", "'public void setSettingsProvider(SettingsProvider settingsProvider) {' - line 26", "'public GlobalSettingsProvider getGlobalSettingsProvider() {' - line 31", "'public SettingsProvider getSettingsProvider() {' - line 35"]}, "SettingsPathHelper.java": {"METHODS": ["'static FilePath getSettings(AbstractBuild<?, ?> build, TaskListener listener, String path) throws IOException, InterruptedException {' - line 15"]}, "FilePathGlobalSettingsProvider.java": {"METHODS": ["'public FilePathGlobalSettingsProvider(String path) {' - line 19", "'public String getPath() {' - line 23", "'public FilePath supplySettings(AbstractBuild<?, ?> build, TaskListener listener) {' - line 28", "'public String getDisplayName() {' - line 46"]}, "InstallState.java": {"METHODS": ["'new InstallState(\"UNKNOWN\", false) {},' - line 66", "'new InstallState(\"INITIAL_SETUP_COMPLETED\", false) {},' - line 67", "'new InstallState(\"CREATE_ADMIN_USER\", false) {},' - line 68", "'new InstallState(\"INITIAL_SECURITY_SETUP\", false) {},' - line 69", "'new InstallState(\"RESTART\", false) {},' - line 70", "'new InstallState(\"DOWNGRADE\", false) {},' - line 71", "'public void initializeState() {' - line 86", "'public void initializeState() {' - line 109", "'public void initializeState() {' - line 132", "'public void initializeState() {' - line 151", "'public void initializeState() {' - line 179", "'public void initializeState() {' - line 208", "'public void initializeState() {' - line 226", "'private void applyForcedChanges() {' - line 238", "'private static void reloadUpdateSiteData() {' - line 252", "'public void initializeState() {' - line 268", "'public InstallState(@NonNull String name, boolean isSetupComplete) {' - line 296", "'public void initializeState() {' - line 304", "'protected Object readResolve() {' - line 315", "'public boolean isSetupComplete() {' - line 335", "'public String name() {' - line 339", "'public int hashCode() {' - line 344", "'public boolean equals(Object obj) {' - line 349", "'public String toString() {' - line 357", "'public static InstallState valueOf(@NonNull String name) {' - line 365", "'static ExtensionList<InstallState> all() {' - line 377"]}, "InstallUtil.java": {"METHODS": ["'public T get() {' - line 87", "'public static void proceedToNextStateFrom(InstallState prior) {' - line 95", "'/*package*/ static InstallState getNextInstallState(InstallState current) {' - line 105", "'return getDefaultInstallState();' - line 115", "'private static InstallState getDefaultInstallState() {' - line 135", "'public static void saveLastExecVersion() {' - line 196", "'return getCurrentExecVersion();' - line 223", "'static void saveLastExecVersion(@NonNull String version) {' - line 253", "'static File getConfigFile() {' - line 262", "'static File getLastExecVersionFile() {' - line 266", "'static File getInstallingPluginsFile() {' - line 270", "'private static String getCurrentExecVersion() {' - line 274", "'public static void clearInstallStatus() {' - line 331"]}, "InstallStateFilter.java": {"METHODS": ["'public static List<InstallStateFilter> all() {' - line 20"]}, "SetupWizard.java": {"METHODS": ["'public SetupWizard() {' - line 89", "'public String getDisplayName() {' - line 135", "'private void createInitialApiToken(User user) throws IOException, InterruptedException {' - line 215", "'private void setUpFilter() {' - line 270", "'private void tearDownFilter() {' - line 280", "'public boolean isUsingSecurityToken() {' - line 294", "'public HttpResponse doCreateAdminUser(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 335", "'public HttpResponse doConfigureInstance(StaplerRequest req, @QueryParameter String rootUrl) {' - line 419", "'private void checkRootUrl(Map<String, String> errors, @CheckForNull String rootUrl) {' - line 447", "'private void useRootUrl(Map<String, String> errors, @CheckForNull String rootUrl) {' - line 457", "'/*package*/ static File getUpdateStateFile() {' - line 471", "'public VersionNumber getCurrentLevel() {' - line 482", "'public HttpResponse doPlatformPluginList() throws IOException {' - line 500", "'public HttpResponse doRestartStatus() throws IOException {' - line 523", "'public JSONArray getPlatformPluginUpdates() {' - line 537", "'return getPlatformPluginsForUpdate(version, Jenkins.getVersion());' - line 542", "'public FilePath getInitialAdminPasswordFile() {' - line 686", "'public FilePath getInitialAdminApiTokenFile() {' - line 695", "'public HttpResponse doCompleteInstall() throws IOException, ServletException {' - line 703", "'public List<InstallState> getInstallStates() {' - line 718", "'public InstallState getInstallState(String name) {' - line 725", "'public void onInstallStateUpdate(InstallState state) {' - line 737", "'public boolean hasSetupWizardFilter() {' - line 749", "'public void init(FilterConfig cfg) throws ServletException {' - line 758", "'public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 763", "'public String getRequestURI() {' - line 775", "'return getContextPath() + \"/setupWizard/\";' - line 776", "'public void destroy() {' - line 787", "'private void checkFilter() {' - line 794"]}, "FingerprintStorage.java": {"METHODS": ["'public static FingerprintStorage get() {' - line 52", "'public static FingerprintStorage getFileFingerprintStorage() {' - line 61", "'public boolean cleanFingerprint(@NonNull Fingerprint fingerprint, TaskListener taskListener) {' - line 114", "'new Date(deletionBlockerFacet.getTimestamp()) + \" blocked deletion of \" +' - line 124", "'protected Fingerprint getFingerprint(Fingerprint fp) throws IOException {' - line 138", "'@Override public FingerprintStorageDescriptor getDescriptor() {' - line 145"]}, "FileFingerprintStorage.java": {"METHODS": ["'public FileFingerprintStorage() {}' - line 76", "'return load(getFingerprintFile(id));' - line 86", "'public void save(Fingerprint fp) throws IOException {' - line 143", "'public static void save(Fingerprint fp, File file) throws IOException {' - line 157", "'public void delete(String id) throws IOException {' - line 214", "'public boolean isReady() {' - line 245", "'public void iterateAndCleanupFingerprints(TaskListener taskListener) {' - line 253", "'private boolean cleanFingerprint(File fingerprintFile, TaskListener listener) {' - line 276", "'private static boolean isAllowed(String id) {' - line 314", "'private static String messageOfParseException(Throwable throwable) {' - line 323", "'return messageOfParseException(causeOfThrowable);' - line 329", "'private void deleteIfEmpty(File dir) {' - line 338", "'protected Fingerprint loadFingerprint(File fingerprintFile) throws IOException {' - line 354", "'protected Fingerprint getFingerprint(Fingerprint fp) throws IOException {' - line 359", "'protected File getRootDir() {' - line 363", "'public String getDisplayName() {' - line 372"]}, "FingerprintStorageDescriptor.java": {"METHODS": []}, "GlobalFingerprintConfiguration.java": {"METHODS": ["'public GlobalFingerprintConfiguration() {' - line 47", "'public static GlobalFingerprintConfiguration get() {' - line 51", "'public FingerprintStorage getStorage() {' - line 55", "'public void setStorage(FingerprintStorage fingerprintStorage) {' - line 60", "'public boolean isFingerprintCleanupDisabled() {' - line 66", "'public void setFingerprintCleanupDisabled(boolean fingerprintCleanupDisabled) {' - line 71", "'public boolean configure(StaplerRequest req, JSONObject json) {' - line 76"]}, "FullHeader.java": {"METHODS": ["'public boolean isCompatible() {' - line 12"]}, "Header.java": {"METHODS": ["'public boolean isAvailable() {' - line 34", "'return isCompatible() && isEnabled();' - line 35", "'public static Header get() {' - line 51"]}, "JenkinsHeader.java": {"METHODS": ["'public boolean isEnabled() {' - line 13"]}, "PartialHeader.java": {"METHODS": ["'public static void incompatibleHeaders() {' - line 41"]}, "IconSpec.java": {"METHODS": ["'String getIconClassName();' - line 44"]}, "IconType.java": {"METHODS": ["'public String toQualifiedUrl(String url, String resURL) {' - line 45"]}, "BuildStatusIcon.java": {"METHODS": ["'public BuildStatusIcon(String classSpec, String url, String style, boolean inProgress) {' - line 36", "'public BuildStatusIcon(String classSpec, String url, String style) {' - line 41", "'public boolean isSvgSprite() {' - line 46", "'public boolean isBuildStatus() {' - line 50", "'public boolean isInProgress() {' - line 54"]}, "IconSet.java": {"METHODS": ["'public IconSet() {' - line 57", "'public static void initPageVariables(JellyContext context) {' - line 64", "'public static String getSymbol(String name, String title, String tooltip, String htmlTooltip, String classes, String pluginName, String id) {' - line 71", "'public IconSet addIcon(Icon icon) {' - line 84", "'public Icon getIconByNormalizedCSSSelector(Object cssSelector) {' - line 102", "'return getIconByNormalizedCSSSelector(cssSelector.toString());' - line 106", "'private Icon getIconByNormalizedCSSSelector(String cssSelector) {' - line 114", "'public Icon getIconByClassSpec(Object iconClassSpec) {' - line 130", "'return getIconByClassSpec(iconClassSpec.toString());' - line 134", "'private Icon getIconByClassSpec(String iconClassSpec) {' - line 142", "'public Icon getIconByUrl(Object url) {' - line 178", "'return getIconByUrl(url.toString());' - line 182", "'private Icon getIconByUrl(String url) {' - line 190", "'public static String toNormalizedIconNameClass(Object string) {' - line 210", "'return toNormalizedIconNameClass(string.toString());' - line 214", "'private static String toNormalizedIconNameClass(String string) {' - line 223", "'public static String toNormalizedIconSizeClass(Object string) {' - line 238", "'return toNormalizedIconSizeClass(string.toString());' - line 242", "'private static String toNormalizedIconSizeClass(String string) {' - line 252", "'public static String toNormalizedIconUrl(Object url) {' - line 266", "'return toNormalizedIconUrl(url.toString());' - line 270", "'private static String toNormalizedIconUrl(String url) {' - line 279", "'private static void initializeSVGs() {' - line 416", "'public static String tryTranslateTangoIconToSymbol(@CheckForNull String tangoIcon) {' - line 544", "'return tryTranslateTangoIconToSymbol(tangoIcon, () -> null);' - line 545", "'public static String tryTranslateTangoIconToSymbol(@CheckForNull String tangoIcon, @NonNull Supplier<String> defaultValueSupplier) {' - line 557", "'private static String cleanName(String tangoIcon) {' - line 561"]}, "WeatherIcon.java": {"METHODS": ["'public WeatherIcon(String classSpec, String style, Status status) {' - line 48"]}, "Icon.java": {"METHODS": ["'public Icon(String classSpec, String style) {' - line 73", "'public Icon(String classSpec, String url, String style) {' - line 84", "'public Icon(String classSpec, String url, String style, IconType iconType) {' - line 103", "'public Icon(String classSpec, String url, String style, IconFormat iconFormat) {' - line 116", "'public Icon(String classSpec, String url, String style, IconType iconType, IconFormat iconFormat) {' - line 128", "'public String getClassSpec() {' - line 141", "'public boolean isSvgSprite() {' - line 149", "'public String getNormalizedSelector() {' - line 159", "'public String getUrl() {' - line 168", "'public String getQualifiedUrl(JellyContext context) {' - line 180", "'public String getQualifiedUrl(String resUrl) {' - line 196", "'public String getStyle() {' - line 209", "'public static String toNormalizedIconNameClass(String string) {' - line 219", "'public static String toNormalizedIconName(String string) {' - line 236", "'public static String toNormalizedIconSizeClass(String string) {' - line 253", "'public static String toNormalizedCSSSelector(String classNames) {' - line 271", "'public static String toNormalizedIconUrl(String url) {' - line 309"]}, "IconFormat.java": {"METHODS": []}, "SymbolRequest.java": {"METHODS": ["'public String getName() {' - line 55", "'public String getTitle() {' - line 60", "'public String getTooltip() {' - line 65", "'public String getHtmlTooltip() {' - line 70", "'public String getClasses() {' - line 75", "'public String getPluginName() {' - line 80", "'public String getId() {' - line 85", "'public String getName() {' - line 119", "'public Builder withName(@NonNull String name) {' - line 123", "'public String getTitle() {' - line 129", "'public Builder withTitle(@CheckForNull String title) {' - line 133", "'public String getTooltip() {' - line 139", "'public Builder withTooltip(@CheckForNull String tooltip) {' - line 143", "'public String getHtmlTooltip() {' - line 149", "'public Builder withHtmlTooltip(@CheckForNull String htmlTooltip) {' - line 153", "'public String getClasses() {' - line 159", "'public Builder withClasses(@CheckForNull String classes) {' - line 163", "'public String getPluginName() {' - line 169", "'public Builder withPluginName(@CheckForNull String pluginName) {' - line 173", "'public String getId() {' - line 179", "'public Builder withId(@CheckForNull String id) {' - line 183", "'public String getRaw() {' - line 189", "'public Builder withRaw(@CheckForNull String raw) {' - line 193", "'public SymbolRequest build() {' - line 199", "'private void parseRaw(@NonNull String raw) {' - line 210"]}, "Symbol.java": {"METHODS": ["'private Symbol() {}' - line 35", "'public static String get(@NonNull SymbolRequest request) {' - line 43", "'private static String loadSymbol(String namespace, String name) {' - line 77", "'private static ClassLoader getClassLoader(@NonNull String pluginName) {' - line 100"]}, "DataRetrievalFailureException.java": {"METHODS": ["'public DataRetrievalFailureException(String msg) {' - line 32", "'public DataRetrievalFailureException(String msg, Throwable cause) {' - line 36"]}, "DataAccessException.java": {"METHODS": ["'public DataAccessException(String msg) {' - line 35", "'public DataAccessException(String msg, Throwable cause) {' - line 39", "'public UserMayOrMayNotExistException2 toSpring() {' - line 43"]}, "DataAccessResourceFailureException.java": {"METHODS": ["'public DataAccessResourceFailureException(String msg) {' - line 32", "'public DataAccessResourceFailureException(String msg, Throwable cause) {' - line 36"]}, "AuthenticationException.java": {"METHODS": ["'protected AuthenticationException(String msg) {' - line 40", "'protected AuthenticationException(String msg, Object extraInformation) {' - line 44", "'protected AuthenticationException(String msg, Throwable t) {' - line 49", "'public Authentication getAuthentication() {' - line 53", "'public void setAuthentication(Authentication authentication) {' - line 57", "'public Object getExtraInformation() {' - line 61", "'public void clearExtraInformation() {' - line 65", "'public static RuntimeException fromSpring(org.springframework.security.core.AuthenticationException x) {' - line 77"]}, "AccountExpiredException.java": {"METHODS": ["'public AccountExpiredException(String msg) {' - line 32", "'public AccountExpiredException(String msg, Throwable t) {' - line 36", "'public AccountExpiredException(String msg, Object extraInformation) {' - line 40", "'public static AccountExpiredException fromSpring(org.springframework.security.authentication.AccountExpiredException x) {' - line 49"]}, "AccessDeniedException.java": {"METHODS": ["'public AccessDeniedException(String msg) {' - line 32", "'public AccessDeniedException(String msg, Throwable t) {' - line 36"]}, "InsufficientAuthenticationException.java": {"METHODS": ["'public InsufficientAuthenticationException(String msg) {' - line 32", "'public InsufficientAuthenticationException(String msg, Throwable t) {' - line 36", "'public static InsufficientAuthenticationException fromSpring(org.springframework.security.authentication.InsufficientAuthenticationException x) {' - line 45"]}, "GrantedAuthorityImpl.java": {"METHODS": ["'public GrantedAuthorityImpl(String role) {' - line 39", "'public String getAuthority() {' - line 44", "'public String toString() {' - line 49", "'public boolean equals(Object o) {' - line 54", "'public int hashCode() {' - line 59"]}, "DisabledException.java": {"METHODS": ["'public DisabledException(String msg) {' - line 32", "'public DisabledException(String msg, Throwable t) {' - line 36", "'public DisabledException(String msg, Object extraInformation) {' - line 40", "'public static DisabledException fromSpring(org.springframework.security.authentication.DisabledException x) {' - line 49"]}, "AuthenticationServiceException.java": {"METHODS": ["'public AuthenticationServiceException(String msg) {' - line 32", "'public AuthenticationServiceException(String msg, Throwable t) {' - line 36", "'public static AuthenticationServiceException fromSpring(org.springframework.security.authentication.AuthenticationServiceException x) {' - line 45"]}, "AuthenticationManager.java": {"METHODS": ["'Authentication authenticate(Authentication authentication) throws AuthenticationException;' - line 32", "'static AuthenticationManager fromSpring(org.springframework.security.authentication.AuthenticationManager am) {' - line 34", "'return authenticate(Authentication.fromSpring(authentication)).toSpring();' - line 47"]}, "BadCredentialsException.java": {"METHODS": ["'public BadCredentialsException(String msg) {' - line 34", "'public BadCredentialsException(String msg, Object extraInformation) {' - line 38", "'public BadCredentialsException(String msg, Throwable t) {' - line 42", "'public static BadCredentialsException fromSpring(org.springframework.security.core.AuthenticationException x) {' - line 51"]}, "AcegiSecurityException.java": {"METHODS": ["'protected AcegiSecurityException(String msg) {' - line 34", "'protected AcegiSecurityException(String msg, Throwable cause) {' - line 38", "'public RuntimeException toSpring() {' - line 42"]}, "Authentication.java": {"METHODS": ["'GrantedAuthority[] getAuthorities();' - line 41", "'Object getCredentials();' - line 43", "'Object getDetails();' - line 45", "'Object getPrincipal();' - line 47", "'boolean isAuthenticated();' - line 49", "'void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException;' - line 51", "'public GrantedAuthority[] getAuthorities() {' - line 66", "'public Object getCredentials() {' - line 71", "'public Object getDetails() {' - line 76", "'public Object getPrincipal() {' - line 82", "'public boolean isAuthenticated() {' - line 87", "'public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {' - line 92", "'public String getName() {' - line 97", "'public boolean equals(Object o) {' - line 102", "'public int hashCode() {' - line 107", "'return getName().hashCode();' - line 108", "'public String toString() {' - line 112"]}, "AuthenticationSpringImpl.java": {"METHODS": ["'public Object getCredentials() {' - line 44", "'public Object getDetails() {' - line 49", "'public Object getPrincipal() {' - line 54", "'public boolean isAuthenticated() {' - line 59", "'public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {' - line 64", "'public String getName() {' - line 69", "'public boolean equals(Object o) {' - line 74", "'public int hashCode() {' - line 79", "'return getName().hashCode();' - line 80", "'public String toString() {' - line 84"]}, "LockedException.java": {"METHODS": ["'public LockedException(String msg) {' - line 32", "'public LockedException(String msg, Throwable t) {' - line 36", "'public LockedException(String msg, Object extraInformation) {' - line 40", "'public static LockedException fromSpring(org.springframework.security.authentication.LockedException x) {' - line 49"]}, "CredentialsExpiredException.java": {"METHODS": ["'public CredentialsExpiredException(String msg) {' - line 32", "'public CredentialsExpiredException(String msg, Throwable t) {' - line 36", "'public CredentialsExpiredException(String msg, Object extraInformation) {' - line 40", "'public static CredentialsExpiredException fromSpring(org.springframework.security.authentication.CredentialsExpiredException x) {' - line 49"]}, "GrantedAuthority.java": {"METHODS": ["'String getAuthority();' - line 40", "'String toString();' - line 43", "'boolean equals(Object obj);' - line 46", "'int hashCode();' - line 49"]}, "FieldUtils.java": {"METHODS": ["'public static Object getProtectedFieldValue(String protectedField, Object object) {' - line 34", "'public static void setProtectedFieldValue(String protectedField, Object object, Object newValue) {' - line 42", "'private FieldUtils() {}' - line 58"]}, "SecurityContextImpl.java": {"METHODS": ["'public Authentication getAuthentication() {' - line 37", "'public void setAuthentication(Authentication authentication) {' - line 42"]}, "SecurityContext.java": {"METHODS": ["'Authentication getAuthentication();' - line 37", "'void setAuthentication(Authentication a);' - line 39", "'public Authentication getAuthentication() {' - line 44", "'public void setAuthentication(Authentication a) {' - line 50", "'public void setAuthentication(org.springframework.security.core.Authentication authentication) {' - line 65"]}, "SecurityContextHolder.java": {"METHODS": ["'public static SecurityContext getContext() {' - line 35", "'public static void setContext(SecurityContext c) {' - line 39", "'public static void clearContext() {' - line 43"]}, "UserDetailsSpringImpl.java": {"METHODS": ["'public String getPassword() {' - line 44", "'public String getUsername() {' - line 49", "'public boolean isAccountNonExpired() {' - line 54", "'public boolean isAccountNonLocked() {' - line 59", "'public boolean isCredentialsNonExpired() {' - line 64", "'public boolean isEnabled() {' - line 69"]}, "UsernameNotFoundException.java": {"METHODS": ["'public UsernameNotFoundException(String msg) {' - line 36", "'public UsernameNotFoundException(String msg, Object extraInformation) {' - line 40", "'public UsernameNotFoundException(String msg, Throwable t) {' - line 44", "'public static UsernameNotFoundException fromSpring(org.springframework.security.core.userdetails.UsernameNotFoundException x) {' - line 53"]}, "User.java": {"METHODS": ["'private User(String id, String fullName) {' - line 187", "'private void load(String userId) {' - line 193", "'private void setUserToProperties() {' - line 201", "'private void allocateDefaultPropertyInstancesAsNeeded() {' - line 207", "'private void removeNullsThatFailedToLoad() {' - line 217", "'private void loadFromUserConfigFile(String userId) {' - line 221", "'private void clearExistingProperties() {' - line 233", "'private XmlFile getConfigFile() {' - line 237", "'public static IdStrategy idStrategy() {' - line 250", "'public int compareTo(@NonNull User that) {' - line 260", "'return idStrategy().compare(this.id, that.id);' - line 261", "'public String getId() {' - line 265", "'public void setFullName(String name) {' - line 299", "'public void setDescription(String description) {' - line 314", "'public List<UserProperty> getAllProperties() {' - line 343", "'private LegitimateButUnknownUserDetails(String username) throws IllegalArgumentException {' - line 439", "'public void doSubmitDescription(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 463", "'return getById(UNKNOWN_USERNAME, true);' - line 478", "'return get(idOrFullName, create, Collections.emptyMap());' - line 494", "'return getOrCreateById(id, idOrFullName, create);' - line 524", "'return getOrCreateByIdOrFullName(idOrFullName);' - line 567", "'return get(idOrFullName, true, Collections.emptyMap());' - line 586", "'return get2(Jenkins.getAuthentication2());' - line 597", "'return getById(a.getName(), true);' - line 613", "'return get2(a != null ? a.toSpring() : null);' - line 622", "'return getOrCreateById(id, id, create);' - line 637", "'public static void reload() throws IOException {' - line 654", "'public static void rekey() {' - line 664", "'return getFullName();' - line 683", "'private boolean relatedTo(@NonNull Run<?, ?> b) {' - line 689", "'public String toString() {' - line 727", "'public static void clear() {' - line 737", "'private static File getConfigFileFor(String id) {' - line 745", "'private static File getUserFolderFor(String id) {' - line 749", "'return getExistingUserFolder();' - line 763", "'static File getRootDir() {' - line 773", "'public static boolean isIdOrFullnameAllowed(@CheckForNull String id) {' - line 790", "'private File constructUserConfigFile() throws IOException {' - line 821", "'private File putUserFolderIfAbsent() throws IOException {' - line 825", "'public void delete() throws IOException {' - line 834", "'private void deleteExistingUserFolder(File existingUserFolder) throws IOException {' - line 843", "'public Api getApi() {' - line 852", "'public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, FormException {' - line 860", "'public void doDoDelete(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 902", "'public void doRssAll(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 914", "'public void doRssFailed(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 918", "'public void doRssLatest(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 922", "'public ACL getACL() {' - line 940", "'public boolean canDelete() {' - line 950", "'return hasPermission(Jenkins.ADMINISTER) && !strategy.equals(id, Jenkins.getAuthentication2().getName())' - line 952", "'public Object getDynamic(String token) {' - line 989", "'public List<Action> getPropertyActions() {' - line 1006", "'public List<Action> getTransientActions() {' - line 1021", "'public ContextMenu doContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {' - line 1030", "'public Object getTarget() {' - line 1036", "'/*package*/ static Set<String> getIllegalPersistedUsernames() {' - line 1052", "'private Object writeReplace() {' - line 1056", "'private Object readResolve() {' - line 1067", "'return getById(id, false);' - line 1069", "'public static void scanAll() {' - line 1083", "'private static AllUsers getInstance() {' - line 1096", "'private static void reload() {' - line 1100", "'private static void clear() {' - line 1106", "'private static void remove(String id) {' - line 1110", "'private static User get(String id) {' - line 1114", "'return getInstance().byName.get(idStrategy().keyFor(id));' - line 1115", "'private static void put(String id, User user) {' - line 1118", "'private static Collection<User> values() {' - line 1122", "'return getInstance().byName.values();' - line 1123", "'public int compareTo(@NonNull CanonicalIdResolver o) {' - line 1147", "'public int getPriority() {' - line 1167", "'public static List<CanonicalIdResolver> all() {' - line 1179", "'public static String resolve(@NonNull String idOrFullName, @NonNull Map<String, ?> context) {' - line 1194", "'public String resolveCanonicalId(String idOrFullName, Map<String, ?> context) {' - line 1218", "'public int getPriority() {' - line 1226", "'public String resolveCanonicalId(String idOrFullName, Map<String, ?> context) {' - line 1246", "'public int getPriority() {' - line 1270"]}, "UserDetails.java": {"METHODS": ["'GrantedAuthority[] getAuthorities();' - line 38", "'String getPassword();' - line 40", "'String getUsername();' - line 42", "'boolean isAccountNonExpired();' - line 44", "'boolean isAccountNonLocked();' - line 46", "'boolean isCredentialsNonExpired();' - line 48", "'boolean isEnabled();' - line 50", "'public GrantedAuthority[] getAuthorities() {' - line 62", "'public String getPassword() {' - line 67", "'public String getUsername() {' - line 72", "'public boolean isAccountNonExpired() {' - line 77", "'public boolean isAccountNonLocked() {' - line 82", "'public boolean isCredentialsNonExpired() {' - line 87", "'public boolean isEnabled() {' - line 92", "'return fromSpring((org.springframework.security.core.userdetails.UserDetails) springPrincipal);' - line 108"]}, "UserDetailsService.java": {"METHODS": ["'UserDetails loadUserByUsername(String username) throws UsernameNotFoundException, DataAccessException;' - line 36", "'static UserDetailsService fromSpring(org.springframework.security.core.userdetails.UserDetailsService uds) {' - line 38", "'return loadUserByUsername(username).toSpring();' - line 51"]}, "UsernamePasswordAuthenticationToken.java": {"METHODS": ["'public UsernamePasswordAuthenticationToken(org.springframework.security.authentication.UsernamePasswordAuthenticationToken delegate) {' - line 42", "'public UsernamePasswordAuthenticationToken(Object principal, Object credentials) {' - line 46", "'public UsernamePasswordAuthenticationToken(Object principal, Object credentials, GrantedAuthority[] authorities) {' - line 50", "'public GrantedAuthority[] getAuthorities() {' - line 55", "'public Object getCredentials() {' - line 60", "'public Object getDetails() {' - line 65", "'public void setDetails(Object details) {' - line 69", "'public Object getPrincipal() {' - line 74", "'public boolean isAuthenticated() {' - line 79", "'public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {' - line 84", "'public String getName() {' - line 89", "'public boolean equals(Object o) {' - line 94", "'public int hashCode() {' - line 99", "'return getName().hashCode();' - line 100", "'public String toString() {' - line 104"]}, "AbstractAuthenticationToken.java": {"METHODS": ["'protected AbstractAuthenticationToken() {' - line 42", "'protected AbstractAuthenticationToken(GrantedAuthority[] authorities) {' - line 46", "'public String getName() {' - line 51", "'public GrantedAuthority[] getAuthorities() {' - line 57", "'public Object getDetails() {' - line 62", "'public void setDetails(Object details) {' - line 66", "'public boolean isAuthenticated() {' - line 71", "'public void setAuthenticated(boolean authenticated) {' - line 76", "'public String toString() {' - line 81", "'public boolean equals(Object o) {' - line 86", "'public int hashCode() {' - line 96", "'return getName().hashCode();' - line 97"]}, "AuthenticationProvider.java": {"METHODS": ["'Authentication authenticate(Authentication authentication) throws AuthenticationException;' - line 35", "'boolean supports(Class authentication);' - line 37"]}, "ProviderNotFoundException.java": {"METHODS": ["'public ProviderNotFoundException(String msg) {' - line 34", "'public ProviderNotFoundException(String msg, Throwable t) {' - line 38", "'public static ProviderNotFoundException fromSpring(org.springframework.security.authentication.ProviderNotFoundException x) {' - line 47"]}, "AbstractUserDetailsAuthenticationProvider.java": {"METHODS": ["'public Authentication authenticate(Authentication authentication) throws AuthenticationException {' - line 71", "'public boolean supports(Class authentication) {' - line 80"]}, "AnonymousAuthenticationToken.java": {"METHODS": ["'public AnonymousAuthenticationToken(org.springframework.security.authentication.AnonymousAuthenticationToken delegate) {' - line 43", "'public AnonymousAuthenticationToken(String key, Object principal, GrantedAuthority[] authorities) {' - line 47", "'public GrantedAuthority[] getAuthorities() {' - line 52", "'public Object getCredentials() {' - line 57", "'public Object getDetails() {' - line 62", "'public void setDetails(Object details) {' - line 66", "'public Object getPrincipal() {' - line 71", "'public boolean isAuthenticated() {' - line 76", "'public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {' - line 81", "'public String getName() {' - line 86", "'public boolean equals(Object o) {' - line 91", "'public int hashCode() {' - line 96", "'return getName().hashCode();' - line 97", "'public String toString() {' - line 101"]}, "PrincipalSid.java": {"METHODS": ["'public PrincipalSid(String principal) {' - line 34", "'public PrincipalSid(Authentication a) {' - line 41", "'public PrincipalSid(org.acegisecurity.Authentication a) {' - line 50", "'public String getPrincipal() {' - line 54", "'public boolean equals(Object o) {' - line 59", "'public int hashCode() {' - line 64", "'public String toString() {' - line 69"]}, "Sid.java": {"METHODS": ["'boolean equals(Object obj);' - line 30", "'int hashCode();' - line 33"]}, "GrantedAuthoritySid.java": {"METHODS": ["'public GrantedAuthoritySid(String grantedAuthority) {' - line 33", "'public GrantedAuthoritySid(GrantedAuthority ga) {' - line 40", "'public GrantedAuthoritySid(org.acegisecurity.GrantedAuthority ga) {' - line 48", "'public String getGrantedAuthority() {' - line 52", "'public boolean equals(Object o) {' - line 57", "'public int hashCode() {' - line 62", "'public String toString() {' - line 67"]}, "WebAuthenticationDetails.java": {"METHODS": ["'public WebAuthenticationDetails(HttpServletRequest request) {}' - line 35"]}, "TokenBasedRememberMeServices.java": {"METHODS": ["'private TokenBasedRememberMeServices() {}' - line 36"]}, "RememberMeServicesSpringImpl.java": {"METHODS": ["'public void loginFail(HttpServletRequest request, HttpServletResponse response) {' - line 45", "'public void loginSuccess(HttpServletRequest request, HttpServletResponse response, org.springframework.security.core.Authentication successfulAuthentication) {' - line 50"]}, "RememberMeServices.java": {"METHODS": ["'Authentication autoLogin(HttpServletRequest request, HttpServletResponse response);' - line 36", "'void loginFail(HttpServletRequest request, HttpServletResponse response);' - line 38", "'void loginSuccess(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication);' - line 40", "'static RememberMeServices fromSpring(org.springframework.security.web.authentication.RememberMeServices rms) {' - line 42", "'public Authentication autoLogin(HttpServletRequest request, HttpServletResponse response) {' - line 48", "'public void loginFail(HttpServletRequest request, HttpServletResponse response) {' - line 54", "'public void loginSuccess(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication) {' - line 59"]}, "AboutJenkins.java": {"METHODS": ["'public String getIconFileName() {' - line 19", "'public String getUrlName() {' - line 24", "'public String getDisplayName() {' - line 29", "'public String getDescription() {' - line 34", "'public URL getLicensesURL() {' - line 39", "'public Permission getRequiredPermission() {' - line 45", "'public Category getCategory() {' - line 51"]}, "WebAppMain.java": {"METHODS": ["'public static int getDefaultRingBufferSize() {' - line 126", "'public void contextInitialized(ServletContextEvent event) {' - line 138", "'public Locale get() {' - line 163", "'new URLClassLoader(new URL[0], getClass().getClassLoader());' - line 172", "'public void run() {' - line 243", "'new HudsonFailedToLoad(e).publish(context, _home);' - line 260", "'new HudsonFailedToLoad(e).publish(context, _home);' - line 263", "'public void joinInit() throws InterruptedException {' - line 280", "'private void recordBootAttempt(File home) {' - line 290", "'public static void installExpressionFactory(ServletContextEvent event) {' - line 298", "'private void installLogger() {' - line 305", "'public FileAndDescription(File file, String description) {' - line 315", "'public FileAndDescription getHomeDir(ServletContextEvent event) {' - line 331", "'public void contextDestroyed(ServletContextEvent event) {' - line 368", "'private static void _setJenkinsJVM(boolean jenkinsJVM) {' - line 397"]}, "RestrictedSince.java": {"METHODS": ["'String value();' - line 40"]}, "TcpSlaveAgentListener.java": {"METHODS": ["'public TcpSlaveAgentListener(int port) throws IOException {' - line 90", "'private static ServerSocketChannel createSocket(int port) throws IOException {' - line 102", "'public int getPort() {' - line 116", "'public int getAdvertisedPort() {' - line 124", "'public String getAdvertisedHost() {' - line 132", "'public String getIdentityPublicKey() {' - line 149", "'public String getAgentProtocolNames() {' - line 161", "'public VersionNumber getRemotingMinimumVersion() {' - line 169", "'public void run() {' - line 174", "'new ConnectionHandler(s).start();' - line 187", "'public void shutdown() {' - line 208", "'new PingAgentProtocol().connect(client);' - line 216", "'public void run() {' - line 248", "'private void respondHello(String header, Socket s) throws IOException {' - line 309", "'private void error(String msg, Socket s) throws IOException {' - line 339", "'public PingAgentProtocol() {' - line 362", "'public boolean isRequired() {' - line 367", "'public String getName() {' - line 372", "'public String getDisplayName() {' - line 377", "'public void handle(Socket socket) throws IOException, InterruptedException {' - line 382", "'public boolean connect(Socket socket) throws IOException {' - line 393", "'new String(ping, StandardCharsets.UTF_8),' - line 407", "'new String(response, 0, responseLength, StandardCharsets.UTF_8) :' - line 409", "'public String toString() {' - line 426"]}, "LauncherDecorator.java": {"METHODS": ["'public static ExtensionList<LauncherDecorator> all() {' - line 50"]}, "Indenter.java": {"METHODS": []}, "URLConnectionDecorator.java": {"METHODS": ["'public static ExtensionList<URLConnectionDecorator> all() {' - line 47"]}, "ExtensionListListener.java": {"METHODS": []}, "ExtensionListView.java": {"METHODS": ["'private ExtensionList<T> storage() {' - line 59", "'public Iterator<T> iterator() {' - line 64", "'return storage().iterator();' - line 65", "'public T get(int index) {' - line 69", "'return storage().get(index);' - line 70", "'public int size() {' - line 74", "'return storage().size();' - line 75", "'public boolean add(T t) {' - line 79", "'return storage().add(t);' - line 80", "'public void add(int index, T t) {' - line 84", "'public T remove(int index) {' - line 90", "'return storage().remove(index);' - line 91", "'public boolean remove(Object o) {' - line 95", "'return storage().remove(o);' - line 96", "'private ExtensionList<T> storage() {' - line 106", "'public void add(T t) {' - line 111", "'public boolean remove(T t) {' - line 116", "'return storage().remove(t);' - line 117", "'public Iterator<T> iterator() {' - line 121", "'return storage().iterator();' - line 122", "'public void replaceBy(CopyOnWriteList<? extends T> that) {' - line 126", "'public void replaceBy(Collection<? extends T> that) {' - line 131", "'public void replaceBy(T... that) {' - line 136", "'public void clear() {' - line 141", "'return storage().toArray(array);' - line 147", "'public List<T> getView() {' - line 151", "'return storage();' - line 152", "'public void addAllTo(Collection<? super T> dst) {' - line 156", "'public boolean isEmpty() {' - line 161", "'return storage().isEmpty();' - line 162"]}, "EnvVars.java": {"METHODS": ["'public void setPlatform(@NonNull Platform platform) {' - line 102", "'public EnvVars() {' - line 106", "'public EnvVars(@NonNull Map<String, String> m) {' - line 110", "'public EnvVars(@NonNull EnvVars m) {' - line 123", "'public EnvVars(String... keyValuePairs) {' - line 131", "'public void override(String key, String value) {' - line 145", "'public EnvVars overrideAll(Map<String, String> all) {' - line 175", "'public void clear() {' - line 202", "'public String resolve(String name) {' - line 207", "'public List<String> getOrderedVariableNames() {' - line 249", "'private void cutCycleAt(String referee, List<String> cycle) {' - line 254", "'private void cutCycle(List<String> cycle) {' - line 268", "'public void scan() {' - line 291", "'public EnvVars overrideExpandingAll(@NonNull Map<String, String> all) {' - line 351", "'public static void resolve(Map<String, String> env) {' - line 361", "'public String get(String key, String defaultValue) {' - line 371", "'public String put(String key, String value) {' - line 378", "'public void putIfNotNull(String key, String value) {' - line 387", "'public void putAllNonNull(Map<String, String> map) {' - line 396", "'public void addLine(String line) {' - line 404", "'public String expand(String s) {' - line 414", "'public static EnvVars createCookie() {' - line 422", "'public static EnvVars getRemote(VirtualChannel channel) throws IOException, InterruptedException {' - line 434", "'public EnvVars call() {' - line 442", "'private static EnvVars initMaster() {' - line 463"]}, "Extension.java": {"METHODS": ["'double ordinal() default 0;' - line 84", "'boolean optional() default false;' - line 90", "'YesNoMaybe dynamicLoadable() default MAYBE;' - line 112"]}, "ExtensionComponent.java": {"METHODS": ["'public ExtensionComponent(T instance, double ordinal) {' - line 46", "'public ExtensionComponent(T instance, Extension annotation) {' - line 51", "'public ExtensionComponent(T instance) {' - line 55", "'public double ordinal() {' - line 62", "'public T getInstance() {' - line 71", "'public boolean isDescriptorOf(Class<? extends Describable> c) {' - line 80", "'public int compareTo(ExtensionComponent<T> that) {' - line 88"]}, "CloseProofOutputStream.java": {"METHODS": ["'public CloseProofOutputStream(OutputStream out) {' - line 34", "'public void close() {' - line 39"]}, "ExtensionList.java": {"METHODS": ["'protected ExtensionList(Hudson hudson, Class<T> extensionType) {' - line 101", "'protected ExtensionList(Jenkins jenkins, Class<T> extensionType) {' - line 105", "'protected ExtensionList(Hudson hudson, Class<T> extensionType, CopyOnWriteArrayList<ExtensionComponent<T>> legacyStore) {' - line 114", "'protected ExtensionList(Jenkins jenkins, Class<T> extensionType, CopyOnWriteArrayList<ExtensionComponent<T>> legacyStore) {' - line 125", "'public void addListener(@NonNull ExtensionListListener listener) {' - line 139", "'protected T adapt(ExtensionComponent<T> item) {' - line 173", "'public List<ExtensionComponent<T>> getComponents() {' - line 182", "'public T get(int index) {' - line 187", "'return ensureLoaded().get(index).getInstance();' - line 188", "'public int size() {' - line 192", "'return ensureLoaded().size();' - line 193", "'public List<T> reverseView() {' - line 199", "'public T get(int index) {' - line 202", "'public int size() {' - line 207", "'public boolean remove(Object o) {' - line 214", "'return removeSync(o);' - line 216", "'public boolean removeAll(Collection<?> c) {' - line 225", "'private boolean removeComponent(Collection<ExtensionComponent<T>> collection, Object t) {' - line 249", "'public boolean add(T t) {' - line 273", "'return addSync(t);' - line 275", "'public void add(int index, T element) {' - line 295", "'public T getDynamic(String className) {' - line 304", "'private List<ExtensionComponent<T>> ensureLoaded() {' - line 311", "'protected Object getLoadLock() {' - line 330", "'public void refresh(ExtensionComponentSet delta) {' - line 338", "'private void fireOnChangeListeners() {' - line 357", "'protected List<ExtensionComponent<T>> load() {' - line 377", "'protected Collection<ExtensionComponent<T>> load(ExtensionComponentSet delta) {' - line 389", "'protected List<ExtensionComponent<T>> sort(List<ExtensionComponent<T>> r) {' - line 401", "'return create((Jenkins) hudson, type);' - line 413", "'public static void clearLegacyInstances() {' - line 467"]}, "ClassicPluginStrategy.java": {"METHODS": ["'public ClassicPluginStrategy(PluginManager pluginManager) {' - line 93", "'@Override public String getShortName(File archive) throws IOException {' - line 97", "'private static boolean isLinked(File archive) {' - line 118", "'private static Manifest loadLinkedManifest(File archive) throws IOException {' - line 122", "'@Override public PluginWrapper createPluginWrapper(File archive) throws IOException {' - line 151", "'expandDir =  new File(f == null ? archive.getParentFile() : f, getBaseName(archive.getName()));' - line 166", "'private void fix(Attributes atts, List<PluginWrapper.Dependency> optionalDependencies) {' - line 253", "'protected ClassLoader createClassLoader(List<File> paths, ClassLoader parent) throws IOException {' - line 279", "'return createClassLoader(paths, parent, null);' - line 280", "'protected ClassLoader createClassLoader(List<File> paths, ClassLoader parent, Attributes atts) throws IOException {' - line 286", "'private ClassLoader getBaseClassLoader(Attributes atts, ClassLoader base) {' - line 309", "'public void initializeComponents(PluginWrapper plugin) {' - line 317", "'public void load(PluginWrapper wrapper) throws IOException {' - line 361", "'public void startPlugin(PluginWrapper plugin) throws Exception {' - line 400", "'public void updateDependency(PluginWrapper depender, PluginWrapper dependee) {' - line 405", "'private DependencyClassLoader findAncestorDependencyClassLoader(ClassLoader classLoader)' - line 413", "'private static File resolve(File base, String relative) {' - line 424", "'private static void parseClassPath(Manifest manifest, File archive, List<File> paths, String attributeName, String separator) throws IOException {' - line 432", "'private static void explode(File archive, File destDir) throws IOException {' - line 457", "'new FilePath(explodeTime).touch(archive.lastModified());' - line 477", "'private static void createClassJarFromWebInfClasses(File archive, File destDir, Project prj) throws IOException {' - line 487", "'public void putNextEntry(ZipEntry ze) throws IOException {' - line 507", "'private static void unzipExceptClasses(File archive, File destDir, Project prj) {' - line 537", "'private void updateTransitiveDependencies() {' - line 578", "'private List<PluginWrapper> getTransitiveDependencies() {' - line 583", "'protected List<PluginWrapper> getEdges(PluginWrapper pw) {' - line 591", "'protected Enumeration<URL> findResources(String name) throws IOException {' - line 648", "'protected URL findResource(String name) {' - line 672"]}, "Lookup.java": {"METHODS": []}, "AbstractMarkupText.java": {"METHODS": ["'public char charAt(int idx) {' - line 51", "'return getText().charAt(idx);' - line 52", "'return getText().length();' - line 59", "'public void addHyperlink(int startPos, int endPos, String url) {' - line 84", "'public void addHyperlinkLowKey(int startPos, int endPos, String url) {' - line 94", "'public void hide(int startPos, int endPos) {' - line 101", "'return createSubText(m);' - line 122"]}, "DependencyRunner.java": {"METHODS": ["'public DependencyRunner(ProjectRunnable runnable) {' - line 49", "'public void run() {' - line 54", "'private void populate(Collection<? extends AbstractProject> projectList) {' - line 74", "'void run(AbstractProject p);' - line 92"]}, "PermalinkList.java": {"METHODS": ["'public PermalinkList(Collection<? extends Permalink> c) {' - line 39", "'public PermalinkList() {' - line 43", "'public Permalink get(String id) {' - line 51", "'public Permalink findNearest(String id) {' - line 61", "'return get(nearest);' - line 67"]}, "PluginFirstClassLoader2.java": {"METHODS": ["'public PluginFirstClassLoader2(@NonNull URL[] urls, @NonNull ClassLoader parent) {' - line 27", "'public URL getResource(String name) {' - line 99", "'public Enumeration<URL> getResources(String name) throws IOException {' - line 130"]}, "ExtensionPoint.java": {"METHODS": []}, "Main.java": {"METHODS": ["'/*package*/ static void verifyJavaVersion(int releaseVersion, boolean enableFutureJava) {' - line 102", "'private static int getReleaseVersion() {' - line 156", "'private static boolean isFutureJavaEnabled(String[] args) {' - line 174", "'return hasArgument(ENABLE_FUTURE_JAVA_CLI_SWITCH, args) || Boolean.parseBoolean(System.getenv(\"JENKINS_ENABLE_FUTURE_JAVA\"));' - line 175", "'private static boolean hasArgument(@NonNull String argument, @NonNull String[] args) {' - line 179", "'public static void main(String[] args) throws IllegalAccessException {' - line 191", "'new File(arg.substring(\"--pluginroot=\".length())).getAbsolutePath());' - line 229", "'private static String readStringNonBlocking(InputStream in, int maxToRead) {' - line 370", "'private static void trimOffOurOptions(List<String> arguments) {' - line 381", "'private static String getVersion(String fallback) {' - line 389", "'private static boolean hasOption(List<String> args, String prefix) {' - line 406", "'public static File whoAmI(File directory) {' - line 419", "'private static void copyStream(InputStream in, OutputStream out) throws IOException {' - line 448", "'private static File extractFromJar(String resource, String fileName, String suffix, File directory) {' - line 460", "'private static void deleteContentsFromFolder(File folder, final String... patterns) {' - line 489", "'private static void deleteWinstoneTempContents(File file) {' - line 503", "'private static File getJenkinsHome() {' - line 527"]}, "Util.java": {"METHODS": ["'return filter((Iterable) base, type);' - line 158", "'public static String replaceMacro(@CheckForNull String s, @NonNull Map<String, String> properties) {' - line 174", "'return replaceMacro(s, new VariableResolver.ByMap<>(properties));' - line 175", "'public static String replaceMacro(@CheckForNull String s, @NonNull VariableResolver<String> resolver) {' - line 185", "'public static String loadFile(@NonNull File logfile) throws IOException {' - line 228", "'return loadFile(logfile, Charset.defaultCharset());' - line 229", "'public static String loadFile(@NonNull File logfile, @NonNull Charset charset) throws IOException {' - line 242", "'public static void deleteContentsRecursive(@NonNull File file) throws IOException {' - line 282", "'public static void deleteContentsRecursive(@NonNull Path path, @NonNull PathRemover.PathChecker pathChecker) throws IOException {' - line 293", "'public static void deleteFile(@NonNull File f) throws IOException {' - line 304", "'public static void deleteRecursive(@NonNull File dir) throws IOException {' - line 316", "'public static void deleteRecursive(@NonNull Path dir, @NonNull PathRemover.PathChecker pathChecker) throws IOException {' - line 327", "'public static boolean isSymlink(@NonNull File file) throws IOException {' - line 351", "'return isSymlink(fileToPath(file));' - line 352", "'public static boolean isSymlink(@NonNull Path path) {' - line 356", "'*  The isOther() call will include Windows reparse points, of which a directory junction is.' - line 363", "'public static boolean isRelativePath(String path) {' - line 385", "'public static boolean isDescendant(File forParent, File potentialChild) throws IOException {' - line 410", "'public static File createTempDir() throws IOException {' - line 419", "'public static void displayIOException(@NonNull IOException e, @NonNull TaskListener listener) {' - line 448", "'public static String getWin32ErrorMessage(@NonNull IOException e) {' - line 455", "'return getWin32ErrorMessage((Throwable) e);' - line 456", "'public static String getWin32ErrorMessage(Throwable e) {' - line 466", "'return getWin32ErrorMessage(e.getCause());' - line 481", "'public static String getWin32ErrorMessage(int n) {' - line 492", "'public static String getHostName() {' - line 506", "'public static void copyStream(@NonNull InputStream in, @NonNull OutputStream out) throws IOException {' - line 518", "'public static void copyStream(@NonNull Reader in, @NonNull Writer out) throws IOException {' - line 526", "'public static void copyStreamAndClose(@NonNull InputStream in, @NonNull OutputStream out) throws IOException {' - line 534", "'public static void copyStreamAndClose(@NonNull Reader in, @NonNull Writer out) throws IOException {' - line 544", "'public static String[] tokenize(@NonNull String s, @CheckForNull String delimiter) {' - line 561", "'public static String[] tokenize(@NonNull String s) {' - line 566", "'return tokenize(s, \" \\t\\n\\r\\f\");' - line 567", "'public static String[] mapToEnv(@NonNull Map<String, String> m) {' - line 574", "'public static int min(int x, @NonNull int... values) {' - line 584", "'public static String nullify(@CheckForNull String v) {' - line 593", "'return fixEmpty(v);' - line 594", "'public static String removeTrailingSlash(@NonNull String s) {' - line 598", "'public static String ensureEndsWith(@CheckForNull String subject, @CheckForNull String suffix) {' - line 614", "'public static String getDigestOf(@NonNull InputStream source) throws IOException {' - line 635", "'return toHexString(md5.digest());' - line 643", "'private static MessageDigest getMd5() throws NoSuchAlgorithmException {' - line 660", "'public static String getDigestOf(@NonNull String text) {' - line 665", "'return getDigestOf(new ByteArrayInputStream(text.getBytes(StandardCharsets.UTF_8)));' - line 667", "'public static String getDigestOf(@NonNull File file) throws IOException {' - line 681", "'return getDigestOf(Files.newInputStream(fileToPath(file)));' - line 683", "'public static SecretKey toAes128Key(@NonNull String s) {' - line 691", "'public static String toHexString(@NonNull byte[] data, int start, int len) {' - line 706", "'public static String toHexString(@NonNull byte[] bytes) {' - line 717", "'return toHexString(bytes, 0, bytes.length);' - line 718", "'public static byte[] fromHexString(@NonNull String data) {' - line 722", "'public static String getTimeSpanString(long duration) {' - line 740", "'return makeTimeSpanString(years, Messages.Util_year(years), months, Messages.Util_month(months));' - line 757", "'else if (months > 0)' - line 758", "'return makeTimeSpanString(months, Messages.Util_month(months), days, Messages.Util_day(days));' - line 759", "'else if (days > 0)' - line 760", "'return makeTimeSpanString(days, Messages.Util_day(days), hours, Messages.Util_hour(hours));' - line 761", "'else if (hours > 0)' - line 762", "'return makeTimeSpanString(hours, Messages.Util_hour(hours), minutes, Messages.Util_minute(minutes));' - line 763", "'else if (minutes > 0)' - line 764", "'return makeTimeSpanString(minutes, Messages.Util_minute(minutes), seconds, Messages.Util_second(seconds));' - line 765", "'else if (seconds >= 10)' - line 766", "'else if (seconds >= 1)' - line 768", "'else if (millisecs >= 100)' - line 770", "'public static String getPastTimeString(long duration) {' - line 805", "'return getTimeSpanString(duration);' - line 806", "'public static String combine(long n, @NonNull String suffix) {' - line 820", "'public static String encode(@NonNull String s) {' - line 851", "'public static String rawEncode(@NonNull String s) {' - line 925", "'return encode(s, uriMap);' - line 926", "'public static String fullEncode(@NonNull String s) {' - line 940", "'return encode(s, fullUriMap);' - line 941", "'private static String encode(String s, boolean[] map) {' - line 944", "'private static char toDigit(int n) {' - line 1002", "'public static String singleQuote(String s) {' - line 1009", "'public static String escape(@CheckForNull String text) {' - line 1017", "'public static String xmlEscape(@NonNull String text) {' - line 1054", "'public static void touch(@NonNull File file) throws IOException {' - line 1078", "'public static void copyFile(@NonNull File src, @NonNull File dst) throws BuildException {' - line 1090", "'public static String fixNull(@CheckForNull String s) {' - line 1103", "'return fixNull(s, \"\");' - line 1104", "'public static String fixEmpty(@CheckForNull String s) {' - line 1121", "'public static String fixEmptyAndTrim(@CheckForNull String s) {' - line 1132", "'return fixEmpty(s.trim());' - line 1134", "'return fixNull(l, Collections.emptyList());' - line 1148", "'return fixNull(l, Collections.emptySet());' - line 1162", "'return fixNull(l, Collections.emptySet());' - line 1176", "'return fixNull(l, Collections.emptySet());' - line 1190", "'public static String getFileName(@NonNull String filePath) {' - line 1197", "'return getFileName(filePath.substring(idx + 1));' - line 1200", "'return getFileName(filePath.substring(idx + 1));' - line 1203", "'public static String join(@NonNull Collection<?> strings, @NonNull String separator) {' - line 1213", "'public static FileSet createFileSet(@NonNull File baseDir, @NonNull String includes, @CheckForNull String excludes) {' - line 1256", "'public static FileSet createFileSet(@NonNull File baseDir, @NonNull String includes) {' - line 1279", "'return createFileSet(baseDir, includes, null);' - line 1280", "'private static void tryToDeleteSymlink(@NonNull File symlink) {' - line 1283", "'private static void reportAtomicFailure(@NonNull Path pathForSymlink, @NonNull Exception ex) {' - line 1291", "'private static boolean createSymlinkAtomic(@NonNull Path pathForSymlink, @NonNull File fileForSymlink, @NonNull Path target, @NonNull String symlinkPath) {' - line 1313", "'private static void warnWindowsSymlink() {' - line 1398", "'public static String resolveSymlink(File link, TaskListener listener) throws InterruptedException, IOException {' - line 1409", "'return resolveSymlink(link);' - line 1410", "'public static File resolveSymlinkToFile(@NonNull File link) throws InterruptedException, IOException {' - line 1420", "'public static String resolveSymlink(@NonNull File link) throws IOException {' - line 1441", "'public static String encodeRFC2396(String url) {' - line 1470", "'public static String wrapToErrorSpan(@NonNull String s) {' - line 1484", "'public static Number tryParseNumber(@CheckForNull String numberStr, @CheckForNull Number defaultNumber) {' - line 1498", "'public static boolean isOverridden(@NonNull Class<?> base, @NonNull Class<?> derived, @NonNull String methodName, @NonNull Class<?>... types) {' - line 1521", "'private static Method getMethod(@NonNull Class<?> clazz, @Nullable Class<?> base, @NonNull String methodName, @NonNull Class<?>... types) {' - line 1562", "'return getMethod(superclass, base, methodName, types);' - line 1600", "'public static File changeExtension(@NonNull File dst, @NonNull String ext) {' - line 1615", "'public static String intern(@CheckForNull String s) {' - line 1627", "'public static boolean isAbsoluteUri(@NonNull String uri) {' - line 1643", "'public static boolean isSafeToRedirectTo(@NonNull String uri) {' - line 1655", "'private static int _indexOf(@NonNull String s, char ch) {' - line 1663", "'public static Properties loadProperties(@NonNull String properties) throws IOException {' - line 1674", "'public static int permissionsToMode(Set<PosixFilePermission> permissions) {' - line 1706", "'public static Set<PosixFilePermission> modeToPermissions(int mode) throws IOException {' - line 1717", "'public static Path createDirectories(@NonNull Path dir, FileAttribute<?>... attrs) throws IOException {' - line 1778", "'public static long daysBetween(@NonNull Date a, @NonNull Date b) {' - line 1830", "'public static long daysElapsedSince(@NonNull Date date) {' - line 1841", "'private static PathRemover newPathRemover(@NonNull PathRemover.PathChecker pathChecker) {' - line 1926"]}, "LocalPluginManager.java": {"METHODS": ["'public LocalPluginManager(@CheckForNull ServletContext context, @NonNull File rootDir) {' - line 47", "'public LocalPluginManager(@NonNull Jenkins jenkins) {' - line 55", "'public LocalPluginManager(@NonNull File rootDir) {' - line 63", "'protected Collection<String> loadBundledPlugins() {' - line 68", "'return loadPluginsFromWar(\"/WEB-INF/plugins\");' - line 75"]}, "ResponseHeaderFilter.java": {"METHODS": ["'public void init(FilterConfig filterConfig) throws ServletException {' - line 83", "'public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException,' - line 88", "'public void destroy() {' - line 105"]}, "Plugin.java": {"METHODS": ["'protected Plugin() {}' - line 104", "'public void setServletContext(ServletContext context) {' - line 125", "'public PluginWrapper getWrapper() {' - line 133", "'public void start() throws Exception {' - line 159", "'public void postInitialize() throws Exception {}' - line 168", "'public void stop() throws Exception {' - line 185", "'public void configure(JSONObject formData) throws IOException, ServletException, FormException {' - line 193", "'public void configure(StaplerRequest req, JSONObject formData) throws IOException, ServletException, FormException {' - line 223", "'public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 230", "'protected void load() throws IOException {' - line 267", "'public void save() throws IOException {' - line 279", "'protected XmlFile getConfigXml() {' - line 295", "'new File(Jenkins.get().getRootDir(), wrapper.getShortName() + \".xml\"));' - line 297", "'public Object getTarget() {' - line 302"]}, "FilePath.java": {"METHODS": ["'*     &#64;Override public Void invoke(File f, VirtualChannel channel) {' - line 190", "'public FilePath(@CheckForNull VirtualChannel channel, @NonNull String remote) {' - line 254", "'public FilePath(@NonNull File localPath) {' - line 266", "'public FilePath(@NonNull FilePath base, @NonNull String rel) {' - line 276", "'private Object readResolve() {' - line 281", "'private String resolvePathIfRelative(@NonNull FilePath base, @NonNull String rel) {' - line 286", "'private static boolean isAbsolute(@NonNull String rel) {' - line 301", "'public static String normalize(@NonNull String path) {' - line 314", "'else if (tokens.size() > 0) tokens.remove(0);' - line 360", "'boolean isUnix() {' - line 374", "'public String getRemote() {' - line 394", "'public void createZipArchive(OutputStream os) throws IOException, InterruptedException {' - line 404", "'public void zip(OutputStream os) throws IOException, InterruptedException {' - line 411", "'public void zip(FilePath dst) throws IOException, InterruptedException {' - line 415", "'public void zip(OutputStream os, FileFilter filter) throws IOException, InterruptedException {' - line 430", "'public void createZipArchive(OutputStream os, final String glob) throws IOException, InterruptedException {' - line 446", "'public void zip(OutputStream os, final String glob) throws IOException, InterruptedException {' - line 459", "'public int zip(OutputStream out, DirScanner scanner) throws IOException, InterruptedException {' - line 466", "'return archive(ArchiverFactory.ZIP, out, scanner);' - line 467", "'public int zip(OutputStream out, DirScanner scanner, String verificationRoot, String prefix, OpenOption... openOptions) throws IOException, InterruptedException {' - line 485", "'return archive(archiverFactory, out, scanner, verificationRoot, openOptions);' - line 487", "'public int archive(final ArchiverFactory factory, OutputStream os, final DirScanner scanner) throws IOException, InterruptedException {' - line 498", "'return archive(factory, os, scanner, null);' - line 499", "'return act(new Archive(factory, out, scanner, verificationRoot, openOptions));' - line 520", "'public Integer invoke(File f, VirtualChannel channel) throws IOException {' - line 539", "'public int archive(final ArchiverFactory factory, OutputStream os, final FileFilter filter) throws IOException, InterruptedException {' - line 549", "'return archive(factory, os, new DirScanner.Filter(filter));' - line 550", "'public int archive(final ArchiverFactory factory, OutputStream os, final String glob) throws IOException, InterruptedException {' - line 553", "'return archive(factory, os, new DirScanner.Glob(glob, null));' - line 554", "'public void unzip(final FilePath target) throws IOException, InterruptedException {' - line 565", "'public Void invoke(File dir, VirtualChannel channel) throws IOException, InterruptedException {' - line 583", "'private UnzipLocal(FilePath filePath) {' - line 595", "'public Void invoke(File dir, VirtualChannel channel) throws IOException, InterruptedException {' - line 600", "'public void untar(final FilePath target, final TarCompression compression) throws IOException, InterruptedException {' - line 621", "'public Void invoke(File dir, VirtualChannel channel) throws IOException, InterruptedException {' - line 644", "'public Void invoke(File dir, VirtualChannel channel) throws IOException, InterruptedException {' - line 662", "'public void unzipFrom(InputStream _in) throws IOException, InterruptedException {' - line 678", "'public Void invoke(File dir, VirtualChannel channel) throws IOException {' - line 691", "'private static void unzip(File dir, InputStream in) throws IOException {' - line 699", "'private static void unzip(File dir, File zipFile) throws IOException {' - line 711", "'public FilePath absolutize() throws IOException, InterruptedException {' - line 750", "'public String invoke(File f, VirtualChannel channel) throws IOException {' - line 758", "'public boolean hasSymlink(FilePath verificationRoot, OpenOption... openOptions) throws IOException, InterruptedException {' - line 764", "'return act(new HasSymlink(verificationRoot == null ? null : verificationRoot.remote, openOptions));' - line 765", "'public Boolean invoke(File f, VirtualChannel channel) throws IOException {' - line 779", "'return isSymlink(f, verificationRoot, openOptions);' - line 780", "'public boolean containsSymlink(FilePath verificationRoot, OpenOption... openOptions) throws IOException, InterruptedException {' - line 785", "'public boolean accept(File file) {' - line 800", "'return isSymlink(file, verificationRoot, openOptions);' - line 801", "'public void symlinkTo(final String target, final TaskListener listener) throws IOException, InterruptedException {' - line 816", "'public Void invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {' - line 832", "'public String readLink() throws IOException, InterruptedException {' - line 845", "'return act(new ReadLink());' - line 846", "'public String invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {' - line 853", "'public boolean equals(Object o) {' - line 859", "'public int hashCode() {' - line 871", "'public InputStream extract(InputStream in) {' - line 881", "'public OutputStream compress(OutputStream out) {' - line 886", "'public InputStream extract(InputStream _in) throws IOException {' - line 892", "'public OutputStream compress(OutputStream out) throws IOException {' - line 904", "'public void untarFrom(InputStream _in, final TarCompression compression) throws IOException, InterruptedException {' - line 923", "'public Void invoke(File dir, VirtualChannel channel) throws IOException {' - line 940", "'public boolean installIfNecessaryFrom(@NonNull URL archive, @CheckForNull TaskListener listener, @NonNull String message) throws IOException, InterruptedException {' - line 975", "'return installIfNecessaryFrom(archive, listener, message, MAX_REDIRECTS);' - line 979", "'private boolean installIfNecessaryFrom(@NonNull URL archive, @NonNull TaskListener listener, @NonNull String message, int maxRedirects) throws InterruptedException, IOException {' - line 982", "'return installIfNecessaryFrom(getUrlFactory().newURL(location), listener, message, maxRedirects - 1);' - line 1012", "'@Override public Void invoke(File dir, VirtualChannel channel) throws IOException, InterruptedException {' - line 1078", "'public void copyFrom(URL url) throws IOException, InterruptedException {' - line 1102", "'public void copyFrom(InputStream in) throws IOException, InterruptedException {' - line 1113", "'public void copyFrom(FilePath src) throws IOException, InterruptedException {' - line 1124", "'public void copyFrom(FileItem file) throws IOException, InterruptedException {' - line 1131", "'T invoke(File f, VirtualChannel channel) throws IOException, InterruptedException;' - line 1172", "'return act(callable, callable.getClass().getClassLoader());' - line 1180", "'protected AbstractInterceptorCallableWrapper(DelegatingCallable<T, IOException> callable) {' - line 1226", "'protected void before() {}' - line 1248", "'protected void after() {}' - line 1253", "'public V call() throws IOException {' - line 1308", "'return act(task);' - line 1310", "'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 1317", "'public URI toURI() throws IOException, InterruptedException {' - line 1328", "'return act(new ToURI());' - line 1329", "'public URI invoke(File f, VirtualChannel channel) {' - line 1336", "'public VirtualFile toVirtualFile() {' - line 1346", "'public void mkdirs() throws IOException, InterruptedException {' - line 1370", "'public Boolean invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {' - line 1380", "'return mkdirs(f) || f.exists();' - line 1387", "'public void deleteSuffixesRecursive() throws IOException, InterruptedException {' - line 1396", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 1407", "'private static File[] listParentFiles(File f) {' - line 1418", "'public void deleteRecursive() throws IOException, InterruptedException {' - line 1432", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 1440", "'public void deleteContents() throws IOException, InterruptedException {' - line 1449", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 1457", "'public String getBaseName() {' - line 1468", "'public String getName() {' - line 1480", "'public FilePath sibling(String rel) {' - line 1501", "'public FilePath withSuffix(String suffix) {' - line 1509", "'public FilePath getParent() {' - line 1527", "'public FilePath createTempFile(final String prefix, final String suffix) throws IOException, InterruptedException {' - line 1551", "'public String invoke(File dir, VirtualChannel channel) throws IOException {' - line 1571", "'public FilePath createTextTempFile(final String prefix, final String suffix, final String contents) throws IOException, InterruptedException {' - line 1593", "'return createTextTempFile(prefix, suffix, contents, true);' - line 1594", "'public FilePath createTextTempFile(final String prefix, final String suffix, final String contents, final boolean inThisDirectory) throws IOException, InterruptedException {' - line 1619", "'public String invoke(File dir, VirtualChannel channel) throws IOException {' - line 1642", "'public FilePath createTempDir(final String prefix, final String suffix) throws IOException, InterruptedException {' - line 1677", "'public String invoke(File dir, VirtualChannel channel) throws IOException {' - line 1702", "'public boolean delete() throws IOException, InterruptedException {' - line 1726", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 1735", "'public boolean exists() throws IOException, InterruptedException {' - line 1744", "'return act(new Exists());' - line 1745", "'public Boolean invoke(File f, VirtualChannel channel) throws IOException {' - line 1752", "'public long lastModified() throws IOException, InterruptedException {' - line 1764", "'return act(new LastModified());' - line 1765", "'public Long invoke(File f, VirtualChannel channel) throws IOException {' - line 1772", "'public void touch(final long timestamp) throws IOException, InterruptedException {' - line 1782", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 1796", "'private void setLastModifiedIfPossible(final long timestamp) throws IOException, InterruptedException {' - line 1806", "'public String invoke(File f, VirtualChannel channel) throws IOException {' - line 1824", "'public boolean isDirectory() throws IOException, InterruptedException {' - line 1841", "'return act(new IsDirectory());' - line 1842", "'public Boolean invoke(File f, VirtualChannel channel) throws IOException {' - line 1849", "'public long length() throws IOException, InterruptedException {' - line 1859", "'return act(new Length());' - line 1860", "'public Long invoke(File f, VirtualChannel channel) throws IOException {' - line 1867", "'public long getFreeDiskSpace() throws IOException, InterruptedException {' - line 1876", "'return act(new GetFreeDiskSpace());' - line 1877", "'public Long invoke(File f, VirtualChannel channel) throws IOException {' - line 1884", "'public long getTotalDiskSpace() throws IOException, InterruptedException {' - line 1893", "'return act(new GetTotalDiskSpace());' - line 1894", "'public Long invoke(File f, VirtualChannel channel) throws IOException {' - line 1901", "'public long getUsableDiskSpace() throws IOException, InterruptedException {' - line 1910", "'return act(new GetUsableDiskSpace());' - line 1911", "'public Long invoke(File f, VirtualChannel channel) throws IOException {' - line 1918", "'public void chmod(final int mask) throws IOException, InterruptedException {' - line 1943", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 1957", "'private static void _chmod(File f, int mask) throws IOException {' - line 1967", "'public int mode() throws IOException, InterruptedException {' - line 1985", "'return act(new Mode());' - line 1987", "'public Integer invoke(File f, VirtualChannel channel) throws IOException {' - line 1994", "'public List<FilePath> list() throws IOException, InterruptedException {' - line 2006", "'return list((FileFilter) null);' - line 2007", "'public List<FilePath> list(FilePath verificationRoot, OpenOption... openOptions) throws IOException, InterruptedException {' - line 2023", "'return list(new OptionalDiscardingFileFilter(verificationRoot, openOptions));' - line 2024", "'public List<FilePath> listDirectories() throws IOException, InterruptedException {' - line 2033", "'return list(new DirectoryFilter());' - line 2034", "'public boolean accept(File f) {' - line 2039", "'public List<FilePath> list(final FileFilter filter) throws IOException, InterruptedException {' - line 2056", "'return act(new ListFilter(filter), (filter != null ? filter : this).getClass().getClassLoader());' - line 2060", "'public List<FilePath> invoke(File f, VirtualChannel channel) throws IOException {' - line 2073", "'public FilePath[] list(final String includes) throws IOException, InterruptedException {' - line 2096", "'return list(includes, null);' - line 2097", "'public FilePath[] list(final String includes, final String excludes) throws IOException, InterruptedException {' - line 2112", "'return list(includes, excludes, true);' - line 2113", "'public FilePath[] list(final String includes, final String excludes, final boolean defaultExcludes) throws IOException, InterruptedException {' - line 2129", "'return act(new ListGlob(includes, excludes, defaultExcludes));' - line 2130", "'public FilePath[] invoke(File f, VirtualChannel channel) throws IOException {' - line 2147", "'private static String[] glob(File dir, String includes, String excludes, boolean defaultExcludes) throws IOException {' - line 2165", "'public InputStream read() throws IOException, InterruptedException {' - line 2182", "'return read(null, new OpenOption[0]);' - line 2183", "'public InputStream read(FilePath rootPath, OpenOption... openOptions) throws IOException, InterruptedException {' - line 2187", "'public static InputStream newInputStreamDenyingSymlinkAsNeeded(File file, String verificationRoot, OpenOption... openOptions) throws IOException {' - line 2202", "'public static InputStream openInputStream(File file, OpenOption[] openOptions) throws IOException {' - line 2219", "'private static OpenOption[] stripLocalOptions(OpenOption... openOptions) {' - line 2223", "'private static void denySymlink(File file, String root, OpenOption... openOptions) throws IOException {' - line 2230", "'private static void denyTmpDir(File file, String root, OpenOption... openOptions) throws IOException {' - line 2248", "'public static boolean isSymlink(File file, String root, OpenOption... openOptions) {' - line 2255", "'return isFileAncestorSymlink(file, root);' - line 2261", "'private static boolean isSymlink(VisitorInfo visitorInfo) {' - line 2266", "'return isSymlink(visitorInfo.f, visitorInfo.verificationRoot, visitorInfo.openOptions);' - line 2267", "'public static boolean isTmpDir(File file, String root, OpenOption... openOptions) {' - line 2271", "'return isFileAncestorTmpDir(file, root);' - line 2277", "'public static boolean isTmpDir(String filename, OpenOption... openOptions) {' - line 2283", "'return isTmpDir(filename);' - line 2285", "'private static boolean isTmpDir(VisitorInfo visitorInfo) {' - line 2290", "'return isTmpDir(visitorInfo.f, visitorInfo.verificationRoot, visitorInfo.openOptions);' - line 2291", "'private static boolean isTmpDir(File file) {' - line 2294", "'private static boolean isTmpDir(String filename) {' - line 2298", "'public static boolean isNoFollowLink(OpenOption... openOptions) {' - line 2303", "'public static boolean isIgnoreTmpDirs(OpenOption... openOptions) {' - line 2308", "'private static boolean isFileAncestorSymlink(File file, String root) {' - line 2312", "'return doesFileAncestorMatch(file, root, Util::isSymlink);' - line 2313", "'private static boolean isFileAncestorTmpDir(File file, String root) {' - line 2323", "'return doesFileAncestorMatch(file, root, path -> isTmpDir(path.toFile()));' - line 2324", "'private static boolean doesFileAncestorMatch(File file, String root, Predicate<Path> matcher) {' - line 2334", "'public Void invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {' - line 2368", "'public InputStream readFromOffset(final long offset) throws IOException, InterruptedException {' - line 2382", "'public int read() throws IOException {' - line 2397", "'public void close() throws IOException {' - line 2402", "'public int read(byte[] b, int off, int len) throws IOException {' - line 2407", "'public int read(byte[] b) throws IOException {' - line 2412", "'private OffsetPipeSecureFileCallable(Pipe p, long offset) {' - line 2429", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 2435", "'public String readToString() throws IOException, InterruptedException {' - line 2453", "'return act(new ReadToString());' - line 2454", "'public String invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {' - line 2461", "'public OutputStream write() throws IOException, InterruptedException {' - line 2478", "'return act(new WritePipe());' - line 2485", "'public OutputStream invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {' - line 2492", "'public void write(final String content, final String encoding) throws IOException, InterruptedException {' - line 2506", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 2521", "'public String digest() throws IOException, InterruptedException {' - line 2535", "'return act(new Digest());' - line 2536", "'public String invoke(File f, VirtualChannel channel) throws IOException {' - line 2543", "'public void renameTo(final FilePath target) throws IOException, InterruptedException {' - line 2552", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 2569", "'public void moveAllChildrenTo(final FilePath target) throws IOException, InterruptedException {' - line 2580", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 2597", "'public void copyTo(FilePath target) throws IOException, InterruptedException {' - line 2619", "'public void copyToWithPermission(FilePath target) throws IOException, InterruptedException {' - line 2633", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 2654", "'public void copyTo(OutputStream os) throws IOException, InterruptedException {' - line 2666", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 2685", "'private void syncIO() throws InterruptedException {' - line 2700", "'private void _syncIO() throws InterruptedException {' - line 2718", "'void open(String fileName) throws IOException;' - line 2732", "'void write(byte[] buf, int len) throws IOException;' - line 2734", "'void close() throws IOException;' - line 2736", "'public int copyRecursiveTo(FilePath target) throws IOException, InterruptedException {' - line 2746", "'return copyRecursiveTo(\"**/*\", target);' - line 2747", "'public int copyRecursiveTo(String fileMask, FilePath target) throws IOException, InterruptedException {' - line 2761", "'return copyRecursiveTo(fileMask, null, target);' - line 2762", "'public int copyRecursiveTo(final String fileMask, final String excludes, final FilePath target) throws IOException, InterruptedException {' - line 2778", "'return copyRecursiveTo(new DirScanner.Glob(fileMask, excludes), target, fileMask);' - line 2779", "'public int copyRecursiveTo(final DirScanner scanner, final FilePath target, final String description) throws IOException, InterruptedException {' - line 2790", "'return copyRecursiveTo(scanner, target, description, TarCompression.GZIP);' - line 2791", "'public int copyRecursiveTo(final DirScanner scanner, final FilePath target, final String description, @NonNull TarCompression compression) throws IOException, InterruptedException {' - line 2803", "'return act(new CopyRecursiveLocal(target, scanner));' - line 2806", "'throw ioWithCause(e);' - line 2819", "'throw ioWithCause(e);' - line 2844", "'private IOException ioWithCause(ExecutionException e) {' - line 2849", "'public Integer invoke(File base, VirtualChannel channel) throws IOException {' - line 2870", "'public void visit(File f, String relativePath) throws IOException {' - line 2884", "'private boolean tryCopyWithAttributes(File f, Path targetPath) {' - line 2903", "'public boolean understandsSymlink() {' - line 2915", "'public void visitSymlink(File link, String target, String relativePath) throws IOException {' - line 2921", "'public Void invoke(File f, VirtualChannel channel) throws IOException {' - line 2951", "'public Integer invoke(File f, VirtualChannel channel) throws IOException, InterruptedException {' - line 2973", "'return writeToTar(f, scanner, compression.compress(pipe.getOut()));' - line 2974", "'public Integer invoke(File f, VirtualChannel channel) throws IOException {' - line 2991", "'return writeToTar(f, scanner, compression.compress(out));' - line 2993", "'public int tar(OutputStream out, final String glob) throws IOException, InterruptedException {' - line 3004", "'return archive(ArchiverFactory.TAR, out, glob);' - line 3005", "'public int tar(OutputStream out, FileFilter filter) throws IOException, InterruptedException {' - line 3008", "'return archive(ArchiverFactory.TAR, out, filter);' - line 3009", "'public int tar(OutputStream out, DirScanner scanner) throws IOException, InterruptedException {' - line 3015", "'return archive(ArchiverFactory.TAR, out, scanner);' - line 3016", "'private static Integer writeToTar(File baseDir, DirScanner scanner, OutputStream out) throws IOException {' - line 3025", "'private static void readFromTar(String name, File baseDir, InputStream in) throws IOException {' - line 3037", "'new FilePath(f).symlinkTo(te.getLinkName(), TaskListener.NULL);' - line 3055", "'public Launcher createLauncher(TaskListener listener) throws IOException, InterruptedException {' - line 3079", "'public Boolean call() throws IOException {' - line 3089", "'public String validateAntFileMask(final String fileMasks) throws IOException, InterruptedException {' - line 3106", "'return validateAntFileMask(fileMasks, Integer.MAX_VALUE);' - line 3107", "'public String validateAntFileMask(final String fileMasks, final int bound) throws IOException, InterruptedException {' - line 3113", "'return validateAntFileMask(fileMasks, bound, true);' - line 3114", "'public String validateAntFileMask(final String fileMasks, final boolean caseSensitive) throws IOException, InterruptedException {' - line 3122", "'return validateAntFileMask(fileMasks, VALIDATE_ANT_FILE_MASK_BOUND, caseSensitive);' - line 3123", "'private FileMaskNoMatchesFoundException(String message) {' - line 3141", "'return act(new ValidateAntFileMask(fileMasks, caseSensitive, bound));' - line 3170", "'public String invoke(File dir, VirtualChannel channel) throws IOException, InterruptedException {' - line 3187", "'private boolean hasMatch(File dir, String pattern, boolean bCaseSensitive) throws InterruptedException {' - line 3291", "'private int findSeparator(String pattern) {' - line 3326", "'public URL newURL(String location) throws MalformedURLException {' - line 3339", "'void setUrlFactory(UrlFactory urlFactory) {' - line 3348", "'private UrlFactory getUrlFactory() {' - line 3352", "'public static FormValidation validateFileMask(@CheckForNull FilePath path, String value) throws IOException {' - line 3363", "'public static FormValidation validateFileMask(@CheckForNull FilePath path, String value, boolean caseSensitive) throws IOException {' - line 3370", "'public FormValidation validateFileMask(String value) throws IOException {' - line 3378", "'return validateFileMask(value, true, true);' - line 3379", "'public FormValidation validateFileMask(String value, boolean errorIfNotExist) throws IOException {' - line 3385", "'return validateFileMask(value, errorIfNotExist, true);' - line 3386", "'public FormValidation validateFileMask(String value, boolean errorIfNotExist, boolean caseSensitive) throws IOException {' - line 3400", "'public FormValidation validateRelativePath(String value, boolean errorIfNotExist, boolean expectingFile) throws IOException {' - line 3436", "'private static void checkPermissionForValidate() {' - line 3475", "'public FormValidation validateRelativeDirectory(String value, boolean errorIfNotExist) throws IOException {' - line 3486", "'return validateRelativePath(value, errorIfNotExist, false);' - line 3487", "'public FormValidation validateRelativeDirectory(String value) throws IOException {' - line 3490", "'return validateRelativeDirectory(value, true);' - line 3491", "'public String toString() {' - line 3495", "'public VirtualChannel getChannel() {' - line 3500", "'public boolean isRemote() {' - line 3508", "'private void writeObject(ObjectOutputStream oos) throws IOException {' - line 3512", "'private Channel _getChannelForSerialization() {' - line 3522", "'return getChannelForSerialization();' - line 3524", "'private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {' - line 3531", "'private FileCallableWrapper(FileCallable<T> callable, ClassLoader classLoader, FilePath filePath) {' - line 3568", "'public T call() throws IOException {' - line 3575", "'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 3587", "'public ClassLoader getClassLoader() {' - line 3592", "'public String toString() {' - line 3597", "'private TunneledInterruptedException(InterruptedException cause) {' - line 3608", "'public static FilePath getHomeDirectory(VirtualChannel ch) throws InterruptedException, IOException {' - line 3621", "'public FilePath call() throws IOException {' - line 3627", "'public ExplicitlySpecifiedDirScanner(Map<String, String> files) {' - line 3646", "'@Override public void scan(File dir, FileVisitor visitor) throws IOException {' - line 3650", "'new NamingThreadFactory(new DaemonThreadFactory(), \"FilePath.localPool\"))' - line 3664", "'public static FileVisitor ignoringSymlinks(final FileVisitor v, String verificationRoot, OpenOption... openOptions) {' - line 3678", "'public static FileVisitor ignoringTmpDirs(final FileVisitor v, String verificationRoot, OpenOption... openOptions) {' - line 3688", "'public void visit(File f, String relativePath) throws IOException {' - line 3699", "'public boolean understandsSymlink() {' - line 3707", "'private static boolean mkdirs(File dir) throws IOException {' - line 3715", "'private static File mkdirsE(File dir) throws IOException {' - line 3721", "'public boolean isDescendant(@NonNull String potentialChildRelativePath) throws IOException, InterruptedException {' - line 3734", "'return act(new IsDescendant(potentialChildRelativePath));' - line 3735", "'private IsDescendant(@NonNull String potentialChildRelativePath) {' - line 3742", "'public Boolean invoke(@NonNull File parentFile, @NonNull VirtualChannel channel) throws IOException, InterruptedException {' - line 3747", "'private static Path getRealPath(Path path) throws IOException {' - line 3838", "'public boolean accept(File file) {' - line 3868"]}, "Platform.java": {"METHODS": ["'public static Platform current() {' - line 53", "'public static boolean isDarwin() {' - line 58", "'public static boolean isSnowLeopardOrLater() {' - line 66", "'return isDarwin() && new VersionNumber(System.getProperty(\"os.version\")).compareTo(new VersionNumber(\"10.6\")) >= 0;' - line 68"]}, "MarkupText.java": {"METHODS": ["'public int compareTo(Tag that) {' - line 68", "'public SubText(Matcher m, int textOffset) {' - line 80", "'public SubText(int start, int end) {' - line 92", "'public SubText subText(int start, int end) {' - line 99", "'public String getText() {' - line 105", "'public void addMarkup(int startPos, int endPos, String startTag, String endTag) {' - line 110", "'public void surroundWith(String startTag, String endTag) {' - line 122", "'public void surroundWithLiteral(String startTag, String endTag) {' - line 130", "'public void href(String url) {' - line 137", "'public int start(int groupIndex) {' - line 148", "'public int start() {' - line 156", "'public int end(int groupIndex) {' - line 163", "'public int end() {' - line 171", "'public String group(int groupIndex) {' - line 178", "'public int groupCount() {' - line 188", "'public String replace(String s) {' - line 195", "'protected SubText createSubText(Matcher m) {' - line 228", "'public MarkupText(String text) {' - line 238", "'public String getText() {' - line 243", "'public SubText subText(int start, int end) {' - line 254", "'public void addMarkup(int startPos, int endPos, String startTag, String endTag) {' - line 259", "'public void addMarkup(int pos, String tag) {' - line 271", "'private void rangeCheck(int pos) {' - line 276", "'public String toString() {' - line 289", "'return toString(false);' - line 290", "'public String toString(boolean preEscape) {' - line 300", "'public List<SubText> findTokens(Pattern pattern) {' - line 328", "'protected SubText createSubText(Matcher m) {' - line 333"]}, "FeedAdapter.java": {"METHODS": ["'String getEntryTitle(E entry);' - line 43", "'String getEntryUrl(E entry);' - line 49", "'String getEntryID(E entry);' - line 57", "'String getEntryDescription(E entry);' - line 63", "'Calendar getEntryTimestamp(E entry);' - line 68", "'String getEntryAuthor(E entry);' - line 73"]}, "PluginStrategy.java": {"METHODS": ["'PluginWrapper createPluginWrapper(File archive)' - line 51", "'void load(PluginWrapper wrapper) throws IOException;' - line 68", "'void initializeComponents(PluginWrapper plugin);' - line 74"]}, "XmlFile.java": {"METHODS": ["'public XmlFile(File file) {' - line 128", "'public XmlFile(XStream xs, File file) {' - line 132", "'public XmlFile(XStream xs, File file, boolean force) {' - line 142", "'public File getFile() {' - line 148", "'public XStream getXStream() {' - line 152", "'public Object read() throws IOException {' - line 159", "'public Object unmarshal(Object o) throws IOException {' - line 177", "'return unmarshal(o, false);' - line 178", "'public Object unmarshalNullingOut(Object o) throws IOException {' - line 185", "'return unmarshal(o, true);' - line 186", "'private Object unmarshal(Object o, boolean nullOut) throws IOException {' - line 189", "'public void write(Object o) throws IOException {' - line 202", "'public static Object replaceIfNotAtTopLevel(Object o, Supplier<Object> replacement) {' - line 236", "'public boolean exists() {' - line 246", "'public void delete() throws IOException {' - line 250", "'public void mkdirs() throws IOException {' - line 254", "'public String toString() {' - line 259", "'public Reader readRaw() throws IOException {' - line 270", "'public String asString() throws IOException {' - line 289", "'public void writeRawTo(Writer w) throws IOException {' - line 299", "'public String sniffEncoding() throws IOException {' - line 313", "'public void setDocumentLocator(Locator locator) {' - line 332", "'public void startDocument() throws SAXException {' - line 337", "'public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {' - line 342", "'private void attempt() throws Eureka {' - line 348"]}, "ProxyConfiguration.java": {"METHODS": ["'public ProxyConfiguration(String name, int port) {' - line 129", "'public ProxyConfiguration(String name, int port, String userName, String password) {' - line 133", "'public ProxyConfiguration(String name, int port, String userName, String password, String noProxyHost) {' - line 137", "'public ProxyConfiguration(String name, int port, String userName, String password, String noProxyHost, String testUrl) {' - line 141", "'private Authenticator newAuthenticator() {' - line 152", "'public PasswordAuthentication getPasswordAuthentication() {' - line 155", "'public String getUserName() {' - line 165", "'public Secret getSecretPassword() {' - line 169", "'public String getPassword() {' - line 178", "'public String getEncryptedPassword() {' - line 189", "'public String getTestUrl() {' - line 193", "'public int getPort() {' - line 197", "'public String getName() {' - line 201", "'public List<Pattern> getNoProxyHostPatterns() {' - line 208", "'return getNoProxyHostPatterns(noProxyHost);' - line 209", "'public String getNoProxyHost() {' - line 212", "'public static List<Pattern> getNoProxyHostPatterns(String noProxyHost) {' - line 219", "'private static boolean isExcluded(String needle, String haystack) {' - line 230", "'return getNoProxyHostPatterns(haystack).stream().anyMatch(p -> p.matcher(needle).matches());' - line 231", "'public void setSecretPassword(Secret secretPassword) {' - line 235", "'public void setTestUrl(String testUrl) {' - line 240", "'public void setUserName(String userName) {' - line 245", "'public void setNoProxyHost(String noProxyHost) {' - line 250", "'public Proxy createProxy() {' - line 259", "'return createProxy(null);' - line 260", "'public Proxy createProxy(String host) {' - line 263", "'return createProxy(host, name, port, noProxyHost);' - line 264", "'public static Proxy createProxy(String host, String name, int port, String noProxyHost) {' - line 267", "'public void save() throws IOException {' - line 275", "'private Object readResolve() {' - line 282", "'public static XmlFile getXmlFile() {' - line 291", "'public static ProxyConfiguration load() throws IOException {' - line 295", "'public static URLConnection open(URL url) throws IOException {' - line 309", "'public static InputStream getInputStream(URL url) throws IOException {' - line 340", "'public static HttpClient newHttpClient() {' - line 368", "'return newHttpClientBuilder().followRedirects(HttpClient.Redirect.NORMAL).build();' - line 369", "'private JenkinsProxySelector(@NonNull String hostname, int port, @CheckForNull String exclusions) {' - line 426", "'public void connectFailed(URI uri, SocketAddress sa, IOException e) {' - line 432", "'public List<Proxy> select(URI uri) {' - line 437", "'private void jenkins48775workaround(Proxy proxy, URL url) {' - line 455", "'private static ProxyConfiguration get() {' - line 478", "'return _get();' - line 480", "'private static ProxyConfiguration _get() {' - line 486", "'private static void decorate(URLConnection con) throws IOException {' - line 493", "'public String getDisplayName() {' - line 510", "'public FormValidation doCheckPort(@QueryParameter String value) {' - line 514", "'private boolean isNoProxyHost(String host, String noProxyHost) {' - line 580", "'private static Authenticator newValidationAuthenticator(String userName, String password) {' - line 596", "'protected PasswordAuthentication getPasswordAuthentication() {' - line 599"]}, "Launcher.java": {"METHODS": ["'protected Launcher(@NonNull TaskListener listener, @CheckForNull VirtualChannel channel) {' - line 98", "'protected Launcher(@NonNull Launcher launcher) {' - line 107", "'public void prepareFilterRules(@CheckForNull Run<?, ?> run, @NonNull EnvVarsFilterableBuilder builder) {' - line 119", "'protected void setEnvVarsFilterRuleWrapper(EnvVarsFilterRuleWrapper envVarsFilterRuleWrapper) {' - line 126", "'public VirtualChannel getChannel() {' - line 139", "'public TaskListener getListener() {' - line 150", "'public Computer getComputer() {' - line 172", "'public ProcStarter cmdAsSingleString(String s) {' - line 221", "'return cmds(QuotedStringTokenizer.tokenize(s));' - line 222", "'public ProcStarter cmds(String... args) {' - line 225", "'return cmds(Arrays.asList(args));' - line 226", "'public ProcStarter cmds(File program, String... args) {' - line 229", "'public ProcStarter cmds(List<String> args) {' - line 236", "'public ProcStarter cmds(ArgumentListBuilder args) {' - line 241", "'public List<String> cmds() {' - line 247", "'public ProcStarter masks(@CheckForNull boolean... masks) {' - line 258", "'public boolean[] masks() {' - line 264", "'public ProcStarter quiet(boolean quiet) {' - line 275", "'public boolean quiet() {' - line 283", "'public ProcStarter pwd(@CheckForNull FilePath workDir) {' - line 294", "'public ProcStarter pwd(@NonNull File workDir) {' - line 299", "'return pwd(new FilePath(workDir));' - line 300", "'public ProcStarter pwd(@NonNull String workDir) {' - line 303", "'return pwd(new File(workDir));' - line 304", "'public FilePath pwd() {' - line 308", "'public ProcStarter stdout(@CheckForNull OutputStream out) {' - line 319", "'public ProcStarter stdout(@NonNull TaskListener out) {' - line 331", "'public OutputStream stdout() {' - line 343", "'public ProcStarter stderr(@CheckForNull OutputStream err) {' - line 351", "'public OutputStream stderr() {' - line 362", "'public ProcStarter stdin(@CheckForNull InputStream in) {' - line 373", "'public InputStream stdin() {' - line 384", "'public ProcStarter envs(@NonNull Map<String, String> overrides) {' - line 399", "'public ProcStarter envs(@CheckForNull String... overrides) {' - line 410", "'public String[] envs() {' - line 429", "'public ProcStarter readStdout() {' - line 446", "'public ProcStarter readStderr() {' - line 460", "'public ProcStarter writeStdin() {' - line 474", "'public ProcStarter buildStep(EnvVarsFilterableBuilder envVarsFilterableBuilder) {' - line 486", "'EnvVarsFilterableBuilder buildStep() {' - line 497", "'public Proc start() throws IOException {' - line 504", "'return launch(this);' - line 505", "'public int join() throws IOException, InterruptedException {' - line 514", "'public ProcStarter copy() {' - line 547", "'return launch(cmd, Util.mapToEnv(env), out, workDir);' - line 572", "'return launch(cmd, Util.mapToEnv(env), out, workDir);' - line 581", "'return launch(cmd, Util.mapToEnv(env), in, out);' - line 590", "'return launch(cmd, mask, Util.mapToEnv(env), out, workDir);' - line 612", "'return launch(cmd, mask, Util.mapToEnv(env), in, out);' - line 634", "'return launch(Util.tokenize(cmd), env, out, workDir);' - line 643", "'return launch(cmd, env, null, out, workDir);' - line 652", "'return launch(cmd, env, in, out, null);' - line 661", "'return launch(cmd, mask, env, null, out, workDir);' - line 683", "'return launch(cmd, mask, env, in, out, null);' - line 705", "'public Proc launch(String[] cmd, String[] env, InputStream in, OutputStream out, FilePath workDir) throws IOException {' - line 723", "'return launch(launch().cmds(cmd).envs(env).stdin(in).stdout(out).pwd(workDir));' - line 724", "'public Proc launch(String[] cmd, boolean[] mask, String[] env, InputStream in, OutputStream out, FilePath workDir) throws IOException {' - line 746", "'return launch(launch().cmds(cmd).masks(mask).envs(env).stdin(in).stdout(out).pwd(workDir));' - line 747", "'public boolean isUnix() {' - line 780", "'*                remain unmasked ({@code false}).' - line 823", "'public boolean isUnix() {' - line 874", "'public Proc launch(ProcStarter starter) throws IOException {' - line 879", "'public Channel launchChannel(String[] cmd, OutputStream out, FilePath workDir, Map<String, String> envVars) throws IOException, InterruptedException {' - line 889", "'public void kill(Map<String, String> modelEnvVars) throws IOException, InterruptedException {' - line 894", "'private String[] prefix(@NonNull String[] args) {' - line 898", "'private boolean[] prefix(@NonNull boolean[] args) {' - line 905", "'public boolean isUnix() {' - line 928", "'public Proc launch(ProcStarter starter) throws IOException {' - line 933", "'public Channel launchChannel(String[] cmd, OutputStream out, FilePath workDir, Map<String, String> envVars) throws IOException, InterruptedException {' - line 945", "'public void kill(Map<String, String> modelEnvVars) throws IOException, InterruptedException {' - line 952", "'public LocalLauncher(@NonNull TaskListener listener) {' - line 962", "'public LocalLauncher(TaskListener listener, VirtualChannel channel) {' - line 966", "'public Proc launch(ProcStarter ps) throws IOException {' - line 971", "'private File toFile(FilePath f) {' - line 996", "'public Channel launchChannel(String[] cmd, OutputStream out, FilePath workDir, Map<String, String> envVars) throws IOException {' - line 1001", "'return launchChannel(out, pb);' - line 1008", "'public void kill(Map<String, String> modelEnvVars) throws InterruptedException {' - line 1012", "'public Channel launchChannel(OutputStream out, ProcessBuilder pb) throws IOException {' - line 1020", "'public DummyLauncher(@NonNull TaskListener listener) {' - line 1064", "'public Proc launch(ProcStarter starter) throws IOException {' - line 1069", "'public Channel launchChannel(String[] cmd, OutputStream out, FilePath workDir, Map<String, String> envVars) throws IOException, InterruptedException {' - line 1074", "'public void kill(Map<String, String> modelEnvVars) throws IOException, InterruptedException {' - line 1079", "'public RemoteLauncher(@NonNull TaskListener listener, @NonNull VirtualChannel channel, boolean isUnix) {' - line 1091", "'public VirtualChannel getChannel() {' - line 1098", "'public Proc launch(ProcStarter ps) throws IOException {' - line 1107", "'public Channel launchChannel(String[] cmd, OutputStream err, FilePath _workDir, Map<String, String> envOverrides) throws IOException, InterruptedException {' - line 1127", "'public boolean isUnix() {' - line 1140", "'public void kill(final Map<String, String> modelEnvVars) throws IOException, InterruptedException {' - line 1145", "'public String toString() {' - line 1150", "'public Void call() throws RuntimeException {' - line 1162", "'public ProcImpl(RemoteProcess process) {' - line 1178", "'public void kill() throws IOException, InterruptedException {' - line 1184", "'public int join() throws IOException, InterruptedException {' - line 1195", "'public boolean isAlive() throws IOException, InterruptedException {' - line 1210", "'public InputStream getStdout() {' - line 1215", "'public InputStream getStderr() {' - line 1220", "'public OutputStream getStdin() {' - line 1225", "'public DecoratedLauncher(@NonNull Launcher inner) {' - line 1246", "'public Proc launch(ProcStarter starter) throws IOException {' - line 1252", "'public void kill(Map<String, String> modelEnvVars) throws IOException,' - line 1264", "'public boolean isUnix() {' - line 1270", "'public Proc launch(String[] cmd, boolean[] mask, String[] env, InputStream in, OutputStream out, FilePath workDir) throws IOException {' - line 1275", "'public Computer getComputer() {' - line 1280", "'public TaskListener getListener() {' - line 1285", "'public String toString() {' - line 1290", "'public VirtualChannel getChannel() {' - line 1295", "'public Proc launch(String[] cmd, String[] env, InputStream in, OutputStream out, FilePath workDir) throws IOException {' - line 1300", "'public Launcher getInner() {' - line 1309", "'int join() throws InterruptedException, IOException;' - line 1326", "'void kill() throws IOException, InterruptedException;' - line 1328", "'boolean isAlive() throws IOException, InterruptedException;' - line 1330", "'IOTriplet getIOtriplet();' - line 1333", "'public void setEnvVarsFilterRuleWrapper(EnvVarsFilterRuleWrapper envVarsFilterRuleWrapper) {' - line 1372", "'public RemoteProcess call() throws IOException {' - line 1377", "'public int join() throws InterruptedException, IOException {' - line 1398", "'public void kill() throws IOException, InterruptedException {' - line 1416", "'public boolean isAlive() throws IOException, InterruptedException {' - line 1421", "'public IOTriplet getIOtriplet() {' - line 1426", "'public OutputStream call() throws IOException {' - line 1461", "'private static EnvVars inherit(@CheckForNull String[] env) {' - line 1483", "'return inherit(m);' - line 1493", "'private static EnvVars inherit(@NonNull Map<String, String> overrides) {' - line 1499"]}, "DNSMultiCast.java": {"METHODS": []}, "WorkspaceSnapshot.java": {"METHODS": ["'public String getIconFileName() {' - line 50", "'public String getDisplayName() {' - line 56", "'public String getUrlName() {' - line 61"]}, "PluginManager.java": {"METHODS": ["'return doCreate(klass, jenkins);' - line 259", "'protected PluginManager(ServletContext context, File rootDir) {' - line 367", "'public Api getApi() {' - line 382", "'public File getWorkDir() {' - line 392", "'public Collection<PluginManagerStaplerOverride> getOverrides() {' - line 402", "'public TaskBuilder initTasks(final InitStrategy initStrategy) {' - line 411", "'public void run(Reactor session) throws Exception {' - line 421", "'public void run(Reactor session) throws Exception {' - line 428", "'public void run(Reactor session) throws Exception {' - line 435", "'public void run(Reactor session1) throws Exception {' - line 444", "'private boolean isDuplicate(PluginWrapper p) {' - line 461", "'public void run(Reactor reactor) throws Exception {' - line 479", "'protected List<PluginWrapper> getEdges(PluginWrapper p) {' - line 483", "'private void addTo(List<Dependency> dependencies, List<PluginWrapper> r) {' - line 490", "'protected void reactOnCycle(PluginWrapper q, List<PluginWrapper> cycle) {' - line 499", "'public void run(Reactor session) throws Exception {' - line 544", "'public void run(Reactor session) throws Exception {' - line 552", "'public void run(Reactor session) throws Exception {' - line 577", "'public void run(Reactor reactor) throws Exception {' - line 596", "'public void run(Reactor reactor) throws Exception {' - line 610", "'void considerDetachedPlugin(String shortName) {' - line 617", "'new File(rootDir, shortName + \".hpi\").isFile() ||' - line 619", "'new File(rootDir, shortName + \".jpl\").isFile() ||' - line 620", "'new File(rootDir, shortName + \".hpl\").isFile()) {' - line 621", "'return loadPluginsFromWar(fromPath, null);' - line 649", "'protected static void addDependencies(URL hpiResUrl, String fromPath, Set<URL> dependencySet) throws URISyntaxException, MalformedURLException {' - line 712", "'protected void loadDetachedPlugins() {' - line 767", "'public boolean accept(File dir, String name) {' - line 778", "'public boolean accept(File dir, String name) {' - line 825", "'private String normalisePluginName(@NonNull String name) {' - line 841", "'return getPluginVersion(pluginFile.toURI().toURL());' - line 859", "'private boolean containsHpiJpi(Collection<String> bundledPlugins, String name) {' - line 878", "'public void dynamicLoad(File arc) throws IOException, InterruptedException, RestartRequiredException {' - line 895", "'public void dynamicLoad(File arc, boolean removeExisting, @CheckForNull List<PluginWrapper> batch) throws IOException, InterruptedException, RestartRequiredException {' - line 903", "'public void start(List<PluginWrapper> plugins) throws Exception {' - line 969", "'protected boolean filter(Method e) {' - line 1009", "'new InitReactorRunner().run(r);' - line 1013", "'protected void copyBundledPlugin(URL src, String fileName) throws IOException {' - line 1072", "'/*package*/ static InputStream getBundledJpiManifestStream(@NonNull URL url) throws IOException {' - line 1124", "'/*package*/ static long getModificationDate(@NonNull URL url) throws IOException {' - line 1164", "'private void rename(File legacyFile, File newFile) throws IOException {' - line 1194", "'protected PluginStrategy createPluginStrategy() {' - line 1207", "'public PluginStrategy getPluginStrategy() {' - line 1235", "'public boolean isPluginUploaded() {' - line 1242", "'public List<PluginWrapper> getPlugins() {' - line 1250", "'public List<FailedPlugin> getFailedPlugins() {' - line 1254", "'public PluginWrapper getPlugin(String shortName) {' - line 1266", "'public PluginWrapper getPlugin(Class<? extends Plugin> pluginClazz) {' - line 1283", "'public List<PluginWrapper> getPlugins(Class<? extends Plugin> pluginSuperclass) {' - line 1297", "'public String getDisplayName() {' - line 1307", "'public String getSearchUrl() {' - line 1312", "'public PluginWrapper whichPlugin(Class c) {' - line 1337", "'return getPlugin(shortName);' - line 1369", "'public static boolean isNonMetaLabel(String label) {' - line 1402", "'public Object getStaplerFallback() {' - line 1418", "'public UpdateCenterProxy getUpdates() {' - line 1423", "'public HttpResponse doPluginsSearch(@QueryParameter String query, @QueryParameter Integer limit) {' - line 1428", "'public HttpResponse doPlugins() {' - line 1537", "'public HttpResponse doUpdateSources(StaplerRequest req) throws IOException {' - line 1584", "'public void doInstallPluginsDone() {' - line 1609", "'public void doInstall(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1619", "'public HttpResponse doInstallPlugins(StaplerRequest req) throws IOException {' - line 1648", "'return install(plugins, dynamicLoad, null);' - line 1684", "'new Thread() {' - line 1741", "'public void run() {' - line 1743", "'public HttpResponse doSiteConfigure(@QueryParameter String site) throws IOException {' - line 1790", "'public HttpResponse doProxyConfigure(StaplerRequest req) throws IOException, ServletException {' - line 1802", "'void copy(File target) throws Exception;' - line 1818", "'void cleanup();' - line 1820", "'public void copy(File target) throws Exception {' - line 1831", "'public void cleanup() {' - line 1836", "'public void copy(File target) throws Exception {' - line 1849", "'public void cleanup() {' - line 1856", "'public HttpResponse doUploadPlugin(StaplerRequest req) throws IOException, ServletException {' - line 1865", "'new UpdateSite(UpdateCenter.ID_UPLOAD, null).new Plugin(UpdateCenter.ID_UPLOAD, cfg).deploy(true);' - line 1953", "'@RequirePOST public FormValidation doCheckPluginUrl(StaplerRequest request, @QueryParameter String value) throws IOException {' - line 1961", "'@RequirePOST public FormValidation doCheckUpdateSiteUrl(StaplerRequest request, @QueryParameter String value) throws InterruptedException {' - line 1980", "'return checkUpdateSiteURL(value);' - line 1982", "'FormValidation checkUpdateSiteURL(@CheckForNull String value) throws InterruptedException {' - line 1986", "'@RequirePOST public HttpResponse doCheckUpdatesServer() throws IOException {' - line 2050", "'private FormValidation checkUpdatesServer() throws Exception {' - line 2108", "'public String getLastErrorCheckUpdateCenters() {' - line 2130", "'protected String identifyPluginShortName(File t) {' - line 2134", "'public Descriptor<ProxyConfiguration> getProxyDescriptor() {' - line 2146", "'private void logPluginWarnings(Map.Entry<String, VersionNumber> requestedPlugin, UpdateSite.Plugin toInstall) {' - line 2203", "'public JSONArray doPrevalidateConfig(StaplerRequest req) throws IOException {' - line 2223", "'public HttpResponse doInstallNecessaryPlugins(StaplerRequest req) throws IOException {' - line 2248", "'@Override public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {' - line 2263", "'@Override public InputSource resolveEntity(String publicId, String systemId) throws IOException,' - line 2280", "'public MetadataCache createCache() {' - line 2295", "'public UberClassLoader(List<PluginWrapper> activePlugins) {' - line 2346", "'protected URL findResource(String name) {' - line 2376", "'protected Enumeration<URL> findResources(String name) throws IOException {' - line 2392", "'public String toString() {' - line 2405", "'public FailedPlugin(String name, Exception cause) {' - line 2434", "'public FailedPlugin(PluginWrapper pluginWrapper, Exception cause) {' - line 2443", "'public String getExceptionString() {' - line 2449", "'public String getDisplayName() {' - line 2468", "'public boolean isActivated() {' - line 2477", "'public List<PluginWrapper> getPluginsWithCycle() {' - line 2490", "'public static PluginUpdateMonitor getInstance() {' - line 2508", "'public void ifPluginOlderThenReport(String pluginName, String requiredVersion, String message) {' - line 2519", "'public boolean isActivated() {' - line 2529", "'public String getDisplayName() {' - line 2534", "'public void addPluginToUpdate(String pluginName, String message) {' - line 2543", "'public Collection<PluginUpdateInfo> getPluginsToBeUpdated() {' - line 2547", "'private PluginUpdateInfo(String pluginName, String message) {' - line 2555", "'public String getDisplayName() {' - line 2574", "'public boolean isActivated() {' - line 2579", "'public String unscientific(double d) {' - line 2591", "'public Object getTarget() {' - line 2597", "'public boolean isMetaLabel(String label) {' - line 2605", "'public boolean hasAdoptThisPluginLabel(UpdateSite.Plugin plugin) {' - line 2610", "'public boolean hasAdoptThisPluginLabel(PluginWrapper plugin) {' - line 2615"]}, "StructuredForm.java": {"METHODS": ["'public static JSONObject get(StaplerRequest req) throws ServletException {' - line 46", "'public static List<JSONObject> toList(JSONObject parent, String propertyName) {' - line 64"]}, "BulkChange.java": {"METHODS": ["'public BulkChange(Saveable saveable) {' - line 77", "'public void commit() throws IOException {' - line 91", "'public void close() {' - line 104", "'public void abort() {' - line 119", "'private void pop() {' - line 125", "'public static BulkChange current() {' - line 139", "'public static boolean contains(Saveable s) {' - line 150"]}, "DescriptorExtensionList.java": {"METHODS": ["'protected DescriptorExtensionList(Hudson hudson, Class<T> describableType) {' - line 102", "'protected DescriptorExtensionList(Jenkins jenkins, Class<T> describableType) {' - line 106", "'public D find(String fqcn) {' - line 119", "'public D find(Class<? extends T> type) {' - line 127", "'public T newInstanceFromRadioList(JSONObject config) throws FormException {' - line 143", "'return get(idx).newInstance(Stapler.getCurrentRequest(), config);' - line 147", "'public T newInstanceFromRadioList(@NonNull JSONObject parent, @NonNull String name) throws FormException {' - line 159", "'return newInstanceFromRadioList(parent.getJSONObject(name));' - line 161", "'public boolean add(D d) {' - line 181", "'public boolean remove(Object o) {' - line 188", "'protected Object getLoadLock() {' - line 197", "'return getDescriptorExtensionList().getLoadLock();' - line 199", "'protected List<ExtensionComponent<D>> load() {' - line 206", "'return _load(getDescriptorExtensionList().getComponents());' - line 212", "'protected Collection<ExtensionComponent<D>> load(ExtensionComponentSet delta) {' - line 216", "'return _load(delta.find(Descriptor.class));' - line 217", "'private List<ExtensionComponent<D>> _load(Iterable<ExtensionComponent<Descriptor>> set) {' - line 220", "'private ExtensionList<Descriptor> getDescriptorExtensionList() {' - line 234", "'public static Iterable<Descriptor> listLegacyInstances() {' - line 252", "'public Iterator<Descriptor> iterator() {' - line 255", "'protected Iterator<ExtensionComponent<Descriptor>> expand(CopyOnWriteArrayList<ExtensionComponent<Descriptor>> v) {' - line 259", "'protected Descriptor adapt(ExtensionComponent<Descriptor> item) {' - line 265", "'public static void clearLegacyInstances() {' - line 276"]}, "RelativePath.java": {"METHODS": ["'String value();' - line 40"]}, "CopyOnWrite.java": {"METHODS": []}, "Proc.java": {"METHODS": ["'protected Proc() {}' - line 65", "'public void run() {' - line 159", "'return join();' - line 171", "'public LocalProc(String cmd, Map<String, String> env, OutputStream out, File workDir) throws IOException {' - line 190", "'public LocalProc(String[] cmd, Map<String, String> env, InputStream in, OutputStream out) throws IOException {' - line 194", "'public LocalProc(String cmd, String[] env, OutputStream out, File workDir) throws IOException {' - line 198", "'public LocalProc(String[] cmd, String[] env, OutputStream out, File workDir) throws IOException {' - line 202", "'public LocalProc(String[] cmd, String[] env, InputStream in, OutputStream out) throws IOException {' - line 206", "'public LocalProc(String[] cmd, String[] env, InputStream in, OutputStream out, File workDir) throws IOException {' - line 210", "'public LocalProc(String[] cmd, String[] env, InputStream in, OutputStream out, OutputStream err, File workDir) throws IOException {' - line 219", "'private static ProcessBuilder stderr(ProcessBuilder pb, boolean redirectError) {' - line 225", "'private static ProcessBuilder environment(ProcessBuilder pb, String[] env) {' - line 230", "'private LocalProc(String name, ProcessBuilder procBuilder, InputStream in, OutputStream out, OutputStream err) throws IOException {' - line 242", "'new StdinCopyThread(name + \": stdin copier\", in, proc.getOutputStream()).start();' - line 271", "'public InputStream getStdout() {' - line 300", "'public InputStream getStderr() {' - line 305", "'public OutputStream getStdin() {' - line 310", "'public int join() throws InterruptedException, IOException {' - line 318", "'public boolean isAlive() throws IOException, InterruptedException {' - line 368", "'public void kill() throws InterruptedException, IOException {' - line 378", "'private void destroy() throws InterruptedException {' - line 386", "'public void run() {' - line 405", "'private static String calcName(String[] cmd) {' - line 424", "'public RemoteProc(Future<Integer> process) {' - line 441", "'public void kill() throws IOException, InterruptedException {' - line 446", "'public int join() throws IOException, InterruptedException {' - line 458", "'public boolean isAlive() throws IOException, InterruptedException {' - line 479", "'public InputStream getStdout() {' - line 484", "'public InputStream getStderr() {' - line 489", "'public OutputStream getStdin() {' - line 494"]}, "PluginWrapper.java": {"METHODS": ["'public List<String> getDependencyErrors() {' - line 174", "'public List<String> getOriginalDependencyErrors() {' - line 179", "'public boolean hasOriginalDependencyErrors() {' - line 185", "'public List<String> getDerivedDependencyErrors() {' - line 190", "'public boolean hasDerivedDependencyErrors() {' - line 195", "'public void setDependents(@NonNull Set<String> dependents) {' - line 229", "'public void setDependants(@NonNull Set<String> dependents) {' - line 237", "'public void setOptionalDependents(@NonNull Set<String> optionalDependents) {' - line 245", "'public void setOptionalDependants(@NonNull Set<String> optionalDependents) {' - line 253", "'return getDependents();' - line 275", "'return getOptionalDependents();' - line 300", "'public boolean hasDependents() {' - line 309", "'public boolean hasMandatoryDependents() {' - line 317", "'public boolean hasDependants() {' - line 328", "'return hasDependents();' - line 329", "'public boolean hasOptionalDependents() {' - line 337", "'public boolean hasOptionalDependants() {' - line 345", "'return hasOptionalDependents();' - line 346", "'public boolean hasDependencies() {' - line 354", "'public boolean hasMandatoryDependencies() {' - line 362", "'public boolean isDeprecated() {' - line 373", "'public void injectJarsToClasspath(File... jars) throws Exception {' - line 414", "'public Dependency(String s) {' - line 435", "'public String toString() {' - line 460", "'public String getDisplayName() {' - line 498", "'public Api getApi() {' - line 502", "'public URL getIndexPage() {' - line 510", "'static String computeShortName(Manifest manifest, String fileName) {' - line 524", "'return getBaseName(fileName);' - line 536", "'public List<Dependency> getDependencies() {' - line 545", "'public List<Dependency> getMandatoryDependencies() {' - line 553", "'public List<Dependency> getOptionalDependencies() {' - line 557", "'public String getShortName() {' - line 566", "'public String getUrl() {' - line 598", "'private boolean allUrlsMatch(String url, List<UpdateSite.Plugin> uiList) {' - line 618", "'public String toString() {' - line 623", "'public String getLongName() {' - line 634", "'public YesNoMaybe supportsDynamicLoad() {' - line 644", "'public String getVersion() {' - line 654", "'return getVersionOf(manifest);' - line 655", "'private String getVersionOf(Manifest manifest) {' - line 658", "'public VersionNumber getVersionNumber() {' - line 687", "'public boolean isOlderThan(VersionNumber v) {' - line 694", "'return getVersionNumber().compareTo(v) < 0;' - line 696", "'public void stop() {' - line 707", "'public void releaseClassLoader() {' - line 724", "'public void enable() throws IOException {' - line 736", "'public void disable() throws IOException {' - line 751", "'private void disableWithoutCheck() throws IOException {' - line 758", "'private Set<String> dependentsToCheck(PluginDisableStrategy strategy) {' - line 847", "'public boolean isActive() {' - line 867", "'public boolean hasCycleDependency() {' - line 871", "'public void setHasCycleDependency(boolean hasCycle) {' - line 875", "'public boolean isBundled() {' - line 885", "'public boolean isEnabled() {' - line 894", "'public Manifest getManifest() {' - line 898", "'public void setPlugin(Plugin plugin) {' - line 902", "'public String getPluginClass() {' - line 907", "'public boolean hasLicensesXml() {' - line 911", "'new URL(baseResourceURL, \"WEB-INF/licenses.xml\").openStream().close();' - line 913", "'private boolean isDependencyObsolete(Dependency d, PluginWrapper dependency) {' - line 991", "'private void versionDependencyError(String message, String actual, String minimum) {' - line 1000", "'static boolean isSnapshot(@NonNull String version) {' - line 1011", "'public boolean hasUpdate() {' - line 1053", "'return getUpdateInfo() != null;' - line 1054", "'public boolean isPinned() {' - line 1059", "'public boolean isDeleted() {' - line 1069", "'public boolean isDetached() {' - line 1078", "'public boolean hasImpliedDependents() {' - line 1083", "'public int compareTo(PluginWrapper pw) {' - line 1122", "'public boolean isDowngradable() {' - line 1130", "'return getBackupFile().exists();' - line 1131", "'public File getBackupFile() {' - line 1137", "'public String getBackupVersion() {' - line 1146", "'public boolean isPinningForcingOldVersion() {' - line 1167", "'void addPlugin(PluginWrapper plugin) {' - line 1180", "'public boolean isActivated() {' - line 1185", "'public boolean hasAnyDerivedDependencyErrors() {' - line 1190", "'public String getDisplayName() {' - line 1195", "'public Collection<PluginWrapper> getPlugins() {' - line 1199", "'public PluginWrapper getPlugin(String shortName) {' - line 1203", "'public void doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 1210", "'public static PluginWrapperAdministrativeMonitor get() {' - line 1217", "'public PluginDisableResult(String plugin) {' - line 1231", "'public PluginDisableResult(String plugin, PluginDisableStatus status, String message) {' - line 1235", "'public String getPlugin() {' - line 1241", "'public PluginDisableStatus getStatus() {' - line 1245", "'public boolean equals(Object o) {' - line 1250", "'public int hashCode() {' - line 1258", "'public void setStatus(PluginDisableStatus status) {' - line 1262", "'public String getMessage() {' - line 1266", "'public void setMessage(String message) {' - line 1270", "'public Set<PluginDisableResult> getDependentsDisableStatus() {' - line 1274", "'public void addDependentDisableStatus(PluginDisableResult dependentDisableStatus) {' - line 1278", "'public String toString() {' - line 1304", "'public HttpResponse doMakeEnabled() throws IOException {' - line 1315", "'public HttpResponse doMakeDisabled() throws IOException {' - line 1322", "'public HttpResponse doPin() throws IOException {' - line 1330", "'public HttpResponse doUnpin() throws IOException {' - line 1339", "'public HttpResponse doDoUninstall() throws IOException {' - line 1347", "'public String getIssueTrackerReportUrl() {' - line 1386"]}, "PluginManagerStaplerOverride.java": {"METHODS": []}, "Functions.java": {"METHODS": ["'public Functions() {' - line 191", "'public String generateId() {' - line 197", "'public static boolean isModel(Object o) {' - line 201", "'public static boolean isModelWithContextMenu(Object o) {' - line 205", "'public static boolean isModelWithChildren(Object o) {' - line 209", "'public static boolean isMatrixProject(Object o) {' - line 214", "'public static String xsDate(Calendar cal) {' - line 218", "'public static String iso8601DateTime(Date date) {' - line 223", "'public static String localDate(Date date) {' - line 231", "'public static String rfc822Date(Calendar cal) {' - line 235", "'public static String getTimeSpanString(Date date) {' - line 243", "'public static boolean isExtensionsAvailable() {' - line 267", "'public static void initPageVariables(JellyContext context) {' - line 273", "'public static String getDiffString(int i) {' - line 330", "'public static String getDiffString2(int i) {' - line 340", "'public static String getDiffString2(String prefix, int i, String suffix) {' - line 351", "'public static String addSuffix(int n, String singular, String plural) {' - line 361", "'public static RunUrl decompose(StaplerRequest req) {' - line 371", "'public static Area getScreenResolution() {' - line 408", "'public static boolean useHidingPasswordFields() {' - line 416", "'public RunUrl(Run run, String head, String base, String rest) {' - line 449", "'public String getBaseUrl() {' - line 456", "'public String getNextBuildUrl() {' - line 463", "'return getUrl(run.getNextBuild());' - line 464", "'public String getPreviousBuildUrl() {' - line 470", "'return getUrl(run.getPreviousBuild());' - line 471", "'private String getUrl(Run n) {' - line 474", "'public static String getProjectListString(List<AbstractProject> projects) {' - line 487", "'public static Object ifThenElse(boolean cond, Object thenValue, Object elseValue) {' - line 497", "'public static String appendIfNotNull(String text, String suffix, String nullText) {' - line 501", "'public static Map getSystemProperties() {' - line 505", "'public static String getSystemProperty(String key) {' - line 515", "'public static Map getEnvVars() {' - line 519", "'public static boolean isWindows() {' - line 523", "'public static boolean isGlibcSupported() {' - line 527", "'public static List<LogRecord> getLogRecords() {' - line 536", "'public static String printLogRecord(LogRecord r) {' - line 540", "'public static String[] printLogRecordHtml(LogRecord r, LogRecord prior) {' - line 545", "'private static String[] logRecordPreformat(LogRecord r) {' - line 560", "'public static Cookie getCookie(HttpServletRequest req, String name) {' - line 591", "'public static String getCookie(HttpServletRequest req, String name, String defaultValue) {' - line 603", "'public static String validateIconSize(String iconSize) throws SecurityException {' - line 612", "'public static String getYuiSuffix() {' - line 622", "'public static void configureAutoRefresh(HttpServletRequest request, HttpServletResponse response, boolean noAutoRefresh) {' - line 667", "'public static boolean isAutoRefresh(HttpServletRequest request) {' - line 672", "'public static boolean isCollapsed(String paneId) {' - line 676", "'public static boolean isUserTimeZoneOverride() {' - line 681", "'public static String getUserTimeZone() {' - line 687", "'public static String getUserTimeZonePostfix() {' - line 692", "'public static long getHourLocalTimezone() {' - line 702", "'public static String getNearestAncestorUrl(StaplerRequest req, Object it) {' - line 713", "'public static String getSearchURL() {' - line 726", "'public static String appendSpaceIfNotNull(String n) {' - line 736", "'public static String nbspIndent(String size) {' - line 745", "'public static String getWin32ErrorMessage(IOException e) {' - line 751", "'public static boolean isMultiline(String s) {' - line 755", "'public static String encode(String s) {' - line 773", "'public static String urlEncode(String s) {' - line 791", "'public static String escape(String s) {' - line 809", "'public static String xmlEscape(String s) {' - line 823", "'public static String xmlUnescape(String s) {' - line 827", "'public static String htmlAttributeEscape(String text) {' - line 841", "'public static void checkPermission(Permission permission) throws IOException, ServletException {' - line 865", "'public static void checkPermission(AccessControlled object, Permission permission) throws IOException, ServletException {' - line 869", "'public static void checkPermission(Object object, Permission permission) throws IOException, ServletException {' - line 880", "'public static boolean hasPermission(Permission permission) throws IOException, ServletException {' - line 905", "'return hasPermission(Jenkins.get(), permission);' - line 906", "'public static boolean hasPermission(Object object, Permission permission) throws IOException, ServletException {' - line 913", "'public static void adminCheck(StaplerRequest req, StaplerResponse rsp, Object required, Permission permission) throws IOException, ServletException {' - line 930", "'public static String inferHudsonURL(StaplerRequest req) {' - line 948", "'public static String getFooterURL() {' - line 965", "'public static List<JobPropertyDescriptor> getJobPropertyDescriptors(Class<? extends Job> clazz) {' - line 977", "'public static List<JobPropertyDescriptor> getJobPropertyDescriptors(Job job) {' - line 981", "'public static List<Descriptor<BuildWrapper>> getBuildWrapperDescriptors(AbstractProject<?, ?> project) {' - line 985", "'public static List<Descriptor<SecurityRealm>> getSecurityRealmDescriptors() {' - line 989", "'public static List<Descriptor<AuthorizationStrategy>> getAuthorizationStrategyDescriptors() {' - line 993", "'public static List<Descriptor<Builder>> getBuilderDescriptors(AbstractProject<?, ?> project) {' - line 997", "'public static List<Descriptor<Publisher>> getPublisherDescriptors(AbstractProject<?, ?> project) {' - line 1001", "'public static List<Descriptor<ComputerLauncher>> getComputerLauncherDescriptors() {' - line 1016", "'public static List<ParameterDescriptor> getParameterDescriptors() {' - line 1031", "'public static List<Descriptor<CaptchaSupport>> getCaptchaSupportDescriptors() {' - line 1035", "'public static List<Descriptor<ViewsTabBar>> getViewsTabBarDescriptors() {' - line 1039", "'public static List<Descriptor<MyViewsTabBar>> getMyViewsTabBarDescriptors() {' - line 1043", "'public static List<NodePropertyDescriptor> getNodePropertyDescriptors(Class<? extends Node> clazz) {' - line 1054", "'public static List<NodePropertyDescriptor> getGlobalNodePropertyDescriptors() {' - line 1070", "'public static Collection<Descriptor> getSortedDescriptorsForGlobalConfig(com.google.common.base.Predicate<GlobalConfigurationCategory> predicate) {' - line 1101", "'public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor(Predicate<Descriptor> predicate) {' - line 1142", "'public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigByDescriptor() {' - line 1165", "'return getSortedDescriptorsForGlobalConfigByDescriptor(descriptor -> true);' - line 1166", "'public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigNoSecurity() {' - line 1173", "'return getSortedDescriptorsForGlobalConfigByDescriptor(d -> GlobalSecurityConfiguration.FILTER.negate().test(d));' - line 1174", "'public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassified() {' - line 1182", "'return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && Jenkins.get().hasPermission(d.getRequiredGlobalConfigPagePermission()));' - line 1183", "'public static Collection<Descriptor> getSortedDescriptorsForGlobalConfigUnclassifiedReadable() {' - line 1192", "'return getSortedDescriptorsForGlobalConfigByDescriptor(d -> d.getCategory() instanceof GlobalConfigurationCategory.Unclassified && (' - line 1193", "'public static boolean hasAnyPermission(AccessControlled ac, Permission[] permissions) {' - line 1202", "'public static boolean hasAnyPermission(Object object, Permission[] permissions) throws IOException, ServletException {' - line 1217", "'return hasAnyPermission((AccessControlled) object, permissions);' - line 1223", "'return hasAnyPermission(ac, permissions);' - line 1227", "'return hasAnyPermission(Jenkins.get(), permissions);' - line 1230", "'public static void checkAnyPermission(AccessControlled ac, Permission[] permissions) {' - line 1242", "'public static void checkAnyPermission(Object object, Permission[] permissions) throws IOException, ServletException {' - line 1255", "'private StringBuilder buildSuperclassHierarchy(Class c, StringBuilder buf) {' - line 1286", "'public int compareTo(Tag that) {' - line 1293", "'public static String getIconFilePath(Action a) {' - line 1304", "'public static int size2(Object o) throws Exception {' - line 1322", "'public static String getRelativeLinkTo(Item p) {' - line 1330", "'return normalizeURI(path + '/');' - line 1343", "'return normalizeURI(ancestors.get(view) + '/' + url);' - line 1357", "'return normalizeURI(request.getContextPath() + '/' + p.getUrl());' - line 1360", "'return normalizeURI(path + '/' + url);' - line 1366", "'private static String normalizeURI(String uri) {' - line 1374", "'public static List<TopLevelItem> getAllTopLevelItems(ItemGroup root) {' - line 1383", "'public static String getRelativeNameFrom(@CheckForNull Item p, @CheckForNull ItemGroup g, boolean useDisplayName) {' - line 1401", "'public static String getRelativeNameFrom(@CheckForNull Item p, @CheckForNull ItemGroup g) {' - line 1452", "'return getRelativeNameFrom(p, g, false);' - line 1453", "'public static String getRelativeDisplayNameFrom(@CheckForNull Item p, @CheckForNull ItemGroup g) {' - line 1469", "'return getRelativeNameFrom(p, g, true);' - line 1470", "'public static ThreadInfo[] getThreadInfos() {' - line 1479", "'public static ThreadGroupMap sortThreadsAndGetGroupMap(ThreadInfo[] list) {' - line 1484", "'protected int compare(long idA, long idB) {' - line 1505", "'public String getThreadGroup(ThreadInfo ti) {' - line 1521", "'public int compare(ThreadInfo a, ThreadInfo b) {' - line 1526", "'public int compare(Thread a, Thread b) {' - line 1539", "'public static boolean isMustangOrAbove() {' - line 1551", "'public static String dumpThreadInfo(ThreadInfo ti, ThreadGroupMap map) {' - line 1556", "'public static String jsStringEscape(String s) {' - line 1631", "'public static String capitalize(String s) {' - line 1656", "'public static String getVersion() {' - line 1661", "'public static String getResourcePath() {' - line 1668", "'public static String getViewResource(Object it, String path) {' - line 1672", "'public static boolean hasView(Object it, String path) throws IOException {' - line 1686", "'public static boolean defaultToTrue(Boolean b) {' - line 1696", "'private static void doPrintStackTrace(@NonNull StringBuilder s, @NonNull Throwable t, @CheckForNull Throwable higher, @NonNull String prefix, @NonNull Set<Throwable> encountered) {' - line 1730", "'public static void printStackTrace(@CheckForNull Throwable t, @NonNull PrintWriter pw) {' - line 1783", "'public static void printStackTrace(@CheckForNull Throwable t, @NonNull PrintStream ps) {' - line 1793", "'public static int determineRows(String s) {' - line 1801", "'public static String toCCStatus(Item i) {' - line 1815", "'public static boolean isAnonymous() {' - line 1824", "'public static JellyContext getCurrentJellyContext() {' - line 1835", "'public static String runScript(Script script) throws JellyTagException {' - line 1846", "'public static String joinPath(String... components) {' - line 1866", "'return joinPath(Stapler.getCurrentRequest().getContextPath(), urlName);' - line 1899", "'return joinPath(Stapler.getCurrentRequest().getContextPath() + '/' + itUrl, urlName);' - line 1902", "'public static String toEmailSafeString(String projectName) {' - line 1910", "'public String getServerName() {' - line 1935", "'public String getCheckUrl(String userDefined, Object descriptor, String field) {' - line 1958", "'public void calcCheckUrl(Map attributes, String userDefined, Object descriptor, String field) {' - line 1971", "'public boolean hyperlinkMatchesCurrentPage(String href) {' - line 1987", "'public static List<PageDecorator> getPageDecorators() {' - line 2012", "'public static SimplePageDecorator getSimplePageDecorator() {' - line 2022", "'public static List<SimplePageDecorator> getSimplePageDecorators() {' - line 2026", "'public static List<Descriptor<Cloud>> getCloudDescriptors() {' - line 2030", "'public String prepend(String prefix, String body) {' - line 2037", "'public static List<Descriptor<CrumbIssuer>> getCrumbIssuerDescriptors() {' - line 2043", "'public static String getCrumb(StaplerRequest req) {' - line 2047", "'public static String getCrumbRequestField() {' - line 2053", "'public static Date getCurrentTime() {' - line 2059", "'public static Locale getCurrentLocale() {' - line 2063", "'public static String generateConsoleAnnotationScriptAndStylesheet() {' - line 2077", "'public List<String> getLoggerNames() {' - line 2100", "'public String getPasswordValue(Object o) {' - line 2117", "'private String getJellyViewsInformationForCurrentRequest() {' - line 2165", "'public List filterDescriptors(Object context, Iterable descriptors) {' - line 2184", "'public static boolean getIsUnitTest() {' - line 2191", "'public static boolean isArtifactsPermissionEnabled() {' - line 2206", "'public static boolean isWipeOutPermissionEnabled() {' - line 2221", "'public static String createRenderOnDemandProxy(JellyContext context, String attributesToCapture) {' - line 2225", "'public static String getCurrentDescriptorByNameUrl() {' - line 2229", "'public static String setCurrentDescriptorByNameUrl(String value) {' - line 2233", "'public static void restoreCurrentDescriptorByNameUrl(String old) {' - line 2240", "'public static List<String> getRequestHeaders(String name) {' - line 2244", "'public static Object rawHtml(Object o) {' - line 2256", "'public static ArrayList<CLICommand> getCLICommands() {' - line 2260", "'public static String getAvatar(User user, String avatarSize) {' - line 2273", "'public String getUserAvatar(User user, String avatarSize) {' - line 2282", "'return getAvatar(user, avatarSize);' - line 2283", "'public static String humanReadableByteSize(long size) {' - line 2293", "'public static String breakableString(final String plain) {' - line 2324", "'public static void advertiseHeaders(HttpServletResponse rsp) {' - line 2337", "'public static boolean isContextMenuVisible(Action a) {' - line 2347", "'public static Icon tryGetIcon(String iconGuess) {' - line 2356", "'public static String extractPluginNameFromIconSrc(String iconSrc) {' - line 2391", "'public static String tryGetIconPath(String iconGuess, JellyContext context) {' - line 2411", "'static String guessIcon(String iconGuess, String rootURL) {' - line 2433", "'public static String generateItemId() {' - line 2454"]}, "AbortException.java": {"METHODS": ["'public AbortException() {' - line 36", "'public AbortException(String message) {' - line 43"]}, "ExpressionFactory2.java": {"METHODS": ["'public Expression createExpression(String text) throws JellyException {' - line 24", "'public String toString() {' - line 59", "'public String getExpressionText() {' - line 66", "'public Object evaluate(JellyContext context) {' - line 71", "'public void setVars(Map vars) {' - line 99", "'public Map getVars() {' - line 105", "'public Object get(Object key) {' - line 120", "'public void clear() {' - line 125", "'public boolean containsKey(Object key) {' - line 130", "'return get(key) != null;' - line 131", "'public boolean containsValue(Object value) {' - line 135", "'public Set entrySet() {' - line 140", "'public boolean isEmpty() {' - line 145", "'public Set keySet() {' - line 150", "'public Object put(Object key, Object value) {' - line 155", "'public void putAll(Map t) {' - line 160", "'public Object remove(Object key) {' - line 165", "'public int size() {' - line 170", "'public Collection values() {' - line 175"]}, "ExtensionFinder.java": {"METHODS": ["'public boolean isRefreshable() {' - line 100", "'return getClass().getMethod(\"refresh\").getDeclaringClass() != ExtensionFinder.class;' - line 102", "'return find(type, hudson);' - line 153", "'public void scout(Class extensionType, Hudson hudson) {' - line 186", "'public DefaultGuiceExtensionAnnotation() {' - line 191", "'protected boolean isOptional(Extension annotation) {' - line 196", "'protected double getOrdinal(Extension annotation) {' - line 201", "'protected boolean isActive(AnnotatedElement e) {' - line 206", "'protected GuiceExtensionAnnotation(Class<T> annotationType) {' - line 218", "'public GuiceFinder() {' - line 260", "'protected void configure() {' - line 268", "'protected Injector resolve() {' - line 293", "'return getContainer();' - line 294", "'private void refreshExtensionAnnotations() {' - line 299", "'public Injector getContainer() {' - line 316", "'private Object instantiate(IndexItem<?, Object> item) {' - line 366", "'private boolean isOptional(Annotation annotation) {' - line 378", "'private boolean isActive(Annotation annotation, AnnotatedElement e) {' - line 383", "'public void scout(Class extensionType, Hudson hudson) {' - line 416", "'public T get() {' - line 442", "'void error(Key<T> key, Throwable x) {' - line 451", "'private void resolve(Class<?> c) {' - line 486", "'private void resolve(Class<?> c, Set<Class<?>> encountered) {' - line 490", "'protected void configure() {' - line 558", "'Collection<Method> getMethodAndInterfaceDeclarations(Method method, Collection<Class<?>> interfaces) {' - line 647", "'return _find(type, delta);' - line 714", "'return _find(type, getIndices());' - line 733", "'public void scout(Class extensionType, Hudson hudson) {' - line 762", "'private Level logLevel(IndexItem<Extension, Object> item) {' - line 778"]}, "FileSystemProvisioner.java": {"METHODS": ["'public Descriptor getDescriptor() {' - line 46", "'public void prepareWorkspace(AbstractBuild<?, ?> build, FilePath ws, TaskListener listener) throws IOException, InterruptedException {' - line 54", "'public void discardWorkspace(AbstractProject<?, ?> project, FilePath ws) throws IOException, InterruptedException {' - line 58", "'public WorkspaceSnapshot snapshot(AbstractBuild<?, ?> build, FilePath ws, String glob, TaskListener listener) throws IOException, InterruptedException {' - line 62"]}, "Lifecycle.java": {"METHODS": ["'public void verifyRestartable() throws RestartNotSupportedException {' - line 104", "'public void verifyRestartable() throws RestartNotSupportedException {' - line 123", "'public File getHudsonWar() {' - line 146", "'public void rewriteHudsonWar(File by) throws IOException {' - line 161", "'public boolean canRewriteHudsonWar() {' - line 184", "'public void restart() throws IOException, InterruptedException {' - line 210", "'public void verifyRestartable() throws RestartNotSupportedException {' - line 220", "'public boolean canRestart() {' - line 231", "'public void onReady() {' - line 246", "'public void onReload(@NonNull String user, @CheckForNull String remoteAddr) {' - line 258", "'public void onStop(@NonNull String user, @CheckForNull String remoteAddr) {' - line 274", "'public void onExtendTimeout(long timeout, @NonNull TimeUnit unit) {}' - line 295", "'public void onStatusUpdate(String status) {' - line 305"]}, "SolarisSMFLifecycle.java": {"METHODS": ["'public void restart() throws IOException, InterruptedException {' - line 43"]}, "UnixLifecycle.java": {"METHODS": ["'public UnixLifecycle() throws IOException {' - line 55", "'public void restart() throws IOException, InterruptedException {' - line 65", "'public void verifyRestartable() throws RestartNotSupportedException {' - line 90"]}, "SystemdLifecycle.java": {"METHODS": ["'int sd_notify(int unset_environment, String state);' - line 27", "'public void onReady() {' - line 31", "'public void onReload(@NonNull String user, @CheckForNull String remoteAddr) {' - line 37", "'public void onStop(@NonNull String user, @CheckForNull String remoteAddr) {' - line 43", "'public void onExtendTimeout(long timeout, @NonNull TimeUnit unit) {' - line 49", "'public void onStatusUpdate(String status) {' - line 55"]}, "RestartNotSupportedException.java": {"METHODS": ["'public RestartNotSupportedException(String reason) {' - line 8", "'public RestartNotSupportedException(String reason, Throwable cause) {' - line 12"]}, "WindowsServiceLifecycle.java": {"METHODS": ["'public WindowsServiceLifecycle() {' - line 54", "'private void updateJenkinsExeIfNeeded() {' - line 63", "'public void rewriteHudsonWar(File by) throws IOException {' - line 97", "'public void restart() throws IOException, InterruptedException {' - line 121", "'private static File getBaseDir() {' - line 150"]}, "ExitLifecycle.java": {"METHODS": ["'public ExitLifecycle() {' - line 55", "'public void restart() {' - line 61"]}, "WindowsInstallerLink.java": {"METHODS": ["'private WindowsInstallerLink(File jenkinsWar) {' - line 76", "'public String getIconFileName() {' - line 81", "'public String getUrlName() {' - line 86", "'public String getDisplayName() {' - line 91", "'public String getDescription() {' - line 96", "'public Category getCategory() {' - line 103", "'public boolean isInstalled() {' - line 110", "'public void doDoInstall(StaplerRequest req, StaplerResponse rsp, @QueryParameter(\"dir\") String _dir) throws IOException, ServletException {' - line 118", "'private void copy(StaplerRequest req, StaplerResponse rsp, File dir, URL src, String name) throws ServletException, IOException {' - line 170", "'public void doRestart(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 181", "'new Thread(\"terminator\") {' - line 196", "'public void run() {' - line 199", "'public void run() {' - line 206", "'new File(installationDir, \"jenkins.exe\"), \"start\", task, installationDir);' - line 225", "'private DefaultLogger createLogger() {' - line 232", "'public static WindowsInstallerLink registerIfApplicable() {' - line 266", "'static int runElevated(File jenkinsExe, String command, TaskListener out, File pwd) throws IOException, InterruptedException {' - line 292"]}, "InstallSourceProperty.java": {"METHODS": ["'public InstallSourceProperty(List<? extends ToolInstaller> installers) throws IOException {' - line 48", "'public void setTool(ToolInstallation t) {' - line 55", "'public Class<ToolInstallation> type() {' - line 62", "'public String getDisplayName() {' - line 70"]}, "ToolLocationTranslator.java": {"METHODS": ["'public static ExtensionList<ToolLocationTranslator> all() {' - line 70"]}, "ToolLocationNodeProperty.java": {"METHODS": ["'public ToolLocationNodeProperty(List<ToolLocation> locations) {' - line 57", "'public ToolLocationNodeProperty(ToolLocation... locations) {' - line 64", "'public List<ToolLocation> getLocations() {' - line 68", "'public String getHome(ToolInstallation installation) {' - line 72", "'public static String getToolHome(Node node, ToolInstallation installation, TaskListener log) throws IOException, InterruptedException {' - line 94", "'public String getDisplayName() {' - line 123", "'public String getKey(ToolInstallation installation) {' - line 131", "'public boolean isApplicable(Class<? extends Node> nodeType) {' - line 136", "'public ToolLocation(ToolDescriptor type, String name, String home) {' - line 151", "'public ToolLocation(String key, String home) {' - line 159", "'public String getName() {' - line 165", "'public String getHome() {' - line 169", "'public ToolDescriptor getType() {' - line 174", "'public String getKey() {' - line 181"]}, "ToolInstallation.java": {"METHODS": ["'protected ToolInstallation(String name, String home) {' - line 106", "'protected ToolInstallation(String name, String home, List<? extends ToolProperty<?>> properties) {' - line 111", "'public String getName() {' - line 133", "'public void buildEnvVars(EnvVars env) {' - line 157", "'public ToolInstallation translate(@NonNull Node node, EnvVars envs, TaskListener listener) throws IOException, InterruptedException {' - line 182", "'public ToolInstallation translate(AbstractBuild<?, ?> buildInProgress, TaskListener listener) throws IOException, InterruptedException {' - line 199", "'return translate(buildInProgress.getBuiltOn(), buildInProgress.getEnvironment(listener), listener);' - line 201", "'protected String translateFor(Node node, TaskListener log) throws IOException, InterruptedException {' - line 219", "'protected Object readResolve() {' - line 227", "'protected Object writeReplace() throws Exception {' - line 236", "'@Override public String toString() {' - line 254", "'return getClass().getSimpleName() + \"[\" + name + \"]\";' - line 255", "'protected ToolConverter(XStream2 xstream) { super(xstream); }' - line 262", "'protected void callback(ToolInstallation obj, UnmarshallingContext context) {' - line 265"]}, "BatchCommandInstaller.java": {"METHODS": ["'public BatchCommandInstaller(String label, String command, String toolHome) {' - line 42", "'public String getCommandFileExtension() {' - line 47", "'public String[] getCommandCall(FilePath script) {' - line 52", "'private Object readResolve() throws ObjectStreamException {' - line 56", "'public String getDisplayName() {' - line 65"]}, "DownloadFromUrlInstaller.java": {"METHODS": ["'protected DownloadFromUrlInstaller(String id) {' - line 29", "'protected boolean isUpToDate(FilePath expectedLocation, Installable i) throws IOException, InterruptedException {' - line 42", "'public Installable getInstallable() throws IOException {' - line 52", "'public FilePath performInstallation(ToolInstallation tool, Node node, TaskListener log) throws IOException, InterruptedException {' - line 60", "'protected FilePath findPullUpDirectory(FilePath root) throws IOException, InterruptedException {' - line 113", "'protected DescriptorImpl() {' - line 126", "'public Downloadable createDownloadable() {' - line 134", "'public JSONObject reduce(List<JSONObject> jsonList) {' - line 138", "'private boolean isDefaultSchema(List<JSONObject> jsonList) {' - line 154", "'private JSONObject reduce(List<JSONObject> jsonList) {' - line 177", "'public String getId() {' - line 204", "'protected NodeSpecificInstallable(Installable inst) {' - line 256"]}, "ToolProperty.java": {"METHODS": ["'protected void setTool(T tool) {' - line 54", "'public ToolPropertyDescriptor getDescriptor() {' - line 59"]}, "ZipExtractionInstaller.java": {"METHODS": ["'public ZipExtractionInstaller(String label, String url, String subdir) {' - line 68", "'public String getUrl() {' - line 74", "'public String getSubdir() {' - line 78", "'public FilePath performInstallation(ToolInstallation tool, Node node, TaskListener log) throws IOException, InterruptedException {' - line 83", "'public String getDisplayName() {' - line 100", "'public FormValidation doCheckUrl(@QueryParameter String value) throws InterruptedException {' - line 105", "'public Void invoke(File d, VirtualChannel channel) throws IOException {' - line 149", "'private void process(File f) {' - line 155"]}, "PropertyDescriptor.java": {"METHODS": ["'protected PropertyDescriptor(Class<? extends P> clazz) {' - line 19", "'protected PropertyDescriptor() {' - line 23", "'private Class<P> getP() {' - line 29", "'public boolean isApplicable(Class<? extends T> targetType) {' - line 45", "'return for_(all, (Class) target.getClass());' - line 59"]}, "CommandInstaller.java": {"METHODS": ["'public CommandInstaller(String label, String command, String toolHome) {' - line 41", "'public String getCommandFileExtension() {' - line 46", "'public String[] getCommandCall(FilePath script) {' - line 51", "'private Object readResolve() throws ObjectStreamException {' - line 55", "'public String getDisplayName() {' - line 64"]}, "ToolInstallerDescriptor.java": {"METHODS": ["'public boolean isApplicable(Class<? extends ToolInstallation> toolType) {' - line 48", "'public AutoCompletionCandidates doAutoCompleteLabel(@QueryParameter String value) {' - line 68", "'public FormValidation doCheckLabel(@QueryParameter String value) {' - line 73"]}, "InstallerTranslator.java": {"METHODS": ["'public String getToolHome(Node node, ToolInstallation tool, TaskListener log) throws IOException, InterruptedException {' - line 45"]}, "ToolInstaller.java": {"METHODS": ["'protected ToolInstaller(String label) {' - line 60", "'protected void setTool(ToolInstallation t) {' - line 68", "'public boolean appliesTo(Node node) {' - line 84", "'private String sanitize(String s) {' - line 126", "'public ToolInstallerEntry() {' - line 161", "'public ToolInstallerEntry(String id, String name, String url) {' - line 171"]}, "ToolDescriptor.java": {"METHODS": ["'protected ToolDescriptor() { }' - line 56", "'protected ToolDescriptor(Class<T> clazz) {' - line 61", "'public T[] getInstallations() {' - line 72", "'return emptyArray_unsafeCast();' - line 84", "'private T[] emptyArray_unsafeCast() {' - line 93", "'public void setInstallations(T... installations) {' - line 103", "'public List<ToolPropertyDescriptor> getPropertyDescriptors() {' - line 110", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 147", "'public FormValidation doCheckHome(@QueryParameter File value) {' - line 156", "'return checkHomeDirectory(value);' - line 168", "'protected FormValidation checkHomeDirectory(File home) {' - line 177", "'public FormValidation doCheckName(@QueryParameter String value) {' - line 185"]}, "ToolPropertyDescriptor.java": {"METHODS": ["'protected ToolPropertyDescriptor(Class<? extends ToolProperty<?>> clazz) {' - line 39", "'protected ToolPropertyDescriptor() {' - line 43"]}, "AbstractCommandInstaller.java": {"METHODS": ["'protected AbstractCommandInstaller(String label, String command, String toolHome) {' - line 50", "'public String getCommand() {' - line 56", "'public String getToolHome() {' - line 60", "'public FilePath performInstallation(ToolInstallation tool, Node node, TaskListener log) throws IOException, InterruptedException {' - line 72", "'public FormValidation doCheckCommand(@QueryParameter String value) {' - line 91", "'public FormValidation doCheckToolHome(@QueryParameter String value) {' - line 99"]}, "HeapSpaceStringConverter.java": {"METHODS": ["'public boolean canConvert(Class type) {' - line 47", "'public Object fromString(String str) {' - line 52"]}, "MultipartFormDataParser.java": {"METHODS": ["'public MultipartFormDataParser(HttpServletRequest request, int maxParts, long maxPartSize, long maxSize) throws ServletException {' - line 75", "'public MultipartFormDataParser(HttpServletRequest request, int maxParts) throws ServletException {' - line 97", "'public MultipartFormDataParser(HttpServletRequest request) throws ServletException {' - line 101", "'public String get(String key) {' - line 105", "'public FileItem getFileItem(String key) {' - line 111", "'public void cleanUp() {' - line 119", "'public void close() {' - line 126", "'public static boolean isMultiPartForm(@CheckForNull String contentType) {' - line 137"]}, "Area.java": {"METHODS": ["'public Area(int width, int height) {' - line 39", "'public static Area parse(String s) {' - line 47", "'public int area() {' - line 54", "'public String toString() {' - line 59"]}, "StreamResource.java": {"METHODS": ["'public StreamResource(String name, @NonNull InputStream in) {' - line 43", "'public InputStream getInputStream() throws IOException {' - line 49", "'public boolean equals(Object o) {' - line 54", "'public int hashCode() {' - line 69"]}, "ComboBoxModel.java": {"METHODS": ["'public ComboBoxModel(int initialCapacity) {' - line 45", "'public ComboBoxModel() {' - line 49", "'public ComboBoxModel(Collection<? extends String> c) {' - line 52", "'public ComboBoxModel(String... values) {' - line 56", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 61"]}, "EncodingStream.java": {"METHODS": ["'public EncodingStream(OutputStream out) {' - line 39", "'public void write(int b) throws IOException {' - line 44"]}, "TimeUnit2.java": {"METHODS": ["'@Override public long toNanos(long d)   { return d; }' - line 75", "'@Override public long toMicros(long d)  { return d / (C1 / C0); }' - line 77", "'@Override public long toMillis(long d)  { return d / (C2 / C0); }' - line 79", "'@Override public long toSeconds(long d) { return d / (C3 / C0); }' - line 81", "'@Override public long toMinutes(long d) { return d / (C4 / C0); }' - line 83", "'@Override public long toHours(long d)   { return d / (C5 / C0); }' - line 85", "'@Override public long toDays(long d)    { return d / (C6 / C0); }' - line 87", "'@Override public long convert(long d, TimeUnit2 u) { return u.toNanos(d); }' - line 89", "'@Override public long convert(long d, TimeUnit u) { return u.toNanos(d); }' - line 91", "'int excessNanos(long d, long m) { return (int) (d - (m * C2)); }' - line 94", "'@Override public long toNanos(long d)   { return x(d, C1 / C0, MAX / (C1 / C0)); }' - line 97", "'@Override public long toMicros(long d)  { return d; }' - line 99", "'@Override public long toMillis(long d)  { return d / (C2 / C1); }' - line 101", "'@Override public long toSeconds(long d) { return d / (C3 / C1); }' - line 103", "'@Override public long toMinutes(long d) { return d / (C4 / C1); }' - line 105", "'@Override public long toHours(long d)   { return d / (C5 / C1); }' - line 107", "'@Override public long toDays(long d)    { return d / (C6 / C1); }' - line 109", "'@Override public long convert(long d, TimeUnit2 u) { return u.toMicros(d); }' - line 111", "'@Override public long convert(long d, TimeUnit u) { return u.toMicros(d); }' - line 113", "'int excessNanos(long d, long m) { return (int) ((d * C1) - (m * C2)); }' - line 116", "'@Override public long toNanos(long d)   { return x(d, C2 / C0, MAX / (C2 / C0)); }' - line 119", "'@Override public long toMicros(long d)  { return x(d, C2 / C1, MAX / (C2 / C1)); }' - line 121", "'@Override public long toMillis(long d)  { return d; }' - line 123", "'@Override public long toSeconds(long d) { return d / (C3 / C2); }' - line 125", "'@Override public long toMinutes(long d) { return d / (C4 / C2); }' - line 127", "'@Override public long toHours(long d)   { return d / (C5 / C2); }' - line 129", "'@Override public long toDays(long d)    { return d / (C6 / C2); }' - line 131", "'@Override public long convert(long d, TimeUnit2 u) { return u.toMillis(d); }' - line 133", "'@Override public long convert(long d, TimeUnit u) { return u.toMillis(d); }' - line 135", "'int excessNanos(long d, long m) { return 0; }' - line 138", "'@Override public long toNanos(long d)   { return x(d, C3 / C0, MAX / (C3 / C0)); }' - line 141", "'@Override public long toMicros(long d)  { return x(d, C3 / C1, MAX / (C3 / C1)); }' - line 143", "'@Override public long toMillis(long d)  { return x(d, C3 / C2, MAX / (C3 / C2)); }' - line 145", "'@Override public long toSeconds(long d) { return d; }' - line 147", "'@Override public long toMinutes(long d) { return d / (C4 / C3); }' - line 149", "'@Override public long toHours(long d)   { return d / (C5 / C3); }' - line 151", "'@Override public long toDays(long d)    { return d / (C6 / C3); }' - line 153", "'@Override public long convert(long d, TimeUnit2 u) { return u.toSeconds(d); }' - line 155", "'@Override public long convert(long d, TimeUnit u) { return u.toSeconds(d); }' - line 157", "'int excessNanos(long d, long m) { return 0; }' - line 160", "'@Override public long toNanos(long d)   { return x(d, C4 / C0, MAX / (C4 / C0)); }' - line 163", "'@Override public long toMicros(long d)  { return x(d, C4 / C1, MAX / (C4 / C1)); }' - line 165", "'@Override public long toMillis(long d)  { return x(d, C4 / C2, MAX / (C4 / C2)); }' - line 167", "'@Override public long toSeconds(long d) { return x(d, C4 / C3, MAX / (C4 / C3)); }' - line 169", "'@Override public long toMinutes(long d) { return d; }' - line 171", "'@Override public long toHours(long d)   { return d / (C5 / C4); }' - line 173", "'@Override public long toDays(long d)    { return d / (C6 / C4); }' - line 175", "'@Override public long convert(long d, TimeUnit2 u) { return u.toMinutes(d); }' - line 177", "'@Override public long convert(long d, TimeUnit u) { return SECONDS.toMinutes(u.toSeconds(d)); }' - line 179", "'int excessNanos(long d, long m) { return 0; }' - line 182", "'@Override public long toNanos(long d)   { return x(d, C5 / C0, MAX / (C5 / C0)); }' - line 185", "'@Override public long toMicros(long d)  { return x(d, C5 / C1, MAX / (C5 / C1)); }' - line 187", "'@Override public long toMillis(long d)  { return x(d, C5 / C2, MAX / (C5 / C2)); }' - line 189", "'@Override public long toSeconds(long d) { return x(d, C5 / C3, MAX / (C5 / C3)); }' - line 191", "'@Override public long toMinutes(long d) { return x(d, C5 / C4, MAX / (C5 / C4)); }' - line 193", "'@Override public long toHours(long d)   { return d; }' - line 195", "'@Override public long toDays(long d)    { return d / (C6 / C5); }' - line 197", "'@Override public long convert(long d, TimeUnit2 u) { return u.toHours(d); }' - line 199", "'@Override public long convert(long d, TimeUnit u) { return SECONDS.toHours(u.toSeconds(d)); }' - line 201", "'int excessNanos(long d, long m) { return 0; }' - line 204", "'@Override public long toNanos(long d)   { return x(d, C6 / C0, MAX / (C6 / C0)); }' - line 207", "'@Override public long toMicros(long d)  { return x(d, C6 / C1, MAX / (C6 / C1)); }' - line 209", "'@Override public long toMillis(long d)  { return x(d, C6 / C2, MAX / (C6 / C2)); }' - line 211", "'@Override public long toSeconds(long d) { return x(d, C6 / C3, MAX / (C6 / C3)); }' - line 213", "'@Override public long toMinutes(long d) { return x(d, C6 / C4, MAX / (C6 / C4)); }' - line 215", "'@Override public long toHours(long d)   { return x(d, C6 / C5, MAX / (C6 / C5)); }' - line 217", "'@Override public long toDays(long d)    { return d; }' - line 219", "'@Override public long convert(long d, TimeUnit2 u) { return u.toDays(d); }' - line 221", "'@Override public long convert(long d, TimeUnit u) { return SECONDS.toDays(u.toSeconds(d)); }' - line 223", "'int excessNanos(long d, long m) { return 0; }' - line 226", "'static long x(long d, long m, long over) {' - line 244", "'public long convert(long sourceDuration, TimeUnit2 sourceUnit) {' - line 274", "'public long convert(long sourceDuration, TimeUnit sourceUnit) {' - line 297", "'public long toNanos(long duration) {' - line 309", "'public long toMicros(long duration) {' - line 321", "'public long toMillis(long duration) {' - line 333", "'public long toSeconds(long duration) {' - line 345", "'public long toMinutes(long duration) {' - line 357", "'public long toHours(long duration) {' - line 369", "'public long toDays(long duration) {' - line 379", "'public void timedWait(Object obj, long timeout)' - line 414", "'public void timedJoin(Thread thread, long timeout)' - line 433", "'public void sleep(long timeout) throws InterruptedException {' - line 451"]}, "BootFailure.java": {"METHODS": ["'protected BootFailure() {' - line 27", "'protected BootFailure(Throwable cause) {' - line 30", "'public void publish(ServletContext context, @CheckForNull File home) {' - line 40", "'new GroovyHookScript(\"boot-failure\", context, home, BootFailure.class.getClassLoader())' - line 47", "'protected List<Date> loadAttempts(File home) {' - line 58", "'public static File getBootFailureFile(File home) {' - line 91"]}, "ProcessKillingVeto.java": {"METHODS": ["'public VetoCause(@NonNull String message) {' - line 58", "'public static List<ProcessKillingVeto> all() {' - line 74", "'return _all();' - line 76", "'private static List<ProcessKillingVeto> _all() {' - line 87"]}, "ProcessTreeRemoting.java": {"METHODS": ["'void killAll(@NonNull Map<String, String> modelEnvVars) throws InterruptedException;' - line 20", "'int getPid();' - line 24", "'IOSProcess getParent();' - line 27", "'void kill() throws InterruptedException;' - line 29", "'void killRecursively() throws InterruptedException;' - line 31", "'List<String> getArguments();' - line 34", "'EnvVars getEnvironmentVariables();' - line 37"]}, "AdministrativeError.java": {"METHODS": ["'public AdministrativeError(String id, String title, String message, Throwable details) {' - line 33", "'public boolean isActivated() {' - line 43"]}, "FileVisitor.java": {"METHODS": ["'public void visitSymlink(File link, String target, String relativePath) throws IOException {' - line 32", "'public boolean understandsSymlink() {' - line 42", "'private FilterFileVisitor(FileFilter filter, FileVisitor visitor) {' - line 58", "'public void visit(File f, String relativePath) throws IOException {' - line 64"]}, "FormValidation.java": {"METHODS": ["'* public FormValidation doCheckAntVersion(@QueryParameter String f) {' - line 100", "'*         return ok(getAntVersion(new File(f)));' - line 102", "'public static FormValidation error(String message) {' - line 148", "'return errorWithMarkup(message == null ? null : Util.escape(message));' - line 149", "'public static FormValidation warning(String message) {' - line 152", "'return warningWithMarkup(message == null ? null : Util.escape(message));' - line 153", "'public static FormValidation ok(String message) {' - line 156", "'return okWithMarkup(message == null ? null : Util.escape(message));' - line 157", "'public static FormValidation ok() {' - line 165", "'public static FormValidation error(String format, Object... args) {' - line 173", "'return error(String.format(format, args));' - line 174", "'public static FormValidation warning(String format, Object... args) {' - line 177", "'return warning(String.format(format, args));' - line 178", "'public static FormValidation ok(String format, Object... args) {' - line 181", "'return ok(String.format(format, args));' - line 182", "'public static FormValidation error(Throwable e, String message) {' - line 193", "'return _error(Kind.ERROR, e, message);' - line 194", "'public static FormValidation warning(Throwable e, String message) {' - line 197", "'return _error(Kind.WARNING, e, message);' - line 198", "'private static FormValidation _error(Kind kind, Throwable e, String message) {' - line 201", "'if (e == null)    return _errorWithMarkup(Util.escape(message), kind);' - line 202", "'return _errorWithMarkup(Util.escape(message) +' - line 204", "'public static FormValidation error(Throwable e, String format, Object... args) {' - line 213", "'return error(e, String.format(format, args));' - line 214", "'public static FormValidation warning(Throwable e, String format, Object... args) {' - line 217", "'return warning(e, String.format(format, args));' - line 218", "'return respond(worst, sb.toString());' - line 243", "'public static FormValidation errorWithMarkup(String message) {' - line 257", "'return _errorWithMarkup(message, Kind.ERROR);' - line 258", "'public static FormValidation warningWithMarkup(String message) {' - line 261", "'return _errorWithMarkup(message, Kind.WARNING);' - line 262", "'public static FormValidation okWithMarkup(String message) {' - line 265", "'return _errorWithMarkup(message, Kind.OK);' - line 266", "'private static FormValidation _errorWithMarkup(final String message, final Kind kind) {' - line 269", "'return ok();' - line 271", "'public String renderHtml() {' - line 274", "'@Override public String toString() {' - line 283", "'public static FormValidation respond(Kind kind, final String html) {' - line 292", "'public String renderHtml() {' - line 295", "'@Override public String toString() {' - line 299", "'public FormValidation validate(File f) {' - line 319", "'return ok();' - line 320", "'public static FormValidation validateExecutable(String exe) {' - line 328", "'return validateExecutable(exe, FileValidator.NOOP);' - line 329", "'public static FormValidation validateExecutable(String exe, FileValidator exeValidator) {' - line 340", "'public void ok() {' - line 348", "'public void checkExecutable(File fexe) {' - line 353", "'public void error(String string) {' - line 358", "'public void validate(File fexe) {' - line 363", "'public static FormValidation validateNonNegativeInteger(String value) {' - line 376", "'return error(hudson.model.Messages.Hudson_NotANonNegativeNumber());' - line 379", "'return ok();' - line 380", "'return error(hudson.model.Messages.Hudson_NotANumber());' - line 382", "'public static FormValidation validateIntegerInRange(String value, int lower, int upper) {' - line 395", "'return error(hudson.model.Messages.Hudson_MustBeAtLeast(lower));' - line 399", "'return error(hudson.model.Messages.Hudson_MustBeAtMost(upper));' - line 402", "'return ok();' - line 404", "'return error(hudson.model.Messages.Hudson_NotANumber());' - line 406", "'public static FormValidation validatePositiveInteger(String value) {' - line 413", "'return error(hudson.model.Messages.Hudson_NotAPositiveNumber());' - line 416", "'return ok();' - line 417", "'return error(hudson.model.Messages.Hudson_NotANumber());' - line 419", "'public static FormValidation validateRequired(String value) {' - line 426", "'return error(Messages.FormValidation_ValidateRequired());' - line 428", "'return ok();' - line 429", "'public static FormValidation validateBase64(String value, boolean allowWhitespace, boolean allowEmpty, String errorMessage) {' - line 443", "'return error(errorMessage);' - line 448", "'return error(errorMessage);' - line 452", "'return ok();' - line 455", "'return error(errorMessage);' - line 457", "'protected Stream<String> open(URI uri) throws IOException {' - line 476", "'protected BufferedReader open(URL url) throws IOException {' - line 508", "'new InputStreamReader(con.getInputStream(), getCharset(con)));' - line 515", "'protected boolean findText(Stream<String> in, String literal) {' - line 524", "'protected boolean findText(BufferedReader in, String literal) throws IOException {' - line 537", "'protected FormValidation handleIOException(String url, IOException e) throws IOException, ServletException {' - line 552", "'return error(\"Unable to connect \" + url, e);' - line 556", "'return error(e.getMessage(), e);' - line 558", "'private String getCharset(URLConnection con) {' - line 564", "'private FormValidation(Kind kind) {' - line 591", "'private FormValidation(Kind kind, String message) {' - line 595", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 601", "'protected void respond(StaplerResponse rsp, String html) throws IOException, ServletException {' - line 610", "'public CheckMethod(Descriptor descriptor, String fieldName) {' - line 636", "'private void findParameters(Method method) {' - line 652", "'public String toCheckUrl() {' - line 683", "'public String toStemUrl() {' - line 708", "'public String getDependsOn() {' - line 713", "'private String relativePath() {' - line 721"]}, "CharacterEncodingFilter.java": {"METHODS": ["'public void init(FilterConfig filterConfig) throws ServletException {' - line 61", "'public void destroy() {' - line 68", "'public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)' - line 73", "'private boolean shouldSetCharacterEncoding(HttpServletRequest req) {' - line 88"]}, "QueryParameterMap.java": {"METHODS": ["'public QueryParameterMap(String queryString) {' - line 57", "'public QueryParameterMap(HttpServletRequest req) {' - line 68", "'public String get(String name) {' - line 72", "'public List<String> getAll(String name) {' - line 77"]}, "ExceptionCatchingThreadFactory.java": {"METHODS": ["'public ExceptionCatchingThreadFactory() {' - line 42", "'public ExceptionCatchingThreadFactory(ThreadFactory core) {' - line 46", "'public Thread newThread(Runnable r) {' - line 51", "'public void uncaughtException(Thread t, Throwable e) {' - line 58"]}, "Retrier.java": {"METHODS": ["'private Retrier(Builder<V> builder) {' - line 35", "'public Builder(@NonNull Callable<V> callable, @NonNull BiPredicate<Integer, V> checkResult, @NonNull String action) {' - line 168"]}, "FlushProofOutputStream.java": {"METHODS": ["'public FlushProofOutputStream(OutputStream out) {' - line 11", "'public void flush() throws IOException {' - line 16"]}, "PersistedList.java": {"METHODS": ["'protected PersistedList() {' - line 62", "'protected PersistedList(Collection<? extends T> initialList) {' - line 65", "'public PersistedList(Saveable owner) {' - line 69", "'public void setOwner(Saveable owner) {' - line 73", "'public boolean add(T item) {' - line 79", "'public boolean addAll(Collection<? extends T> items) {' - line 87", "'public void replaceBy(Collection<? extends T> col) throws IOException {' - line 93", "'public T get(int index) {' - line 99", "'public int size() {' - line 122", "'public void remove(Class<? extends T> type) throws IOException {' - line 129", "'public void replace(T from, T to) throws IOException {' - line 145", "'public boolean remove(Object o) {' - line 155", "'public void removeAll(Class<? extends T> type) throws IOException {' - line 161", "'public void clear() {' - line 175", "'public Iterator<T> iterator() {' - line 180", "'protected void onModified() throws IOException {' - line 187", "'private static boolean ignoreSerializationErrors(Object o) {' - line 204", "'private void _onModified() {' - line 218", "'public List<T> toList() {' - line 229", "'public void addAllTo(Collection<? super T> dst) {' - line 241", "'public boolean isEmpty() {' - line 246", "'public boolean contains(Object item) {' - line 251", "'@Override public String toString() {' - line 255", "'return toList().toString();' - line 256", "'public ConverterImpl(Mapper mapper) {' - line 267", "'public boolean canConvert(Class type) {' - line 273", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 279", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 285"]}, "ListBoxModel.java": {"METHODS": ["'* public ListBoxModel doOptionValues(&#64;QueryParameter(\"value\") String value) throws IOException, ServletException {' - line 81", "'public Option(@NonNull String name, @NonNull String value) {' - line 117", "'public Option(@NonNull String name) {' - line 121", "'public Option(@NonNull String name, @NonNull String value, boolean selected) {' - line 125", "'@Override public String toString() {' - line 131", "'public ListBoxModel(int initialCapacity) {' - line 137", "'public ListBoxModel() {' - line 141", "'public ListBoxModel(Collection<Option> c) {' - line 144", "'public ListBoxModel(Option... data) {' - line 148", "'public void add(@NonNull String displayName, @NonNull String value) {' - line 152", "'public void add(ModelObject usedForDisplayName, @NonNull String value) {' - line 156", "'public ListBoxModel add(@NonNull String nameAndValue) {' - line 163", "'public void writeTo(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 168", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 173", "'public Option[] values() {' - line 183", "'return toArray(new Option[size()]);' - line 184"]}, "IncompatibleAntVersionDetected.java": {"METHODS": ["'public IncompatibleAntVersionDetected(Class antClass) {' - line 42", "'public String getMessage() {' - line 47", "'public URL getWhereAntIsLoaded() throws IOException {' - line 55"]}, "Scrambler.java": {"METHODS": ["'public static String scramble(String secret) {' - line 41", "'public static String descramble(String scrambled) {' - line 46"]}, "InterceptingProxy.java": {"METHODS": ["'public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {' - line 21", "'return call(object, method, args);' - line 23"]}, "RemotingDiagnostics.java": {"METHODS": ["'public static String executeGroovy(String script, @NonNull VirtualChannel channel) throws IOException, InterruptedException {' - line 113", "'private Script(String script) {' - line 121", "'public ClassLoader getClassLoader() {' - line 127", "'public String call() throws RuntimeException {' - line 133", "'public static FilePath getHeapDump(VirtualChannel channel) throws IOException, InterruptedException {' - line 163", "'public FilePath call() throws IOException {' - line 169", "'public HeapDump(AccessControlled owner, VirtualChannel channel) {' - line 194", "'public void doIndex(StaplerResponse rsp) throws IOException {' - line 202", "'public void doHeapDump(StaplerRequest req, StaplerResponse rsp) throws IOException, InterruptedException {' - line 207", "'public FilePath obtain() throws IOException, InterruptedException {' - line 219"]}, "TextFile.java": {"METHODS": ["'public TextFile(@NonNull File file) {' - line 52", "'public boolean exists() {' - line 56", "'public void delete() throws IOException {' - line 60", "'public String read() throws IOException {' - line 67", "'public Stream<String> lines() throws IOException {' - line 91", "'public void write(String text) throws IOException {' - line 98", "'return fastTail(numChars, Charset.defaultCharset());' - line 180", "'public String readTrim() throws IOException {' - line 184", "'return read().trim();' - line 185", "'public String toString() {' - line 189"]}, "Function1.java": {"METHODS": ["'R call(P1 param1);' - line 32"]}, "ErrorObject.java": {"METHODS": ["'protected ErrorObject() {' - line 43", "'protected ErrorObject(Throwable cause) {' - line 46", "'public String getStackTraceString() {' - line 50", "'public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, InterruptedException {' - line 54"]}, "NoOverlapCategoryAxis.java": {"METHODS": ["'public NoOverlapCategoryAxis(String label) {' - line 49", "'else if (edge.equals(RectangleEdge.BOTTOM)) {' - line 153", "'else if (edge == RectangleEdge.LEFT) {' - line 157", "'else if (edge == RectangleEdge.RIGHT) {' - line 161"]}, "DelegatingOutputStream.java": {"METHODS": ["'protected DelegatingOutputStream(OutputStream out) {' - line 38", "'public void write(int b) throws IOException {' - line 46", "'public void write(byte[] b) throws IOException {' - line 51", "'public void write(byte[] b, int off, int len) throws IOException {' - line 56", "'public void flush() throws IOException {' - line 61", "'public void close() throws IOException {' - line 66"]}, "DirScanner.java": {"METHODS": ["'private void scan(File f, String path, FileVisitor visitor) throws IOException {' - line 61", "'public void scan(File dir, FileVisitor visitor) throws IOException {' - line 72", "'public Filter(FileFilter filter) {' - line 86", "'public void scan(File dir, FileVisitor visitor) throws IOException {' - line 91", "'public Glob(String includes, String excludes) {' - line 111", "'public Glob(String includes, String excludes, boolean useDefaultExcludes) {' - line 115", "'public Glob(String includes, String excludes, boolean useDefaultExcludes, OpenOption... openOptions) {' - line 123", "'public void scan(File dir, FileVisitor visitor) throws IOException {' - line 131", "'new Full().scan(dir, visitor);' - line 134", "'private DescendantFileSelector(File basedir) {' - line 159", "'public boolean isSelected(File basedir, String filename, File file) throws BuildException {' - line 166"]}, "ReflectionUtils.java": {"METHODS": ["'public static Method getPublicMethodNamed(Class c, String methodName) {' - line 51", "'public static List<Parameter> getParameters(Method m) {' - line 61", "'public static Object getPublicProperty(Object o, String p) throws InvocationTargetException, NoSuchMethodException, IllegalAccessException {' - line 65", "'private MethodInfo(Method method) {' - line 92", "'public Parameter get(int index) {' - line 98", "'public int size() {' - line 103", "'public Type[] genericTypes() {' - line 107", "'public Annotation[][] annotations() {' - line 113", "'public String[] names() {' - line 119", "'public Parameter(MethodInfo parent, int index) {' - line 130", "'public int index() {' - line 138", "'public Type genericType() {' - line 152", "'public Annotation[] annotations() {' - line 159", "'public String name() {' - line 178", "'public boolean isAnnotationPresent(Class<? extends Annotation> type) {' - line 186", "'return annotation(type) != null;' - line 187", "'return annotation(type);' - line 192", "'public Annotation[] getAnnotations() {' - line 196", "'return annotations();' - line 197", "'public Annotation[] getDeclaredAnnotations() {' - line 201", "'return annotations();' - line 202"]}, "RobustMapConverter.java": {"METHODS": ["'@Override protected void putCurrentEntryIntoMap(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target) {' - line 47", "'private Object read(HierarchicalStreamReader reader, UnmarshallingContext context, Map map) {' - line 65", "'return readBareItem(reader, context, map);' - line 68"]}, "HeadBufferingStream.java": {"METHODS": ["'public HeadBufferingStream(InputStream in, int sideBufferSize) {' - line 44", "'public int read() throws IOException {' - line 51", "'public int read(byte[] b, int off, int len) throws IOException {' - line 59", "'private int space() {' - line 72", "'public void fillSide() throws IOException {' - line 79", "'public byte[] getSideBuffer() {' - line 90"]}, "PluginServletFilter.java": {"METHODS": ["'public void init(FilterConfig config) throws ServletException {' - line 87", "'public static void addFilter(Filter filter) throws ServletException {' - line 104", "'public static boolean hasFilter(Filter filter) {' - line 128", "'public static void removeFilter(Filter filter) throws ServletException {' - line 141", "'public void doFilter(ServletRequest request, ServletResponse response, final FilterChain chain) throws IOException, ServletException {' - line 151", "'new FilterChain() {' - line 152", "'public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {' - line 156", "'public void destroy() {' - line 169", "'public static void cleanUp() {' - line 177"]}, "SequentialExecutionQueue.java": {"METHODS": ["'public SequentialExecutionQueue(ExecutorService executors) {' - line 35", "'private QueueEntry(Runnable item) {' - line 101", "'private void submit() {' - line 107", "'public void run() {' - line 115"]}, "HudsonIsLoading.java": {"METHODS": ["'public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, InterruptedException {' - line 43"]}, "AbstractTaskListener.java": {"METHODS": []}, "OneShotEvent.java": {"METHODS": ["'public OneShotEvent() {' - line 44", "'public OneShotEvent(Object lock) {' - line 48", "'public void signal() {' - line 55", "'public void block() throws InterruptedException {' - line 69", "'public void block(long timeout) throws InterruptedException {' - line 83", "'public boolean isSignaled() {' - line 93"]}, "RobustReflectionConverter.java": {"METHODS": ["'public RobustReflectionConverter(Mapper mapper, ReflectionProvider reflectionProvider) {' - line 99", "'void addCriticalField(Class<?> clazz, String field) {' - line 111", "'private boolean hasCriticalField(Class<?> clazz, String field) {' - line 128", "'public boolean canConvert(Class type) {' - line 147", "'public void marshal(Object original, final HierarchicalStreamWriter writer, final MarshallingContext context) {' - line 152", "'static OwnerContext find(MarshallingContext context) {' - line 170", "'private void startVisiting(HierarchicalStreamWriter writer, String owner) {' - line 179", "'private void stopVisiting() {' - line 195", "'protected void doMarshal(final Object source, final HierarchicalStreamWriter writer, final MarshallingContext context) {' - line 200", "'public void visit(String fieldName, Class type, Class definedIn, Object value) {' - line 208", "'public void visit(String fieldName, Class fieldType, Class definedIn, Object newObj) {' - line 227", "'private void writeField(String fieldName, String aliasName, Class fieldType, Class definedIn, Object newObj) {' - line 247", "'protected void marshallField(final MarshallingContext context, Object newObj, Field field) {' - line 280", "'public Object unmarshal(final HierarchicalStreamReader reader, final UnmarshallingContext context) {' - line 286", "'public Object doUnmarshal(final Object result, final HierarchicalStreamReader reader, final UnmarshallingContext context) {' - line 292", "'private static boolean shouldReportUnloadableDataForCurrentUser() {' - line 426", "'public static void addErrorInContext(UnmarshallingContext context, Throwable e) {' - line 437", "'private boolean fieldDefinedInClass(Object result, String attrName) {' - line 445", "'protected Object unmarshalField(final UnmarshallingContext context, final Object result, Class type, Field field) {' - line 451", "'private Map writeValueToImplicitCollection(UnmarshallingContext context, Object value, Map implicitCollections, Object result, String itemFieldName) {' - line 456", "'private Class determineWhichClassDefinesField(HierarchicalStreamReader reader) {' - line 481", "'protected Object instantiateNewInstance(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 486", "'public void add(Class definedInCls, String fieldName) {' - line 503", "'private Class determineType(HierarchicalStreamReader reader, boolean validField, Object result, String fieldName, Class definedInCls) {' - line 517", "'private Object readResolve() {' - line 540", "'public DuplicateFieldException(String msg) {' - line 546"]}, "ColorPalette.java": {"METHODS": ["'new Color(0xCC0000),' - line 49", "'new Color(0x3465a4),' - line 50", "'new Color(0x73d216),' - line 51", "'new Color(0xedd400)' - line 52", "'public static void apply(LineAndShapeRenderer renderer) {' - line 58"]}, "ShiftedCategoryAxis.java": {"METHODS": ["'public ShiftedCategoryAxis(String label) {' - line 35", "'protected double calculateCategorySize(int categoryCount, Rectangle2D area, RectangleEdge edge) {' - line 40", "'public double getCategoryEnd(int category, int categoryCount, Rectangle2D area, RectangleEdge edge) {' - line 47", "'public double getCategoryMiddle(int category, int categoryCount, Rectangle2D area, RectangleEdge edge) {' - line 53", "'public double getCategoryStart(int category, int categoryCount, Rectangle2D area, RectangleEdge edge) {' - line 58"]}, "DecodingStream.java": {"METHODS": ["'public DecodingStream(OutputStream out) {' - line 39", "'public void write(int b) throws IOException {' - line 44"]}, "JenkinsReloadFailed.java": {"METHODS": ["'public JenkinsReloadFailed(Throwable cause) {' - line 14"]}, "NamingThreadFactory.java": {"METHODS": ["'public NamingThreadFactory(ThreadFactory delegate, String name) {' - line 45", "'@Override public Thread newThread(Runnable r) {' - line 50"]}, "CopyOnWriteList.java": {"METHODS": ["'public CopyOnWriteList(List<E> core) {' - line 54", "'private CopyOnWriteList(List<E> core, boolean noCopy) {' - line 58", "'public CopyOnWriteList() {' - line 62", "'public Iterator<E> iterator() {' - line 96", "'public boolean hasNext() {' - line 102", "'public E next() {' - line 107", "'public void remove() {' - line 112", "'public void replaceBy(CopyOnWriteList<? extends E> that) {' - line 121", "'public void replaceBy(Collection<? extends E> that) {' - line 128", "'public void replaceBy(E... that) {' - line 135", "'public void clear() {' - line 139", "'public List<E> getView() {' - line 147", "'public void addAllTo(Collection<? super E> dst) {' - line 151", "'public E get(int index) {' - line 155", "'public boolean isEmpty() {' - line 159", "'public int size() {' - line 163", "'public boolean contains(Object item) {' - line 167", "'@Override public String toString() {' - line 171", "'public ConverterImpl(Mapper mapper) {' - line 179", "'public boolean canConvert(Class type) {' - line 184", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 189", "'public CopyOnWriteList unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 196"]}, "ChartUtil.java": {"METHODS": ["'public NumberOnlyBuildLabel(Run<?, ?> run) {' - line 62", "'public NumberOnlyBuildLabel(AbstractBuild build) {' - line 68", "'public int compareTo(NumberOnlyBuildLabel that) {' - line 81", "'public boolean equals(Object o) {' - line 86", "'public int hashCode() {' - line 93", "'public String toString() {' - line 98", "'public static void generateGraph(StaplerRequest req, StaplerResponse rsp, JFreeChart chart, Area defaultSize) throws IOException {' - line 130", "'public static void generateGraph(StaplerRequest req, StaplerResponse rsp, final JFreeChart chart, int defaultW, int defaultH) throws IOException {' - line 148", "'new Graph(-1, defaultW, defaultH) {' - line 149", "'protected JFreeChart createGraph() {' - line 151", "'public static void generateClickableMap(StaplerRequest req, StaplerResponse rsp, JFreeChart chart, Area defaultSize) throws IOException {' - line 165", "'public static void generateClickableMap(StaplerRequest req, StaplerResponse rsp, final JFreeChart chart, int defaultW, int defaultH) throws IOException {' - line 177", "'new Graph(-1, defaultW, defaultH) {' - line 178", "'protected JFreeChart createGraph() {' - line 180", "'public static void adjustChebyshev(CategoryDataset dataset, NumberAxis yAxis) {' - line 207", "'new Font(\"SansSerif\", Font.BOLD, 18).toString();' - line 269"]}, "NoHomeDir.java": {"METHODS": ["'public NoHomeDir(File home) {' - line 40"]}, "NoTempDir.java": {"METHODS": ["'public NoTempDir(IOException exception) {' - line 43", "'public String getTempDir() {' - line 48"]}, "DOSToUnixPathHelper.java": {"METHODS": ["'void ok();' - line 14", "'void checkExecutable(File fexe);' - line 16", "'void error(String string);' - line 18", "'void validate(File fexe);' - line 20", "'private static boolean checkPrefix(String prefix, Helper helper) {' - line 23", "'private static File constructFile(String prefix) {' - line 39", "'static void iteratePath(String exe, Helper helper) {' - line 43"]}, "Futures.java": {"METHODS": ["'public boolean cancel(boolean mayInterruptIfRunning) {' - line 41", "'public boolean isCancelled() {' - line 46", "'public boolean isDone() {' - line 51", "'public T get() {' - line 56", "'public T get(long timeout, TimeUnit unit) {' - line 61"]}, "ClasspathBuilder.java": {"METHODS": ["'public ClasspathBuilder add(File f) {' - line 22", "'return add(f.getAbsolutePath());' - line 23", "'public ClasspathBuilder add(FilePath f) {' - line 29", "'return add(f.getRemote());' - line 30", "'public ClasspathBuilder add(String path) {' - line 36", "'public ClasspathBuilder addJarOf(Class c) throws IOException {' - line 45", "'return add(Which.jarFile(c));' - line 46", "'public ClasspathBuilder addAll(FilePath base, String glob) throws IOException, InterruptedException {' - line 54", "'public String toString() {' - line 64"]}, "IncompatibleServletVersionDetected.java": {"METHODS": ["'public IncompatibleServletVersionDetected(Class servletClass) {' - line 42", "'public URL getWhereServletIsLoaded() throws IOException {' - line 46"]}, "StreamCopyThread.java": {"METHODS": ["'public StreamCopyThread(String threadName, InputStream in, OutputStream out, boolean closeOut) {' - line 40", "'public StreamCopyThread(String threadName, InputStream in, OutputStream out) {' - line 50", "'public void run() {' - line 55"]}, "ForkOutputStream.java": {"METHODS": ["'public ForkOutputStream(OutputStream lhs, OutputStream rhs) {' - line 36", "'public void write(int b) throws IOException {' - line 42", "'public void write(byte[] b) throws IOException {' - line 48", "'public void write(byte[] b, int off, int len) throws IOException {' - line 54", "'public void flush() throws IOException {' - line 60", "'public void close() throws IOException {' - line 66"]}, "ProcessTree.java": {"METHODS": ["'private ProcessTree() {' - line 112", "'private ProcessTree(boolean vetoesExist) {' - line 116", "'public void killAll(@CheckForNull Process proc, @CheckForNull Map<String, String> modelEnvVars) throws InterruptedException {' - line 175", "'public List<ProcessKiller> call() throws IOException {' - line 211", "'private OSProcess(int pid) {' - line 223", "'void killByKiller() throws InterruptedException {' - line 263", "'Object writeReplace() {' - line 363", "'public String call() throws IOException {' - line 375", "'private SerializedProcess(int pid) {' - line 397", "'Object readResolve() {' - line 401", "'return get(pid);' - line 402", "'T invoke(OSProcess process, VirtualChannel channel) throws IOException;' - line 422", "'public static ProcessTree get() {' - line 433", "'public Boolean call() throws IOException {' - line 485", "'public OSProcess get(@NonNull final Process proc) {' - line 501", "'public OSProcess getParent() {' - line 505", "'public void killRecursively() {' - line 510", "'public void kill() throws InterruptedException {' - line 516", "'public List<String> getArguments() {' - line 525", "'public EnvVars getEnvironmentVariables() {' - line 531", "'public void killAll(@NonNull Map<String, String> modelEnvVars) {' - line 538", "'public OSProcess getParent() {' - line 556", "'public void killRecursively() throws InterruptedException {' - line 562", "'public void kill() throws InterruptedException {' - line 574", "'private void killSoftly() throws InterruptedException {' - line 586", "'return getEnvironmentVariables2();' - line 626", "'private boolean hasMatchingEnvVars2(Map<String, String> modelEnvVar) throws WindowsOSProcessException {' - line 649", "'public OSProcess get(@NonNull Process proc) {' - line 692", "'return get(new WinProcess(proc).getPid());' - line 693", "'public void killAll(@NonNull Map<String, String> modelEnvVars) throws InterruptedException {' - line 697", "'private static boolean hasMatchingEnvVars(@NonNull OSProcess p, @NonNull Map<String, String> modelEnvVars)' - line 728", "'public OSProcess get(@NonNull Process proc) {' - line 751", "'return get(Ints.checkedCast(proc.pid()));' - line 752", "'public void killAll(@NonNull Map<String, String> modelEnvVars) throws InterruptedException {' - line 756", "'protected UnixProcess(int pid) {' - line 799", "'public void kill() throws InterruptedException {' - line 811", "'private void kill(long deadline) throws InterruptedException {' - line 817", "'public void killRecursively() throws InterruptedException {' - line 838", "'private void killRecursively(long deadline) throws InterruptedException {' - line 844", "'protected LinuxProcess createProcess(int pid) throws IOException {' - line 875", "'public OSProcess getParent() {' - line 903", "'return get(ppid);' - line 904", "'protected OSProcess createProcess(final int pid) throws IOException {' - line 983", "'private AIXProcess(int pid) throws IOException {' - line 1012", "'public OSProcess getParent() {' - line 1123", "'return get(ppid);' - line 1124", "'private String readLine(int fd, long addr, String prefix) throws IOException {' - line 1221", "'private static long to64(int i) {' - line 1253", "'private static int adjust(int i) {' - line 1261", "'public static long adjustL(long i) {' - line 1268", "'protected OSProcess createProcess(final int pid) throws IOException {' - line 1309", "'private SolarisProcess(int pid) throws IOException {' - line 1343", "'public OSProcess getParent() {' - line 1414", "'return get(ppid);' - line 1415", "'private String readLine(int fd, long addr, String prefix) throws IOException {' - line 1493", "'private static long to64(int i) {' - line 1524", "'private static int adjust(int i) {' - line 1532", "'public static long adjustL(long i) {' - line 1539", "'public OSProcess getParent() {' - line 1610", "'return get(ppid);' - line 1611", "'private void parse() {' - line 1632", "'void setLength(long l) {' - line 1659", "'int readInt() {' - line 1663", "'byte peek() {' - line 1671", "'return getByte(offset);' - line 1674", "'String readString() {' - line 1677", "'void skip0() {' - line 1685", "'new NativeLong(0))' - line 1837", "'new NativeLong(0))' - line 1857", "'public OSProcess getParent() {' - line 1895", "'return get(ppid);' - line 1896", "'new NativeLong(0))' - line 1921", "'public List<String> getArguments() {' - line 1937", "'new NativeLong(0))' - line 1957", "'private int getArgmax() throws IOException {' - line 1971", "'new NativeLong(0))' - line 1980", "'private void parse(Memory m, NativeLong size, Consumer<String> consumer) {' - line 1988", "'public Remote(ProcessTree proxy, Channel ch) {' - line 2024", "'public Remote(ProcessTree proxy, Channel ch, boolean vetoersExist) {' - line 2030", "'public OSProcess get(@NonNull Process proc) {' - line 2040", "'public void killAll(@NonNull Map<String, String> modelEnvVars) throws InterruptedException {' - line 2045", "'Object writeReplace() {' - line 2050", "'public OSProcess getParent() {' - line 2067", "'return get(p.getPid());' - line 2070", "'public void kill() throws InterruptedException {' - line 2074", "'public void killRecursively() throws InterruptedException {' - line 2079", "'public List<String> getArguments() {' - line 2085", "'public EnvVars getEnvironmentVariables() {' - line 2091", "'Object writeReplace() {' - line 2096"]}, "XStream2.java": {"METHODS": ["'public static HierarchicalStreamDriver getDefaultDriver() {' - line 127", "'public HierarchicalStreamWriter createWriter(Writer out) {' - line 138", "'public HierarchicalStreamWriter createWriter(OutputStream out) {' - line 143", "'return createWriter(new OutputStreamWriter(out, Charset.defaultCharset()));' - line 148", "'protected XMLInputFactory createInputFactory() {' - line 156", "'protected XMLOutputFactory createOutputFactory() {' - line 164", "'public XStream2() {' - line 169", "'public XStream2(HierarchicalStreamDriver hierarchicalStreamDriver) {' - line 175", "'public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder) {' - line 199", "'return unmarshal(reader, root, dataHolder, false);' - line 200", "'public Object unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder, boolean nullOut) {' - line 219", "'public void moveUp() {' - line 235", "'public void moveDown() {' - line 243", "'protected void setupConverters() {' - line 284", "'public void addCriticalField(Class<?> clazz, String field) {' - line 297", "'static String trimVersion(String version) {' - line 301", "'private void init() {' - line 306", "'@Override public boolean canConvert(Class type) {' - line 336", "'@Override public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 340", "'protected MapperWrapper wrapMapper(MapperWrapper next) {' - line 347", "'public String serializedClass(Class type) {' - line 350", "'else if (type != null && ImmutableList.class.isAssignableFrom(type))' - line 353", "'public Mapper getMapperInjectionPoint() {' - line 365", "'@Override public void toXML(Object obj, OutputStream out) {' - line 373", "'public void toXMLUTF8(Object obj, OutputStream out) throws IOException {' - line 382", "'public void setMapper(Mapper m) {' - line 398", "'public Mapper getDelegate() {' - line 407", "'public void setDelegate(Mapper m) {' - line 411", "'public void addCompatibilityAlias(String oldClassName, Class newClass) {' - line 429", "'private CompatibilityMapper(Mapper wrapped) {' - line 441", "'public Class realClass(String elementName) {' - line 446", "'return computeConverterClass(type);' - line 474", "'protected Converter computeValue(Class<?> type) {' - line 479", "'return computeConverter(type);' - line 480", "'private AssociatedConverterImpl(XStream xstream) {' - line 484", "'private Converter findConverter(@CheckForNull Class<?> t) {' - line 489", "'private Converter computeConverter(@NonNull Class<?> t) {' - line 514", "'else if (p[i] == Mapper.class)' - line 527", "'public boolean canConvert(Class type) {' - line 549", "'return findConverter(type) != null;' - line 550", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 555", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 561", "'return findConverter(context.getRequiredType()).unmarshal(reader, context);' - line 562", "'*   public ConverterImpl(XStream2 xstream) { super(xstream); }' - line 570", "'*   {@literal @}Override protected void callback(MyType obj, UnmarshallingContext context) {' - line 571", "'protected PassthruConverter(XStream2 xstream) {' - line 578", "'public boolean canConvert(Class type) {' - line 583", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 589", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 594", "'@Override public String ownerOf(Class<?> clazz) {' - line 619", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 641", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 646", "'public boolean canConvert(Class type) {' - line 651"]}, "LRUStringConverter.java": {"METHODS": ["'public LRUStringConverter() {' - line 15", "'public LRUStringConverter(int size) {' - line 19", "'public boolean canConvert(final Class type) {' - line 24", "'public Object fromString(final String str) {' - line 29"]}, "Graph.java": {"METHODS": ["'protected Graph(long timestamp, int defaultWidth, int defaultHeight) {' - line 78", "'protected Graph(Calendar timestamp, int defaultWidth, int defaultHeight) {' - line 84", "'private BufferedImage render(StaplerRequest req, ChartRenderingInfo info) {' - line 93", "'public static Dimension safeDimension(int width, int height, int defaultWidth, int defaultHeight) {' - line 127", "'@NonNull private static Color stringToColor(@CheckForNull String s) {' - line 135", "'public void doPng(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 150", "'public void doMap(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 204"]}, "ArgumentListBuilder.java": {"METHODS": ["'public ArgumentListBuilder() {' - line 54", "'public ArgumentListBuilder(String... args) {' - line 57", "'public ArgumentListBuilder add(Object a) {' - line 61", "'return add(a.toString(), false);' - line 62", "'public ArgumentListBuilder add(Object a, boolean mask) {' - line 68", "'return add(a.toString(), mask);' - line 69", "'public ArgumentListBuilder add(File f) {' - line 72", "'return add(f.getAbsolutePath(), false);' - line 73", "'public ArgumentListBuilder add(String a) {' - line 76", "'return add(a, false);' - line 77", "'public ArgumentListBuilder add(String a, boolean mask) {' - line 89", "'public ArgumentListBuilder prepend(String... args) {' - line 99", "'public ArgumentListBuilder addQuoted(String a) {' - line 118", "'return add('\"' + a + '\"', false);' - line 119", "'public ArgumentListBuilder addQuoted(String a, boolean mask) {' - line 125", "'return add('\"' + a + '\"', mask);' - line 126", "'public ArgumentListBuilder add(String... args) {' - line 129", "'public ArgumentListBuilder add(@NonNull Iterable<String> args) {' - line 139", "'public ArgumentListBuilder addTokenized(String s) {' - line 149", "'public ArgumentListBuilder addKeyValuePair(String prefix, String key, String value, boolean mask) {' - line 158", "'public ArgumentListBuilder addKeyValuePairs(String prefix, Map<String, String> props) {' - line 170", "'public ArgumentListBuilder addKeyValuePairs(String prefix, Map<String, String> props, Set<String> propsToMask) {' - line 188", "'public ArgumentListBuilder addKeyValuePairsFromPropertyString(String prefix, String properties, VariableResolver<String> vr) throws IOException {' - line 207", "'return addKeyValuePairsFromPropertyString(prefix, properties, vr, null);' - line 208", "'public ArgumentListBuilder addKeyValuePairsFromPropertyString(String prefix, String properties, VariableResolver<String> vr, Set<String> propsToMask) throws IOException {' - line 226", "'private static VariableResolver<String> propertiesGeneratingResolver(final VariableResolver<String> original) {' - line 248", "'public String resolve(String name) {' - line 253", "'public String[] toCommandArray() {' - line 262", "'public ArgumentListBuilder clone() {' - line 267", "'public void clear() {' - line 281", "'public List<String> toList() {' - line 286", "'public String toStringWithQuote() {' - line 294", "'public ArgumentListBuilder toWindowsCommand(boolean escapeVars) {' - line 331", "'else if (c == '^' || c == '&' || c == '<' || c == '>' || c == '|') {' - line 343", "'else if (c == '\"') {' - line 347", "'public ArgumentListBuilder toWindowsCommand() {' - line 388", "'return toWindowsCommand(false);' - line 389", "'private static boolean startQuoting(StringBuilder buf, String arg, int atIndex) {' - line 392", "'public boolean hasMaskedArguments() {' - line 401", "'public boolean[] toMaskArray() {' - line 409", "'public void addMasked(String string) {' - line 420", "'public ArgumentListBuilder addMasked(Secret s) {' - line 424", "'return add(Secret.toString(s), true);' - line 425", "'public String toString() {' - line 432"]}, "IncompatibleVMDetected.java": {"METHODS": ["'public Map getSystemProperties() {' - line 38"]}, "HudsonIsRestarting.java": {"METHODS": ["'public HudsonIsRestarting(boolean safeRestart) {' - line 48", "'public HudsonIsRestarting() {' - line 53", "'public void doDynamic(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, InterruptedException {' - line 57", "'public boolean isSafeRestart() {' - line 65"]}, "CyclicGraphDetector.java": {"METHODS": ["'public void run(Iterable<? extends N> allNodes) throws CycleDetectedException {' - line 21", "'public List<N> getSorted() {' - line 31", "'private void visit(N p) throws CycleDetectedException {' - line 43", "'private void detectedCycle(N q) throws CycleDetectedException {' - line 59", "'protected void reactOnCycle(N q, List<N> cycle) throws CycleDetectedException {' - line 68", "'public CycleDetectedException(List cycle) {' - line 75"]}, "VariableResolver.java": {"METHODS": ["'V resolve(String name);' - line 53", "'public ByMap(Map<String, V> data) {' - line 66", "'public V resolve(String name) {' - line 71", "'public Union(VariableResolver<? extends V>... resolvers) {' - line 82", "'public Union(Collection<? extends VariableResolver<? extends V>> resolvers) {' - line 86", "'public V resolve(String name) {' - line 91"]}, "KeyedDataStorage.java": {"METHODS": ["'return get(key, true, createParams);' - line 110", "'return get(key, false, null);' - line 120", "'public void resetPerformanceStats() {' - line 223", "'public String getPerformanceStats() {' - line 233"]}, "FileChannelWriter.java": {"METHODS": ["'public void write(char[] cbuf, int off, int len) throws IOException {' - line 68", "'public void flush() throws IOException {' - line 75", "'public void close() throws IOException {' - line 85"]}, "RunList.java": {"METHODS": ["'public RunList() {' - line 63", "'public RunList(Job j) {' - line 67", "'public RunList(View view) { // this is a type unsafe operation' - line 71", "'public RunList(Collection<? extends Job> jobs) {' - line 83", "'public int compare(R o1, R o2) {' - line 109", "'private RunList(Iterable<R> c) {' - line 117", "'public Iterator<R> iterator() {' - line 122", "'public int size() {' - line 132", "'public R get(int index) {' - line 150", "'public List<R> subList(int fromIndex, int toIndex) {' - line 160", "'public Spliterator<R> spliterator() {' - line 172", "'public int indexOf(Object o) {' - line 177", "'public int lastIndexOf(Object o) {' - line 188", "'public boolean isEmpty() {' - line 200", "'public R getFirstBuild() {' - line 206", "'public R getLastBuild() {' - line 211", "'RunList<R> fromRuns(Collection<? extends R> runs) {' - line 217", "'public RunList<R> filter(Predicate<R> predicate) {' - line 226", "'return filter(new PredicateAdapter(predicate));' - line 227", "'public boolean apply(@Nullable T r) {' - line 238", "'public RunList<R> filter(com.google.common.base.Predicate<R> predicate) {' - line 250", "'private RunList<R> limit(final CountingPredicate<R> predicate) {' - line 262", "'public Iterator<R> iterator() {' - line 268", "'public String toString() {' - line 273", "'public RunList<R> limit(final int n) {' - line 287", "'return limit(new CountingPredicate<>() {' - line 288", "'public boolean apply(int index, R input) {' - line 290", "'public RunList<R> failureOnly() {' - line 300", "'return filter((Predicate<R>) r -> r.getResult() != Result.SUCCESS);' - line 301", "'public RunList<R> overThresholdOnly(final Result threshold) {' - line 309", "'return filter((Predicate<R>) r -> r.getResult() != null && r.getResult().isBetterOrEqualTo(threshold));' - line 310", "'public RunList<R> completedOnly() {' - line 318", "'return filter((Predicate<R>) r -> !r.isBuilding());' - line 319", "'public RunList<R> node(final Node node) {' - line 326", "'return filter((Predicate<R>) r -> r instanceof AbstractBuild && ((AbstractBuild) r).getBuiltOn() == node);' - line 327", "'public RunList<R> regressionOnly() {' - line 334", "'return filter((Predicate<R>) r -> r.getBuildStatusSummary().isWorse);' - line 335", "'public RunList<R> byTimestamp(final long start, final long end) {' - line 344", "'public boolean apply(int index, R r) {' - line 348", "'public RunList<R> newBuilds() {' - line 360", "'return filter((Predicate<R>) r -> !r.isBuilding())' - line 366", "'public boolean apply(int index, R r) {' - line 370"]}, "StreamTaskListener.java": {"METHODS": ["'public StreamTaskListener(@NonNull PrintStream out) {' - line 71", "'public StreamTaskListener(@NonNull OutputStream out) {' - line 82", "'public StreamTaskListener(@NonNull OutputStream out, @CheckForNull Charset charset) {' - line 86", "'public StreamTaskListener(@NonNull File out) throws IOException {' - line 101", "'public StreamTaskListener(@NonNull File out, @CheckForNull Charset charset) throws IOException {' - line 105", "'private static Path asPath(@NonNull File out) throws IOException {' - line 112", "'public StreamTaskListener(@NonNull File out, boolean append, @CheckForNull Charset charset) throws IOException {' - line 129", "'public StreamTaskListener(@NonNull Writer w) throws IOException {' - line 141", "'public StreamTaskListener() throws IOException {' - line 150", "'public static StreamTaskListener fromStdout() {' - line 154", "'public static StreamTaskListener fromStderr() {' - line 158", "'public PrintStream getLogger() {' - line 163", "'public Charset getCharset() {' - line 168", "'private void writeObject(ObjectOutputStream out) throws IOException {' - line 172", "'private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {' - line 194", "'public void close() throws IOException {' - line 205", "'public void closeQuietly() {' - line 214"]}, "CopyOnWriteMap.java": {"METHODS": ["'protected CopyOnWriteMap(Map<K, V> core) {' - line 58", "'protected CopyOnWriteMap() {' - line 62", "'protected void update(Map<K, V> m) {' - line 66", "'public void replaceBy(Map<? extends K, ? extends V> data) {' - line 74", "'public int size() {' - line 82", "'public boolean isEmpty() {' - line 87", "'public boolean containsKey(Object key) {' - line 92", "'public boolean containsValue(Object value) {' - line 97", "'public V get(Object key) {' - line 102", "'public Set<K> keySet() {' - line 142", "'public Collection<V> values() {' - line 150", "'@Override public int hashCode() {' - line 162", "'return copy().hashCode();' - line 163", "'@Override public boolean equals(Object obj) {' - line 167", "'return copy().equals(obj);' - line 168", "'@Override public String toString() {' - line 171", "'return copy().toString();' - line 172", "'public Hash(Map<K, V> core) {' - line 179", "'public Hash() {' - line 183", "'public ConverterImpl(Mapper mapper) {' - line 192", "'public boolean canConvert(Class type) {' - line 197", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 202", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 207", "'public Tree(Map<K, V> core, Comparator<K> comparator) {' - line 219", "'public Tree(Comparator<K> comparator) {' - line 224", "'public Tree() {' - line 229", "'public ConverterImpl(Mapper mapper) {' - line 246", "'public boolean canConvert(Class type) {' - line 251", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 256", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 262"]}, "EnumConverter.java": {"METHODS": ["'public Object convert(Class aClass, Object object) {' - line 34"]}, "AtomicFileWriter.java": {"METHODS": ["'public AtomicFileWriter(File f) throws IOException {' - line 73", "'public AtomicFileWriter(@NonNull File f, @Nullable String encoding) throws IOException {' - line 83", "'private static Path toPath(@NonNull File file) throws IOException {' - line 95", "'public AtomicFileWriter(@NonNull Path destinationPath, @NonNull Charset charset) throws IOException {' - line 107", "'public AtomicFileWriter(@NonNull Path destinationPath, @NonNull Charset charset, boolean integrityOnFlush, boolean integrityOnClose) throws IOException {' - line 122", "'public void write(int c) throws IOException {' - line 156", "'public void write(String str, int off, int len) throws IOException {' - line 161", "'public void write(char[] cbuf, int off, int len) throws IOException {' - line 166", "'public void flush() throws IOException {' - line 171", "'public void close() throws IOException {' - line 176", "'public void abort() throws IOException {' - line 186", "'public void commit() throws IOException {' - line 190", "'protected void finalize() throws Throwable {' - line 228", "'private void closeAndDeleteTempFile() throws IOException {' - line 236", "'public File getTemporaryFile() {' - line 252", "'public Path getTemporaryPath() {' - line 261"]}, "RingBufferLogHandler.java": {"METHODS": ["'public RingBufferLogHandler() {' - line 50", "'public RingBufferLogHandler(int ringSize) {' - line 54", "'public static int getDefaultRingBufferSize() {' - line 63", "'public void publish(LogRecord record) {' - line 68", "'public List<LogRecord> getView() {' - line 94", "'public LogRecord get(int index) {' - line 98", "'public int size() {' - line 106", "'public void flush() {}' - line 120", "'public void close() throws SecurityException {}' - line 123"]}, "SecretRewriter.java": {"METHODS": ["'public SecretRewriter() throws GeneralSecurityException {' - line 44", "'public SecretRewriter(File backupDirectory) throws GeneralSecurityException {' - line 51", "'private String tryRewrite(String s) throws InvalidKeyException {' - line 55", "'public boolean rewrite(File f, File backup) throws InvalidKeyException, IOException {' - line 77", "'return rewrite(f);' - line 78", "'public boolean rewrite(File f) throws InvalidKeyException, IOException {' - line 81", "'return rewriteRecursive(dir, \"\", listener);' - line 135", "'private int rewriteRecursive(File dir, String relative, TaskListener listener) throws InvalidKeyException {' - line 138", "'protected boolean isIgnoredDir(File dir) {' - line 185", "'private static boolean isBase64(char ch) {' - line 194", "'private static boolean isBase64(String s) {' - line 198"]}, "JVMBuilder.java": {"METHODS": ["'public ClasspathBuilder classpath() {' - line 52", "'public JVMBuilder systemProperty(String key, String value) {' - line 56", "'public JVMBuilder systemProperties(Map<String, String> props) {' - line 65", "'public ArgumentListBuilder args() {' - line 73", "'public ArgumentListBuilder vmopts() {' - line 80", "'public JVMBuilder pwd(FilePath pwd) {' - line 87", "'public JVMBuilder debug(int port) {' - line 95", "'public JVMBuilder pwd(File pwd) {' - line 104", "'return pwd(new FilePath(pwd));' - line 105", "'public JVMBuilder mainClass(String fullyQualifiedClassName) {' - line 108", "'public JVMBuilder mainClass(Class mainClass) {' - line 113", "'return mainClass(mainClass.getName());' - line 114", "'public ArgumentListBuilder toFullArguments() {' - line 117", "'public ProcStarter launch(Launcher launcher) {' - line 131"]}, "CaseInsensitiveComparator.java": {"METHODS": ["'private CaseInsensitiveComparator() {}' - line 39", "'public int compare(String lhs, String rhs) {' - line 42", "'private Object readResolve() {' - line 49"]}, "EditDistance.java": {"METHODS": ["'*     Kohsuke Kawaguchi (kohsuke.kawaguchi@sun.com)' - line 33", "'public static int editDistance(String a, String b) {' - line 43", "'public static String findNearest(String key, String[] group) {' - line 53", "'return findNearest(key, Arrays.asList(group));' - line 54", "'public static String findNearest(String key, Collection<String> group) {' - line 57", "'private EditDistance(String a, String b) {' - line 79", "'private void flip() {' - line 92", "'private int min(int a, int b, int c) {' - line 98", "'private int calc() {' - line 102"]}, "DaemonThreadFactory.java": {"METHODS": ["'public DaemonThreadFactory() {' - line 37", "'public DaemonThreadFactory(ThreadFactory core) {' - line 41", "'public Thread newThread(Runnable r) {' - line 46"]}, "Secret.java": {"METHODS": ["'public String toString() {' - line 96", "'public String getPlainText() {' - line 108", "'public boolean equals(Object that) {' - line 113", "'public int hashCode() {' - line 118", "'public String getEncryptedValue() {' - line 127", "'public static Secret decrypt(@CheckForNull String data) {' - line 171", "'private static boolean isValidData(String data) {' - line 220", "'public static Cipher getCipher(String algorithm) throws GeneralSecurityException {' - line 236", "'public static Secret fromString(@CheckForNull String data) {' - line 249", "'public static String toString(@CheckForNull Secret s) {' - line 262", "'public ConverterImpl() {' - line 267", "'public boolean canConvert(Class type) {' - line 271", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 276", "'public Object unmarshal(HierarchicalStreamReader reader, final UnmarshallingContext context) {' - line 282", "'return fromString(reader.getValue());' - line 283", "'public Secret convert(Class type, Object value) {' - line 317", "'public String convert(Class type, Object value) {' - line 330"]}, "HexBinaryConverter.java": {"METHODS": ["'public boolean canConvert(Class type) {' - line 39", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 44", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 50"]}, "InsufficientPermissionDetected.java": {"METHODS": ["'public InsufficientPermissionDetected(SecurityException e) {' - line 42"]}, "LogTaskListener.java": {"METHODS": ["'public LogTaskListener(Logger logger, Level level) {' - line 47", "'public PrintStream getLogger() {' - line 52", "'public void close() {' - line 57", "'public void write(int b) throws IOException {' - line 76", "'public void flush() throws IOException {' - line 85", "'public void close() throws IOException {' - line 97"]}, "InvocationInterceptor.java": {"METHODS": ["'Object invoke(Object proxy, Method method, Object[] args, InvocationHandler delegate) throws Throwable;' - line 56"]}, "HttpResponses.java": {"METHODS": ["'public static HttpResponse staticResource(File f) throws IOException {' - line 47", "'return staticResource(f.toURI().toURL());' - line 48", "'public static HttpResponse okJSON() {' - line 56", "'public static HttpResponse okJSON(@NonNull JSONObject data) {' - line 66", "'public static HttpResponse okJSON(@NonNull JSONArray data) {' - line 76", "'public static HttpResponse okJSON(@NonNull Map<?, ?> data) {' - line 86", "'public static HttpResponse errorJSON(@NonNull String message) {' - line 97", "'public static HttpResponse errorJSON(@NonNull String message, @NonNull Map<?, ?> data) {' - line 109", "'public static HttpResponse errorJSON(@NonNull String message, @NonNull JSONObject data) {' - line 121", "'public static HttpResponse errorJSON(@NonNull String message, @NonNull JSONArray data) {' - line 133", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 206"]}, "CompressedFile.java": {"METHODS": ["'public CompressedFile(File file) {' - line 73", "'public OutputStream write() throws IOException {' - line 81", "'public InputStream read() throws IOException {' - line 89", "'public String loadAsString() throws IOException {' - line 108", "'public void compress() {' - line 138", "'public void run() {' - line 141", "'new ExceptionCatchingThreadFactory(new NamingThreadFactory(new DaemonThreadFactory(), \"CompressedFile\")));' - line 177"]}, "ByteArrayOutputStream2.java": {"METHODS": ["'public ByteArrayOutputStream2() {' - line 11", "'public ByteArrayOutputStream2(int size) {' - line 14", "'public byte[] getBuffer() {' - line 18", "'public void readFrom(InputStream is) throws IOException {' - line 25"]}, "DataSetBuilder.java": {"METHODS": ["'public void add(Number value, Row rowKey, Column columnKey) {' - line 50", "'public CategoryDataset build() {' - line 56"]}, "ChunkedInputStream.java": {"METHODS": ["'public int read() throws IOException {' - line 111", "'public int read(byte[] b, int off, int len) throws IOException {' - line 130", "'private boolean advanceChunk() throws IOException {' - line 139", "'public int read(byte[] b) throws IOException {' - line 165", "'return read(b, 0, b.length);' - line 166", "'private void readCRLF() throws IOException {' - line 173", "'private void nextChunk() throws IOException {' - line 187", "'private static int getChunkSizeFromInputStream(final InputStream in)' - line 210", "'private void parseTrailerHeaders() throws IOException {' - line 282", "'public void close() throws IOException {' - line 294", "'static void exhaustInputStream(InputStream inStream) throws IOException {' - line 318"]}, "FormApply.java": {"METHODS": ["'public static HttpResponseException success(final String destination) {' - line 46", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 49", "'public static boolean isApply(StaplerRequest req) {' - line 64", "'public static HttpResponseException applyResponse(final String script) {' - line 74", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 77"]}, "ClockDifference.java": {"METHODS": ["'public ClockDifference(long value) {' - line 48", "'public boolean isDangerous() {' - line 55", "'public long abs() {' - line 62", "'public String toString() {' - line 70", "'public String toHtml() {' - line 85", "'public static String toHtml(Node d) {' - line 92", "'public static String toHtml(ClockDifference d) {' - line 105"]}, "StackedAreaRenderer2.java": {"METHODS": ["'public StackedAreaRenderer2() {' - line 60", "'public String generateURL(CategoryDataset dataset, int row, int column) {' - line 70", "'public String generateToolTip(CategoryDataset dataset, int row, int column) {' - line 78", "'public Paint getItemPaint(int row, int column) {' - line 86"]}, "DoubleLaunchChecker.java": {"METHODS": ["'public DoubleLaunchChecker() {' - line 78", "'public String getDisplayName() {' - line 83", "'public boolean isActivated() {' - line 88", "'protected void execute() {' - line 92", "'public String getId() {' - line 122", "'public String getCollidingId() {' - line 126", "'public AperiodicWork getNewInstance() {' - line 137", "'public long getRecurrencePeriod() {' - line 143", "'protected void doAperiodicRun() {' - line 149"]}, "AWTProblem.java": {"METHODS": ["'public AWTProblem(Throwable cause) {' - line 36"]}, "CompoundEnumeration.java": {"METHODS": ["'public CompoundEnumeration(Enumeration... e) {' - line 18", "'public CompoundEnumeration(Iterable<Enumeration<? extends T>> e) {' - line 22", "'public boolean hasMoreElements() {' - line 32", "'public T nextElement() throws NoSuchElementException {' - line 40"]}, "ClassLoaderSanityThreadFactory.java": {"METHODS": ["'public ClassLoaderSanityThreadFactory(ThreadFactory delegate) {' - line 17", "'@Override public Thread newThread(Runnable r) {' - line 21"]}, "RobustCollectionConverter.java": {"METHODS": ["'public RobustCollectionConverter(XStream xs) {' - line 55", "'public RobustCollectionConverter(Mapper mapper, ReflectionProvider reflectionProvider) {' - line 59", "'public boolean canConvert(Class type) {' - line 65", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 70", "'protected void populateCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection) {' - line 82"]}, "TableNestChecker.java": {"METHODS": ["'public static void applyTo(XMLOutput xo) {' - line 59", "'public TableNestChecker() {' - line 63", "'public TableNestChecker(ContentHandler target) {' - line 67", "'public void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {' - line 73", "'public void endElement(String uri, String localName, String qName) throws SAXException {' - line 89", "'boolean isAllowed(String childTag);' - line 97", "'private InList(String... tags) {' - line 105", "'public boolean isAllowed(String childTag) {' - line 110", "'CHECKERS.put(\"TR\",   new InList(\"TD\", \"TH\"));' - line 121"]}, "IOUtils.java": {"METHODS": ["'public static void drain(InputStream in) throws IOException {' - line 36", "'public static void copy(File src, OutputStream out) throws IOException {' - line 42", "'public static void copy(InputStream in, File out) throws IOException {' - line 50", "'public static File mkdirs(File dir) throws IOException {' - line 64", "'public static InputStream skip(InputStream in, long size) throws IOException {' - line 87", "'public static File absolutize(File base, String path) {' - line 109", "'public static boolean isAbsolute(String path) {' - line 120", "'public static int mode(File f) throws IOException {' - line 135", "'public static String readFirstLine(InputStream is, String encoding) throws IOException {' - line 147", "'public static void closeQuietly(Reader input) {' - line 165", "'public static void closeQuietly(Writer output) {' - line 173", "'public static void closeQuietly(InputStream input) {' - line 181", "'public static void closeQuietly(OutputStream output) {' - line 189", "'public static byte[] toByteArray(InputStream input) throws IOException {' - line 197", "'public static byte[] toByteArray(Reader input) throws IOException {' - line 205", "'public static byte[] toByteArray(Reader input, String encoding) throws IOException {' - line 213", "'public static byte[] toByteArray(String input) throws IOException {' - line 221", "'public static char[] toCharArray(InputStream is) throws IOException {' - line 229", "'public static char[] toCharArray(InputStream is, String encoding) throws IOException {' - line 237", "'public static char[] toCharArray(Reader input) throws IOException {' - line 245", "'public static String toString(InputStream input) throws IOException {' - line 253", "'public static String toString(InputStream input, String encoding) throws IOException {' - line 261", "'public static String toString(Reader input) throws IOException {' - line 269", "'public static String toString(byte[] input) throws IOException {' - line 277", "'public static String toString(byte[] input, String encoding) throws IOException {' - line 285", "'public static List readLines(InputStream input) throws IOException {' - line 293", "'public static List readLines(InputStream input, String encoding) throws IOException {' - line 301", "'public static List readLines(Reader input) throws IOException {' - line 309", "'public static LineIterator lineIterator(Reader reader) {' - line 317", "'public static LineIterator lineIterator(InputStream input, String encoding) throws IOException {' - line 325", "'public static InputStream toInputStream(String input) {' - line 333", "'public static InputStream toInputStream(String input, String encoding) throws IOException {' - line 341", "'public static void write(byte[] data, OutputStream output) throws IOException {' - line 349", "'public static void write(byte[] data, Writer output) throws IOException {' - line 357", "'public static void write(byte[] data, Writer output, String encoding) throws IOException {' - line 365", "'public static void write(char[] data, Writer output) throws IOException {' - line 373", "'public static void write(char[] data, OutputStream output) throws IOException {' - line 381", "'public static void write(char[] data, OutputStream output, String encoding) throws IOException {' - line 389", "'public static void write(String data, Writer output) throws IOException {' - line 397", "'public static void write(String data, OutputStream output) throws IOException {' - line 405", "'public static void write(String data, OutputStream output, String encoding) throws IOException {' - line 413", "'public static void write(StringBuffer data, Writer output) throws IOException {' - line 421", "'public static void write(StringBuffer data, OutputStream output) throws IOException {' - line 429", "'public static void write(StringBuffer data, OutputStream output, String encoding) throws IOException {' - line 437", "'public static void writeLines(Collection lines, String lineEnding, OutputStream output) throws IOException {' - line 445", "'public static void writeLines(Collection lines, String lineEnding, OutputStream output, String encoding) throws IOException {' - line 453", "'public static void writeLines(Collection lines, String lineEnding, Writer writer) throws IOException {' - line 461", "'public static int copy(InputStream input, OutputStream output) throws IOException {' - line 469", "'public static long copyLarge(InputStream input, OutputStream output) throws IOException {' - line 477", "'public static void copy(InputStream input, Writer output) throws IOException {' - line 485", "'public static void copy(InputStream input, Writer output, String encoding) throws IOException {' - line 493", "'public static int copy(Reader input, Writer output) throws IOException {' - line 501", "'public static long copyLarge(Reader input, Writer output) throws IOException {' - line 509", "'public static void copy(Reader input, OutputStream output) throws IOException {' - line 517", "'public static void copy(Reader input, OutputStream output, String encoding) throws IOException {' - line 525", "'public static boolean contentEquals(InputStream input1, InputStream input2) throws IOException {' - line 533", "'public static boolean contentEquals(Reader input1, Reader input2) throws IOException {' - line 541"]}, "ChunkedOutputStream.java": {"METHODS": ["'public ChunkedOutputStream(OutputStream stream, int bufferSize) throws IOException {' - line 74", "'public ChunkedOutputStream(OutputStream stream) throws IOException {' - line 83", "'protected void flushCache() throws IOException {' - line 93", "'protected void flushCacheWithAppend(byte[] bufferToAppend, int off, int len) throws IOException {' - line 109", "'protected void writeClosingChunk() throws IOException {' - line 118", "'public void finish() throws IOException {' - line 132", "'public void write(int b) throws IOException {' - line 151", "'public void write(byte[] b) throws IOException {' - line 164", "'public void write(byte[] src, int off, int len) throws IOException {' - line 169", "'public void flush() throws IOException {' - line 182", "'public void close() throws IOException {' - line 191"]}, "HudsonFailedToLoad.java": {"METHODS": ["'public HudsonFailedToLoad(Throwable exception) {' - line 41"]}, "MaskingClassLoader.java": {"METHODS": ["'public MaskingClassLoader(ClassLoader parent, String... masks) {' - line 56", "'public MaskingClassLoader(ClassLoader parent, Collection<String> masks) {' - line 60", "'public URL getResource(String name) {' - line 83", "'public Enumeration<URL> getResources(String name) throws IOException {' - line 90", "'public void add(String prefix) {' - line 96", "'private boolean isMasked(String name) {' - line 103"]}, "DescriptorList.java": {"METHODS": ["'public DescriptorList(Descriptor<T>... descriptors) {' - line 83", "'public DescriptorList(Class<T> type) {' - line 91", "'public Descriptor<T> get(int index) {' - line 97", "'return store().get(index);' - line 98", "'public int size() {' - line 102", "'return store().size();' - line 103", "'public Iterator<Descriptor<T>> iterator() {' - line 107", "'return store().iterator();' - line 108", "'public boolean add(Descriptor<T> d) {' - line 118", "'return store().add(d);' - line 119", "'public void add(int index, Descriptor<T> element) {' - line 129", "'public boolean remove(Object o) {' - line 134", "'return store().remove(o);' - line 135", "'private List<Descriptor<T>> store() {' - line 141", "'public T newInstanceFromRadioList(JSONObject config) throws FormException {' - line 158", "'return get(idx).newInstance(Stapler.getCurrentRequest(), config);' - line 162", "'public T newInstanceFromRadioList(JSONObject parent, String name) throws FormException {' - line 176", "'return newInstanceFromRadioList(parent.getJSONObject(name));' - line 178", "'public Descriptor<T> findByName(String id) {' - line 190", "'public void load(Class<? extends Describable> c) {' - line 210", "'public Descriptor<T> find(String fqcn) {' - line 224"]}, "FormFieldValidator.java": {"METHODS": ["'protected FormFieldValidator(StaplerRequest request, StaplerResponse response, boolean adminOnly) {' - line 86", "'protected FormFieldValidator(StaplerRequest request, StaplerResponse response, Permission permission) {' - line 96", "'protected FormFieldValidator(Permission permission) {' - line 104", "'protected FormFieldValidator(StaplerRequest request, StaplerResponse response, AccessControlled subject, Permission permission) {' - line 114", "'protected FormFieldValidator(AccessControlled subject, Permission permission) {' - line 121", "'public void ok() throws IOException, ServletException {' - line 157", "'public void respond(String html) throws IOException, ServletException {' - line 164", "'public void error(String message) throws IOException, ServletException {' - line 176", "'public void warning(String message) throws IOException, ServletException {' - line 180", "'public void ok(String message) throws IOException, ServletException {' - line 184", "'public void error(String format, Object... args) throws IOException, ServletException {' - line 192", "'public void warning(String format, Object... args) throws IOException, ServletException {' - line 196", "'public void ok(String format, Object... args) throws IOException, ServletException {' - line 200", "'public void errorWithMarkup(String message) throws IOException, ServletException {' - line 215", "'public void warningWithMarkup(String message) throws IOException, ServletException {' - line 219", "'public void okWithMarkup(String message) throws IOException, ServletException {' - line 223", "'private void _errorWithMarkup(String message, String cssClass) throws IOException, ServletException {' - line 227", "'protected URLCheck(StaplerRequest request, StaplerResponse response) {' - line 251", "'protected BufferedReader open(URL url) throws IOException {' - line 261", "'new InputStreamReader(con.getInputStream(), getCharset(con)));' - line 268", "'protected boolean findText(BufferedReader in, String literal) throws IOException {' - line 276", "'protected void handleIOException(String url, IOException e) throws IOException, ServletException {' - line 291", "'private String getCharset(URLConnection con) {' - line 303", "'public HudsonURL(StaplerRequest request, StaplerResponse response) {' - line 322", "'protected void check() throws IOException, ServletException {' - line 327", "'private HttpURLConnection openConnection(URL url) throws IOException {' - line 353", "'public WorkspaceFileMask(StaplerRequest request, StaplerResponse response) {' - line 368", "'public WorkspaceFileMask(StaplerRequest request, StaplerResponse response, boolean errorIfNotExist) {' - line 372", "'protected void check() throws IOException, ServletException {' - line 379", "'else                    warning(msg);' - line 398", "'protected FilePath getBaseDirectory(AbstractProject<?, ?> p) {' - line 407", "'public WorkspaceDirectory(StaplerRequest request, StaplerResponse response, boolean errorIfNotExist) {' - line 421", "'public WorkspaceDirectory(StaplerRequest request, StaplerResponse response) {' - line 425", "'public WorkspaceFilePath(StaplerRequest request, StaplerResponse response, boolean errorIfNotExist, boolean expectingFile) {' - line 441", "'protected void check() throws IOException, ServletException {' - line 449", "'else                    warning(msg);' - line 492", "'protected FilePath getBaseDirectory(AbstractProject<?, ?> p) {' - line 502", "'public Executable(StaplerRequest request, StaplerResponse response) {' - line 524", "'protected void check() throws IOException, ServletException {' - line 530", "'public void ok() {' - line 536", "'public void checkExecutable(File fexe) {' - line 545", "'public void error(String string) {' - line 554", "'public void validate(File fexe) {' - line 563", "'protected void checkExecutable(File exe) throws IOException, ServletException {' - line 583", "'public Base64(StaplerRequest request, StaplerResponse response, boolean allowWhitespace, boolean allowEmpty, String errorMessage) {' - line 601", "'protected void check() throws IOException, ServletException {' - line 609", "'protected void fail() throws IOException, ServletException {' - line 631", "'public NonNegativeInteger() {' - line 645", "'protected void check() throws IOException, ServletException {' - line 650"]}, "Protector.java": {"METHODS": ["'public static String protect(String secret) {' - line 57", "'public static String unprotect(String data) {' - line 74"]}, "LineEndingConversion.java": {"METHODS": ["'public static String convertEOL(String input, EOLType type) {' - line 33"]}, "IOException2.java": {"METHODS": ["'public IOException2(Throwable cause) {' - line 37", "'public IOException2(String s, Throwable cause) {' - line 41"]}, "NullStream.java": {"METHODS": ["'public NullStream() {}' - line 34", "'public void write(byte[] b) {' - line 37", "'public void write(byte[] b, int off, int len) {' - line 41", "'public void write(int b) {' - line 45"]}, "FormFillFailure.java": {"METHODS": ["'public static FormFillFailure error(@NonNull String message) {' - line 54", "'return errorWithMarkup(Util.escape(message));' - line 55", "'public static FormFillFailure warning(@NonNull String message) {' - line 58", "'return warningWithMarkup(Util.escape(message));' - line 59", "'public static FormFillFailure error(String format, Object... args) {' - line 66", "'return error(String.format(format, args));' - line 67", "'public static FormFillFailure warning(String format, Object... args) {' - line 70", "'return warning(String.format(format, args));' - line 71", "'public static FormFillFailure error(Throwable e, String message) {' - line 82", "'return _error(FormValidation.Kind.ERROR, e, message);' - line 83", "'public static FormFillFailure warning(Throwable e, String message) {' - line 86", "'return _error(FormValidation.Kind.WARNING, e, message);' - line 87", "'private static FormFillFailure _error(FormValidation.Kind kind, Throwable e, String message) {' - line 90", "'return _errorWithMarkup(Util.escape(message), kind);' - line 92", "'return _errorWithMarkup(Util.escape(message) +' - line 95", "'public static FormFillFailure error(Throwable e, String format, Object... args) {' - line 104", "'return error(e, String.format(format, args));' - line 105", "'public static FormFillFailure warning(Throwable e, String format, Object... args) {' - line 108", "'return warning(e, String.format(format, args));' - line 109", "'public static FormFillFailure errorWithMarkup(String message) {' - line 122", "'return _errorWithMarkup(message, FormValidation.Kind.ERROR);' - line 123", "'public static FormFillFailure warningWithMarkup(String message) {' - line 126", "'return _errorWithMarkup(message, FormValidation.Kind.WARNING);' - line 127", "'private static FormFillFailure _errorWithMarkup(@NonNull final String message, final FormValidation.Kind kind) {' - line 130", "'public String renderHtml() {' - line 133", "'public String toString() {' - line 143", "'public static FormFillFailure respond(FormValidation.Kind kind, final String html) {' - line 152", "'public String renderHtml() {' - line 155", "'public String toString() {' - line 160", "'return getKind() + \": \" + html;' - line 161", "'private FormFillFailure(FormValidation.Kind kind) {' - line 174", "'private FormFillFailure(FormValidation.Kind kind, String message) {' - line 178", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)' - line 184", "'public boolean isSelectionCleared() {' - line 196", "'public FormFillFailure withSelectionCleared() {' - line 205"]}, "PackedMap.java": {"METHODS": ["'private PackedMap(Map<? extends K, ? extends V> src) {' - line 69", "'public boolean hasNext() {' - line 85", "'public K getKey() {' - line 96", "'public V getValue() {' - line 101", "'public V setValue(V value) {' - line 106", "'public void remove() {' - line 113", "'public int size() {' - line 120", "'public boolean containsKey(Object key) {' - line 131", "'public V get(Object key) {' - line 140", "'public Collection<V> values() {' - line 150", "'public V get(int index) {' - line 153", "'public int size() {' - line 158", "'public ConverterImpl(Mapper mapper) {' - line 168", "'public boolean canConvert(Class type) {' - line 173", "'protected Object createCollection(Class type) {' - line 178", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 183"]}, "Service.java": {"METHODS": []}, "DualOutputStream.java": {"METHODS": ["'public DualOutputStream(OutputStream lhs, OutputStream rhs) {' - line 35", "'public void write(int b) throws IOException {' - line 41", "'public void write(byte[] b) throws IOException {' - line 47", "'public void write(byte[] b, int off, int len) throws IOException {' - line 53", "'public void flush() throws IOException {' - line 59", "'public void close() throws IOException {' - line 65"]}, "XStream2SecurityUtils.java": {"METHODS": ["'public static void checkForCollectionDoSAttack(final UnmarshallingContext context, final long startNano) {' - line 42"]}, "ProcessKiller.java": {"METHODS": ["'public static ExtensionList<ProcessKiller> all() {' - line 60"]}, "Iterators.java": {"METHODS": ["'protected FlattenIterator(Iterator<? extends T> core) {' - line 61", "'protected FlattenIterator(Iterable<? extends T> core) {' - line 66", "'public boolean hasNext() {' - line 73", "'public U next() {' - line 83", "'public void remove() {' - line 89", "'protected FilterIterator(Iterator<? extends T> core) {' - line 104", "'protected FilterIterator(Iterable<? extends T> core) {' - line 108", "'private void fetch() {' - line 112", "'public boolean hasNext() {' - line 132", "'public T next() {' - line 138", "'public void remove() {' - line 146", "'public DuplicateFilterIterator(Iterator<? extends T> core) {' - line 157", "'public DuplicateFilterIterator(Iterable<? extends T> core) {' - line 161", "'protected boolean filter(T t) {' - line 166", "'public boolean hasNext() {' - line 181", "'public T next() {' - line 186", "'public void remove() {' - line 191", "'public boolean hasNext() {' - line 209", "'public T next() {' - line 214", "'public void remove() {' - line 219", "'public static List<Integer> sequence(final int start, int end, final int step) {' - line 233", "'public Integer get(int index) {' - line 240", "'public int size() {' - line 247", "'public static List<Integer> sequence(int start, int end) {' - line 253", "'return sequence(start, end, 1);' - line 254", "'public static List<Integer> reverseSequence(int start, int end, int step) {' - line 262", "'return sequence(end - 1, start - 1, -step);' - line 263", "'public static List<Integer> reverseSequence(int start, int end) {' - line 266", "'return reverseSequence(start, end, 1);' - line 267", "'protected boolean filter(U u) {' - line 293", "'public boolean hasNext() {' - line 305", "'public T next() {' - line 310", "'public void remove() {' - line 315", "'protected Iterator<T> expand(Iterable<? extends T> iterable) {' - line 338", "'protected boolean filter(T t) {' - line 352", "'public boolean hasNext() {' - line 382", "'public T next() {' - line 388", "'private void fetch() {' - line 395", "'public void remove() {' - line 410", "'boolean apply(int index, T input);' - line 417", "'public static void skip(@NonNull Iterator<?> iterator, int count) {' - line 428"]}, "AdaptedIterator.java": {"METHODS": ["'protected AdaptedIterator(Iterator<? extends T> core) {' - line 41", "'protected AdaptedIterator(Iterable<? extends T> core) {' - line 45", "'public boolean hasNext() {' - line 50", "'public U next() {' - line 55", "'return adapt(core.next());' - line 56", "'public void remove() {' - line 62"]}, "ConsistentHash.java": {"METHODS": ["'private Point(int hash, Object item) {' - line 80", "'public int compareTo(Point that) {' - line 86", "'private Table() {' - line 104", "'T lookup(int queryPoint) {' - line 130", "'Iterator<T> list(int queryPoint) {' - line 145", "'public boolean hasNext() {' - line 151", "'public T next() {' - line 156", "'public void remove() {' - line 164", "'private int index(int queryPoint) {' - line 170", "'String hash(T t);' - line 206", "'public ConsistentHash() {' - line 211", "'public ConsistentHash(int defaultReplication) {' - line 215", "'public ConsistentHash(Hash<T> hash) {' - line 219", "'public ConsistentHash(Hash<T> hash, int defaultReplication) {' - line 223", "'public int countAllPoints() {' - line 229", "'private int digest(String s) {' - line 305", "'private MessageDigest createMessageDigest() throws NoSuchAlgorithmException {' - line 321", "'private int b2i(byte b) {' - line 328", "'public T lookup(int queryPoint) {' - line 343", "'public T lookup(String queryPoint) {' - line 350", "'return lookup(digest(queryPoint));' - line 351", "'public Iterable<T> list(final int queryPoint) {' - line 365", "'public Iterable<T> list(String queryPoint) {' - line 372", "'return list(digest(queryPoint));' - line 373"]}, "HistoricalSecrets.java": {"METHODS": ["'/*package*/ static Secret decrypt(String data, CryptoConfidentialKey key) throws IOException, GeneralSecurityException {' - line 47", "'return tryDecrypt(cipher, in);' - line 60", "'/*package*/ static Secret tryDecrypt(Cipher cipher, byte[] in) {' - line 63", "'/*package*/ static SecretKey getLegacyKey() throws GeneralSecurityException {' - line 82"]}, "PrettyPrintWriter.java": {"METHODS": ["'public void startNode(final String name) {' - line 167", "'public void startNode(final String name, final Class clazz) {' - line 181", "'public void setValue(final String text) {' - line 186", "'public void addAttribute(final String key, final String value) {' - line 195", "'protected void writeAttributeValue(final QuickWriter writer, final String text) {' - line 204", "'protected void writeText(final QuickWriter writer, final String text) {' - line 208", "'private void writeText(final String text, final boolean isAttribute) {' - line 212", "'public void endNode() {' - line 281", "'private void finishTag() {' - line 300", "'protected void endOfLine() {' - line 312", "'public void flush() {' - line 320", "'public void close() {' - line 325", "'protected String getNewLine() {' - line 336"]}, "TagCloud.java": {"METHODS": ["'public Entry(T item, float weight) {' - line 43", "'public float scale() {' - line 48", "'public String getClassName() {' - line 53", "'float weight(T item);' - line 59", "'public TagCloud(Iterable<? extends T> inputs, WeightFunction<T> f) {' - line 71", "'public Entry get(int index) {' - line 80", "'public int size() {' - line 85"]}, "AlternativeUiTextProvider.java": {"METHODS": ["'public static ExtensionList<AlternativeUiTextProvider> all() {' - line 71", "'public T cast(Object context) {' - line 106"]}, "DescribableList.java": {"METHODS": ["'protected DescribableList() {' - line 68", "'public DescribableList(Owner owner) {' - line 76", "'public DescribableList(Saveable owner) {' - line 80", "'public DescribableList(Saveable owner, Collection<? extends T> initialList) {' - line 84", "'public void setOwner(Owner owner) {' - line 94", "'public void replace(T item) throws IOException {' - line 101", "'public T getDynamic(String id) {' - line 114", "'public T get(D descriptor) {' - line 130", "'public boolean contains(D d) {' - line 137", "'return get(d) != null;' - line 138", "'public void remove(D descriptor) throws IOException {' - line 141", "'public void rebuild(StaplerRequest req, JSONObject json, List<? extends Descriptor<T>> descriptors) throws FormException, IOException {' - line 169", "'public void rebuild(StaplerRequest req, JSONObject json, List<? extends Descriptor<T>> descriptors, String prefix) throws FormException, IOException {' - line 200", "'public void rebuildHetero(StaplerRequest req, JSONObject formData, Collection<? extends Descriptor<T>> descriptors, String key) throws FormException, IOException {' - line 212", "'public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {' - line 219", "'public T[] toArray(T[] array) {' - line 243", "'public ConverterImpl(Mapper mapper) {' - line 263", "'public boolean canConvert(Class type) {' - line 269", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 275", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 281"]}, "Kernel32.java": {"METHODS": ["'boolean MoveFileExA(String existingFileName, String newFileName, int flags);' - line 42", "'int WaitForSingleObject(Pointer handle, int milliseconds);' - line 53", "'int GetFileAttributesW(WString lpFileName);' - line 55", "'boolean GetExitCodeProcess(Pointer handle, IntByReference r);' - line 57", "'boolean CreateSymbolicLinkW(WString lpSymlinkFileName, WString lpTargetFileName, int dwFlags);' - line 72", "'int GetTempPathW(int nBuffer, Pointer lpBuffer);' - line 78"]}, "Kernel32Utils.java": {"METHODS": ["'public static int waitForExitProcess(Pointer hProcess) throws InterruptedException {' - line 45", "'public static int getWin32FileAttributes(File file) throws IOException {' - line 68", "'public static void createSymbolicLink(File symlink, String target, boolean dirLink) throws IOException {' - line 98", "'new WString(symlink.getPath()), new WString(target),' - line 100", "'public static boolean isJunctionOrSymlink(File file) throws IOException {' - line 110", "'public static File getTempDir() {' - line 114", "'/*package*/ static Kernel32 load() {' - line 123"]}, "RegistryKey.java": {"METHODS": ["'private RegistryKey(int handle) {' - line 41", "'private RegistryKey(RegistryKey ancestor, String path, int handle) {' - line 47", "'private static String combine(String a, String b) {' - line 53", "'static String convertBufferToString(byte[] buf) {' - line 66", "'static int convertBufferToInt(byte[] buf) {' - line 76", "'public String getStringValue(String valueName) {' - line 80", "'return convertBufferToString(getValue(valueName));' - line 81", "'public int getIntValue(String valueName) {' - line 87", "'return convertBufferToInt(getValue(valueName));' - line 88", "'private byte[] getValue(String valueName) {' - line 91", "'public void deleteValue(String valueName) {' - line 115", "'private void check(int r) {' - line 119", "'public void setValue(String name, String value) {' - line 127", "'public void setValue(String name, int value) {' - line 138", "'public boolean valueExists(String name) {' - line 151", "'public void delete() {' - line 178", "'public Collection<String> getSubKeys() {' - line 188", "'public RegistryKey open(String subKeyName) {' - line 206", "'return open(subKeyName, 0xF003F/*KEY_ALL_ACCESS*/);' - line 207", "'public RegistryKey openReadonly(String subKeyName) {' - line 210", "'return open(subKeyName, 0x20019/*KEY_READ*/);' - line 211", "'public RegistryKey open(String subKeyName, int access) {' - line 214", "'protected void finalize() throws Throwable {' - line 280", "'public void dispose() {' - line 285", "'public void close() {' - line 292"]}, "GNUCLibrary.java": {"METHODS": ["'int fork();' - line 45", "'int kill(int pid, int signum);' - line 47", "'int setsid();' - line 49", "'int umask(int mask);' - line 51", "'int getpid();' - line 53", "'int geteuid();' - line 55", "'int getegid();' - line 57", "'int getppid();' - line 59", "'int chdir(String dir);' - line 61", "'int getdtablesize();' - line 63", "'int execv(String path, StringArray args);' - line 65", "'int execvp(String file, StringArray args);' - line 67", "'int setenv(String name, String value, int replace);' - line 69", "'int unsetenv(String name);' - line 71", "'void perror(String msg);' - line 73", "'String strerror(int errno);' - line 75", "'int fcntl(int fd, int command);' - line 77", "'int fcntl(int fd, int command, int flags);' - line 79", "'int chown(String fileName, int uid, int gid);' - line 86", "'int chmod(String fileName, int i);' - line 88", "'int open(String pathname, int flags) throws LastErrorException;' - line 90", "'int dup(int old);' - line 92", "'int dup2(int old, int _new);' - line 94", "'long pread(int fd, Memory buffer, NativeLong size, NativeLong offset) throws LastErrorException;' - line 96", "'int close(int fd);' - line 98", "'int rename(String oldname, String newname);' - line 101", "'int sysctlbyname(String name, Pointer oldp, IntByReference oldlenp, Pointer newp, IntByReference newlen);' - line 113", "'int sysctlbyname(String name, Pointer oldp, NativeLongByReference oldlenp, Pointer newp, NativeLong newlen);' - line 115", "'int sysctl(int[] mib, int nameLen, Pointer oldp, IntByReference oldlenp, Pointer newp, IntByReference newlen);' - line 118", "'int sysctl(int[] name, int namelen, Pointer oldp, NativeLongByReference oldlenp, Pointer newp, NativeLong newlen);' - line 120", "'int sysctlnametomib(String name, Pointer mibp, IntByReference size);' - line 123", "'int sysctlnametomib(String name, Pointer mibp, NativeLongByReference sizep);' - line 125", "'int symlink(String oldname, String newname);' - line 132", "'int readlink(String filename, Memory buffer, NativeLong size);' - line 142"]}, "Advapi32.java": {"METHODS": ["'boolean GetUserName(char[] buffer, IntByReference lpnSize);' - line 45", "'boolean ConvertSidToStringSid(byte[] Sid, PointerByReference StringSid);' - line 80", "'boolean ConvertStringSidToSid(String StringSid, PointerByReference Sid);' - line 87", "'Pointer OpenSCManager(String lpMachineName, WString lpDatabaseName, int dwDesiredAccess);' - line 95", "'boolean CloseServiceHandle(Pointer hSCObject);' - line 101", "'Pointer OpenService(Pointer hSCManager, String lpServiceName, int dwDesiredAccess);' - line 109", "'boolean StartService(Pointer hService, int dwNumServiceArgs, char[] lpServiceArgVectors);' - line 117", "'boolean ControlService(Pointer hService, int dwControl, SERVICE_STATUS lpServiceStatus);' - line 125", "'boolean StartServiceCtrlDispatcher(Structure[] lpServiceTable);' - line 131", "'Pointer RegisterServiceCtrlHandler(String lpServiceName, Handler lpHandlerProc);' - line 138", "'Pointer RegisterServiceCtrlHandlerEx(String lpServiceName, HandlerEx lpHandlerProc, Pointer lpContext);' - line 146", "'boolean SetServiceStatus(Pointer hServiceStatus, SERVICE_STATUS lpServiceStatus);' - line 153", "'boolean DeleteService(Pointer hService);' - line 180", "'boolean ChangeServiceConfig2(Pointer hService, int dwInfoLevel, ChangeServiceConfig2Info lpInfo);' - line 188", "'int RegOpenKeyEx(int hKey, String lpSubKey, int ulOptions, int samDesired, IntByReference phkResult);' - line 198", "'int RegQueryValueEx(int hKey, String lpValueName, IntByReference lpReserved, IntByReference lpType, byte[] lpData, IntByReference lpcbData);' - line 209", "'int RegCloseKey(int hKey);' - line 215", "'int RegDeleteValue(int hKey, String lpValueName);' - line 222", "'int RegSetValueEx(int hKey, String lpValueName, int Reserved, int dwType, byte[] lpData, int cbData);' - line 233", "'int RegDeleteKey(int hKey, String name);' - line 256", "'void callback(int dwArgc, Pointer lpszArgv);' - line 292", "'void callback(int fdwControl);' - line 300", "'int callback(int dwControl, int dwEventType, Pointer lpEventData, Pointer lpContext);' - line 311", "'protected List getFieldOrder() {' - line 336", "'protected List getFieldOrder() {' - line 356", "'protected List getFieldOrder() {' - line 364"]}, "Shell32.java": {"METHODS": ["'boolean ShellExecuteEx(SHELLEXECUTEINFO lpExecInfo);' - line 38"]}, "JnaException.java": {"METHODS": ["'public JnaException(int errorCode) {' - line 36", "'public int getErrorCode() {' - line 41"]}, "Options.java": {"METHODS": []}, "DotNet.java": {"METHODS": ["'public static boolean isInstalled(int major, int minor) {' - line 51", "'return isV45PlusInstalled(minor);' - line 54", "'return isV40Installed();' - line 56", "'return isV35Installed();' - line 58", "'return isV35Installed() || isV30Installed();' - line 60", "'return isV35Installed() || isV30Installed() || isV20Installed();' - line 62", "'private static boolean isV45PlusInstalled(int minor) {' - line 75", "'private static boolean isV40Installed() {' - line 81", "'private static boolean isV35Installed() {' - line 87", "'private static boolean isV30Installed() {' - line 93", "'private static boolean isV20Installed() {' - line 99", "'public static boolean isInstalled(int major, int minor, String targetMachine, IJIAuthInfo session) throws JIException, UnknownHostException {' - line 108", "'return isV45PlusInstalled(minor, registry, hklm);' - line 114", "'return isV40Installed(registry, hklm);' - line 116", "'return isV35Installed(registry, hklm);' - line 118", "'return isV35Installed(registry, hklm) || isV30Installed(registry, hklm);' - line 120", "'return isV35Installed(registry, hklm) || isV30Installed(registry, hklm) || isV20Installed(registry, hklm);' - line 122", "'private static boolean isV45PlusInstalled(int minor, IJIWinReg registry, JIPolicyHandle hklm) throws JIException {' - line 140", "'return GetIntValue(registry, key, VALUE_RELEASE) >= GetV45PlusMinRelease(minor);' - line 144", "'private static boolean isV40Installed(IJIWinReg registry, JIPolicyHandle hklm) throws JIException {' - line 152", "'return GetIntValue(registry, key, VALUE_INSTALL) == 1;' - line 156", "'private static boolean isV35Installed(IJIWinReg registry, JIPolicyHandle hklm) throws JIException {' - line 164", "'return GetIntValue(registry, key, VALUE_INSTALL) == 1;' - line 168", "'private static boolean isV30Installed(IJIWinReg registry, JIPolicyHandle hklm) throws JIException {' - line 176", "'return GetIntValue(registry, key, VALUE_INSTALL_SUCCESS) == 1;' - line 180", "'private static boolean isV20Installed(IJIWinReg registry, JIPolicyHandle hklm) throws JIException {' - line 188", "'return GetIntValue(registry, key, VALUE_INSTALL) == 1;' - line 192", "'private static int GetIntValue(IJIWinReg registry, JIPolicyHandle key, String name) throws JIException {' - line 200", "'private static int GetV45PlusMinRelease(int minor) {' - line 204"]}, "WINNT.java": {"METHODS": []}, "SHELLEXECUTEINFO.java": {"METHODS": ["'protected List getFieldOrder() {' - line 84", "'public DUMMYUNIONNAME_union() {' - line 97", "'public DUMMYUNIONNAME_union(Pointer hIcon_or_hMonitor) {' - line 100"]}, "WINBASE.java": {"METHODS": ["'protected List getFieldOrder() {' - line 44", "'protected List getFieldOrder() {' - line 61"]}, "WinIOException.java": {"METHODS": ["'public WinIOException() {' - line 14", "'public WinIOException(String message) {' - line 17", "'public WinIOException(String message, Throwable cause) {' - line 21", "'public WinIOException(Throwable cause) {' - line 26", "'public String getMessage() {' - line 31", "'public int getErrorCode() {' - line 35"]}, "InitializationErrorInvocationHandler.java": {"METHODS": ["'private InitializationErrorInvocationHandler(Throwable cause) {' - line 18", "'public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {' - line 23"]}, "WINERROR.java": {"METHODS": []}, "MorphTagLibrary.java": {"METHODS": ["'public Tag createTag(final String name, Attributes attributes) throws JellyException {' - line 48", "'public TagScript createTagScript(final String tagName, Attributes attributes) throws JellyException {' - line 53", "'private Object evalAttribute(String name, JellyContext context) {' - line 55", "'public void run(JellyContext context, XMLOutput output) throws JellyTagException {' - line 73"]}, "ArchiverFactory.java": {"METHODS": ["'public static ArchiverFactory createZipWithPrefix(String prefix, OpenOption... openOptions) {' - line 74", "'private TarArchiverFactory(TarCompression method) {' - line 81", "'public Archiver create(OutputStream out) throws IOException {' - line 87", "'public Archiver create(OutputStream out) {' - line 110"]}, "TarArchiver.java": {"METHODS": ["'public void visitSymlink(File link, String target, String relativePath) throws IOException {' - line 58", "'public boolean understandsSymlink() {' - line 77", "'public void visit(File file, String relativePath) throws IOException {' - line 82", "'public void close() throws IOException {' - line 125"]}, "RewindableRotatingFileOutputStream.java": {"METHODS": ["'public RewindableRotatingFileOutputStream(File out, int size) {' - line 49", "'protected File getNumberedFileName(int n) {' - line 54", "'public void rewind() throws IOException {' - line 60", "'public void deleteAll() {' - line 74"]}, "RewindableFileOutputStream.java": {"METHODS": ["'public RewindableFileOutputStream(File out) {' - line 48", "'public void write(int b) throws IOException {' - line 70", "'public void write(byte[] b) throws IOException {' - line 75", "'public void write(byte[] b, int off, int len) throws IOException {' - line 80", "'public void flush() throws IOException {' - line 85", "'private void closeCurrent() throws IOException {' - line 102"]}, "ZipArchiver.java": {"METHODS": ["'public void visit(final File f, final String _relativePath) throws IOException {' - line 76", "'public void close() throws IOException {' - line 112"]}, "Archiver.java": {"METHODS": ["'public int countEntries() {' - line 41"]}, "ParserConfigurator.java": {"METHODS": ["'public void configure(SAXReader reader, Object context) {}' - line 67", "'public static ExtensionList<ParserConfigurator> all() {' - line 72", "'public static void applyConfiguration(SAXReader reader, Object context) throws IOException, InterruptedException {' - line 76", "'public Collection<ParserConfigurator> call() throws IOException {' - line 93"]}, "ReopenableFileOutputStream.java": {"METHODS": ["'public ReopenableFileOutputStream(File out) {' - line 52", "'public void write(int b) throws IOException {' - line 68", "'public void write(byte[] b) throws IOException {' - line 73", "'public void write(byte[] b, int off, int len) throws IOException {' - line 78", "'public void flush() throws IOException {' - line 83"]}, "ReopenableRotatingFileOutputStream.java": {"METHODS": ["'public ReopenableRotatingFileOutputStream(File out, int size) {' - line 50", "'protected File getNumberedFileName(int n) {' - line 55", "'public void rewind() throws IOException {' - line 61", "'public void deleteAll() {' - line 75"]}, "ImmutableSetConverter.java": {"METHODS": ["'public ImmutableSetConverter(XStream xs) {' - line 19", "'public ImmutableSetConverter(Mapper mapper, ReflectionProvider reflectionProvider) {' - line 23", "'public boolean canConvert(Class type) {' - line 29", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 34", "'protected Object createCollection(Class type) {' - line 39"]}, "MapperDelegate.java": {"METHODS": ["'public MapperDelegate(Mapper delegate) {' - line 33", "'public String serializedClass(Class type) {' - line 39", "'public Class realClass(String elementName) {' - line 44", "'public String serializedMember(Class type, String memberName) {' - line 49", "'public String realMember(Class type, String serialized) {' - line 54", "'public boolean isImmutableValueType(Class type) {' - line 59", "'public Class defaultImplementationOf(Class type) {' - line 64", "'public String aliasForAttribute(String attribute) {' - line 69", "'public String attributeForAlias(String alias) {' - line 74", "'public String aliasForSystemAttribute(String attribute) {' - line 79", "'public String getFieldNameForItemTypeAndName(Class definedIn, Class itemType, String itemFieldName) {' - line 84", "'public Class getItemTypeForItemFieldName(Class definedIn, String itemFieldName) {' - line 89", "'public ImplicitCollectionMapping getImplicitCollectionDefForFieldName(Class itemType, String fieldName) {' - line 94", "'public boolean shouldSerializeMember(Class definedIn, String fieldName) {' - line 99", "'public SingleValueConverter getConverterFromItemType(String fieldName, Class type) {' - line 108", "'public SingleValueConverter getConverterFromItemType(Class type) {' - line 117", "'public SingleValueConverter getConverterFromAttribute(String name) {' - line 126", "'public Converter getLocalConverter(Class definedIn, String fieldName) {' - line 131", "'public Mapper lookupMapperOfType(Class type) {' - line 136", "'public SingleValueConverter getConverterFromItemType(String fieldName, Class type, Class definedIn) {' - line 141", "'public String aliasForAttribute(Class definedIn, String fieldName) {' - line 150", "'public String attributeForAlias(Class definedIn, String alias) {' - line 159", "'public SingleValueConverter getConverterFromAttribute(Class type, String attribute) {' - line 168", "'public SingleValueConverter getConverterFromAttribute(Class definedIn, String attribute, Class type) {' - line 173", "'public boolean isIgnoredElement(String name) {' - line 178", "'public boolean isReferenceable(Class type) {' - line 183"]}, "ImmutableSortedSetConverter.java": {"METHODS": ["'public ImmutableSortedSetConverter(XStream xs) {' - line 19", "'public ImmutableSortedSetConverter(Mapper mapper, ReflectionProvider reflectionProvider) {' - line 23", "'public boolean canConvert(Class type) {' - line 29", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 34", "'protected Object createCollection(Class type) {' - line 39"]}, "ImmutableListConverter.java": {"METHODS": ["'public ImmutableListConverter(XStream xs) {' - line 50", "'public ImmutableListConverter(Mapper mapper, ReflectionProvider reflectionProvider) {' - line 54", "'public boolean canConvert(Class type) {' - line 60", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 65", "'protected Object createCollection(Class type) {' - line 96"]}, "ImmutableMapConverter.java": {"METHODS": ["'public ImmutableMapConverter(XStream xs) {' - line 46", "'public ImmutableMapConverter(Mapper mapper, ReflectionProvider reflectionProvider) {' - line 50", "'public boolean canConvert(Class type) {' - line 56", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 61", "'protected Object createCollection(Class type) {' - line 66"]}, "ChangeLogParser.java": {"METHODS": ["'return parse((AbstractBuild) build, changelogFile);' - line 48", "'return parse(build, build.getProject().getScm().getEffectiveBrowser(), changelogFile);' - line 56"]}, "RepositoryBrowsers.java": {"METHODS": ["'T createInstance(Class<T> type, StaplerRequest req, String fieldName) throws FormException {' - line 69", "'T createInstance(Class<T> type, StaplerRequest req, JSONObject parent, String fieldName) throws FormException {' - line 87"]}, "ChangeLogAnnotator.java": {"METHODS": ["'public void annotate(Run<?, ?> build, ChangeLogSet.Entry change, MarkupText text) {' - line 80", "'public void annotate(AbstractBuild<?, ?> build, ChangeLogSet.Entry change, MarkupText text) {' - line 89", "'return all().remove(this);' - line 109", "'public static ExtensionList<ChangeLogAnnotator> all() {' - line 124"]}, "EmptyChangeLogSet.java": {"METHODS": ["'@Override public URL getChangeSetLink(ChangeLogSet.Entry changeSet) throws IOException {' - line 16", "'public boolean isEmptySet() {' - line 23", "'public Iterator<Entry> iterator() {' - line 28"]}, "NullChangeLogParser.java": {"METHODS": ["'protected Object readResolve() {' - line 43"]}, "ChangeLogSet.java": {"METHODS": ["'protected ChangeLogSet(Run<?, ?> run, RepositoryBrowser<?> browser) {' - line 67", "'protected ChangeLogSet(AbstractBuild<?, ?> build) {' - line 74", "'public String getKind() {' - line 122", "'return createEmpty((Run) build);' - line 136", "'public ChangeLogSet getParent() {' - line 143", "'protected void setParent(ChangeLogSet parent) {' - line 150", "'public String getCommitId() {' - line 167", "'public long getTimestamp() {' - line 183", "'public String getMsgAnnotated() {' - line 248", "'public String getMsgEscaped() {' - line 265", "'String getPath();' - line 289", "'EditType getEditType();' - line 295"]}, "AutoBrowserHolder.java": {"METHODS": ["'public RepositoryBrowser get() {' - line 52", "'private RepositoryBrowser infer() {' - line 78"]}, "SCMRevisionState.java": {"METHODS": ["'public String getIconFileName() {' - line 28", "'public String getDisplayName() {' - line 33", "'public String getUrlName() {' - line 38"]}, "EditType.java": {"METHODS": ["'public EditType(String name, String description) {' - line 38", "'public String getName() {' - line 43", "'public String getDescription() {' - line 47", "'public String toExportedObject() {' - line 52"]}, "AbstractScmTagAction.java": {"METHODS": ["'protected AbstractScmTagAction(Run<?, ?> run) {' - line 57", "'protected AbstractScmTagAction(AbstractBuild build) {' - line 63", "'protected Permission getPermission() {' - line 77", "'public AbstractBuild getBuild() {' - line 89", "'public String getTooltip() {' - line 96", "'protected ACL getACL() {' - line 106", "'public void doIndex(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 110", "'@Override public void onAttached(Run<?, ?> r) {' - line 120", "'@Override public void onLoad(Run<?, ?> r) {' - line 124"]}, "SCMS.java": {"METHODS": ["'public static SCM parseSCM(StaplerRequest req, AbstractProject target) throws FormException, ServletException {' - line 55", "'public static SCM parseSCM(StaplerRequest req) throws FormException, ServletException {' - line 69", "'return parseSCM(req, null);' - line 70"]}, "SCMDescriptor.java": {"METHODS": ["'protected SCMDescriptor(Class<T> clazz, Class<? extends RepositoryBrowser> repositoryBrowser) {' - line 58", "'protected SCMDescriptor(Class<? extends RepositoryBrowser> repositoryBrowser) {' - line 70", "'public int getGeneration() {' - line 83", "'public void incrementGeneration() {' - line 93", "'public void load() {' - line 101", "'public boolean isBrowserReusable(T x, T y) {' - line 128", "'public boolean isApplicable(Job project) {' - line 141", "'return isApplicable((AbstractProject) project);' - line 143", "'public boolean isApplicable(AbstractProject project) {' - line 150", "'return isApplicable((Job) project);' - line 152"]}, "SCM.java": {"METHODS": ["'public Api getApi() {' - line 108", "'public String getType() {' - line 132", "'return getClass().getName();' - line 133", "'return guessBrowser();' - line 154", "'public boolean supportsPolling() {' - line 168", "'public boolean requiresWorkspaceForPolling() {' - line 194", "'public boolean processWorkspaceBeforeDeletion(@NonNull Job<?, ?> project, @NonNull FilePath workspace, @NonNull Node node) throws IOException, InterruptedException {' - line 237", "'return processWorkspaceBeforeDeletion((AbstractProject) project, workspace, node);' - line 239", "'public boolean processWorkspaceBeforeDeletion(AbstractProject<?, ?> project, FilePath workspace, Node node) throws IOException, InterruptedException {' - line 246", "'return processWorkspaceBeforeDeletion((Job) project, workspace, node);' - line 248", "'public boolean pollChanges(AbstractProject<?, ?> project, Launcher launcher, FilePath workspace, TaskListener listener) throws IOException, InterruptedException {' - line 294", "'return calcRevisionsFromBuild((AbstractBuild) build, launcher, listener);' - line 336", "'public SCMRevisionState calcRevisionsFromBuild(AbstractBuild<?, ?> build, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {' - line 343", "'return calcRevisionsFromBuild(build, launcher != null ? build.getWorkspace() : null, launcher, listener);' - line 344", "'public SCMRevisionState _calcRevisionsFromBuild(AbstractBuild<?, ?> build, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {' - line 348", "'return calcRevisionsFromBuild(build, launcher, listener);' - line 349", "'return compareRemoteRevisionWith((AbstractProject) project, launcher, workspace, listener, baseline);' - line 410", "'protected PollingResult compareRemoteRevisionWith(AbstractProject<?, ?> project, Launcher launcher, FilePath workspace, TaskListener listener, SCMRevisionState baseline) throws IOException, InterruptedException {' - line 417", "'return compareRemoteRevisionWith((Job) project, launcher, workspace, listener, baseline);' - line 418", "'return compareRemoteRevisionWith(project, launcher, workspace, listener, baseline2);' - line 435", "'return pollChanges(project, launcher, workspace, listener) ? PollingResult.SIGNIFICANT : PollingResult.NO_CHANGES;' - line 437", "'private boolean is1_346OrLater() {' - line 441", "'return getType();' - line 467", "'public boolean checkout(AbstractBuild<?, ?> build, Launcher launcher, FilePath workspace, BuildListener listener, @NonNull File changelogFile) throws IOException, InterruptedException {' - line 537", "'public void postCheckout(@NonNull Run<?, ?> build, @NonNull Launcher launcher, @NonNull FilePath workspace, @NonNull TaskListener listener) throws IOException, InterruptedException {' - line 547", "'public void postCheckout(AbstractBuild<?, ?> build, Launcher launcher, FilePath workspace, BuildListener listener) throws IOException, InterruptedException {' - line 554", "'public void buildEnvironment(@NonNull Run<?, ?> build, @NonNull Map<String, String> env) {' - line 576", "'public void buildEnvVars(AbstractBuild<?, ?> build, Map<String, String> env) {' - line 586", "'public FilePath getModuleRoot(FilePath workspace, AbstractBuild build) {' - line 641", "'return getModuleRoot(workspace);' - line 643", "'public FilePath getModuleRoot(FilePath workspace) {' - line 651", "'return getModuleRoot(workspace, null);' - line 654", "'public FilePath[] getModuleRoots(FilePath workspace, AbstractBuild build) {' - line 692", "'return getModuleRoots(workspace);' - line 695", "'public FilePath[] getModuleRoots(FilePath workspace) {' - line 706", "'return getModuleRoots(workspace, null);' - line 709", "'if (project == null)   return all();' - line 777", "'return _for((Job) project);' - line 797"]}, "NullSCM.java": {"METHODS": ["'public NullSCM() {}' - line 46", "'@Override public SCMRevisionState calcRevisionsFromBuild(Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {' - line 48", "'@Override public PollingResult compareRemoteRevisionWith(Job<?, ?> project, Launcher launcher, FilePath workspace, TaskListener listener, SCMRevisionState baseline) throws IOException, InterruptedException {' - line 52", "'@Override public void checkout(Run<?, ?> build, Launcher launcher, FilePath workspace, TaskListener listener, File changelogFile, SCMRevisionState baseline) throws IOException, InterruptedException {' - line 56", "'@Override public ChangeLogParser createChangeLogParser() {' - line 62", "'public DescriptorImpl() {' - line 68", "'@Override public String getDisplayName() {' - line 73"]}, "RepositoryBrowser.java": {"METHODS": ["'protected static String trimHeadSlash(String s) {' - line 72", "'protected static URL normalizeToEndWithSlash(URL url) {' - line 82"]}, "PollingResult.java": {"METHODS": ["'public PollingResult(@CheckForNull SCMRevisionState baseline, @CheckForNull SCMRevisionState remote, @NonNull Change change) {' - line 80", "'public PollingResult(@NonNull Change change) {' - line 87", "'public boolean hasChanges() {' - line 91"]}, "QueryBuilder.java": {"METHODS": ["'public QueryBuilder(String s) {' - line 34", "'public QueryBuilder add(String s) {' - line 38", "'public String toString() {' - line 47"]}, "ComputerSet.java": {"METHODS": ["'public void save() throws IOException {' - line 84", "'public String getDisplayName() {' - line 95", "'public static List<NodeMonitor> get_monitors() {' - line 104", "'public Computer[] get_all() {' - line 109", "'public ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {' - line 114", "'public List<String> get_slaveNames() {' - line 148", "'public String get(int index) {' - line 153", "'public int size() {' - line 158", "'public int getTotalExecutors() {' - line 170", "'public int getBusyExecutors() {' - line 183", "'public int getIdleExecutors() {' - line 195", "'public String getSearchUrl() {' - line 204", "'public Computer getDynamic(String token, StaplerRequest req, StaplerResponse rsp) {' - line 208", "'public void do_launchAll(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 213", "'public void doUpdateNow(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 229", "'public String checkName(String name) throws Failure {' - line 315", "'public FormValidation doCheckName(@QueryParameter String value) throws IOException, ServletException {' - line 332", "'private static XmlFile getConfigFile() {' - line 378", "'public Api getApi() {' - line 382", "'public Descriptor<ComputerSet> getDescriptor() {' - line 387", "'public AutoCompletionCandidates doAutoCompleteCopyNewItemFrom(@QueryParameter final String value) {' - line 396", "'public static void initialize() {}' - line 411", "'public static void init() {' - line 414", "'public void doRun() {' - line 418", "'public static List<String> getComputerNames() {' - line 429", "'private static NodeMonitor createDefaultInstance(Descriptor<NodeMonitor> d, boolean ignored) {' - line 476"]}, "RunParameterValue.java": {"METHODS": ["'public RunParameterValue(String name, String runId, String description) {' - line 38", "'public RunParameterValue(String name, String runId) {' - line 43", "'private static String check(String runId) {' - line 48", "'public String getRunId() {' - line 63", "'private String[] split() {' - line 67", "'public String getJobName() {' - line 79", "'public String getNumber() {' - line 85", "'public Run getValue() {' - line 91", "'return getRun();' - line 92", "'public void buildEnvironment(Run<?, ?> build, EnvVars env) {' - line 99", "'public String toString() {' - line 122", "'@Override public String getShortDescription() {' - line 126"]}, "TaskThread.java": {"METHODS": ["'protected TaskThread(TaskAction owner, ListenerAndText output) {' - line 76", "'public Reader readAll() throws IOException {' - line 87", "'public void start() {' - line 106", "'public boolean isRunning() {' - line 111", "'protected ListenerAndText createListener() throws IOException {' - line 120", "'public ListenerAndText(TaskListener listener, AnnotatedLargeText<TaskAction> text) {' - line 158", "'public static ListenerAndText forMemory() {' - line 168", "'return forMemory(null);' - line 169", "'public static ListenerAndText forFile(File f) throws IOException {' - line 177", "'return forFile(f, null);' - line 178", "'public static ListenerAndText forMemory(TaskAction context) {' - line 184", "'new StreamTaskListener(log),' - line 189", "'public static ListenerAndText forFile(File f, TaskAction context) throws IOException {' - line 197", "'new StreamTaskListener(f),' - line 199"]}, "CheckPoint.java": {"METHODS": ["'public CheckPoint(String internalName, Object identity) {' - line 73", "'public CheckPoint(String internalName) {' - line 83", "'public boolean equals(Object that) {' - line 88", "'public int hashCode() {' - line 94", "'public String toString() {' - line 99", "'public void report() {' - line 114", "'public void block() throws InterruptedException {' - line 145", "'public void block(@NonNull BuildListener listener, @NonNull String waiter) throws InterruptedException {' - line 156"]}, "AutoCompletionCandidates.java": {"METHODS": ["'public AutoCompletionCandidates add(String v) {' - line 52", "'public AutoCompletionCandidates add(String... v) {' - line 57", "'public List<String> getValues() {' - line 66", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object o) throws IOException, ServletException {' - line 71", "'return ofJobNames(type, value, container);' - line 96", "'public void onItem(Item i) {' - line 122", "'private String contextualNameOf(Item i) {' - line 150", "'new Visitor(\"\").onItemGroup(Jenkins.get());' - line 159", "'new Visitor(\"\").onItemGroup(container);' - line 161", "'new Visitor(\"/\").onItemGroup(Jenkins.get());' - line 163", "'new Visitor(p).onItemGroup(container);' - line 167", "'private static boolean startsWithImpl(String str, String prefix, boolean ignoreCase) {' - line 174"]}, "UserPropertyDescriptor.java": {"METHODS": ["'protected UserPropertyDescriptor(Class<? extends UserProperty> clazz) {' - line 32", "'protected UserPropertyDescriptor() {' - line 43", "'public boolean isEnabled() {' - line 72"]}, "ViewProperty.java": {"METHODS": ["'public ViewPropertyDescriptor getDescriptor() {' - line 62", "'public ViewProperty reconfigure(StaplerRequest req, JSONObject form) throws Descriptor.FormException {' - line 71"]}, "StockStatusIcon.java": {"METHODS": ["'public StockStatusIcon(String image, Localizable description) {' - line 23", "'public String getImageOf(String size) {' - line 29", "'public String getDescription() {' - line 39"]}, "AbstractDescribableImpl.java": {"METHODS": ["'public Descriptor<T> getDescriptor() {' - line 41"]}, "BuildableItem.java": {"METHODS": ["'return scheduleBuild(new Cause.LegacyCodeCause());' - line 44", "'boolean scheduleBuild(Cause c);' - line 47", "'return scheduleBuild(quietPeriod, new Cause.LegacyCodeCause());' - line 55", "'boolean scheduleBuild(int quietPeriod, Cause c);' - line 58"]}, "JobProperty.java": {"METHODS": ["'protected void setOwner(J owner) {' - line 94", "'public JobPropertyDescriptor getDescriptor() {' - line 99", "'public Action getJobAction(J job) {' - line 108", "'public boolean prebuild(AbstractBuild<?, ?> build, BuildListener listener) {' - line 145", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 156", "'public BuildStepMonitor getRequiredMonitorService() {' - line 165", "'return getJobAction((J) project);' - line 171", "'return getJobActions((J) project);' - line 177"]}, "HealthReportingAction.java": {"METHODS": ["'HealthReport getBuildHealth();' - line 49"]}, "TextParameterDefinition.java": {"METHODS": ["'public TextParameterDefinition(@NonNull String name) {' - line 45", "'public TextParameterDefinition(@NonNull String name, @CheckForNull String defaultValue, @CheckForNull String description) {' - line 49", "'public String getDisplayName() {' - line 59", "'public StringParameterValue getDefaultParameterValue() {' - line 65", "'public ParameterValue createValue(StaplerRequest req, JSONObject jo) {' - line 70", "'public ParameterValue createValue(String value) {' - line 77", "'public int hashCode() {' - line 82", "'public boolean equals(Object obj) {' - line 91", "'return isTrim() == other.isTrim();' - line 107"]}, "UserIdMigrator.java": {"METHODS": ["'boolean needsMigration() {' - line 52", "'private File[] listUserDirectories() {' - line 62", "'private void addEmptyUsernameIfExists(Map<String, File> users) throws IOException {' - line 79", "'void migrateUsers(UserIdMapper mapper) throws IOException {' - line 90"]}, "BuildableItemWithBuildWrappers.java": {"METHODS": []}, "Items.java": {"METHODS": ["'@Override public int compare(Item i1, Item i2) {' - line 87", "'return name(i1).compareToIgnoreCase(name(i2));' - line 88", "'String name(Item i) {' - line 91", "'@Override public int compare(Item i1, Item i2) {' - line 105", "'return name(i1).compareToIgnoreCase(name(i2));' - line 106", "'String name(Item i) {' - line 109", "'public static boolean currentlyUpdatingByXml() {' - line 143", "'public static List<TopLevelItemDescriptor> all(ItemGroup c) {' - line 160", "'return all2(Jenkins.getAuthentication2(), c);' - line 161", "'public static List<TopLevelItemDescriptor> all2(Authentication a, ItemGroup c) {' - line 170", "'public static List<TopLevelItemDescriptor> all(org.acegisecurity.Authentication a, ItemGroup c) {' - line 192", "'return all2(a.toSpring(), c);' - line 193", "'public static TopLevelItemDescriptor getDescriptor(String fqcn) {' - line 200", "'public static String toNameList(Collection<? extends Item> items) {' - line 207", "'return fromNameList(null, list, type);' - line 223", "'public static String getCanonicalName(ItemGroup context, String path) {' - line 251", "'public static String computeRelativeNamesAfterRenaming(String oldFullName, String newFullName, String relativeNames, ItemGroup context) {' - line 296", "'static String getRelativeNameFrom(String itemFullName, String groupFullName) {' - line 318", "'public static Item load(ItemGroup parent, File dir) throws IOException {' - line 373", "'public static XmlFile getConfigFile(File dir) {' - line 382", "'public static XmlFile getConfigFile(Item item) {' - line 389", "'return getConfigFile(item.getRootDir());' - line 390", "'return getAllItems(root, type, t -> true);' - line 409", "'return allItems2(Jenkins.getAuthentication2(), root, type);' - line 458", "'return allItems2(Jenkins.getAuthentication2(), root, type, pred);' - line 477", "'return allItems2(authentication, root, type, t -> true);' - line 494", "'return allItems2(authentication.toSpring(), root, type);' - line 503", "'return allItems2(authentication.toSpring(), root, type, pred);' - line 531", "'private AllItemsIterable(ItemGroup root, Authentication authentication, Class<T> type, Predicate<T> pred) {' - line 605", "'public Iterator<T> iterator() {' - line 613", "'private AllItemsIterator() {' - line 632", "'public void remove() {' - line 639", "'public boolean hasNext() {' - line 644", "'public T next() {' - line 681", "'static void verifyItemDoesNotAlreadyExist(@NonNull ItemGroup<?> parent, @NonNull String newName, @CheckForNull Item variant) throws IllegalArgumentException, Failure {' - line 703"]}, "Computer.java": {"METHODS": ["'public void recordTermination() {' - line 225", "'new Date(),' - line 230", "'new Date(),' - line 239", "'public List<TerminationRequest> getTerminatedBy() {' - line 256", "'protected Computer(Node node) {' - line 260", "'public List<ComputerPanelBox> getComputerPanelBoxs() {' - line 267", "'public List<Action> getActions() {' - line 277", "'public void addAction(@NonNull Action a) {' - line 290", "'public WorkspaceList getWorkspaceList() {' - line 331", "'public String getLog() throws IOException {' - line 338", "'public AnnotatedLargeText<Computer> getLogText() {' - line 345", "'public ACL getACL() {' - line 352", "'public OfflineCause getOfflineCause() {' - line 364", "'public String getOfflineCauseReason() {' - line 376", "'return _connect(forceReconnect);' - line 447", "'public void cliConnect(boolean force) throws ExecutionException, InterruptedException {' - line 479", "'return disconnect();    // legacy subtypes that extend disconnect().' - line 511", "'return disconnect(null);' - line 528", "'public void cliDisconnect(String cause) throws ExecutionException, InterruptedException {' - line 541", "'public void cliOffline(String cause) throws ExecutionException, InterruptedException {' - line 553", "'public void cliOnline() throws ExecutionException, InterruptedException {' - line 562", "'public int getNumExecutors() {' - line 576", "'public Node getNode() {' - line 604", "'public LoadStatistics getLoadStatistics() {' - line 616", "'public BuildTimelineWidget getTimeline() {' - line 620", "'public boolean isOffline() {' - line 625", "'public boolean isManualLaunchAllowed() {' - line 638", "'return getRetentionStrategy().isManualLaunchAllowed(this);' - line 639", "'public boolean isJnlpAgent() {' - line 655", "'public boolean isLaunchSupported() {' - line 667", "'public boolean isTemporarilyOffline() {' - line 686", "'public void setTemporarilyOffline(boolean temporarilyOffline) {' - line 695", "'public void setTemporarilyOffline(boolean temporarilyOffline, OfflineCause cause) {' - line 707", "'public String getIcon() {' - line 732", "'public String getIconClassName() {' - line 752", "'public String getIconAltText() {' - line 760", "'public String getCaption() {' - line 773", "'public String getUrl() {' - line 777", "'public Set<LabelAtom> getAssignedLabels() {' - line 782", "'public List<AbstractProject> getTiedJobs() {' - line 790", "'public RunList getBuilds() {' - line 795", "'protected void setNode(Node node) {' - line 803", "'protected void kill() {' - line 831", "'protected void onRemoved(){' - line 869", "'private void setNumExecutors(int n) {' - line 885", "'private void addNewExecutorIfNecessary() {' - line 908", "'public int countIdle() {' - line 935", "'return countExecutors() - countIdle();' - line 948", "'public List<Executor> getExecutors() {' - line 966", "'public List<OneOffExecutor> getOneOffExecutors() {' - line 975", "'public List<Executor> getAllExecutors() {' - line 985", "'public List<DisplayExecutor> getDisplayExecutors() {' - line 998", "'protected void removeExecutor(final Executor e) {' - line 1088", "'protected boolean isAlive() {' - line 1113", "'public void interrupt() {' - line 1124", "'public String getSearchUrl() {' - line 1133", "'return getUrl();' - line 1134", "'return getEnvironment();' - line 1173", "'public EnvVars getEnvironment() throws IOException, InterruptedException {' - line 1180", "'public HeapDump getHeapDump() throws IOException {' - line 1233", "'public String getHostName() throws IOException, InterruptedException {' - line 1259", "'public List<String> call() throws IOException {' - line 1322", "'public String call() throws IOException {' - line 1354", "'new DaemonThreadFactory(), \"Computer.threadPoolForRemoting\")))), ACL.SYSTEM2));' - line 1367", "'public void doRssAll(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1375", "'public void doRssFailed(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1380", "'public void doRssLatest(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1391", "'public HttpResponse doToggleOffline(@QueryParameter String offlineMessage) throws IOException, ServletException {' - line 1407", "'public HttpResponse doChangeOfflineCause(@QueryParameter String offlineMessage) throws IOException, ServletException {' - line 1421", "'public Api getApi() {' - line 1429", "'public void doDumpExportTable(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, InterruptedException {' - line 1436", "'public String call() throws IOException {' - line 1458", "'public void doScript(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1472", "'public void doScriptText(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1479", "'protected void _doScript(StaplerRequest req, StaplerResponse rsp, String view) throws IOException, ServletException {' - line 1483", "'public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, FormException {' - line 1491", "'public void doConfigDotXml(StaplerRequest req, StaplerResponse rsp)' - line 1523", "'public void updateByXml(final InputStream source) throws IOException, ServletException {' - line 1552", "'public HttpResponse doDoDelete() throws IOException {' - line 1570", "'public void waitUntilOnline() throws InterruptedException {' - line 1585", "'public void waitUntilOffline() throws InterruptedException {' - line 1592", "'public void doProgressiveLog(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 1602", "'public Object getTarget() {' - line 1608", "'public boolean isAcceptingTasks() {' - line 1642", "'return getRetentionStrategy().isAcceptingTasks(this) && (node == null || node.isAcceptingTasks());' - line 1644", "'public static void relocateOldLogs() {' - line 1675", "'/*package*/ static void relocateOldLogs(File dir) {' - line 1679", "'public DisplayExecutor(@NonNull String displayName, @NonNull String url, @NonNull Executor executor) {' - line 1717", "'public String getDisplayName() {' - line 1725", "'public String getUrl() {' - line 1730", "'public Executor getExecutor() {' - line 1735", "'public String toString() {' - line 1740", "'public boolean equals(Object o) {' - line 1749", "'public void onOnline(Computer c, TaskListener listener) throws IOException, InterruptedException {' - line 1766", "'public int hashCode() {' - line 1772", "'public TerminationRequest(String message) {' - line 1785", "'public long getWhen() {' - line 1796"]}, "FreeStyleBuild.java": {"METHODS": ["'public FreeStyleBuild(FreeStyleProject project) throws IOException {' - line 33", "'public FreeStyleBuild(FreeStyleProject project, File buildDir) throws IOException {' - line 37", "'public void run() {' - line 42"]}, "BuildBadgeAction.java": {"METHODS": []}, "OneOffExecutor.java": {"METHODS": ["'public OneOffExecutor(Computer owner) {' - line 36"]}, "AllView.java": {"METHODS": ["'public AllView(String name) {' - line 67", "'public AllView(String name, ViewGroup owner) {' - line 71", "'public boolean isEditable() {' - line 77", "'public boolean contains(TopLevelItem item) {' - line 82", "'public String getDisplayName() {' - line 87", "'public Item doCreateItem(StaplerRequest req, StaplerResponse rsp)' - line 93", "'public Collection<TopLevelItem> getItems() {' - line 102", "'public String getPostConstructLandingPage() {' - line 107", "'protected void submit(StaplerRequest req) throws IOException, ServletException, FormException {' - line 112", "'public boolean isApplicableIn(ViewGroup owner) {' - line 177", "'public String getDisplayName() {' - line 188"]}, "UsageStatistics.java": {"METHODS": ["'public UsageStatistics() {' - line 89", "'public UsageStatistics(String keyImage) {' - line 96", "'public boolean isDue() {' - line 103", "'private RSAPublicKey getKey() {' - line 115", "'public String getStatData() throws IOException {' - line 131", "'public Permission getRequiredGlobalConfigPagePermission() {' - line 206", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 211", "'public CombinedCipherOutputStream(OutputStream out, Cipher asym, String algorithm) throws IOException, GeneralSecurityException {' - line 228", "'public CombinedCipherOutputStream(OutputStream out, RSAKey key, String algorithm) throws IOException, GeneralSecurityException {' - line 244", "'public CombinedCipherInputStream(InputStream in, Cipher asym, String algorithm, int keyLength) throws IOException, GeneralSecurityException {' - line 258", "'new DataInputStream(in).readFully(symKeyBytes);' - line 265", "'public CombinedCipherInputStream(InputStream in, RSAKey key, String algorithm) throws IOException, GeneralSecurityException {' - line 274", "'private static String getKeyAlgorithm(String algorithm) {' - line 279", "'private static Cipher toCipher(RSAKey key, int mode) throws GeneralSecurityException {' - line 284"]}, "Failure.java": {"METHODS": ["'public Failure(String message) {' - line 48", "'public Failure(String message, boolean pre) {' - line 52", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node, @CheckForNull Throwable throwable) throws IOException, ServletException {' - line 57", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 65"]}, "Environment.java": {"METHODS": ["'public void buildEnvVars(Map<String, String> env) {' - line 71", "'public boolean tearDown(AbstractBuild build, BuildListener listener)' - line 94", "'public static Environment create(final EnvVars envVars) {' - line 102", "'public void buildEnvVars(Map<String, String> env) {' - line 105"]}, "RunMap.java": {"METHODS": ["'public RunMap() {' - line 81", "'public RunMap(File baseDir, Constructor cons) {' - line 89", "'public boolean remove(R run) {' - line 94", "'return removeValue(run);' - line 95", "'public Iterator<R> iterator() {' - line 102", "'public boolean hasNext() {' - line 108", "'public R next() {' - line 113", "'public void remove() {' - line 123", "'public boolean removeValue(R run) {' - line 132", "'public R newestValue() {' - line 148", "'return search(Integer.MAX_VALUE, DESC);' - line 149", "'public R oldestValue() {' - line 155", "'return search(Integer.MIN_VALUE, ASC);' - line 156", "'R create(File dir) throws IOException;' - line 170", "'protected int getNumberOf(R r) {' - line 174", "'protected String getIdOf(R r) {' - line 179", "'public R put(R r) {' - line 188", "'@Override public R getById(String id) {' - line 205", "'return getByNumber(n);' - line 212", "'protected BuildReference<R> createReference(R r) {' - line 222", "'protected R retrieve(File d) throws IOException {' - line 227", "'public void load(Job job, Constructor<R> cons) {' - line 258"]}, "AbstractBuild.java": {"METHODS": ["'@Override protected R asRun() {' - line 161", "'return _this();' - line 162", "'protected AbstractBuild(P job) throws IOException {' - line 166", "'protected AbstractBuild(P job, Calendar timestamp) {' - line 170", "'protected AbstractBuild(P project, File buildDir) throws IOException {' - line 174", "'return getParent();' - line 179", "'return getRunMixIn().createReference();' - line 188", "'public R getPreviousBuild() {' - line 196", "'return getRunMixIn().getPreviousBuild();' - line 197", "'public R getNextBuild() {' - line 201", "'return getRunMixIn().getNextBuild();' - line 202", "'public String getBuiltOnStr() {' - line 223", "'protected void setBuiltOnStr(String builtOn) {' - line 234", "'public String getUpUrl() {' - line 276", "'protected void setWorkspace(@NonNull FilePath ws) {' - line 304", "'return getParent().getScm().getModuleRoot(ws, this);' - line 317", "'public FilePath[] getModuleRoots() {' - line 327", "'return getParent().getScm().getModuleRoots(ws, this);' - line 330", "'@CheckForNull public Set<String> getCulpritIds() {' - line 334", "'@NonNull public Set<User> getCulprits() {' - line 340", "'public boolean shouldCalculateCulprits() {' - line 345", "'return getCulpritIds() == null;' - line 346", "'public Set<User> calculateCulprits() {' - line 351", "'public String getHudsonVersion() {' - line 378", "'public Launcher getLauncher() {' - line 431", "'public BuildListener getListener() {' - line 435", "'protected Lease decideWorkspace(@NonNull Node n, WorkspaceList wsl) throws InterruptedException, IOException {' - line 447", "'public Result run(@NonNull BuildListener listener) throws Exception {' - line 467", "'private Result tearDownBuildEnvironments(@NonNull BuildListener listener) throws InterruptedException {' - line 558", "'protected Launcher createLauncher(@NonNull BuildListener listener) throws IOException, InterruptedException {' - line 605", "'public void defaultCheckout() throws IOException, InterruptedException {' - line 639", "'public void cleanUp(@NonNull BuildListener listener) throws Exception {' - line 722", "'return performAllBuildSteps(listener, buildSteps.values(), phase);' - line 741", "'private void reportError(BuildStep bs, Throwable e, BuildListener listener, boolean phase) {' - line 781", "'private void reportBrokenChannel(BuildListener listener) throws IOException {' - line 840", "'private String getBuildStepName(BuildStep bs) {' - line 850", "'return preBuild(listener, steps.values());' - line 859", "'return preBuild(listener, (Iterable<? extends BuildStep>) steps);' - line 863", "'public boolean tearDown(AbstractBuild build, BuildListener listener) throws IOException, InterruptedException {' - line 885", "'public boolean hasChangeSetComputed() {' - line 935", "'public EnvVars getEnvironment(@NonNull TaskListener log) throws IOException, InterruptedException {' - line 955", "'public EnvironmentList getEnvironments() {' - line 992", "'public Calendar due() {' - line 1002", "'return getTimestamp();' - line 1003", "'@Override public void addAction(@NonNull Action a) {' - line 1010", "'public List<Action> getPersistentActions() {' - line 1015", "'public Set<String> getSensitiveBuildVariables() {' - line 1027", "'public Action getTestResultAction() {' - line 1099", "'return getAction(Jenkins.get().getPluginManager().uberClassLoader.loadClass(\"hudson.tasks.test.AbstractTestResultAction\").asSubclass(Action.class));' - line 1101", "'public Action getAggregatedTestResultAction() {' - line 1111", "'return getAction(Jenkins.get().getPluginManager().uberClassLoader.loadClass(\"hudson.tasks.test.AggregatedTestResultAction\").asSubclass(Action.class));' - line 1113", "'public String getWhyKeepLog() {' - line 1132", "'public RangeSet getDownstreamRelationship(AbstractProject that) {' - line 1167", "'public int getUpstreamRelationship(AbstractProject that) {' - line 1220", "'*      of builds (which can be empty if no build uses the artifact from this build or downstream is not {@link AbstractProject#isFingerprintConfigured}.)' - line 1265", "'return _getUpstreamBuilds(getParent().getUpstreamProjects());' - line 1283", "'return _getUpstreamBuilds(getParent().getTransitiveUpstreamProjects());' - line 1291", "'public DependencyChange(AbstractProject<?, ?> project, int fromId, int toId) {' - line 1354", "'public List<AbstractBuild> getBuilds() {' - line 1368", "'public void doStop(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1394"]}, "TaskAction.java": {"METHODS": ["'public LargeText getLog() {' - line 82", "'return obtainLog();' - line 83", "'public AnnotatedLargeText obtainLog() {' - line 97", "'public String getSearchUrl() {' - line 104", "'return getUrlName();' - line 105", "'public TaskThread getWorkerThread() {' - line 108", "'public void doProgressiveLog(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 115", "'public void doProgressiveHtml(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 127"]}, "ListView.java": {"METHODS": ["'public ListView(String name) {' - line 115", "'public ListView(String name, ViewGroup owner) {' - line 121", "'public void setColumns(List<ListViewColumn> columns) throws IOException {' - line 130", "'public void setJobFilters(List<ViewJobFilter> jobFilters) throws IOException {' - line 135", "'protected Object readResolve() {' - line 139", "'protected void initColumns() {' - line 161", "'protected void initJobFilters() {' - line 168", "'public boolean hasJobFilterExtensions() {' - line 176", "'public List<TopLevelItem> getItems() {' - line 201", "'return getItems(this.recurse);' - line 202", "'private List<TopLevelItem> getItems(boolean recurse) {' - line 215", "'public SearchIndexBuilder makeSearchIndex() {' - line 272", "'public boolean contains(TopLevelItem item) {' - line 281", "'return getItems().contains(item);' - line 282", "'public void add(TopLevelItem item) throws IOException {' - line 296", "'public boolean remove(TopLevelItem item) throws IOException {' - line 309", "'public String getIncludeRegex() {' - line 318", "'public boolean isRecurse() {' - line 322", "'public void setRecurse(boolean recurse) {' - line 330", "'public Boolean getStatusFilter() {' - line 340", "'public boolean isAddToCurrentView() {' - line 351", "'private boolean needToAddToCurrentView(StaplerRequest req) throws ServletException {' - line 359", "'public Item doCreateItem(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 373", "'public HttpResponse doAddJobToView(@QueryParameter String name) throws IOException, ServletException {' - line 392", "'public HttpResponse doRemoveJobFromView(@QueryParameter String name) throws IOException, ServletException {' - line 411", "'protected void submit(StaplerRequest req) throws ServletException, FormException, IOException {' - line 441", "'public void setIncludeRegex(String includeRegex) {' - line 478", "'public void setStatusFilter(Boolean statusFilter) {' - line 496", "'public String getDisplayName() {' - line 504", "'public FormValidation doCheckIncludeRegex(@QueryParameter String value) throws IOException, ServletException, InterruptedException  {' - line 511", "'public static List<ListViewColumn> getDefaultColumns() {' - line 529", "'public void onLocationChanged(final Item item, final String oldFullName, final String newFullName) {' - line 537", "'private void locationChanged(String oldFullName, String newFullName) {' - line 543", "'private void locationChanged(ViewGroup vg, String oldFullName, String newFullName) {' - line 553", "'private void renameViewItem(String oldFullName, String newFullName, ViewGroup vg, ListView lv) {' - line 564", "'public void onDeleted(final Item item) {' - line 584", "'private void deleted(Item item) {' - line 590", "'private void deleted(ViewGroup vg, Item item) {' - line 600", "'private void deleteViewItem(Item item, ViewGroup vg, ListView lv) {' - line 611"]}, "TimeSeries.java": {"METHODS": ["'public TimeSeries(float initialValue, float decay, int historySize) {' - line 58", "'public void update(float newData) {' - line 72", "'public float[] getHistory() {' - line 89", "'public float getLatest() {' - line 97", "'public String toString() {' - line 102"]}, "ComputerPinger.java": {"METHODS": ["'public static ExtensionList<ComputerPinger> all() {' - line 27", "'public static boolean checkIsReachable(InetAddress ia, int timeout) throws IOException {' - line 37", "'public boolean isReachable(InetAddress ia, int timeout) throws IOException {' - line 58"]}, "AsyncAperiodicWork.java": {"METHODS": ["'protected AsyncAperiodicWork(String name) {' - line 94", "'protected StreamTaskListener createListener() {' - line 137", "'protected File getLogFile() {' - line 194", "'protected Level getNormalLoggingLevel() {' - line 204", "'protected Level getSlowLoggingLevel() {' - line 214", "'return getNormalLoggingLevel();' - line 215", "'protected Level getErrorLoggingLevel() {' - line 224"]}, "FingerprintCleanupThread.java": {"METHODS": ["'public FingerprintCleanupThread() {' - line 52", "'public long getRecurrencePeriod() {' - line 57", "'public static void invoke() {' - line 61", "'private static FingerprintCleanupThread getInstance() {' - line 65", "'public void execute(TaskListener listener) {' - line 74"]}, "AsyncPeriodicWork.java": {"METHODS": ["'protected AsyncPeriodicWork(String name) {' - line 75", "'protected StreamTaskListener createListener() {' - line 156", "'protected File getLogFile() {' - line 213", "'protected Level getNormalLoggingLevel() {' - line 225", "'protected Level getSlowLoggingLevel() {' - line 237", "'return getNormalLoggingLevel();' - line 238", "'protected Level getErrorLoggingLevel() {' - line 249"]}, "ProminentProjectAction.java": {"METHODS": []}, "Project.java": {"METHODS": ["'protected Project(ItemGroup parent, String name) {' - line 89", "'public void onLoad(ItemGroup<? extends Item> parent, String name) throws IOException {' - line 94", "'@Override public Item asItem() {' - line 106", "'@Override public SCMTrigger getSCMTrigger() {' - line 110", "'return getTrigger(SCMTrigger.class);' - line 111", "'public List<Builder> getBuilders() {' - line 118", "'return getBuildersList().toList();' - line 119", "'return getPublishersList().toMap();' - line 129", "'return getBuildWrappersList().toMap();' - line 148", "'protected Set<ResourceActivity> getResourceActivities() {' - line 160", "'public void addPublisher(Publisher buildStep) throws IOException {' - line 178", "'public void removePublisher(Descriptor<Publisher> descriptor) throws IOException {' - line 189", "'public Publisher getPublisher(Descriptor<Publisher> descriptor) {' - line 193", "'@Override protected void buildDependencyGraph(DependencyGraph graph) {' - line 201", "'public boolean isFingerprintConfigured() {' - line 209", "'return getPublishersList().get(Fingerprinter.class) != null;' - line 210", "'public MavenInstallation inferMavenInstallation() {' - line 214", "'protected void submit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, FormException {' - line 226", "'protected List<Action> createTransientActions() {' - line 237"]}, "RunAction.java": {"METHODS": ["'void onLoad();' - line 39", "'void onAttached(Run r);' - line 45", "'void onBuildComplete();' - line 50"]}, "DependecyDeclarer.java": {"METHODS": []}, "ResourceController.java": {"METHODS": ["'public Iterator<ResourceList> iterator() {' - line 52", "'protected ResourceList adapt(ResourceActivity item) {' - line 55", "'public int size() {' - line 62", "'public void execute(@NonNull Runnable task, final ResourceActivity activity) throws InterruptedException {' - line 82", "'public Void call() throws InterruptedException {' - line 86", "'public void run() {' - line 105", "'public boolean canRun(final ResourceList resources) {' - line 123", "'return _withLock(new Callable<>() {' - line 125", "'public Boolean call() {' - line 127", "'public Resource getMissingResource(final ResourceList resources) {' - line 144", "'return _withLock(new Callable<>() {' - line 146", "'public Resource call() {' - line 148", "'public ResourceActivity getBlockingActivity(ResourceActivity activity) {' - line 162", "'protected void _await() throws InterruptedException {' - line 171", "'protected void _signalAll() {' - line 175", "'protected void _withLock(Runnable runnable) {' - line 179"]}, "ItemGroupMixIn.java": {"METHODS": ["'protected ItemGroupMixIn(ItemGroup parent, AccessControlled acl) {' - line 71", "'protected String redirectAfterCreateItem(StaplerRequest req, TopLevelItem result) throws IOException {' - line 211", "'@Override public T call() throws IOException {' - line 252", "'@Override public TopLevelItem call() throws IOException {' - line 282"]}, "Queue.java": {"METHODS": ["'private JobOffer(Executor executor) {' - line 235", "'protected void set(WorkUnit p) {' - line 240", "'public Executor getExecutor() {' - line 249", "'public boolean canTake(BuildableItem item) {' - line 257", "'return getCauseOfBlockage(item) == null;' - line 258", "'public boolean isAvailable() {' - line 305", "'public Node getNode() {' - line 310", "'public boolean isNotExclusive() {' - line 314", "'return getNode().getMode() == Mode.NORMAL;' - line 315", "'public String toString() {' - line 319", "'public Void call() throws Exception {' - line 330", "'public String toString() {' - line 336", "'public Queue(@NonNull LoadBalancer loadBalancer) {' - line 345", "'new MaintainTask(this).periodic();' - line 349", "'public LoadBalancer getLoadBalancer() {' - line 352", "'public void setLoadBalancer(@NonNull LoadBalancer loadBalancer) {' - line 356", "'public QueueSorter getSorter() {' - line 360", "'public void setSorter(QueueSorter sorter) {' - line 364", "'public void load() {' - line 379", "'public void save() {' - line 451", "'public void clear() {' - line 484", "'public boolean add(AbstractProject p) {' - line 509", "'return schedule(p) != null;' - line 510", "'return schedule(p, p.getQuietPeriod());' - line 518", "'public boolean add(AbstractProject p, int quietPeriod) {' - line 532", "'return schedule(p, quietPeriod) != null;' - line 533", "'public WaitingItem schedule(Task p, int quietPeriod, List<Action> actions) {' - line 541", "'return schedule2(p, quietPeriod, actions).getCreateItem();' - line 542", "'return scheduleInternal(p, quietPeriod, actions);' - line 577", "'public boolean add(Task p, int quietPeriod) {' - line 669", "'return schedule(p, quietPeriod) != null;' - line 670", "'return schedule(p, quietPeriod, new Action[0]);' - line 674", "'public boolean add(Task p, int quietPeriod, Action... actions) {' - line 682", "'return schedule(p, quietPeriod, actions) != null;' - line 683", "'return schedule2(p, quietPeriod, actions).getCreateItem();' - line 690", "'return schedule2(p, quietPeriod, Arrays.asList(actions));' - line 697", "'public boolean cancel(Task p) {' - line 706", "'private void updateSnapshot() {' - line 722", "'public boolean cancel(Item item) {' - line 730", "'public HttpResponse doCancelItem(@QueryParameter long id) throws IOException, ServletException {' - line 744", "'public boolean isEmpty() {' - line 761", "'private WaitingItem peek() {' - line 767", "'public Item[] getItems() {' - line 778", "'private List<Item> checkPermissionsAndAddToList(List<Item> r, Item t) {' - line 799", "'private static boolean hasReadPermission(Item t, boolean valueIfNotAccessControlled) {' - line 807", "'return hasReadPermission(t.task, valueIfNotAccessControlled);' - line 808", "'private static boolean hasReadPermission(Queue.Task t, boolean valueIfNotAccessControlled) {' - line 811", "'public StubItem[] getDiscoverableItems() {' - line 831", "'private List<StubItem> filterDiscoverableItemListBasedOnPermissions(List<StubItem> r, Item t) {' - line 852", "'public List<Item> getApproximateItemsQuickly() {' - line 882", "'public Item getItem(long id) {' - line 886", "'public List<BuildableItem> getBuildableItems(Computer c) {' - line 911", "'private void _getBuildableItems(Computer c, List<BuildableItem> col, List<BuildableItem> result) {' - line 919", "'public List<BuildableItem> getBuildableItems() {' - line 932", "'public List<BuildableItem> getPendingItems() {' - line 942", "'protected List<BlockedItem> getBlockedItems() {' - line 949", "'public Collection<LeftItem> getLeftItems() {' - line 958", "'public void clearLeftItems() {' - line 967", "'public List<Item> getUnblockedItems() {' - line 976", "'public Set<Task> getUnblockedTasks() {' - line 991", "'public boolean isPending(Task t) {' - line 1002", "'public int countBuildableItems() {' - line 1058", "'return countBuildableItemsFor(null);' - line 1059", "'public Item getItem(Task t) {' - line 1067", "'private List<Item> liveGetItems(Task t) {' - line 1095", "'public List<Item> getItems(Task t) {' - line 1124", "'public boolean contains(Task t) {' - line 1153", "'return getItem(t) != null;' - line 1154", "'private CauseOfBlockage getCauseOfBlockageForItem(Item i) {' - line 1196", "'private CauseOfBlockage getCauseOfBlockageForTask(Task task) {' - line 1239", "'public static void withLock(Runnable runnable) {' - line 1263", "'public static boolean tryWithLock(Runnable runnable) {' - line 1324", "'public static Runnable wrapWithLock(Runnable runnable) {' - line 1342", "'protected void _await() throws InterruptedException {' - line 1377", "'protected void _signalAll() {' - line 1382", "'protected void _withLock(Runnable runnable) {' - line 1393", "'protected boolean _tryWithLock(Runnable runnable) {' - line 1409", "'public void maintain() {' - line 1475", "'new BlockedItem(top, CauseOfBlockage.fromMessage(Messages._Queue_HudsonIsAboutToShutDown())).enter(this);' - line 1581", "'new BlockedItem(top, causeOfBlockage).enter(this);' - line 1586", "'new BlockedItem(p, causeOfBlockage).enter(this);' - line 1610", "'private Runnable makeFlyWeightTaskBuildable(final BuildableItem p) {' - line 1733", "'return createFlyWeightTaskRunnable(p, masterComputer);' - line 1744", "'return createFlyWeightTaskRunnable(p, masterComputer);' - line 1753", "'return createFlyWeightTaskRunnable(p, c);' - line 1778", "'private Runnable createFlyWeightTaskRunnable(final BuildableItem p, final Computer c) {' - line 1784", "'private boolean makePending(BuildableItem p) {' - line 1797", "'public static boolean ifBlockedByHudsonShutdown(Task task) {' - line 1805", "'return isBlockedByShutdown(task);' - line 1806", "'public static boolean isBlockedByShutdown(Task task) {' - line 1815", "'public Api getApi() {' - line 1819", "'return getCauseOfBlockage() != null;' - line 1875", "'String getName();' - line 1911", "'String getFullDisplayName();' - line 1916", "'String getUrl();' - line 1972", "'return getDefaultAuthentication().toSpring();' - line 2017", "'* older versions of Jenkins may not have this method implemented. Called private method _getDefaultAuthenticationOf(Task) on {@link Tasks}' - line 2042", "'return getDefaultAuthentication(item).toSpring();' - line 2051", "'return getDefaultAuthentication2();' - line 2053", "'public long getId() {' - line 2142", "'public int getIdLegacy() {' - line 2147", "'public Task getTask() {' - line 2170", "'public boolean isBlocked() { return this instanceof BlockedItem; }' - line 2180", "'public boolean isBuildable() { return this instanceof BuildableItem; }' - line 2188", "'public boolean isStuck() { return false; }' - line 2195", "'public long getInQueueSince() {' - line 2202", "'public String getInQueueForString() {' - line 2211", "'public QueueTaskFuture<Executable> getFuture() { return future; }' - line 2222", "'public Label getAssignedLabel() {' - line 2233", "'public String getCausesDescription() {' - line 2274", "'protected Item(@NonNull Task task, @NonNull List<Action> actions, long id, FutureImpl future) {' - line 2283", "'protected Item(@NonNull Task task, @NonNull List<Action> actions, long id, FutureImpl future, long inQueueSince) {' - line 2287", "'protected Item(Item item) {' - line 2296", "'public String getUrl() {' - line 2309", "'public String getParams() {' - line 2334", "'public String getSearchUrl() {' - line 2345", "'public HttpResponse doCancelQueue() {' - line 2352", "'public Authentication authenticate2() {' - line 2370", "'public Api getApi() throws AccessDeniedException {' - line 2389", "'protected Object readResolve() {' - line 2404", "'public String toString() {' - line 2410", "'return getClass().getName() + ':' + task + ':' + id;' - line 2411", "'public StubTask(@NonNull Queue.Task base) {' - line 2453", "'public String getName() {' - line 2458", "'public StubItem(StubTask task) {' - line 2474", "'boolean shouldSchedule(List<Action> actions);' - line 2491", "'public static ExtensionList<QueueDecisionHandler> all() {' - line 2521", "'public WaitingItem(Calendar timestamp, Task project, List<Action> actions) {' - line 2538", "'static int getCurrentCounterValue() {' - line 2543", "'public int compareTo(WaitingItem that) {' - line 2548", "'public CauseOfBlockage getCauseOfBlockage() {' - line 2556", "'protected NotWaitingItem(WaitingItem wi) {' - line 2593", "'protected NotWaitingItem(NotWaitingItem ni) {' - line 2598", "'public BlockedItem(WaitingItem wi) {' - line 2610", "'public BlockedItem(NotWaitingItem ni) {' - line 2614", "'void setCauseOfBlockage(CauseOfBlockage causeOfBlockage) {' - line 2628", "'public boolean isCauseOfBlockageNull() {' - line 2633", "'public CauseOfBlockage getCauseOfBlockage() {' - line 2642", "'return getCauseOfBlockageForItem(this);' - line 2648", "'public BuildableItem(WaitingItem wi) {' - line 2684", "'public BuildableItem(NotWaitingItem ni) {' - line 2688", "'public CauseOfBlockage getCauseOfBlockage() {' - line 2693", "'public boolean isStuck() {' - line 2725", "'public boolean isPending() {' - line 2743", "'public LeftItem(WorkUnitContext wuc) {' - line 2776", "'public LeftItem(Item cancelled) {' - line 2784", "'public CauseOfBlockage getCauseOfBlockage() {' - line 2790", "'public boolean isCancelled() {' - line 2807", "'void enter(Queue q) {' - line 2812", "'boolean leave(Queue q) {' - line 2818", "'public boolean canConvert(Class klazz) {' - line 2835", "'public Object fromString(String string) {' - line 2840", "'public String toString(Object item) {' - line 2847", "'public boolean canConvert(Class klazz) {' - line 2854", "'public Object fromString(String string) {' - line 2859", "'public String toString(Object object) {' - line 2871", "'public boolean canConvert(Class klazz) {' - line 2882", "'public Object fromString(String string) {' - line 2887", "'public String toString(Object item) {' - line 2892", "'private void periodic() {' - line 2909", "'protected void doRun() {' - line 2915", "'public T get(Task task) {' - line 2928", "'public List<T> getAll(Task task) {' - line 2937", "'public boolean containsKey(Task task) {' - line 2947", "'return get(task) != null;' - line 2948", "'public T remove(Task task) {' - line 2951", "'public void put(Task task, T item) {' - line 2963", "'public ItemList<T> values() {' - line 2968", "'public T cancel(Task p) {' - line 2975", "'public void cancelAll() {' - line 2984", "'public String toString() {' - line 3006", "'private LockedRunnable(Runnable delegate) {' - line 3014", "'public void run() {' - line 3019", "'private BuildableRunnable(BuildableItem p) {' - line 3027", "'public void run() {' - line 3032", "'private LockedJUCCallable(java.util.concurrent.Callable<V> delegate) {' - line 3041", "'public V call() throws Exception {' - line 3046", "'return withLock(delegate);' - line 3047", "'private LockedHRCallable(hudson.remoting.Callable<V, T> delegate) {' - line 3055", "'public V call() throws T {' - line 3060", "'return withLock(delegate);' - line 3061", "'public void checkRoles(RoleChecker checker) throws SecurityException {' - line 3065", "'public static Queue getInstance() {' - line 3071", "'public static void init(Jenkins h) {' - line 3079", "'public void onEnterWaiting(WaitingItem wi) {' - line 3115", "'public void onLeft(Queue.LeftItem li) {' - line 3120", "'private void push() {' - line 3124", "'public void run() {' - line 3135"]}, "AbstractProject.java": {"METHODS": ["'protected AbstractProject(ItemGroup parent, String name) {' - line 255", "'@Override protected P asJob() {' - line 271", "'@Override protected Class<R> getBuildClass() {' - line 275", "'public void onCreatedFromScratch() {' - line 292", "'public void onLoad(ItemGroup<? extends Item> parent, String name) throws IOException {' - line 301", "'public EnvVars getEnvironment(@CheckForNull Node node, @NonNull TaskListener listener) throws IOException, InterruptedException {' - line 334", "'protected void performDelete() throws IOException, InterruptedException {' - line 351", "'public boolean isConcurrentBuild() {' - line 368", "'public void setConcurrentBuild(boolean b) throws IOException {' - line 372", "'public Set<Label> getRelevantLabels() {' - line 402", "'public String getAssignedLabelString() {' - line 410", "'public void setAssignedLabel(Label l) throws IOException {' - line 424", "'public void setAssignedNode(Node l) throws IOException {' - line 439", "'public String getPronoun() {' - line 448", "'public String getBuildNowText() {' - line 458", "'private AbstractBuild getBuildForDeprecatedMethods() {' - line 514", "'return getLastBuild();' - line 524", "'private R getSomeBuildWithExistingWorkspace() throws IOException, InterruptedException {' - line 562", "'public FilePath getModuleRoot() {' - line 580", "'public FilePath[] getModuleRoots() {' - line 596", "'public int getQuietPeriod() {' - line 602", "'public SCMCheckoutStrategy getScmCheckoutStrategy() {' - line 606", "'public void setScmCheckoutStrategy(SCMCheckoutStrategy scmCheckoutStrategy) throws IOException {' - line 610", "'public int getScmCheckoutRetryCount() {' - line 616", "'public boolean getHasCustomQuietPeriod() {' - line 621", "'public void setQuietPeriod(Integer seconds) throws IOException {' - line 628", "'public boolean hasCustomScmCheckoutRetryCount() {' - line 633", "'public boolean isBuildable() {' - line 638", "'public boolean isConfigurable() {' - line 646", "'public boolean blockBuildWhenDownstreamBuilding() {' - line 650", "'public void setBlockBuildWhenDownstreamBuilding(boolean b) throws IOException {' - line 654", "'public boolean blockBuildWhenUpstreamBuilding() {' - line 659", "'public void setBlockBuildWhenUpstreamBuilding(boolean b) throws IOException {' - line 663", "'public boolean isDisabled() {' - line 670", "'public void setDisabled(boolean disabled) {' - line 676", "'public FormValidation doCheckRetryCount(@QueryParameter String value)throws IOException, ServletException {' - line 683", "'public boolean supportsMakeDisabled() {' - line 700", "'public void disable() throws IOException {' - line 705", "'public void enable() throws IOException {' - line 710", "'public BallColor getIconColor() {' - line 715", "'return isBuilding() ? BallColor.DISABLED_ANIME : BallColor.DISABLED;' - line 717", "'protected void updateTransientActions() {' - line 729", "'protected List<Action> createTransientActions() {' - line 733", "'public void addProperty(JobProperty<? super P> jobProp) throws IOException {' - line 759", "'public List<ProminentProjectAction> getProminentActions() {' - line 764", "'return getActions(ProminentProjectAction.class);' - line 765", "'public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, FormException {' - line 770", "'public boolean scheduleBuild(int quietPeriod, Cause c, Action... actions) {' - line 794", "'return scheduleBuild2(quietPeriod, c, actions) != null;' - line 795", "'public QueueTaskFuture<R> scheduleBuild2(int quietPeriod, Cause c, Action... actions) {' - line 806", "'return scheduleBuild2(quietPeriod, c, Arrays.asList(actions));' - line 807", "'public QueueTaskFuture<R> scheduleBuild2(int quietPeriod, Cause c, Collection<? extends Action> actions) {' - line 819", "'return scheduleBuild2(quietPeriod, queueActions.toArray(new Action[0]));' - line 824", "'public QueueTaskFuture<R> scheduleBuild2(int quietPeriod) {' - line 837", "'return scheduleBuild2(quietPeriod, new Cause.LegacyCodeCause());' - line 838", "'public QueueTaskFuture<R> scheduleBuild2(int quietPeriod, Cause c) {' - line 846", "'return scheduleBuild2(quietPeriod, c, new Action[0]);' - line 847", "'public QueueTaskFuture<R> scheduleBuild2(int quietPeriod, Action... actions) {' - line 851", "'public boolean schedulePolling() {' - line 859", "'public boolean isInQueue() {' - line 871", "'public JDK getJDK() {' - line 883", "'public void setJDK(JDK jdk) throws IOException {' - line 890", "'public BuildAuthorizationToken getAuthToken() {' - line 896", "'public RunMap<R> _getRuns() {' - line 901", "'public void removeRun(R run) {' - line 906", "'public R getBuild(String id) {' - line 916", "'public R getBuildByNumber(int n) {' - line 926", "'public R getFirstBuild() {' - line 936", "'public R getNearestBuild(int n) {' - line 946", "'public R getNearestOldBuild(int n) {' - line 951", "'protected List<R> getEstimatedDurationCandidates() {' - line 956", "'protected R loadBuild(File dir) throws IOException {' - line 978", "'public List<Action> getActions() {' - line 995", "'public Node getLastBuiltOn() {' - line 1013", "'public Object getSameNodeConstraint() {' - line 1023", "'public BecauseOfBuildInProgress(@NonNull AbstractBuild<?, ?> build) {' - line 1032", "'public BecauseOfDownstreamBuildInProgress(AbstractProject<?, ?> up) {' - line 1043", "'public String getShortDescription() {' - line 1048", "'public BecauseOfUpstreamBuildInProgress(AbstractProject<?, ?> up) {' - line 1059", "'public String getShortDescription() {' - line 1064", "'public CauseOfBlockage getCauseOfBlockage() {' - line 1078", "'public AbstractProject getBuildingDownstream() {' - line 1111", "'public AbstractProject getBuildingUpstream() {' - line 1140", "'public List<SubTask> getSubTasks() {' - line 1163", "'return newBuild();' - line 1176", "'public void checkAbortPermission() {' - line 1180", "'public boolean hasAbortPermission() {' - line 1185", "'return hasPermission(CANCEL);' - line 1186", "'public Resource getWorkspaceResource() {' - line 1203", "'public ResourceList getResourceList() {' - line 1211", "'protected Set<ResourceActivity> getResourceActivities() {' - line 1227", "'public boolean checkout(AbstractBuild build, Launcher launcher, BuildListener listener, File changelogFile) throws IOException, InterruptedException {' - line 1231", "'private void calcPollingBaseline(AbstractBuild build, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {' - line 1256", "'public boolean pollSCMChanges(TaskListener listener) {' - line 1277", "'return poll(listener).hasChanges();' - line 1278", "'public PollingResult poll(TaskListener listener) {' - line 1290", "'return isInQueue() ? NO_CHANGES : BUILD_NOW;' - line 1309", "'private PollingResult _poll(TaskListener listener, SCM scm) throws IOException, InterruptedException {' - line 1355", "'return pollWithWorkspace(listener, scm, b, ws, browser.getWorkspaceList());' - line 1368", "'return pollWithWorkspace(listener, scm, b, ws, l);' - line 1415", "'private PollingResult pollWithWorkspace(TaskListener listener, SCM scm, R lb, @NonNull FilePath ws, WorkspaceList l) throws InterruptedException, IOException {' - line 1429", "'private boolean isAllSuitableNodesOffline(R build) {' - line 1465", "'private WorkspaceOfflineReason workspaceOffline(R build) throws IOException, InterruptedException {' - line 1491", "'public boolean hasParticipant(User user) {' - line 1521", "'public SCM getScm() {' - line 1529", "'public void setScm(SCM scm) throws IOException {' - line 1533", "'public void addTrigger(Trigger<?> trigger) throws IOException {' - line 1541", "'public void removeTrigger(TriggerDescriptor trigger) throws IOException {' - line 1545", "'void addToList(T item, List<T> collection) throws IOException {' - line 1550", "'void removeFromList(Descriptor<T> item, List<T> collection) throws IOException {' - line 1559", "'return triggers().toMap();' - line 1574", "'public List<AbstractProject> getDownstreamProjectsForApi() {' - line 1608", "'public List<AbstractProject> getUpstreamProjectsForApi() {' - line 1624", "'private void checkAndRecord(AbstractProject that, TreeMap<Integer, RangeSet> r, Iterable<R> builds) {' - line 1691", "'protected void buildDependencyGraph(DependencyGraph graph) {' - line 1711", "'protected SearchIndexBuilder makeSearchIndex() {' - line 1716", "'return getParameterizedJobMixIn().extendSearchIndex(super.makeSearchIndex());' - line 1717", "'protected HistoryWidget createHistoryWidget() {' - line 1721", "'public void doBuild(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1733", "'public int getDelay(StaplerRequest req) throws ServletException {' - line 1744", "'if (delay == null)    return getQuietPeriod();' - line 1746", "'public void doBuildWithParameters(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1760", "'public void doPolling(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1765", "'protected void submit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, FormException {' - line 1772", "'return buildDescribable(req, descriptors);' - line 1844", "'public DirectoryBrowserSupport doWs(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, InterruptedException {' - line 1865", "'public HttpResponse doDoWipeOutWorkspace() throws IOException, ServletException, InterruptedException {' - line 1892", "'public boolean isApplicable(Descriptor descriptor) {' - line 1935", "'return doCheckLabel(project, value);' - line 1945", "'public FormValidation doCheckCustomWorkspace(@QueryParameter String customWorkspace) {' - line 1965", "'public AutoCompletionCandidates doAutoCompleteUpstreamProjects(@QueryParameter String value) {' - line 1972", "'public AutoCompletionCandidates doAutoCompleteAssignedLabelString(@QueryParameter String value) {' - line 1982", "'return doAutoCompleteLabel(value);' - line 1986", "'public AutoCompletionCandidates doAutoCompleteLabel(@QueryParameter String value) {' - line 1989", "'public List<SCMCheckoutStrategyDescriptor> getApplicableSCMCheckoutStrategyDescriptors(AbstractProject p) {' - line 1993", "'return findNearest(name, Jenkins.get());' - line 2003", "'public String getCustomWorkspace() {' - line 2047", "'public void setCustomWorkspace(String customWorkspace) throws IOException {' - line 2067", "'public FormValidation checkItem(@NonNull Item item, @NonNull Label label) {' - line 2112"]}, "RSS.java": {"METHODS": ["'public static void rss(StaplerRequest req, StaplerResponse rsp, String title, String url, RunList runList) throws IOException, ServletException {' - line 85", "'public static void rss(StaplerRequest req, StaplerResponse rsp, String title, String url, RunList runList, FeedAdapter<Run> feedAdapter) throws IOException, ServletException {' - line 102"]}, "TopLevelItemDescriptor.java": {"METHODS": ["'protected TopLevelItemDescriptor(Class<? extends TopLevelItem> clazz) {' - line 57", "'protected TopLevelItemDescriptor() {' - line 68", "'public boolean isApplicable(Descriptor descriptor) {' - line 81", "'public boolean isApplicableIn(ItemGroup parent) {' - line 91", "'public boolean testInstance(TopLevelItem i) {' - line 118", "'public String getDisplayName() {' - line 133", "'public String getDescription() {' - line 149", "'public String getCategoryId() {' - line 181", "'public String getIconFilePathPattern() {' - line 200", "'public String getIconFilePath(String size) {' - line 216", "'return getIconFilePathPattern().replace(\":size\", size);' - line 218", "'public String getIconClassName() {' - line 231", "'public TopLevelItem newInstance(StaplerRequest req) throws FormException {' - line 259", "'public TopLevelItem newInstance(String name) {' - line 270", "'return newInstance(Jenkins.get(), name);' - line 271", "'public static ExtensionList<TopLevelItemDescriptor> all() {' - line 284"]}, "EnvironmentList.java": {"METHODS": ["'public EnvironmentList(List<Environment> base) {' - line 38", "'public Environment get(int index) {' - line 43", "'public int size() {' - line 48", "'public Environment set(int index, Environment element) {' - line 61", "'public void add(int index, Environment element) {' - line 66", "'public Environment remove(int index) {' - line 71"]}, "TransientUserActionFactory.java": {"METHODS": ["'public static ExtensionList<TransientUserActionFactory> all() {' - line 56"]}, "Descriptor.java": {"METHODS": ["'public Enum[] getEnumConstants() {' - line 181", "'public Class getItemType() {' - line 188", "'private Class computeItemType() {' - line 194", "'public Descriptor getItemTypeDescriptor() {' - line 212", "'public Descriptor getItemTypeDescriptorOrDie() {' - line 216", "'private HelpRedirect(Class<? extends Describable> owner, String fieldNameToRedirectTo) {' - line 253", "'private String resolve() {' - line 258", "'protected Descriptor(Class<? extends T> clazz) {' - line 270", "'protected Descriptor() {' - line 286", "'public String getDisplayName() {' - line 322", "'public String getId() {' - line 342", "'public Class<T> getT() {' - line 354", "'public String getDescriptorUrl() {' - line 366", "'return getCurrentDescriptorByNameUrl() + '/' + getDescriptorUrl();' - line 375", "'public static String getCurrentDescriptorByNameUrl() {' - line 381", "'public String getCheckUrl(String fieldName) {' - line 397", "'return getCheckMethod(fieldName).toCheckUrl();' - line 398", "'public CheckMethod getCheckMethod(String fieldName) {' - line 407", "'public void calcFillSettings(String field, Map<String, Object> attributes) {' - line 422", "'private List<String> buildFillDependencies(Method method, List<String> depends) {' - line 437", "'public void calcAutoCompleteSettings(String field, Map<String, Object> attributes) {' - line 464", "'public PropertyType getPropertyType(String field) {' - line 501", "'public PropertyType getGlobalPropertyType(String field) {' - line 510", "'return getId().replace('.', '-');' - line 535", "'public T newInstance(StaplerRequest req) throws FormException {' - line 544", "'public T newInstance(@Nullable StaplerRequest req, @NonNull JSONObject formData) throws FormException {' - line 578", "'return verifyNewInstance(newInstance(req));' - line 585", "'return verifyNewInstance(clazz.getDeclaredConstructor().newInstance());' - line 589", "'return verifyNewInstance(bindJSON(req, clazz, formData, true));' - line 591", "'return bindJSON(req, type, src, false);' - line 605", "'private boolean isApplicable(Class type, JSONObject json) {' - line 645", "'public Object instantiate(Class actualType, JSONObject json) {' - line 662", "'public Object onConvert(Type targetType, Class targetTypeErasure, Object jsonSource) {' - line 686", "'private T verifyNewInstance(T t) {' - line 709", "'public String getHelpFile() {' - line 743", "'return getHelpFile(null);' - line 744", "'public String getHelpFile(final String fieldName) {' - line 754", "'return getHelpFile(getKlass(), fieldName);' - line 755", "'public String getHelpFile(Klass<?> clazz, String fieldName) {' - line 759", "'protected void addHelpFileRedirect(String fieldName, Class<? extends Describable> owner, String fieldNameToRedirectTo) {' - line 790", "'public boolean configure(StaplerRequest req) throws FormException {' - line 813", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 828", "'return configure(req);' - line 830", "'public String getConfigPage() {' - line 833", "'return getViewPage(clazz, getPossibleViewNames(\"config\"), \"config.jelly\");' - line 834", "'public String getGlobalConfigPage() {' - line 837", "'return getViewPage(clazz, getPossibleViewNames(\"global\"), null);' - line 838", "'Permission getRequiredGlobalConfigPagePermission() {' - line 862", "'private String getViewPage(Class<?> clazz, String pageName, String defaultValue) {' - line 866", "'return getViewPage(clazz, Set.of(pageName), defaultValue);' - line 867", "'private String getViewPage(Class<?> clazz, Collection<String> pageNames, String defaultValue) {' - line 870", "'return getViewPage(clazz, pageName, pageName);' - line 888", "'protected List<String> getPossibleViewNames(String baseName) {' - line 891", "'protected XmlFile getConfigFile() {' - line 938", "'protected PluginWrapper getPlugin() {' - line 948", "'public void doHelp(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 955", "'private URL getStaticHelpUrl(Klass<?> c, String suffix) {' - line 990", "'return newInstancesFromHeteroList(req, formData.get(key), descriptors);' - line 1056", "'return findById(list, string);' - line 1152", "'return find(ExtensionList.lookup(Descriptor.class), className);' - line 1160", "'public FormException(String message, String formField) {' - line 1166", "'public FormException(String message, Throwable cause, String formField) {' - line 1171", "'public FormException(Throwable cause, String formField) {' - line 1176", "'public String getFormField() {' - line 1184", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 1189", "'new Failure(getMessage()).generateResponse(req, rsp, node, getCause());' - line 1195", "'protected static Class self() { return Self.class; }' - line 1208"]}, "NullTaskListener.java": {"METHODS": ["'public PrintStream getLogger() {' - line 37"]}, "BooleanParameterDefinition.java": {"METHODS": ["'public BooleanParameterDefinition(@NonNull String name) {' - line 49", "'public BooleanParameterDefinition(@NonNull String name, boolean defaultValue, @CheckForNull String description) {' - line 53", "'public ParameterDefinition copyWithDefaultValue(ParameterValue defaultValue) {' - line 60", "'public boolean isDefaultValue() {' - line 69", "'public void setDefaultValue(boolean defaultValue) {' - line 77", "'public ParameterValue createValue(StaplerRequest req, JSONObject jo) {' - line 82", "'public ParameterValue createValue(String value) {' - line 89", "'public BooleanParameterValue getDefaultParameterValue() {' - line 94", "'public int hashCode() {' - line 99", "'public boolean equals(Object obj) {' - line 108", "'public String getDisplayName() {' - line 131", "'public String getHelpFile() {' - line 136"]}, "HealthReport.java": {"METHODS": ["'public HealthReport(int score, String iconUrl, String description) {' - line 125", "'public HealthReport(int score, String iconUrl, Localizable description) {' - line 143", "'public HealthReport(int score, String description) {' - line 184", "'public HealthReport(int score, Localizable description) {' - line 194", "'public HealthReport() {' - line 201", "'public int getScore() {' - line 211", "'public void setScore(int score) {' - line 220", "'public String getIconUrl() {' - line 232", "'public String getIconClassName() {' - line 242", "'public String getIconUrl(String size) {' - line 252", "'public void setIconUrl(String iconUrl) {' - line 267", "'public String getDescription() {' - line 277", "'return getLocalizableDescription().toString();' - line 278", "'public void setDescription(String description) {' - line 286", "'public Localizable getLocalizableDescription() {' - line 295", "'public void setLocalizibleDescription(Localizable localizibleDescription) {' - line 304", "'public List<HealthReport> getAggregatedReports() {' - line 313", "'public boolean isAggregateReport() {' - line 322", "'public int compareTo(HealthReport o) {' - line 327", "'public static HealthReport min(HealthReport a, HealthReport b) {' - line 334", "'public static HealthReport max(HealthReport a, HealthReport b) {' - line 345", "'public ConverterImpl(XStream2 xstream) { super(xstream); }' - line 357", "'@Override protected void callback(HealthReport hr, UnmarshallingContext context) {' - line 359"]}, "MultiStageTimeSeries.java": {"METHODS": ["'new Font(Font.SANS_SERIF, Font.PLAIN, 10));' - line 94", "'public MultiStageTimeSeries(Localizable title, Color color, float initialValue, float decay) {' - line 96", "'public MultiStageTimeSeries(float initialValue, float decay) {' - line 109", "'public void update(float f) {' - line 116", "'public TimeSeries pick(TimeScale timeScale) {' - line 126", "'public float getLatest(TimeScale timeScale) {' - line 138", "'return pick(timeScale).getLatest();' - line 139", "'public Api getApi() {' - line 142", "'public DateFormat createDateFormat() {' - line 168", "'public static TimeScale parse(String type) {' - line 180", "'public TrendChart(TimeScale timeScale, MultiStageTimeSeries... series) {' - line 197", "'protected DefaultCategoryDataset createDataset() {' - line 206", "'public JFreeChart createChart() {' - line 232", "'protected void configureRangeAxis(NumberAxis rangeAxis) {' - line 256", "'protected void crop(CategoryPlot plot) {' - line 262", "'protected CategoryAxis configureDomainAxis(CategoryPlot plot) {' - line 267", "'protected void configureRenderer(LineAndShapeRenderer renderer) {' - line 279", "'protected void configurePlot(CategoryPlot plot) {' - line 286", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 300", "'public static TrendChart createTrendChart(TimeScale scale, MultiStageTimeSeries... data) {' - line 305"]}, "AbstractItem.java": {"METHODS": ["'protected AbstractItem(ItemGroup parent, String name) {' - line 131", "'public String getName() {' - line 138", "'public String getPronoun() {' - line 146", "'public String getTaskNoun() {' - line 155", "'public String getDisplayName() {' - line 165", "'return getName();' - line 170", "'public String getDisplayNameOrNull() {' - line 180", "'public void setDisplayNameOrNull(String displayName) throws IOException {' - line 189", "'public void setDisplayName(String displayName) throws IOException {' - line 193", "'public File getRootDir() {' - line 199", "'return getParent().getRootDirFor(this);' - line 200", "'public String getDescription() {' - line 218", "'public void setDescription(String description) throws IOException {' - line 225", "'protected void doSetName(String name) {' - line 235", "'public boolean isNameEditable() {' - line 247", "'public HttpResponse doConfirmRename(@QueryParameter String newName) throws IOException {' - line 256", "'private void checkIfNameIsUsed(@NonNull String newName) throws Failure {' - line 310", "'protected void checkRename(@NonNull String newName) throws Failure {' - line 348", "'protected void renameTo(final String newName) throws IOException {' - line 358", "'public void movedTo(DirectlyModifiableTopLevelItemGroup destination, AbstractItem newItem, File destDir) throws IOException {' - line 467", "'if (n.isEmpty())   return getName();' - line 481", "'if (n.isEmpty())   return getDisplayName();' - line 489", "'public String getRelativeDisplayNameFrom(ItemGroup p) {' - line 501", "'public String getRelativeNameFromGroup(ItemGroup p) {' - line 510", "'return getRelativeNameFrom(p);' - line 511", "'public void onLoad(ItemGroup<? extends Item> parent, String name) throws IOException {' - line 519", "'public void onCopiedFrom(Item src) {' - line 534", "'public String getShortUrl() {' - line 579", "'public String getSearchUrl() {' - line 586", "'return getShortUrl();' - line 587", "'public ACL getACL() {' - line 608", "'protected Object writeReplace() {' - line 626", "'private Object readResolve() {' - line 637", "'public void doDoDelete(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, InterruptedException {' - line 665", "'public void delete(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 687", "'public void delete() throws IOException, InterruptedException {' - line 705", "'protected void performDelete() throws IOException, InterruptedException {' - line 811", "'public void doConfigDotXml(StaplerRequest req, StaplerResponse rsp)' - line 820", "'public void writeConfigDotXml(OutputStream os) throws IOException {' - line 846", "'public void updateByXml(StreamSource source) throws IOException {' - line 871", "'public void updateByXml(Source source) throws IOException {' - line 882", "'@Override public Void call() throws IOException {' - line 903", "'public void doReload() throws IOException {' - line 929", "'public Void call() throws IOException {' - line 936", "'public String getSearchName() {' - line 946", "'return getName();' - line 950", "'@Override public String toString() {' - line 953", "'public Object getTarget() {' - line 959"]}, "StreamBuildListener.java": {"METHODS": ["'public StreamBuildListener(OutputStream out, Charset charset) {' - line 41", "'public StreamBuildListener(File out, Charset charset) throws IOException {' - line 45", "'public StreamBuildListener(OutputStream w) {' - line 55", "'public StreamBuildListener(PrintStream w) {' - line 65", "'public StreamBuildListener(PrintStream w, Charset charset) {' - line 69"]}, "TransientComputerActionFactory.java": {"METHODS": ["'public static ExtensionList<TransientComputerActionFactory> all() {' - line 57", "'public static List<Action> createAllFor(Computer target) {' - line 65"]}, "EnvironmentContributingAction.java": {"METHODS": []}, "DownloadService.java": {"METHODS": ["'public String generateFragment() {' - line 88", "'public Downloadable getById(String id) {' - line 96", "'public static String loadJSON(URL src) throws IOException {' - line 115", "'public static String loadJSONHTML(URL src) throws IOException {' - line 140", "'public static void installListener() {' - line 171", "'public void onChange() {' - line 179", "'public Downloadable(@NonNull String id, @NonNull String url, long interval) {' - line 227", "'public Downloadable() {' - line 238", "'public Downloadable(@NonNull Class<?> clazz) {' - line 251", "'public Downloadable(@NonNull String id) {' - line 261", "'public Downloadable(@NonNull String id, @NonNull String url) {' - line 274", "'public String getId() {' - line 279", "'public static String idFor(@NonNull Class<?> clazz) {' - line 292", "'public String getUrl() {' - line 299", "'public List<String> getUrls() {' - line 306", "'public long getInterval() {' - line 327", "'public TextFile getDataFile() {' - line 334", "'public long getDue() {' - line 341", "'public JSONObject getData() throws IOException {' - line 354", "'private FormValidation load(String json, long dataTimestamp) throws IOException {' - line 371", "'public FormValidation updateNow() throws IOException {' - line 380", "'return load(reducedJson.toString(), System.currentTimeMillis());' - line 413", "'public JSONObject reduce(List<JSONObject> jsonList) {' - line 421", "'public static ExtensionList<Downloadable> all() {' - line 463", "'public static Downloadable get(@NonNull Class<?> clazz) {' - line 476", "'public static Downloadable get(String id) {' - line 486"]}, "Run.java": {"METHODS": ["'protected Run(@NonNull JobT job) throws IOException {' - line 323", "'protected Run(@NonNull JobT job, @NonNull Calendar timestamp) {' - line 337", "'protected Run(@NonNull JobT job, long timestamp) {' - line 342", "'protected Run(@NonNull JobT project, @NonNull File buildDir) throws IOException {' - line 352", "'public void reload() throws IOException {' - line 364", "'protected void onLoad() {' - line 384", "'public List<Action> getTransientActions() {' - line 409", "'public void addAction(@NonNull Action a) {' - line 429", "'public int compareTo(@NonNull RunT that) {' - line 451", "'public long getQueueId() {' - line 466", "'public void setQueueId(long queueId) {' - line 477", "'public void setResult(@NonNull Result r) {' - line 502", "'public boolean isBuilding() {' - line 531", "'public boolean isInProgress() {' - line 541", "'public boolean isLogUpdated() {' - line 548", "'return getWhyKeepLog() != null;' - line 628", "'public String getDescription() {' - line 689", "'public long getDuration() {' - line 790", "'return getResult().color;' - line 800", "'public boolean hasntStartedYet() {' - line 817", "'public String toString() {' - line 823", "'public String getFullDisplayName() {' - line 831", "'public String getDisplayName() {' - line 837", "'public boolean hasCustomDisplayName() {' - line 841", "'public void setDisplayName(String value) throws IOException {' - line 849", "'public int getNumber() {' - line 856", "'protected void dropLinks() {' - line 876", "'return getNumber() + \"/\";' - line 1074", "'public File getArtifactsDir() {' - line 1143", "'return getArtifactsUpTo(Integer.MAX_VALUE);' - line 1153", "'public boolean getHasArtifacts() {' - line 1180", "'public SerializableArtifactList call() throws IOException {' - line 1195", "'void updateFrom(SerializableArtifactList clone) {' - line 1281", "'public void computeDisplayName() {' - line 1303", "'private String combineLast(String[] token, int n) {' - line 1341", "'public String getFileName() {' - line 1415", "'public String getDisplayPath() {' - line 1420", "'public String getHref() {' - line 1424", "'public String getLength() {' - line 1428", "'public long getFileSize() {' - line 1432", "'public String getTreeNodeId() {' - line 1442", "'public String toString() {' - line 1447", "'public Collection<Fingerprint> getBuildFingerprints() {' - line 1459", "'public void writeLogTo(long offset, @NonNull XMLOutput out) throws IOException {' - line 1527", "'public void writeWholeLogTo(@NonNull OutputStream out) throws IOException, InterruptedException {' - line 1551", "'public ACL getACL() {' - line 1592", "'return getParent().getACL();' - line 1594", "'public void delete() throws IOException {' - line 1619", "'private void removeRunFromParent() {' - line 1680", "'/*package*/ static void reportCheckpoint(@NonNull CheckPoint id) {' - line 1688", "'/*package*/ static void waitForCheckpoint(@NonNull CheckPoint id, @CheckForNull BuildListener listener, @CheckForNull String waiter) throws InterruptedException {' - line 1699", "'return _this();' - line 1815", "'return _this().getParent();' - line 1819", "'private OutputStream createLogger() throws IOException {' - line 1974", "'private StreamBuildListener createBuildListener(@NonNull RunExecution job, OutputStream logger, Charset charset) throws IOException, InterruptedException {' - line 1985", "'private void handleFatalBuildProblem(@NonNull BuildListener listener, @NonNull Throwable e) {' - line 2013", "'protected void onStartBuilding() {' - line 2029", "'protected void onEndBuilding() {' - line 2041", "'protected Object writeReplace() {' - line 2073", "'private Object readResolve() {' - line 2084", "'return fromExternalizableId(id);' - line 2085", "'private String convertBytesToString(List<Byte> bytes) {' - line 2155", "'public void doBuildStatus(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 2161", "'return getIconColor().getImage();' - line 2166", "'public String getBuildStatusIconClassName() {' - line 2169", "'return getIconColor().getIconClassName();' - line 2170", "'public Summary(boolean worse, String message) {' - line 2180", "'public void doBuildNumber(StaplerResponse rsp) throws IOException {' - line 2264", "'public void doBuildTimestamp(StaplerRequest req, StaplerResponse rsp, @QueryParameter String format) throws IOException {' - line 2274", "'new SimpleDateFormat(format, req.getLocale());' - line 2280", "'public void doConsoleText(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 2287", "'public void doProgressiveLog(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 2302", "'public boolean canToggleLogKeep() {' - line 2312", "'public void doToggleLogKeep(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 2324", "'public void keepLog(boolean newValue) throws IOException {' - line 2337", "'public void doDoDelete(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 2347", "'public void setDescription(String description) throws IOException {' - line 2370", "'return getEnvironment(new LogTaskListener(LOGGER, Level.INFO));' - line 2393", "'public EnvVars getEnvironment() throws IOException, InterruptedException {' - line 2403", "'return getEnvironment(new LogTaskListener(LOGGER, Level.INFO));' - line 2405", "'public long getEstimatedDuration() {' - line 2504", "'protected void submit(JSONObject json) throws IOException {' - line 2519", "'public int compare(@NonNull Run lhs, @NonNull Run rhs) {' - line 2543", "'public String getEntryID(Run e) {' - line 2564", "'public String getEntryTitle(Run entry) {' - line 2595", "'public String getEntryUrl(Run entry) {' - line 2600", "'public String getEntryID(Run entry) {' - line 2605", "'public String getEntryDescription(Run entry) {' - line 2612", "'public Calendar getEntryTimestamp(Run entry) {' - line 2617", "'public String getEntryAuthor(Run entry) {' - line 2622", "'public Object getDynamic(String token, StaplerRequest req, StaplerResponse rsp) {' - line 2628", "'public Object getTarget() {' - line 2651", "'public void doDynamic(StaplerResponse rsp) throws IOException {' - line 2671"]}, "MyView.java": {"METHODS": ["'public MyView(String name) {' - line 50", "'public MyView(String name, ViewGroup owner) {' - line 54", "'public boolean contains(TopLevelItem item) {' - line 60", "'public TopLevelItem doCreateItem(StaplerRequest req, StaplerResponse rsp)' - line 66", "'public Collection<TopLevelItem> getItems() {' - line 76", "'public String getPostConstructLandingPage() {' - line 82", "'protected void submit(StaplerRequest req) throws IOException, ServletException, FormException {' - line 87", "'public boolean isInstantiable() {' - line 98", "'public String getDisplayName() {' - line 104"]}, "PeriodicWork.java": {"METHODS": ["'public long getInitialDelay() {' - line 88", "'public static ExtensionList<PeriodicWork> all() {' - line 99", "'public static void init() {' - line 104", "'private static void schedulePeriodicWork(PeriodicWork p) {' - line 113", "'public void onChange() {' - line 137"]}, "ParametersAction.java": {"METHODS": ["'public ParametersAction(@NonNull List<ParameterValue> parameters) {' - line 99", "'public ParametersAction(List<ParameterValue> parameters, Collection<String> additionalSafeParameters) {' - line 119", "'public ParametersAction(ParameterValue... parameters) {' - line 126", "'public void createBuildWrappers(AbstractBuild<?, ?> build, Collection<? super BuildWrapper> result) {' - line 130", "'public void buildEnvironment(Run<?, ?> run, EnvVars env) {' - line 139", "'public String substitute(AbstractBuild<?, ?> build, String text) {' - line 151", "'public VariableResolver<String> createVariableResolver(AbstractBuild<?, ?> build) {' - line 161", "'public Iterator<ParameterValue> iterator() {' - line 175", "'return getParameters().iterator();' - line 176", "'public List<ParameterValue> getParameters() {' - line 180", "'public ParameterValue getParameter(String name) {' - line 184", "'public Label getAssignedLabel(SubTask task) {' - line 194", "'public String getDisplayName() {' - line 204", "'public String getIconFileName() {' - line 209", "'public String getUrlName() {' - line 214", "'public boolean shouldSchedule(List<Action> actions) {' - line 222", "'public ParametersAction createUpdated(Collection<? extends ParameterValue> overrides) {' - line 242", "'public ParametersAction merge(@CheckForNull ParametersAction overrides) {' - line 272", "'private Object readResolve() {' - line 289", "'public void onAttached(Run<?, ?> r) {' - line 302", "'public void onLoad(Run<?, ?> r) {' - line 313", "'public List<ParameterValue> getAllParameters() {' - line 358", "'private boolean isSafeParameter(String name) {' - line 362"]}, "LoadBalancer.java": {"METHODS": ["'public Mapping map(@NonNull Task task, MappingWorksheet ws) {' - line 84", "'private boolean assignGreedily(Mapping m, Task task, List<ConsistentHash<ExecutorChunk>> hashes, int i) {' - line 112", "'protected LoadBalancer sanitize() {' - line 155", "'public Mapping map(@NonNull Task task, MappingWorksheet worksheet) {' - line 160", "'protected LoadBalancer sanitize() {' - line 173"]}, "ChoiceParameterDefinition.java": {"METHODS": ["'public static boolean areValidChoices(@NonNull String choices) {' - line 38", "'public ChoiceParameterDefinition(@NonNull String name, @NonNull String choices, @CheckForNull String description) {' - line 43", "'public ChoiceParameterDefinition(@NonNull String name, @NonNull String[] choices, @CheckForNull String description) {' - line 49", "'private ChoiceParameterDefinition(@NonNull String name, @NonNull List<String> choices, String defaultValue, @CheckForNull String description) {' - line 55", "'public ChoiceParameterDefinition(String name, String description) {' - line 72", "'public void setChoices(Object choices) {' - line 94", "'private void setChoicesText(@NonNull String choices) {' - line 112", "'public ParameterDefinition copyWithDefaultValue(ParameterValue defaultValue) {' - line 117", "'public List<String> getChoices() {' - line 128", "'public String getChoicesText() {' - line 132", "'public StringParameterValue getDefaultParameterValue() {' - line 138", "'public boolean isValid(ParameterValue value) {' - line 149", "'public ParameterValue createValue(StaplerRequest req, JSONObject jo) {' - line 154", "'private void checkValue(StringParameterValue value, String value2) {' - line 161", "'public StringParameterValue createValue(String value) {' - line 168", "'public int hashCode() {' - line 175", "'public boolean equals(Object obj) {' - line 184", "'public String getDisplayName() {' - line 207", "'public String getHelpFile() {' - line 212", "'public ParameterDefinition newInstance(@Nullable StaplerRequest req, @NonNull JSONObject formData) throws FormException {' - line 220", "'public FormValidation doCheckChoices(@QueryParameter String value) {' - line 230"]}, "ViewDescriptor.java": {"METHODS": ["'public String getDisplayName() {' - line 59", "'public boolean isInstantiable() {' - line 67", "'protected ViewDescriptor(Class<? extends View> clazz) {' - line 78", "'protected ViewDescriptor() {' - line 82", "'public AutoCompletionCandidates doAutoCompleteCopyNewItemFrom(@QueryParameter final String value, @AncestorInPath ItemGroup<?> container) {' - line 89", "'public List<Descriptor<ListViewColumn>> getColumnsDescriptors() {' - line 110", "'public List<Descriptor<ViewJobFilter>> getJobFiltersDescriptors() {' - line 123", "'protected FormValidation checkDisplayName(@NonNull View view, @CheckForNull String value) {' - line 142", "'public boolean isApplicable(Class<? extends ViewGroup> ownerType) {' - line 166", "'public boolean isApplicableIn(ViewGroup owner) {' - line 178", "'return isApplicable(owner.getClass());' - line 179"]}, "DescriptorVisibilityFilter.java": {"METHODS": ["'public boolean filterType(@NonNull Class<?> contextClass, @NonNull Descriptor descriptor) {' - line 39", "'public static ExtensionList<DescriptorVisibilityFilter> all() {' - line 61", "'private static Level logLevelFor(DescriptorVisibilityFilter f) {' - line 152"]}, "ReconfigurableDescribable.java": {"METHODS": []}, "Job.java": {"METHODS": ["'protected Job(ItemGroup parent, String name) {' - line 188", "'@Override public void onCreatedFromScratch() {' - line 198", "'public void onLoad(ItemGroup<? extends Item> parent, String name)' - line 205", "'public void onCopiedFrom(Item src) {' - line 248", "'public void onCopied(Item src, Item item) {' - line 261", "'public boolean isInQueue() {' - line 290", "'public boolean isBuilding() {' - line 305", "'public boolean isLogUpdated() {' - line 313", "'public String getPronoun() {' - line 319", "'public boolean isNameEditable() {' - line 327", "'public boolean isKeepDependencies() {' - line 336", "'public int getNextBuildNumber() {' - line 353", "'public EnvVars getCharacteristicEnvVars() {' - line 361", "'public LogRotator getLogRotator() {' - line 452", "'public void setLogRotator(LogRotator logRotator) throws IOException {' - line 462", "'public void logRotate() throws IOException, InterruptedException {' - line 469", "'public boolean supportsLogRotator() {' - line 478", "'protected SearchIndexBuilder makeSearchIndex() {' - line 483", "'public void find(String token, List<SearchItem> result) {' - line 486", "'public void suggest(String token, List<SearchItem> result) {' - line 501", "'public void addProperty(JobProperty<? super JobT> jobProp) throws IOException {' - line 517", "'public void removeProperty(JobProperty<? super JobT> jobProp) throws IOException {' - line 528", "'return _getProperty(clazz);' - line 579", "'public JobProperty getProperty(String className) {' - line 595", "'protected HistoryWidget createHistoryWidget() {' - line 618", "'public int compare(Run record, String key) {' - line 624", "'public String getKey(Run record) {' - line 634", "'public boolean isBuilding(Run record) {' - line 639", "'public String getNextKey(String key) {' - line 644", "'public void renameTo(String newName) throws IOException {' - line 658", "'public void movedTo(DirectlyModifiableTopLevelItemGroup destination, AbstractItem newItem, File destDir) throws IOException {' - line 669", "'@Override public void delete() throws IOException, InterruptedException {' - line 678", "'public void onLocationChanged(Item item, String oldFullName, String newFullName) {' - line 687", "'public RunList<RunT> getBuilds() {' - line 730", "'public RunList<RunT> getNewBuilds() {' - line 740", "'return getBuilds().limit(100);' - line 741", "'public RunT getBuild(String id) {' - line 770", "'public RunT getBuildByNumber(int n) {' - line 785", "'return _getRuns().get(n);' - line 786", "'public RunList<RunT> getBuildsByTimestamp(long start, long end) {' - line 798", "'return getBuilds().byTimestamp(start, end);' - line 799", "'public RunT getBuildForCLI(@Argument(required = true, metaVar = \"BUILD#\", usage = \"Build number\") String id) throws CmdLineException {' - line 803", "'public RunT getNearestBuild(int n) {' - line 822", "'public RunT getNearestOldBuild(int n) {' - line 837", "'return getBuildByNumber(Integer.parseInt(token));' - line 849", "'public File getBuildDir() {' - line 876", "'public RunT getLastBuild() {' - line 911", "'public RunT getFirstBuild() {' - line 925", "'public RunT getLastSuccessfulBuild() {' - line 941", "'public RunT getLastUnsuccessfulBuild() {' - line 951", "'public RunT getLastUnstableBuild() {' - line 961", "'public RunT getLastStableBuild() {' - line 971", "'public RunT getLastFailedBuild() {' - line 980", "'public RunT getLastCompletedBuild() {' - line 989", "'public List<RunT> getLastBuildsOverThreshold(int numberOfBuilds, Result threshold) {' - line 999", "'protected List<RunT> getEstimatedDurationCandidates() {' - line 1013", "'public long getEstimatedDuration() {' - line 1048", "'public PermalinkList getPermalinks() {' - line 1067", "'public void doRssChangelog(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1081", "'public String getEntryTitle(FeedItem item) {' - line 1122", "'public String getEntryUrl(FeedItem item) {' - line 1127", "'public String getEntryID(FeedItem item) {' - line 1132", "'return getEntryUrl(item);' - line 1133", "'public String getEntryDescription(FeedItem item) {' - line 1137", "'public Calendar getEntryTimestamp(FeedItem item) {' - line 1145", "'public String getEntryAuthor(FeedItem entry) {' - line 1150", "'@Override public ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {' - line 1159", "'public BallColor getIconColor() {' - line 1175", "'public HealthReport getBuildHealth() {' - line 1191", "'public List<HealthReport> getBuildHealthReports() {' - line 1197", "'private HealthReport getBuildStabilityHealthReport() {' - line 1246", "'protected void submit(StaplerRequest req, StaplerResponse rsp)' - line 1364", "'public void doDescription(StaplerRequest req, StaplerResponse rsp)' - line 1371", "'public void doBuildStatus(StaplerRequest req, StaplerResponse rsp)' - line 1397", "'public String getBuildStatusUrl() {' - line 1402", "'return getIconColor().getImage();' - line 1403", "'public String getBuildStatusIconClassName() {' - line 1406", "'return getIconColor().getIconClassName();' - line 1407", "'public int compareTo(ChartLabel that) {' - line 1418", "'public boolean equals(Object o) {' - line 1423", "'public Color getColor() {' - line 1433", "'else if (r == Result.UNSTABLE)' - line 1439", "'else if (r == Result.ABORTED || r == Result.NOT_BUILT)' - line 1441", "'public int hashCode() {' - line 1448", "'public String toString() {' - line 1453", "'public Paint getItemPaint(int row, int column) {' - line 1473", "'public String generateURL(CategoryDataset dataset, int row, int column) {' - line 1479", "'public String generateToolTip(CategoryDataset dataset, int row, int column) {' - line 1485", "'public Graph getBuildTimeGraph() {' - line 1491", "'protected JFreeChart createGraph() {' - line 1494", "'new ChartLabel(r));' - line 1500", "'private Calendar getLastBuildTime() {' - line 1549", "'protected void checkRename(String newName) throws Failure {' - line 1573", "'public void doRssAll(StaplerRequest req, StaplerResponse rsp)' - line 1579", "'public void doRssFailed(StaplerRequest req, StaplerResponse rsp)' - line 1584", "'public ACL getACL() {' - line 1595", "'public BuildTimelineWidget getTimeline() {' - line 1599"]}, "LabelFinder.java": {"METHODS": ["'public static ExtensionList<LabelFinder> all() {' - line 48"]}, "Action.java": {"METHODS": []}, "CauseAction.java": {"METHODS": ["'public CauseAction(Cause c) {' - line 57", "'private void addCause(Cause c) {' - line 61", "'private void addCauses(Collection<? extends Cause> causes) {' - line 68", "'public CauseAction(Cause... c) {' - line 74", "'public CauseAction(Collection<? extends Cause> causes) {' - line 79", "'public CauseAction(CauseAction ca) {' - line 83", "'public List<Cause> getCauses() {' - line 95", "'public String getDisplayName() {' - line 114", "'public String getIconFileName() {' - line 119", "'public String getUrlName() {' - line 125", "'public String getShortDescription() {' - line 142", "'@Override public void onLoad(Run<?, ?> owner) {' - line 149", "'@Override public void onAttached(Run<?, ?> owner) {' - line 160", "'public void foldIntoExisting(hudson.model.Queue.Item item, Task owner, List<Action> otherActions) {' - line 169", "'public ConverterImpl(XStream2 xstream) { super(xstream); }' - line 180", "'@Override protected void callback(CauseAction ca, UnmarshallingContext context) {' - line 182"]}, "UpdateCenter.java": {"METHODS": ["'new NamingThreadFactory(new DaemonThreadFactory(), \"Update center installer thread\"));' - line 182", "'new NamingThreadFactory(new DaemonThreadFactory(), \"Update site data downloader\"));' - line 188", "'public UpdateCenter() {' - line 264", "'public static UpdateCenter createUpdateCenter(@CheckForNull UpdateCenterConfiguration config) {' - line 279", "'return createDefaultUpdateCenter(config);' - line 284", "'return createDefaultUpdateCenter(config);' - line 293", "'return createDefaultUpdateCenter(config);' - line 309", "'private static UpdateCenter createDefaultUpdateCenter(@CheckForNull UpdateCenterConfiguration config) {' - line 313", "'public Api getApi() {' - line 317", "'public void configure(UpdateCenterConfiguration config) {' - line 329", "'public List<UpdateCenterJob> getJobs() {' - line 343", "'public UpdateCenterJob getJob(int id) {' - line 354", "'public InstallationJob getJob(Plugin plugin) {' - line 368", "'public Badge getBadge() {' - line 381", "'public HttpResponse doConnectionStatus(StaplerRequest request) {' - line 435", "'public HttpResponse doIncompleteInstallStatus() {' - line 488", "'public HttpResponse doInstallStatus(StaplerRequest request) {' - line 537", "'public HudsonUpgradeJob getHudsonJob() {' - line 574", "'public PersistedList<UpdateSite> getSites() {' - line 591", "'public boolean isSiteDataReady() {' - line 601", "'public List<UpdateSite> getSiteList() {' - line 620", "'public UpdateSite getSite(String id) {' - line 630", "'return getById(id);' - line 631", "'public String getLastUpdatedString() {' - line 638", "'public UpdateSite getById(String id) {' - line 658", "'public UpdateSite getCoreSource() {' - line 674", "'public String getDefaultBaseUrl() {' - line 691", "'return getPlugin(artifactId);' - line 713", "'private boolean checkMinVersion(@CheckForNull Plugin p, @CheckForNull VersionNumber minVersion) {' - line 741", "'public void doUpgrade(StaplerResponse rsp) throws IOException, ServletException {' - line 750", "'public HttpResponse doInvalidateData() {' - line 769", "'public void doSafeRestart(StaplerRequest request, StaplerResponse response) throws IOException, ServletException {' - line 782", "'public void doCancelRestart(StaplerResponse response) throws IOException, ServletException {' - line 797", "'public boolean isRestartRequiredForCompletion() {' - line 822", "'public boolean isRestartScheduled() {' - line 832", "'public boolean isDowngradable() {' - line 848", "'public void doDowngrade(StaplerResponse rsp) throws IOException, ServletException {' - line 856", "'public void doRestart(StaplerResponse rsp) throws IOException, ServletException {' - line 873", "'public String getBackupVersion() {' - line 886", "'ConnectionCheckJob newConnectionCheckJob(UpdateSite site) {' - line 936", "'return getConnectionCheckJob(site);' - line 945", "'public String getDisplayName() {' - line 960", "'public String getSearchUrl() {' - line 965", "'protected UpdateSite createDefaultUpdateSite() {' - line 1016", "'private XmlFile getConfigFile() {' - line 1020", "'public List<Plugin> getAvailables() {' - line 1026", "'public PluginEntry[] getCategorizedAvailables() {' - line 1053", "'public static String getCategoryDisplayName(String category) {' - line 1066", "'public List<Plugin> getUpdates() {' - line 1079", "'public boolean hasIncompatibleUpdates(PluginManager.MetadataCache cache) {' - line 1116", "'return getUpdates().stream().anyMatch(plugin -> !plugin.isCompatible(cache));' - line 1117", "'public List<FormValidation> updateAllSites() throws InterruptedException, ExecutionException {' - line 1127", "'public String getDisplayName() {' - line 1150", "'public boolean isActivated() {' - line 1155", "'public Data getData() {' - line 1164", "'public Permission getRequiredPermission() {' - line 1171", "'public UpdateCenterConfiguration() {' - line 1196", "'public void checkConnection(ConnectionCheckJob job, String connectionCheckUrl) throws IOException {' - line 1208", "'public void checkUpdateCenter(ConnectionCheckJob job, String updateCenterUrl) throws IOException {' - line 1219", "'static URL toUpdateCenterCheckUrl(String updateCenterUrl) throws MalformedURLException {' - line 1229", "'public void preValidate(DownloadJob job, URL src) throws IOException {' - line 1247", "'public void postValidate(DownloadJob job, File src) throws IOException {' - line 1259", "'public File download(DownloadJob job, URL src) throws IOException {' - line 1276", "'protected URLConnection connect(DownloadJob job, URL src) throws IOException {' - line 1373", "'public void install(DownloadJob job, File src, File dst) throws IOException {' - line 1386", "'public void upgrade(DownloadJob job, File src, File dst) throws IOException {' - line 1399", "'public String getConnectionCheckUrl() {' - line 1412", "'public String getUpdateCenterUrl() {' - line 1427", "'public String getPluginRepositoryBaseUrl() {' - line 1439", "'private void testConnection(URL url) throws IOException {' - line 1444", "'protected UpdateCenterJob(@CheckForNull UpdateSite site) {' - line 1497", "'public Api getApi() {' - line 1501", "'public UUID getCorrelationId() {' - line 1505", "'public void setCorrelationId(UUID correlationId) {' - line 1509", "'public void schedule() {' - line 1521", "'public String getType() {' - line 1526", "'return getClass().getSimpleName();' - line 1527", "'public Future<UpdateCenterJob> submit() {' - line 1535", "'public String getErrorMessage() {' - line 1544", "'public Throwable getError() {' - line 1548", "'public RestartJenkinsJob(UpdateSite site) {' - line 1579", "'public String getType() {' - line 1611", "'return getClass().getSimpleName();' - line 1612", "'public ConnectionCheckJob(UpdateSite site) {' - line 1637", "'public void run() {' - line 1644", "'public void run() {' - line 1660", "'private void addStatus(Throwable e) {' - line 1708", "'public String[] getStatuses() {' - line 1712", "'public EnableJob(UpdateSite site, Authentication auth, @NonNull Plugin plugin, boolean dynamicLoad) {' - line 1725", "'public Plugin getPlugin() {' - line 1729", "'public void run() {' - line 1734", "'public NoOpJob(UpdateSite site, Authentication auth, @NonNull Plugin plugin) {' - line 1778", "'public void run() {' - line 1783", "'String getComputedSHA1();' - line 1791", "'String getComputedSHA256();' - line 1793", "'String getComputedSHA512();' - line 1795", "'public String getDisplayName() {' - line 1828", "'return getName();' - line 1829", "'public String getComputedSHA1() {' - line 1845", "'public String getComputedSHA256() {' - line 1858", "'public String getComputedSHA512() {' - line 1871", "'public Authentication getUser() {' - line 1882", "'protected DownloadJob(UpdateSite site, Authentication authentication) {' - line 1886", "'public void run() {' - line 1892", "'protected void _run() throws IOException, InstallationStatus {' - line 1916", "'public long getContentLength() {' - line 1945", "'public boolean isSuccess() {' - line 1959", "'return getClass().getSimpleName();' - line 1965", "'public boolean requiresRestart() {' - line 1971", "'public Failure(Throwable problem) {' - line 1982", "'public String getProblemStackTrace() {' - line 1986", "'public SuccessButRequiresRestart(Localizable message) {' - line 1997", "'public String getMessage() {' - line 2002", "'public boolean requiresRestart() {' - line 2007", "'@Override public boolean isSuccess() {' - line 2016", "'@Override public boolean isSuccess() {' - line 2025", "'public Installing(int percentage) {' - line 2045", "'private static VerificationResult verifyChecksums(String expectedDigest, String actualDigest, boolean caseSensitive) {' - line 2055", "'private static void throwVerificationFailure(String expected, String actual, File file, String algorithm) throws IOException {' - line 2087", "'/* package */ static void verifyChecksums(WithComputedChecksums job, UpdateSite.Entry entry, File file) throws IOException {' - line 2100", "'public InstallationJob(Plugin plugin, UpdateSite site, Authentication auth) {' - line 2175", "'public InstallationJob(Plugin plugin, UpdateSite site, org.acegisecurity.Authentication auth, boolean dynamicLoad) {' - line 2183", "'public InstallationJob(Plugin plugin, UpdateSite site, Authentication auth, boolean dynamicLoad) {' - line 2187", "'protected URL getURL() throws MalformedURLException {' - line 2194", "'protected File getDestination() {' - line 2199", "'private File getLegacyDestination() {' - line 2204", "'public String getName() {' - line 2210", "'public String getDisplayName() {' - line 2215", "'public long getContentLength() {' - line 2220", "'public void _run() throws IOException, InstallationStatus {' - line 2226", "'protected boolean wasInstalled() {' - line 2271", "'protected void onSuccess() {' - line 2305", "'public String toString() {' - line 2310", "'protected void replace(File dst, File src) throws IOException {' - line 2319", "'void setBatch(List<PluginWrapper> batch) {' - line 2339", "'public CompleteBatchJob(List<PluginWrapper> batch, long start, UUID correlationId) {' - line 2354", "'public void run() {' - line 2362", "'public PluginDowngradeJob(Plugin plugin, UpdateSite site, org.acegisecurity.Authentication auth) {' - line 2412", "'public PluginDowngradeJob(Plugin plugin, UpdateSite site, Authentication auth) {' - line 2417", "'protected URL getURL() throws MalformedURLException {' - line 2423", "'protected File getDestination() {' - line 2428", "'protected File getBackup() {' - line 2437", "'public String getName() {' - line 2443", "'public String getDisplayName() {' - line 2448", "'public void run() {' - line 2453", "'protected void _run() throws IOException {' - line 2470", "'protected void onSuccess() {' - line 2487", "'public String toString() {' - line 2492", "'public HudsonUpgradeJob(UpdateSite site, org.acegisecurity.Authentication auth) {' - line 2506", "'public HudsonUpgradeJob(UpdateSite site, Authentication auth) {' - line 2510", "'protected URL getURL() throws MalformedURLException {' - line 2515", "'protected File getDestination() {' - line 2523", "'public String getName() {' - line 2528", "'protected void onSuccess() {' - line 2533", "'protected void replace(File dst, File src) throws IOException {' - line 2538", "'public HudsonDowngradeJob(UpdateSite site, org.acegisecurity.Authentication auth) {' - line 2553", "'public HudsonDowngradeJob(UpdateSite site, Authentication auth) {' - line 2557", "'protected URL getURL() throws MalformedURLException {' - line 2562", "'protected File getDestination() {' - line 2570", "'public String getName() {' - line 2575", "'protected void onSuccess() {' - line 2580", "'public void run() {' - line 2585", "'protected void _run() throws IOException {' - line 2602", "'protected void replace(File dst, File src) throws IOException {' - line 2611", "'private PluginEntry(Plugin p, String c) {' - line 2621", "'public int compareTo(PluginEntry o) {' - line 2627", "'public boolean equals(Object o) {' - line 2635", "'public int hashCode() {' - line 2655", "'public static void init(Jenkins h) throws IOException {' - line 2669", "'public static void updateAllSitesNow() {' - line 2674", "'public static void updateDefaultSite() {' - line 2686", "'public Object getTarget() {' - line 2705", "'private static void moveAtomically(File src, File target) throws IOException {' - line 2739"]}, "ViewGroup.java": {"METHODS": ["'boolean canDelete(View view);' - line 47", "'void deleteView(View view) throws IOException;' - line 52", "'Collection<View> getViews();' - line 60", "'View getView(String name);' - line 88", "'String getUrl();' - line 107", "'void onViewRenamed(View view, String oldName, String newName);' - line 118", "'ViewsTabBar getViewsTabBar();' - line 128"]}, "TimeZoneProperty.java": {"METHODS": ["'public TimeZoneProperty(@CheckForNull String timeZoneName) {' - line 36", "'private TimeZoneProperty() {' - line 40", "'public void setTimeZoneName(@CheckForNull String timeZoneName) {' - line 44", "'public String getTimeZoneName() {' - line 49", "'public String getDisplayName() {' - line 59", "'public UserProperty newInstance(User user) {' - line 64", "'public boolean isEnabled() {' - line 79", "'public ListBoxModel doFillTimeZoneNameItems(@AncestorInPath User user) {' - line 83", "'public FormValidation doCheckTimeZoneName(@QueryParameter String timeZoneName) {' - line 97", "'public static String forCurrentUser() {' - line 111", "'return forUser(current);' - line 116", "'private static String forUser(User user) {' - line 120"]}, "TransientViewActionFactory.java": {"METHODS": ["'public static ExtensionList<TransientViewActionFactory> all() {' - line 22", "'public static List<Action> createAllFor(View v) {' - line 29"]}, "ModifiableViewGroup.java": {"METHODS": ["'void addView(@NonNull View view) throws IOException;' - line 40"]}, "Actionable.java": {"METHODS": ["'public List<Action> getActions() {' - line 76", "'public void addAction(@NonNull Action a) {' - line 150", "'public void replaceAction(@NonNull Action a) {' - line 174", "'public boolean addOrReplaceAction(@NonNull Action a) {' - line 192", "'public boolean removeAction(@Nullable Action a) {' - line 227", "'return getActions().removeAll(Set.of(a));' - line 232", "'public boolean removeActions(@NonNull Class<? extends Action> clazz) {' - line 249", "'public boolean replaceActions(@NonNull Class<? extends Action> clazz, @NonNull Action a) {' - line 280", "'public Action getAction(int index) {' - line 311", "'public Object getDynamic(String token, StaplerRequest req, StaplerResponse rsp) {' - line 340", "'@Override public ContextMenu doContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {' - line 353"]}, "TopLevelItem.java": {"METHODS": ["'TopLevelItemDescriptor getDescriptor();' - line 47"]}, "Hudson.java": {"METHODS": ["'public static Hudson getInstance() {' - line 76", "'public Hudson(File root, ServletContext context) throws IOException, InterruptedException, ReactorException {' - line 80", "'public Hudson(File root, ServletContext context, PluginManager pluginManager) throws IOException, InterruptedException, ReactorException {' - line 84", "'public CopyOnWriteList<ItemListener> getJobListeners() {' - line 95", "'public CopyOnWriteList<ComputerListener> getComputerListeners() {' - line 106", "'public Slave getSlave(String name) {' - line 117", "'public List<Slave> getSlaves() {' - line 129", "'public void setSlaves(List<Slave> slaves) throws IOException {' - line 140", "'public TopLevelItem getJob(String name) {' - line 150", "'return getItem(name);' - line 151", "'public TopLevelItem getJobCaseInsensitive(String name) {' - line 159", "'public void doLogRss(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 186", "'public void doFieldCheck(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 196", "'public FormValidation doFieldCheck(@QueryParameter(fixEmpty = true) String value,' - line 218", "'public static boolean isWindows() {' - line 254", "'public static boolean isDarwin() {' - line 263", "'public static boolean adminCheck() throws IOException {' - line 272", "'return adminCheck(Stapler.getCurrentRequest(), Stapler.getCurrentResponse());' - line 273", "'public static boolean adminCheck(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 281", "'public static boolean isAdmin() {' - line 307", "'public static boolean isAdmin(StaplerRequest req) {' - line 317", "'return isAdmin();' - line 318", "'public CloudList(Jenkins h) {' - line 338", "'public CloudList() {// needed for XStream deserialization' - line 342"]}, "DependencyGraph.java": {"METHODS": ["'public DependencyGraph() {' - line 81", "'public void build() {' - line 84", "'private void topologicalDagSort() {' - line 104", "'protected Collection<AbstractProject> nodes() {' - line 107", "'protected Collection<AbstractProject> forward(AbstractProject node) {' - line 115", "'return getDownstream(node);' - line 116", "'private DependencyGraph(boolean dummy) {' - line 140", "'public List<AbstractProject> getDownstream(AbstractProject p) {' - line 169", "'return get(forward, p, false);' - line 170", "'public List<AbstractProject> getUpstream(AbstractProject p) {' - line 179", "'return get(backward, p, true);' - line 180", "'private List<AbstractProject> get(Map<AbstractProject, List<DependencyGroup>> map, AbstractProject src, boolean up) {' - line 183", "'public List<Dependency> getDownstreamDependencies(AbstractProject p) {' - line 194", "'return get(forward, p);' - line 195", "'public List<Dependency> getUpstreamDependencies(AbstractProject p) {' - line 201", "'return get(backward, p);' - line 202", "'private List<Dependency> get(Map<AbstractProject, List<DependencyGroup>> map, AbstractProject src) {' - line 205", "'public void addDependency(AbstractProject upstream, AbstractProject downstream) {' - line 223", "'public void addDependency(Dependency dep) {' - line 230", "'public void addDependency(AbstractProject upstream, Collection<? extends AbstractProject> downstream) {' - line 241", "'public void addDependency(Collection<? extends AbstractProject> upstream, AbstractProject downstream) {' - line 250", "'public void addDependencyDeclarers(AbstractProject upstream, Collection<?> possibleDependecyDeclarers) {' - line 258", "'public boolean hasIndirectDependencies(AbstractProject src, AbstractProject dst) {' - line 273", "'public Set<AbstractProject> getTransitiveUpstream(AbstractProject src) {' - line 294", "'return getTransitive(backward, src, true);' - line 295", "'public Set<AbstractProject> getTransitiveDownstream(AbstractProject src) {' - line 301", "'return getTransitive(forward, src, false);' - line 302", "'private Set<AbstractProject> getTransitive(Map<AbstractProject, List<DependencyGroup>> direction, AbstractProject src, boolean up) {' - line 305", "'private void add(Map<AbstractProject, List<DependencyGroup>> map, AbstractProject key, Dependency dep) {' - line 323", "'public int compare(DependencyGroup lhs, DependencyGroup rhs) {' - line 346", "'public int compare(AbstractProject o1, AbstractProject o2) {' - line 358", "'public Dependency(AbstractProject upstream, AbstractProject downstream) {' - line 381", "'public AbstractProject getUpstreamProject() {' - line 386", "'public AbstractProject getDownstreamProject() {' - line 390", "'public boolean pointsItself() {' - line 415", "'public boolean equals(Object obj) {' - line 420", "'public int hashCode() {' - line 429", "'@Override public String toString() {' - line 436", "'private void add(Dependency next) {' - line 453", "'public Set<Dependency> getGroup() {' - line 457", "'public AbstractProject getUpstreamProject() {' - line 463", "'public AbstractProject getDownstreamProject() {' - line 467"]}, "RunParameterDefinition.java": {"METHODS": ["'public String getName() {' - line 55", "'return name();' - line 56", "'public RunParameterDefinition(@NonNull String name, String projectName, @CheckForNull String description, @CheckForNull RunParameterFilter filter) {' - line 73", "'public RunParameterDefinition(@NonNull String name, String projectName, @CheckForNull String description) {' - line 84", "'private RunParameterDefinition(@NonNull String name, String projectName, String runId, @CheckForNull String description, @CheckForNull RunParameterFilter filter) {' - line 89", "'public ParameterDefinition copyWithDefaultValue(ParameterValue defaultValue) {' - line 97", "'public String getProjectName() {' - line 107", "'public Job getProject() {' - line 111", "'public RunParameterFilter getFilter() {' - line 120", "'public RunList getBuilds() {' - line 129", "'return getProject().getBuilds().overThresholdOnly(Result.ABORTED).completedOnly();' - line 133", "'return getProject().getBuilds().overThresholdOnly(Result.UNSTABLE).completedOnly();' - line 135", "'return getProject().getBuilds().overThresholdOnly(Result.SUCCESS).completedOnly();' - line 137", "'return getProject().getBuilds();' - line 139", "'public String getDisplayName() {' - line 147", "'public String getHelpFile() {' - line 152", "'public ParameterDefinition newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 157", "'public AutoCompletionCandidates doAutoCompleteProjectName(@QueryParameter String value) {' - line 161", "'public ParameterValue getDefaultParameterValue() {' - line 168", "'return createValue(runId);' - line 170", "'return createValue(lastBuild.getExternalizableId());' - line 197", "'public ParameterValue createValue(StaplerRequest req, JSONObject jo) {' - line 204", "'public RunParameterValue createValue(String value) {' - line 211", "'public int hashCode() {' - line 216", "'public boolean equals(Object obj) {' - line 225"]}, "AbstractCIBase.java": {"METHODS": ["'public String getNodeName() {' - line 65", "'public String getUrl() {' - line 76", "'protected void resetLabel(Label l) {' - line 83", "'protected void setViewOwner(View v) {' - line 87", "'protected void interruptReloadThread() {' - line 91", "'protected void killComputer(Computer c) {' - line 95", "'public Set<String> getDisabledAdministrativeMonitors() {' - line 106", "'public void setDisabledAdministrativeMonitors(Set<String> disabledAdministrativeMonitors) {' - line 117", "'private void updateComputer(Node n, Map<String, Computer> byNameMap, Set<Computer> used, boolean automaticAgentLaunch) {' - line 142", "'private Computer createNewComputerForNode(Node n, boolean automaticAgentLaunch) {' - line 160", "'protected void updateNewComputer(final Node n, boolean automaticAgentLaunch) {' - line 219", "'protected void updateComputerList(final boolean automaticAgentLaunch) {' - line 234", "'public void run() {' - line 239"]}, "FullDuplexHttpChannel.java": {"METHODS": ["'protected FullDuplexHttpChannel(UUID uuid, boolean restricted) throws IOException {' - line 47", "'protected void run(final InputStream upload, OutputStream download) throws IOException, InterruptedException {' - line 53", "'protected void onDead(Throwable diagnosis) {' - line 60", "'protected void onDead() {' - line 72", "'public Channel getChannel() {' - line 84"]}, "FingerprintMap.java": {"METHODS": ["'public boolean isReady() {' - line 51", "'return getOrCreate(build, fileName, Util.toHexString(md5sum));' - line 63", "'protected Fingerprint get(String md5sum, boolean createIfNotExist, FingerprintParams createParams) throws IOException {' - line 75"]}, "BuildListener.java": {"METHODS": []}, "Fingerprint.java": {"METHODS": ["'public BuildPtr(String name, int number) {' - line 94", "'public BuildPtr(Run run) {' - line 99", "'public String getName() {' - line 111", "'private boolean hasPermissionToDiscoverBuild() {' - line 124", "'return canDiscoverItem(name);' - line 132", "'void setName(String newName) {' - line 137", "'public int getNumber() {' - line 158", "'public Run getRun() {' - line 166", "'private boolean isAlive() {' - line 172", "'return getRun() != null;' - line 173", "'public boolean is(Run r) {' - line 179", "'public boolean is(Job job) {' - line 186", "'public boolean belongsTo(Job job) {' - line 198", "'@Override public String toString() {' - line 216", "'public Range(int start, int end) {' - line 229", "'public int getStart() {' - line 236", "'public int getEnd() {' - line 241", "'public boolean isSmallerThan(int i) {' - line 245", "'public boolean isBiggerThan(int i) {' - line 249", "'public boolean includes(int i) {' - line 253", "'public Range expandRight() {' - line 257", "'public Range expandLeft() {' - line 261", "'public boolean isAdjacentTo(Range that) {' - line 265", "'public String toString() {' - line 270", "'public boolean isIndependent(Range that) {' - line 277", "'public boolean isDisjoint(Range that) {' - line 284", "'public boolean isSingle() {' - line 291", "'public boolean contains(Range that) {' - line 298", "'public Range combine(Range that) {' - line 305", "'public Range intersect(Range that) {' - line 315", "'public boolean equals(Object o) {' - line 323", "'public int hashCode() {' - line 333", "'public RangeSet() {' - line 346", "'private RangeSet(List<Range> data) {' - line 350", "'private RangeSet(Range initial) {' - line 354", "'public Iterable<Integer> listNumbers() {' - line 362", "'public Iterator<Integer> iterator() {' - line 366", "'protected Iterator<Integer> expand(Range range) {' - line 369", "'public Iterable<Integer> listNumbersReverse() {' - line 380", "'public Iterator<Integer> iterator() {' - line 384", "'protected Iterator<Integer> expand(Range range) {' - line 387", "'private void checkCollapse(int i) {' - line 437", "'public boolean equals(Object o) {' - line 618", "'public int hashCode() {' - line 627", "'public static RangeSet fromString(String list, boolean skipError) {' - line 669", "'public ConverterImpl(Converter collectionConv) {' - line 765", "'public boolean canConvert(Class type) {' - line 773", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 778", "'public static String serialize(RangeSet src) {' - line 787", "'public Object unmarshal(HierarchicalStreamReader reader, final UnmarshallingContext context) {' - line 800", "'public void onLocationChanged(final Item item, final String oldName, final String newName) {' - line 819", "'private void locationChanged(Item item, String oldName, String newName) {' - line 825", "'public Fingerprint(@CheckForNull Run build, @NonNull String fileName, @NonNull byte[] md5sum) throws IOException {' - line 874", "'public RangeSet getRangeSet(Job job) {' - line 959", "'return getRangeSet(job.getFullName());' - line 960", "'public RangeItem(String name, RangeSet ranges) {' - line 984", "'public void add(@NonNull AbstractBuild b) throws IOException {' - line 1008", "'public void addFor(@NonNull Run b) throws IOException {' - line 1017", "'protected Object readResolve() {' - line 1031", "'void addWithoutSaving(@NonNull String jobFullName, int n) {' - line 1038", "'RangeSet discarding =  new RangeSet(new Range(-1, r.getNumber()));' - line 1120", "'public Iterator<FingerprintFacet> iterator() {' - line 1168", "'public boolean add(FingerprintFacet e) {' - line 1173", "'public boolean remove(Object o) {' - line 1179", "'public boolean contains(Object o) {' - line 1184", "'public int size() {' - line 1189", "'public int compare(FingerprintFacet o1, FingerprintFacet o2) {' - line 1212", "'void save(File file) throws IOException {' - line 1284", "'public Api getApi() {' - line 1327", "'return load(Util.toHexString(md5sum));' - line 1376", "'public static void delete(@NonNull String id) throws IOException {' - line 1398", "'private static void initFacets(@CheckForNull Fingerprint fingerprint) {' - line 1412", "'@Override public String toString() {' - line 1422", "'private static boolean canDiscoverItem(@NonNull final String fullName) {' - line 1444", "'public static XStream2 getXStream() {' - line 1497", "'new CollectionConverter(XSTREAM.getMapper()) {' - line 1507", "'protected Object createCollection(Class type) {' - line 1509"]}, "ParameterValue.java": {"METHODS": ["'protected ParameterValue(String name, String description) {' - line 86", "'protected ParameterValue(String name) {' - line 91", "'public String getDescription() {' - line 95", "'public void setDescription(String description) {' - line 99", "'public String getFormattedDescription() {' - line 104", "'public void buildEnvVars(AbstractBuild<?, ?> build, Map<String, String> env) {' - line 150", "'public void buildEnvVars(AbstractBuild<?, ?> build, EnvVars env) {' - line 164", "'public void buildEnvironment(Run<?, ?> build, EnvVars env) {' - line 191", "'public BuildWrapper createBuildWrapper(AbstractBuild<?, ?> build) {' - line 212", "'public VariableResolver<String> createVariableResolver(AbstractBuild<?, ?> build) {' - line 230", "'public ParameterDefinition getDefinition() {' - line 246", "'public int hashCode() {' - line 251", "'public boolean equals(Object obj) {' - line 256", "'public String getShortDescription() {' - line 279", "'return toString();' - line 280", "'public boolean isSensitive() {' - line 293", "'public Object getValue() {' - line 306", "'public Label getAssignedLabel(SubTask task) {' - line 322"]}, "ResourceActivity.java": {"METHODS": ["'String getDisplayName();' - line 53"]}, "EnvironmentSpecific.java": {"METHODS": ["'T forEnvironment(EnvVars environment);' - line 43"]}, "ExecutorListener.java": {"METHODS": []}, "ItemVisitor.java": {"METHODS": ["'public void onItemGroup(ItemGroup<?> group) {' - line 38", "'public void onItem(Item i) {' - line 48"]}, "AbstractModelObject.java": {"METHODS": ["'protected SearchIndexBuilder makeSearchIndex() {' - line 94", "'return makeSearchIndex().make();' - line 100", "'public Search getSearch() {' - line 104", "'public String getSearchName() {' - line 117", "'return getDisplayName();' - line 118"]}, "AperiodicWork.java": {"METHODS": ["'public long getInitialDelay() {' - line 81", "'public static void init() {' - line 96", "'private static void scheduleAperiodWork(AperiodicWork ap) {' - line 105", "'public static ExtensionList<AperiodicWork> all() {' - line 114", "'public void onChange() {' - line 133"]}, "DirectoryBrowserSupport.java": {"METHODS": ["'public DirectoryBrowserSupport(ModelObject owner, String title) {' - line 120", "'public DirectoryBrowserSupport(ModelObject owner, FilePath base, String title, String icon, boolean serveDirIndex) {' - line 137", "'public DirectoryBrowserSupport(ModelObject owner, VirtualFile base, String title, String icon, boolean serveDirIndex) {' - line 155", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 164", "'public void setIndexFileName(String fileName) {' - line 181", "'public void serveFile(StaplerRequest req, StaplerResponse rsp, FilePath root, String icon, boolean serveDirIndex) throws IOException, ServletException, InterruptedException {' - line 198", "'private void serveFile(StaplerRequest req, StaplerResponse rsp, VirtualFile root, String icon, boolean serveDirIndex) throws IOException, ServletException, InterruptedException {' - line 202", "'public Boolean call() throws IOException {' - line 437", "'private boolean hasTmpDir(VirtualFile baseFile, String base, OpenOption[] openOptions) {' - line 442", "'private List<List<Path>> keepReadabilityOnlyOnDescendants(VirtualFile root, boolean patternUsed, List<List<Path>> pathFragmentsList) {' - line 449", "'private boolean isDescendant(VirtualFile root, String relativePath) {' - line 491", "'private String getPath(StaplerRequest req) {' - line 500", "'private List<Path> buildParentPath(String pathList, int restSize) {' - line 511", "'private static String createBackRef(int times) {' - line 524", "'private static void zip(StaplerResponse rsp, VirtualFile root, VirtualFile dir, String glob) throws IOException, InterruptedException {' - line 529", "'private static void sendZipUsingMap(ZipOutputStream zos, VirtualFile dir, Map<String, VirtualFile> nameToVirtualFiles) throws IOException {' - line 552", "'private static void sendZipUsingListOfNames(ZipOutputStream zos, VirtualFile dir, Collection<String> listOfFileNames) throws IOException {' - line 564", "'private static void sendOneZipEntry(ZipOutputStream zos, VirtualFile vf, String relativePath) throws IOException {' - line 571", "'private static void collectRecursivelyAllLegalChildren(VirtualFile currentDir, String currentPrefix, Map<String, VirtualFile> nameToFiles) throws IOException {' - line 594", "'public Path(String href, String title, boolean isFolder, long size, boolean isReadable) {' - line 644", "'public Path(String href, String title, boolean isFolder, long size, boolean isReadable, long lastModified) {' - line 648", "'public boolean isFolder() {' - line 657", "'public boolean isReadable() {' - line 661", "'public String getHref() {' - line 665", "'public String getTitle() {' - line 669", "'public String getIconName() {' - line 673", "'public String getIconClassName() {' - line 680", "'public long getSize() {' - line 687", "'public long getLastModified() {' - line 697", "'public Calendar getLastModifiedAsCalendar() {' - line 708", "'public static Path createNotReadableVersionOf(Path that) {' - line 714", "'public int compare(VirtualFile lhs, VirtualFile rhs) {' - line 731", "'private int dirRank(VirtualFile f) {' - line 739", "'@Override public List<List<Path>> call() throws IOException {' - line 760", "'return buildChildPaths(cur, locale);' - line 761", "'private static List<List<Path>> buildChildPaths(VirtualFile cur, Locale locale) throws IOException {' - line 771", "'private static List<List<Path>> patternScan(VirtualFile baseDir, String pattern, String baseRef) throws IOException {' - line 813", "'private static List<Path> buildPathList(VirtualFile baseDir, VirtualFile filePath, String baseRef) throws IOException {' - line 831", "'private static void buildPathList(VirtualFile baseDir, VirtualFile filePath, List<Path> pathList, StringBuilder href) throws IOException {' - line 842", "'private static OpenOption[] getOpenOptions() {' - line 857"]}, "OverallLoadStatistics.java": {"METHODS": ["'public OverallLoadStatistics() {' - line 54", "'public int computeIdleExecutors() {' - line 59", "'public int computeTotalExecutors() {' - line 64", "'public int computeQueueLength() {' - line 69", "'protected Iterable<Node> getNodes() {' - line 74", "'protected boolean matches(Queue.Item item, SubTask subTask) {' - line 79", "'protected TrendChart createOverallTrendChart(TimeScale timeScale) {' - line 87"]}, "ViewJob.java": {"METHODS": ["'protected ViewJob(Jenkins parent, String name) {' - line 86", "'protected ViewJob(ItemGroup parent, String name) {' - line 90", "'public boolean isBuildable() {' - line 95", "'public void onLoad(ItemGroup<? extends Item> parent, String name) throws IOException {' - line 100", "'public void removeRun(RunT run) {' - line 142", "'private void _reload() {' - line 148", "'protected void submit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, FormException {' - line 166", "'private ReloadThread() {' - line 186", "'private ViewJob getNext() throws InterruptedException {' - line 190", "'private boolean terminating() {' - line 204", "'public void run() {' - line 209"]}, "FileParameterValue.java": {"METHODS": ["'public FileParameterValue(String name, FileItem file) {' - line 95", "'public FileParameterValue(String name, File file, String originalFileName) {' - line 99", "'protected FileParameterValue(String name, FileItem file, String originalFileName) {' - line 103", "'protected void setLocation(String location) {' - line 111", "'public String getLocation() {' - line 115", "'public Object getValue() {' - line 120", "'public void buildEnvironment(Run<?, ?> build, EnvVars env) {' - line 128", "'public VariableResolver<String> createVariableResolver(AbstractBuild<?, ?> build) {' - line 133", "'public String getOriginalFileName() {' - line 144", "'public FileItem getFile() {' - line 148", "'public BuildWrapper createBuildWrapper(AbstractBuild<?, ?> build) {' - line 153", "'public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 157", "'public int hashCode() {' - line 186", "'public boolean equals(Object obj) {' - line 199", "'public String toString() {' - line 217", "'@Override public String getShortDescription() {' - line 221", "'public DirectoryBrowserSupport doDynamic(StaplerRequest request, StaplerResponse response) {' - line 228", "'private File getLocationUnderBuild(AbstractBuild build) {' - line 240", "'private File getFileParameterFolderUnderBuild(AbstractBuild<?, ?> build) {' - line 244", "'public FileItemImpl(File file) {' - line 254", "'public InputStream getInputStream() throws IOException {' - line 262", "'public String getContentType() {' - line 267", "'public String getName() {' - line 272", "'public boolean isInMemory() {' - line 277", "'public long getSize() {' - line 282", "'public byte[] get() {' - line 287", "'public String getString(String encoding) throws UnsupportedEncodingException {' - line 296", "'public String getString() {' - line 301", "'public void write(File to) throws Exception {' - line 306", "'new FilePath(file).copyTo(new FilePath(to));' - line 307", "'public void delete() {' - line 311", "'public String getFieldName() {' - line 320", "'public void setFieldName(String name) {' - line 325", "'public boolean isFormField() {' - line 329", "'public void setFormField(boolean state) {' - line 334", "'public OutputStream getOutputStream() throws IOException {' - line 339", "'public FileItemHeaders getHeaders() {' - line 344", "'public void setHeaders(FileItemHeaders headers) {' - line 349"]}, "SCMedItem.java": {"METHODS": ["'SCM getScm();' - line 41", "'boolean pollSCMChanges(TaskListener listener);' - line 60", "'PollingResult poll(TaskListener listener);' - line 73"]}, "ManageJenkinsAction.java": {"METHODS": ["'public String getIconFileName() {' - line 49", "'public String getDisplayName() {' - line 57", "'public String getUrlName() {' - line 62", "'public Object getStaplerFallback() {' - line 67", "'public ContextMenu doContextMenu(StaplerRequest request, StaplerResponse response) throws JellyException, IOException {' - line 72", "'public void addContextMenuItem(ContextMenu menu, String url, String icon, String iconXml, String text, boolean post, boolean requiresConfirmation, Badge badge, String message) {' - line 81"]}, "PersistentDescriptor.java": {"METHODS": ["'void load();' - line 15"]}, "ResultTrend.java": {"METHODS": ["'public String getDescription() {' - line 84", "'public String getID() {' - line 91", "'public static ResultTrend getResultTrend(AbstractBuild<?, ?> build) {' - line 101", "'return getResultTrend((Run<?, ?>) build);' - line 102", "'public static ResultTrend getResultTrend(Run<?, ?> run) {' - line 113", "'private static boolean isFix(Run<?, ?> build) {' - line 181"]}, "Resource.java": {"METHODS": ["'public Resource(@CheckForNull Resource parent, @NonNull String displayName) {' - line 65", "'public Resource(@CheckForNull Resource parent, @NonNull String displayName, int numConcurrentWrite) {' - line 72", "'public Resource(@NonNull String displayName) {' - line 81", "'public boolean isCollidingWith(Resource that, int count) {' - line 92", "'public boolean equals(Object o) {' - line 104", "'private static boolean eq(Object lhs, Object rhs) {' - line 112", "'public int hashCode() {' - line 119", "'public String toString() {' - line 124"]}, "WorkspaceCleanupThread.java": {"METHODS": ["'public WorkspaceCleanupThread() {' - line 51", "'@Override public long getRecurrencePeriod() {' - line 55", "'public static void invoke() {' - line 59", "'@Override protected void execute(TaskListener listener) throws InterruptedException, IOException {' - line 63", "'private boolean shouldBeDeleted(@NonNull TopLevelItem item, FilePath dir, @NonNull Node n) throws IOException, InterruptedException {' - line 102"]}, "BallColor.java": {"METHODS": ["'public String getIconName() {' - line 94", "'public String getIconClassName() {' - line 102", "'public String getImage() {' - line 109", "'public String getImageOf(String size) {' - line 114", "'public String getDescription() {' - line 122", "'public Color getBaseColor() {' - line 129", "'public String getHtmlBaseColor() {' - line 136", "'public String toString() {' - line 144", "'return name().toLowerCase(Locale.ENGLISH);' - line 145", "'public BallColor anime() {' - line 151", "'else               return valueOf(name() + \"_ANIME\");' - line 153", "'public BallColor noAnime() {' - line 159", "'if (isAnimated())   return valueOf(name().substring(0, name().length() - \"_ANIME\".length()));' - line 160", "'public boolean isAnimated() {' - line 167", "'return name().endsWith(\"_ANIME\");' - line 168"]}, "BooleanParameterValue.java": {"METHODS": ["'public BooleanParameterValue(String name, boolean value) {' - line 40", "'public BooleanParameterValue(String name, boolean value, String description) {' - line 44", "'public Boolean getValue() {' - line 50", "'public void buildEnvironment(Run<?, ?> build, EnvVars env) {' - line 58", "'public VariableResolver<String> createVariableResolver(AbstractBuild<?, ?> build) {' - line 64", "'public boolean equals(Object o) {' - line 69", "'public int hashCode() {' - line 80", "'public String toString() {' - line 87", "'@Override public String getShortDescription() {' - line 91"]}, "Api.java": {"METHODS": ["'public Api(Object bean) {' - line 81", "'public String getDisplayName() {' - line 86", "'public String getSearchUrl() {' - line 91", "'new XMLWriter(o).write(result);' - line 204", "'private boolean isSimpleOutput(Object result) {' - line 208", "'public void doSchema(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 215", "'new SchemaGenerator(new ModelBuilder().get(bean.getClass())).generateSchema(r);' - line 219", "'public void doJson(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 226", "'public void doPython(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 238", "'private boolean permit(StaplerRequest req) {' - line 243", "'protected void setHeaders(StaplerResponse rsp) {' - line 253"]}, "ItemGroup.java": {"METHODS": ["'String getFullName();' - line 49", "'String getFullDisplayName();' - line 54", "'Collection<T> getItems();' - line 59", "'return getItemsStream(pred)' - line 67", "'return getItems().stream();' - line 76", "'return getItemsStream().filter(pred);' - line 85", "'String getUrl();' - line 92", "'String getUrlChildPrefix();' - line 98", "'File getRootDirFor(T child);' - line 111", "'void onDeleted(T item) throws IOException;' - line 122", "'return getAllItems(Item.class);' - line 164", "'return allItems(Item.class);' - line 172"]}, "MyViewsProperty.java": {"METHODS": ["'public MyViewsProperty(@CheckForNull String primaryViewName) {' - line 78", "'private MyViewsProperty() {' - line 83", "'public Object readResolve() {' - line 88", "'protected List<View> views() { return views; }' - line 104", "'protected String primaryView() { return primaryViewName; }' - line 107", "'protected void primaryView(String name) { primaryViewName = name; }' - line 110", "'public String getPrimaryViewName() {' - line 117", "'public void setPrimaryViewName(@CheckForNull String primaryViewName) {' - line 126", "'public User getUser() {' - line 130", "'public String getUrl() {' - line 136", "'public void save() throws IOException {' - line 141", "'public Collection<View> getViews() {' - line 148", "'public View getView(String name) {' - line 153", "'public boolean canDelete(View view) {' - line 158", "'public void deleteView(View view) throws IOException {' - line 163", "'public void onViewRenamed(View view, String oldName, String newName) {' - line 168", "'public void addView(View view) throws IOException {' - line 173", "'public View getPrimaryView() {' - line 178", "'public HttpResponse doIndex() {' - line 182", "'public FormValidation doViewExistsCheck(@QueryParameter String value, @QueryParameter boolean exists) {' - line 198", "'return getView(view) != null ?' - line 204", "'return getView(view) == null ?' - line 208", "'public ACL getACL() {' - line 215", "'public String getDisplayName() {' - line 221", "'public String getIconFileName() {' - line 226", "'public String getUrlName() {' - line 231", "'public String getDisplayName() {' - line 240", "'public UserProperty newInstance(User user) {' - line 245", "'public UserProperty reconfigure(StaplerRequest req, JSONObject form) throws FormException {' - line 251", "'public ViewsTabBar getViewsTabBar() {' - line 257", "'public List<Action> getViewActions() {' - line 262", "'public Object getStaplerFallback() {' - line 268", "'return getPrimaryView();' - line 269", "'public MyViewsTabBar getMyViewsTabBar() {' - line 272", "'public String getDisplayName() {' - line 280", "'public String getIconFileName() {' - line 285", "'public String getUrlName() {' - line 295"]}, "BuildTimelineWidget.java": {"METHODS": ["'public BuildTimelineWidget(RunList<?> builds) {' - line 47", "'public TimelineEventList doData(StaplerRequest req, @QueryParameter long min, @QueryParameter long max) throws IOException {' - line 61"]}, "SimpleParameterDefinition.java": {"METHODS": ["'protected SimpleParameterDefinition(@NonNull String name) {' - line 15", "'protected SimpleParameterDefinition(@NonNull String name, @CheckForNull String description) {' - line 23", "'return getDefaultParameterValue();' - line 36", "'return createValue(value[0]);' - line 40", "'return createValue(value);' - line 46"]}, "DescriptorByNameOwner.java": {"METHODS": []}, "StringParameterDefinition.java": {"METHODS": ["'public StringParameterDefinition(@NonNull String name) {' - line 52", "'public StringParameterDefinition(@NonNull String name, @CheckForNull String defaultValue, @CheckForNull String description, boolean trim) {' - line 56", "'public StringParameterDefinition(@NonNull String name, @CheckForNull String defaultValue, @CheckForNull String description) {' - line 63", "'public StringParameterDefinition(@NonNull String name, @CheckForNull String defaultValue) {' - line 69", "'public ParameterDefinition copyWithDefaultValue(ParameterValue defaultValue) {' - line 75", "'public String getDefaultValue() {' - line 85", "'public String getDefaultValue4Build() {' - line 94", "'public void setDefaultValue(@CheckForNull String defaultValue) {' - line 102", "'public boolean isTrim() {' - line 113", "'public void setTrim(boolean trim) {' - line 121", "'public StringParameterValue getDefaultParameterValue() {' - line 126", "'public String getDisplayName() {' - line 138", "'public String getHelpFile() {' - line 143", "'public ParameterValue createValue(StaplerRequest req, JSONObject jo) {' - line 149", "'public ParameterValue createValue(String str) {' - line 159", "'public int hashCode() {' - line 168", "'public boolean equals(Object obj) {' - line 177"]}, "UserProperty.java": {"METHODS": ["'protected void setUser(User u) {' - line 60", "'public UserPropertyDescriptor getDescriptor() {' - line 66", "'public UserProperty reconfigure(StaplerRequest req, JSONObject form) throws FormException {' - line 78"]}, "RestartListener.java": {"METHODS": ["'public void onRestart() {}' - line 26", "'public static ExtensionList<RestartListener> all() {' - line 31", "'public static boolean isAllReady() throws IOException, InterruptedException {' - line 38", "'public boolean isReadyToRestart() throws IOException, InterruptedException {' - line 53", "'private static boolean blocksRestart(Executor e) {' - line 66"]}, "AbstractStatusIcon.java": {"METHODS": []}, "Label.java": {"METHODS": ["'protected Label(@NonNull String name) {' - line 102", "'public int computeIdleExecutors() {' - line 107", "'public int computeTotalExecutors() {' - line 112", "'public int computeQueueLength() {' - line 117", "'protected Set<Node> getNodes() {' - line 122", "'protected boolean matches(Queue.Item item, SubTask subTask) {' - line 127", "'return getDisplayName();' - line 141", "'public String getDisplayName() {' - line 149", "'public String getUrl() {' - line 161", "'public String getSearchUrl() {' - line 166", "'return getUrl();' - line 167", "'public boolean isAtom() { return false; }' - line 175", "'return matches(new VariableResolver<>() {' - line 188", "'public Boolean resolve(String name) {' - line 190", "'return matches(n.getAssignedLabels());' - line 200", "'public boolean isSelfLabel() {' - line 207", "'public int compare(Node o1, Node o2) {' - line 216", "'public Set<Node> getNodes() {' - line 228", "'public Set<Node> getSortedNodes() {' - line 244", "'public Set<Cloud> getClouds() {' - line 254", "'public boolean isAssignable() {' - line 275", "'public int getTotalConfiguredExecutors() {' - line 292", "'public int getTotalExecutors() {' - line 305", "'public int getBusyExecutors() {' - line 319", "'public int getIdleExecutors() {' - line 333", "'public boolean isOffline() {' - line 347", "'public String getDescription() {' - line 360", "'private String toString(Collection<? extends ModelObject> model) {' - line 376", "'public List<AbstractProject> getTiedJobs() {' - line 395", "'public int getTiedJobCount() {' - line 411", "'public boolean contains(Node node) {' - line 425", "'return getNodes().contains(node);' - line 426", "'public boolean isEmpty() {' - line 433", "'return getNodes().isEmpty() && getClouds().isEmpty();' - line 434", "'public Api getApi() {' - line 446", "'public Set<LabelAtom> listAtoms() {' - line 460", "'public Label and(Label rhs) {' - line 469", "'public Label or(Label rhs) {' - line 476", "'public Label iff(Label rhs) {' - line 483", "'public Label implies(Label rhs) {' - line 490", "'public Label not() {' - line 497", "'public Label paren() {' - line 506", "'return matches(((Label) that).name);' - line 521", "'private boolean matches(String name) {' - line 540", "'public String toString() {' - line 545", "'public ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {' - line 550", "'public ConverterImpl() {' - line 559", "'public boolean canConvert(Class type) {' - line 563", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 568", "'public Object unmarshal(HierarchicalStreamReader reader, final UnmarshallingContext context) {' - line 574", "'public static Set<LabelAtom> parse(@CheckForNull String labels) {' - line 590", "'public static Label get(String l) {' - line 605", "'public static Label parseExpression(@NonNull String labelExpression) {' - line 617", "'public Void onAtom(LabelAtom a, Set<LabelAtom> param) {' - line 632", "'public Void onParen(Paren p, Set<LabelAtom> param) {' - line 638", "'public Void onNot(Not p, Set<LabelAtom> param) {' - line 643", "'public Void onAnd(And p, Set<LabelAtom> param) {' - line 648", "'return onBinary(p, param);' - line 649", "'public Void onOr(Or p, Set<LabelAtom> param) {' - line 653", "'return onBinary(p, param);' - line 654", "'public Void onIff(Iff p, Set<LabelAtom> param) {' - line 658", "'return onBinary(p, param);' - line 659", "'public Void onImplies(Implies p, Set<LabelAtom> param) {' - line 663", "'return onBinary(p, param);' - line 664", "'private Void onBinary(Binary b, Set<LabelAtom> param) {' - line 667"]}, "JDK.java": {"METHODS": ["'public static boolean isDefaultName(String name) {' - line 69", "'public JDK(String name, String javaHome) {' - line 83", "'public JDK(String name, String home, List<? extends ToolProperty<?>> properties) {' - line 88", "'public String getJavaHome() {' - line 99", "'return getHome();' - line 100", "'public File getBinDir() {' - line 106", "'private File getExecutable() {' - line 113", "'public boolean getExists() {' - line 121", "'return getExecutable().exists();' - line 122", "'public void buildEnvVars(Map<String, String> env) {' - line 129", "'public void buildEnvVars(EnvVars env) {' - line 143", "'public JDK forNode(Node node, TaskListener log) throws IOException, InterruptedException {' - line 148", "'public JDK forEnvironment(EnvVars environment) {' - line 153", "'public static boolean isDefaultJDKValid(Node n) {' - line 164", "'public String getDisplayName() {' - line 179", "'public JDK[] getInstallations() {' - line 184", "'public void setInstallations(JDK... jdks) {' - line 189", "'@Override protected FormValidation checkHomeDirectory(File value) {' - line 211", "'public ConverterImpl(XStream2 xstream) { super(xstream); }' - line 227", "'@Override protected String oldHomeField(ToolInstallation obj) {' - line 229"]}, "UserIdMapper.java": {"METHODS": ["'static UserIdMapper getInstance() {' - line 64", "'public UserIdMapper() {' - line 68", "'public File init() throws IOException {' - line 72", "'File putIfAbsent(String userId, boolean saveToDisk) throws IOException {' - line 83", "'boolean isMapped(String userId) {' - line 103", "'Set<String> getConvertedUserIds() {' - line 107", "'void remove(String userId) throws IOException {' - line 111", "'void clear() {' - line 116", "'void reload() throws IOException {' - line 120", "'protected IdStrategy getIdStrategy() {' - line 125", "'protected File getUsersDirectory() {' - line 129", "'private XmlFile getXmlConfigFile() {' - line 133", "'static File getConfigFile(File usersDirectory) {' - line 138", "'private File createDirectoryForNewUser(String userId) throws IOException {' - line 142", "'private String generatePrefix(String userId) {' - line 152", "'private File createUsersDirectoryAsNeeded() throws IOException {' - line 157", "'private void load() throws IOException {' - line 179"]}, "PasswordParameterDefinition.java": {"METHODS": ["'public PasswordParameterDefinition(@NonNull String name, @CheckForNull String defaultValue, @CheckForNull String description) {' - line 54", "'public PasswordParameterDefinition(@NonNull String name, @CheckForNull Secret defaultValueAsSecret, @CheckForNull String description) {' - line 61", "'public ParameterDefinition copyWithDefaultValue(ParameterValue defaultValue) {' - line 67", "'public ParameterValue createValue(String value) {' - line 77", "'public PasswordParameterValue createValue(StaplerRequest req, JSONObject jo) {' - line 82", "'public ParameterValue getDefaultParameterValue() {' - line 92", "'public String getDefaultValue() {' - line 97", "'public Secret getDefaultValueAsSecret() {' - line 102", "'public void setDefaultValue(String defaultValue) {' - line 107", "'public int hashCode() {' - line 112", "'public boolean equals(Object obj) {' - line 121", "'public String getDisplayName() {' - line 142"]}, "BuildAuthorizationToken.java": {"METHODS": ["'public BuildAuthorizationToken(String token) {' - line 50", "'public static BuildAuthorizationToken create(StaplerRequest req) {' - line 54", "'@Deprecated public static void checkPermission(AbstractProject<?, ?> project, BuildAuthorizationToken token, StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 64", "'public static void checkPermission(Job<?, ?> project, BuildAuthorizationToken token, StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 68", "'public String getToken() {' - line 93", "'public boolean canConvert(Class type) {' - line 99", "'public Object fromString(String str) {' - line 104", "'public String toString(Object obj) {' - line 109"]}, "TaskListener.java": {"METHODS": ["'PrintStream getLogger();' - line 71", "'private PrintWriter _error(String prefix, String msg) {' - line 84", "'return _error(\"ERROR: \", msg);' - line 122", "'return error(String.format(format, args));' - line 130", "'return _error(\"FATAL: \", msg);' - line 141", "'return fatalError(String.format(format, args));' - line 149"]}, "TransientBuildActionFactory.java": {"METHODS": ["'return createFor((AbstractBuild) target);' - line 29", "'public static ExtensionList<TransientBuildActionFactory> all() {' - line 46"]}, "ParametersDefinitionProperty.java": {"METHODS": ["'public ParametersDefinitionProperty(@NonNull List<ParameterDefinition> parameterDefinitions) {' - line 77", "'public ParametersDefinitionProperty(@NonNull ParameterDefinition... parameterDefinitions) {' - line 81", "'private Object readResolve() {' - line 85", "'public List<ParameterDefinition> getParameterDefinitions() {' - line 100", "'public List<String> getParameterDefinitionNames() {' - line 107", "'public Collection<Action> getJobActions(Job<?, ?> job) {' - line 113", "'public Collection<Action> getJobActions(AbstractProject<?, ?> job) {' - line 118", "'return getJobActions((Job) job);' - line 119", "'public void _doBuild(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 129", "'public void _doBuild(StaplerRequest req, StaplerResponse rsp, @QueryParameter TimeDuration delay) throws IOException, ServletException {' - line 139", "'public void buildWithParameters(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 181", "'public void buildWithParameters(StaplerRequest req, StaplerResponse rsp, @CheckForNull TimeDuration delay) throws IOException, ServletException {' - line 185", "'public ParameterDefinition getParameterDefinition(String name) {' - line 215", "'public ParametersDefinitionProperty newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 226", "'public boolean isApplicable(Class<? extends Job> jobType) {' - line 235", "'public String getDisplayName() {' - line 241", "'public String getDisplayName() {' - line 247", "'public String getIconFileName() {' - line 252", "'public String getUrlName() {' - line 257", "'public String get(int index) {' - line 269", "'public int size() {' - line 274"]}, "Node.java": {"METHODS": ["'public String getDisplayName() {' - line 112", "'return getNodeName(); // default implementation' - line 113", "'public String getSearchUrl() {' - line 117", "'public boolean isHoldOffLaunchUntilSave() {' - line 125", "'public void save() throws IOException {' - line 133", "'public boolean isAcceptingTasks() {' - line 245", "'public void onOnline(Computer c, TaskListener listener) {' - line 255", "'void setTemporaryOfflineCause(OfflineCause cause) {' - line 273", "'public OfflineCause getTemporaryOfflineCause() {' - line 290", "'public TagCloud<LabelAtom> getLabelCloud() {' - line 297", "'public Set<LabelAtom> getAssignedLabels() {' - line 312", "'private HashSet<LabelAtom> getDynamicLabels() {' - line 324", "'public void setLabelString(String labelString) throws IOException {' - line 353", "'public LabelAtom getSelfLabel() {' - line 362", "'public CauseOfBlockage canTake(Task task) {' - line 379", "'public CauseOfBlockage canTake(Queue.BuildableItem item) {' - line 393", "'public FileSystemProvisioner getFileSystemProvisioner() {' - line 474", "'public NodeProperty getNodeProperty(String className)' - line 514", "'public List<NodePropertyDescriptor> getNodePropertyDescriptors() {' - line 525", "'public ACL getACL() {' - line 531", "'public Node reconfigure(@NonNull final StaplerRequest req, JSONObject form) throws FormException {' - line 536", "'public Object onConvert(Type targetType, Class targetTypeErasure, Object jsonSource) {' - line 543", "'return getDescriptor().newInstance(req, form);' - line 559", "'public ClockDifference getClockDifference() throws IOException, InterruptedException {' - line 576", "'public String getDescription() {' - line 602", "'public String getName() {' - line 606", "'return name();' - line 607"]}, "PaneStatusProperties.java": {"METHODS": ["'public boolean isCollapsed(String paneId) {' - line 17", "'public boolean toggleCollapsed(String paneId) {' - line 25", "'public void save() throws IOException {' - line 36", "'private Object readResolve() {' - line 40", "'public UserProperty newInstance(User user) {' - line 49", "'public boolean isEnabled() {' - line 54", "'public boolean isCollapsed(String paneId) {' - line 65", "'public boolean toggleCollapsed(String paneId) {' - line 71", "'public static PaneStatusProperties forCurrentUser() {' - line 84"]}, "ManagementLink.java": {"METHODS": ["'public String getDescription() {' - line 78", "'public boolean getRequiresConfirmation() {' - line 99", "'public boolean getRequiresPOST() {' - line 135"]}, "NoFingerprintMatch.java": {"METHODS": ["'public NoFingerprintMatch(String md5sum) {' - line 32", "'public String getDisplayName() {' - line 37"]}, "BuildStepListener.java": {"METHODS": ["'public static ExtensionList<BuildStepListener> all() {' - line 26"]}, "PasswordParameterValue.java": {"METHODS": ["'public PasswordParameterValue(String name, String value) {' - line 42", "'public PasswordParameterValue(String name, String value, String description) {' - line 47", "'public PasswordParameterValue(String name, Secret value, String description) {' - line 53", "'public void buildEnvironment(Run<?, ?> build, EnvVars env) {' - line 59", "'public VariableResolver<String> createVariableResolver(AbstractBuild<?, ?> build) {' - line 66", "'public boolean isSensitive() {' - line 71", "'public Secret getValue() {' - line 77", "'@Override public String getShortDescription() {' - line 81"]}, "DisplayNameListener.java": {"METHODS": ["'public void onCopied(Item src, Item item) {' - line 50", "'public void onRenamed(Item item, String oldName, String newName) {' - line 71"]}, "PageDecorator.java": {"METHODS": ["'protected PageDecorator(Class<? extends PageDecorator> yourClass) {' - line 77", "'protected PageDecorator() {' - line 81", "'public static ExtensionList<PageDecorator> all() {' - line 113"]}, "ModelObject.java": {"METHODS": ["'String getDisplayName();' - line 39"]}, "ResourceList.java": {"METHODS": ["'public static ResourceList union(ResourceList... lists) {' - line 68", "'return union(Arrays.asList(lists));' - line 69", "'public static ResourceList union(Collection<ResourceList> lists) {' - line 75", "'public ResourceList r(Resource r) {' - line 95", "'public ResourceList w(Resource r) {' - line 103", "'public boolean isCollidingWith(ResourceList that) {' - line 113", "'return getConflict(that) != null;' - line 114", "'public Resource getConflict(ResourceList that) {' - line 120", "'return _getConflict(that, this);' - line 123", "'private Resource _getConflict(ResourceList lhs, ResourceList rhs) {' - line 126", "'public String toString() {' - line 144", "'private static int unbox(Integer x) {' - line 156"]}, "FileParameterDefinition.java": {"METHODS": ["'public FileParameterDefinition(@NonNull String name) {' - line 57", "'public FileParameterDefinition(@NonNull String name, @CheckForNull String description) {' - line 61", "'public FileParameterValue createValue(StaplerRequest req, JSONObject jo) {' - line 67", "'public String getDisplayName() {' - line 78", "'public String getHelpFile() {' - line 83", "'public ParameterValue createValue(StaplerRequest req) {' - line 89", "'private String getFileName(String possiblyPathName) {' - line 111", "'public ParameterValue createValue(CLICommand command, String value) throws IOException, InterruptedException {' - line 119", "'public int hashCode() {' - line 138", "'public boolean equals(Object obj) {' - line 147"]}, "Cause.java": {"METHODS": ["'public void onAddedTo(@NonNull Run build) {' - line 80", "'public void onAddedTo(AbstractBuild build) {' - line 87", "'public void onLoad(@NonNull Run<?, ?> build) {' - line 99", "'void onLoad(@NonNull Job<?, ?> job, int buildNumber) {' - line 105", "'public void onLoad(AbstractBuild<?, ?> build) {' - line 113", "'public void print(TaskListener listener) {' - line 123", "'public LegacyCodeCause() {' - line 136", "'public String getShortDescription() {' - line 141", "'public UpstreamCause(AbstractBuild<?, ?> up) {' - line 173", "'public UpstreamCause(Run<?, ?> up) {' - line 177", "'private UpstreamCause(String upstreamProject, int upstreamBuild, String upstreamUrl, @NonNull List<Cause> upstreamCauses) {' - line 188", "'public void onLoad(@NonNull Job<?, ?> _job, int _buildNumber) {' - line 196", "'public boolean equals(Object rhs) {' - line 213", "'public int hashCode() {' - line 231", "'public boolean pointsTo(Job<?, ?> j) {' - line 256", "'public boolean pointsTo(Run<?, ?> r) {' - line 263", "'public String getUpstreamProject() {' - line 268", "'public int getUpstreamBuild() {' - line 273", "'public String getUpstreamUrl() {' - line 286", "'public List<Cause> getUpstreamCauses() {' - line 290", "'public String getShortDescription() {' - line 295", "'public void print(TaskListener listener) {' - line 300", "'private void indent(TaskListener listener, int depth) {' - line 304", "'private void print(TaskListener listener, int depth) {' - line 310", "'@Override public String toString() {' - line 331", "'public ConverterImpl(XStream2 xstream) { super(xstream); }' - line 336", "'@Override protected void callback(UpstreamCause uc, UnmarshallingContext context) {' - line 338", "'@Override public String getShortDescription() {' - line 348", "'@Override public String toString() {' - line 352", "'@Override public void onLoad(@NonNull Job<?, ?> _job, int _buildNumber) {}' - line 356", "'public UserCause() {' - line 371", "'public String getUserName() {' - line 381", "'public String getShortDescription() {' - line 387", "'public boolean equals(Object o) {' - line 392", "'public int hashCode() {' - line 398", "'public UserIdCause() {' - line 416", "'public UserIdCause(@CheckForNull String userId) {' - line 426", "'public String getUserId() {' - line 432", "'private String getUserIdOrUnknown() {' - line 437", "'public String getUserName() {' - line 442", "'public String getUserUrl() {' - line 449", "'public String getShortDescription() {' - line 455", "'public void print(TaskListener listener) {' - line 460", "'public boolean equals(Object o) {' - line 472", "'public int hashCode() {' - line 477", "'public RemoteCause(String host, String note) {' - line 486", "'public String getShortDescription() {' - line 492", "'public String getAddr() {' - line 500", "'public String getNote() {' - line 505", "'public boolean equals(Object o) {' - line 510", "'public int hashCode() {' - line 515"]}, "Saveable.java": {"METHODS": ["'void save() throws IOException;' - line 49"]}, "ViewGroupMixIn.java": {"METHODS": ["'protected ViewGroupMixIn(ViewGroup owner) {' - line 83", "'public void addView(@NonNull View v) throws IOException {' - line 87", "'public boolean canDelete(@NonNull View view) {' - line 93", "'public View getView(@CheckForNull String name) {' - line 111", "'public Collection<View> getViews() {' - line 153", "'public View getPrimaryView() {' - line 170", "'public void onViewRenamed(View view, String oldName, String newName) {' - line 177"]}, "DirectlyModifiableView.java": {"METHODS": ["'boolean remove(@NonNull TopLevelItem item) throws IOException, IllegalArgumentException;' - line 49", "'void add(@NonNull TopLevelItem item) throws IOException, IllegalArgumentException;' - line 57", "'HttpResponse doAddJobToView(@QueryParameter String name) throws IOException, ServletException;' - line 66", "'HttpResponse doRemoveJobFromView(@QueryParameter String name) throws IOException, ServletException;' - line 75"]}, "InvisibleAction.java": {"METHODS": ["'public String getUrlName() {' - line 52"]}, "ProxyView.java": {"METHODS": ["'public ProxyView(String name) {' - line 57", "'public View getProxiedView() {' - line 67", "'public String getProxiedViewName() {' - line 76", "'public void setProxiedViewName(String proxiedViewName) {' - line 80", "'public Collection<TopLevelItem> getItems() {' - line 85", "'return getProxiedView().getItems();' - line 86", "'public boolean contains(TopLevelItem item) {' - line 90", "'return getProxiedView().contains(item);' - line 91", "'public TopLevelItem getItem(String name) {' - line 95", "'return getProxiedView().getItem(name);' - line 96", "'protected void submit(StaplerRequest req) throws IOException, ServletException, FormException {' - line 100", "'public Item doCreateItem(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 110", "'return getProxiedView().doCreateItem(req, rsp);' - line 111", "'public FormValidation doViewExistsCheck(@QueryParameter String value) {' - line 117", "'public String getDisplayName() {' - line 134", "'public boolean isInstantiable() {' - line 139", "'public Object getStaplerFallback() {' - line 147", "'return getProxiedView();' - line 148"]}, "UserProperties.java": {"METHODS": []}, "View.java": {"METHODS": ["'protected View(String name) {' - line 183", "'protected View(String name, ViewGroup owner) {' - line 187", "'public Collection<TopLevelItem> getAllItems() {' - line 207", "'return getItems();' - line 217", "'public TopLevelItem getItem(String name) {' - line 224", "'return getOwner().getItemGroup().getItem(name);' - line 225", "'return getItem(name);' - line 232", "'public String getViewName() {' - line 247", "'public void rename(String newName) throws Failure, FormException {' - line 254", "'public ViewGroup getOwner() {' - line 267", "'public View getOwnerPrimaryView() {' - line 279", "'public List<Action> getOwnerViewActions() {' - line 285", "'public List<ViewPropertyDescriptor> getApplicablePropertyDescriptors() {' - line 327", "'public List<ViewPropertyDescriptor> getVisiblePropertyDescriptors() {' - line 341", "'public void save() throws IOException {' - line 346", "'public List<ViewProperty> getAllProperties() {' - line 359", "'return getProperties().toList();' - line 360", "'public ViewDescriptor getDescriptor() {' - line 364", "'public String getDisplayName() {' - line 369", "'return getViewName();' - line 370", "'public String getNewPronoun() {' - line 373", "'public boolean isEditable() {' - line 384", "'public boolean isAutomaticRefreshEnabled() {' - line 396", "'public boolean isFilterExecutors() {' - line 403", "'public boolean isFilterQueue() {' - line 410", "'public Indenter getIndenter() {' - line 425", "'public boolean isDefault() {' - line 432", "'return getOwner().getPrimaryView() == this;' - line 433", "'public List<Computer> getComputers() {' - line 436", "'private boolean isRelevant(Collection<Label> labels, Computer computer) {' - line 459", "'private boolean filterQueueItemTest(Queue.Item item, Collection<TopLevelItem> viewItems) {' - line 481", "'return filterQueue(Arrays.asList(Jenkins.get().getQueue().getItems()));' - line 514", "'return filterQueue(Jenkins.get().getQueue().getApproximateItemsQuickly());' - line 523", "'public String getUrl() {' - line 532", "'return isDefault() ? (owner != null ? owner.getUrl() : \"\") : getViewUrl();' - line 533", "'public String getViewUrl() {' - line 540", "'@Override public String toString() {' - line 544", "'public String getSearchUrl() {' - line 549", "'return getUrl();' - line 550", "'public List<Action> getActions() {' - line 562", "'public void updateTransientActions() {}' - line 575", "'public Object getDynamic(String token) {' - line 577", "'public String getAbsoluteUrl() {' - line 591", "'public Api getApi() {' - line 595", "'public String getPostConstructLandingPage() {' - line 605", "'public ACL getACL() {' - line 614", "'public void onJobRenamed(Item item, String oldName, String newName) {}' - line 620", "'public User getUser() {' - line 644", "'public Calendar getLastChange() {' - line 649", "'public AbstractProject getProject() {' - line 654", "'public String getLastChangeTimeString() {' - line 666", "'public String getTimeSortKey() {' - line 672", "'public int compareTo(UserInfo that) {' - line 678", "'private long ordinal() {' - line 684", "'public boolean hasPeople() {' - line 695", "'public People getPeople() {' - line 702", "'public AsynchPeople getAsynchPeople() {' - line 709", "'public People(Jenkins parent) {' - line 721", "'public People(View parent) {' - line 734", "'else if (info.getLastChange().before(r.getTimestamp())) {' - line 755", "'private List<UserInfo> toList(Map<User, UserInfo> users) {' - line 768", "'public Api getApi() {' - line 774", "'public static boolean isApplicable(Collection<? extends Item> items) {' - line 782", "'public AsynchPeople(Jenkins parent) {' - line 819", "'public AsynchPeople(View parent) {' - line 826", "'@Override protected void compute() throws Exception {' - line 837", "'public Api getApi() {' - line 927", "'void addDisplayNamesToSearchIndex(SearchIndexBuilder sib, Collection<TopLevelItem> items) {' - line 948", "'protected void makeSearchIndex(SearchIndexBuilder sib) {' - line 965", "'protected TopLevelItem get(String key) { return getItem(key); }' - line 968", "'protected Collection<TopLevelItem> all() { return getItems(); }' - line 971", "'protected String getName(TopLevelItem o) {' - line 974", "'public SearchIndexBuilder makeSearchIndex() {' - line 982", "'public FormValidation doCheckJobName(@QueryParameter String value) {' - line 1065", "'public Categories doItemCategories(StaplerRequest req, StaplerResponse rsp, @QueryParameter String iconStyle) throws IOException, ServletException {' - line 1097", "'public void doRssAll(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1147", "'public void doRssFailed(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1151", "'public RunList getBuilds() {' - line 1155", "'public BuildTimelineWidget getTimeline() {' - line 1159", "'public void doRssLatest(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 1163", "'public HttpResponse doConfigDotXml(StaplerRequest req) throws IOException {' - line 1179", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 1185", "'public void writeXml(OutputStream out) throws IOException {' - line 1204", "'public void updateByXml(Source source) throws IOException {' - line 1217", "'public static List<ViewDescriptor> allInstantiable() {' - line 1283", "'public static void registerPermissions() {' - line 1316", "'public static Permission getItemCreatePermission() {' - line 1327", "'public static View create(StaplerRequest req, StaplerResponse rsp, ViewGroup owner)' - line 1331", "'private static View copy(StaplerRequest req, ViewGroup owner, String name) throws IOException {' - line 1383", "'public static View createViewFromXML(String name, InputStream xml) throws IOException {' - line 1404", "'private PropertyList(View owner) {' - line 1417", "'public PropertyList() {// needed for XStream deserialization' - line 1421", "'public View getOwner() {' - line 1424", "'protected void onModified() throws IOException {' - line 1429"]}, "ComputerPanelBox.java": {"METHODS": ["'public void setComputer(Computer computer) {' - line 22", "'public Computer getComputer() {' - line 26", "'public static List<ComputerPanelBox> all(Computer computer) {' - line 38"]}, "UpdateSite.java": {"METHODS": ["'public UpdateSite(String id, String url) {' - line 153", "'public String getId() {' - line 162", "'public long getDataTimestamp() {' - line 167", "'return updateDirectly(DownloadService.signatureCheck);' - line 180", "'@Override public FormValidation call() throws Exception {' - line 196", "'return updateDirectlyNow(signatureCheck);' - line 197", "'return updateDirectlyNow(DownloadService.signatureCheck);' - line 212", "'return updateData(DownloadService.loadJSON(new URL(getUrl() + \"?id=\" + URLEncoder.encode(getId(), StandardCharsets.UTF_8) + \"&version=\" + URLEncoder.encode(Jenkins.VERSION, StandardCharsets.UTF_8))), signatureCheck);' - line 217", "'private FormValidation updateData(String json, boolean signatureCheck)' - line 220", "'public FormValidation doVerifySignature() throws IOException {' - line 251", "'return verifySignatureInternal(getJSONObject());' - line 252", "'return getJsonSignatureValidator().verifySignature(o);' - line 274", "'protected JSONSignatureValidator getJsonSignatureValidator() {' - line 284", "'return getJsonSignatureValidator(null);' - line 285", "'protected JSONSignatureValidator getJsonSignatureValidator(@CheckForNull String name) {' - line 297", "'public HttpResponse doInvalidateData() {' - line 329", "'public Data getData() {' - line 342", "'boolean hasUnparsedData() {' - line 356", "'public JSONObject getJSONObject() {' - line 363", "'public List<Plugin> getAvailables() {' - line 390", "'public Plugin getPlugin(String artifactId) {' - line 418", "'public Api getApi() {' - line 424", "'public String getConnectionCheckUrl() {' - line 434", "'private TextFile getDataFile() {' - line 443", "'public List<Plugin> getUpdates() {' - line 455", "'public boolean hasUpdates() {' - line 472", "'public String getUrl() {' - line 491", "'public String getMetadataUrlForDownloadable(String downloadable) {' - line 504", "'public String getDownloadUrl() {' - line 524", "'public boolean isLegacyDefault() {' - line 536", "'public Set<Warning> getWarnings() {' - line 646", "'public boolean hasCoreUpdates() {' - line 663", "'public boolean canUpgrade() {' - line 670", "'public Entry(String sourceId, JSONObject o) {' - line 714", "'public String getSha1() {' - line 751", "'public String getSha256() {' - line 760", "'public String getSha512() {' - line 769", "'public boolean isNewerThan(String currentVersion) {' - line 782", "'public Api getApi() {' - line 791", "'public Long getFileSize() {' - line 803", "'public WarningVersionRange(JSONObject o) {' - line 844", "'public boolean includes(VersionNumber number) {' - line 858", "'public Deprecation(String url) {' - line 877", "'public boolean equals(Object o) {' - line 882", "'public int hashCode() {' - line 890", "'public Warning(JSONObject o) {' - line 970", "'public boolean equals(Object o) {' - line 1001", "'public int hashCode() {' - line 1011", "'public boolean isPluginWarning(@NonNull String pluginName) {' - line 1015", "'public boolean isRelevant() {' - line 1023", "'return isRelevantToVersion(current);' - line 1027", "'public Boolean isFixable() {' - line 1055", "'public boolean isRelevantToVersion(@NonNull VersionNumber version) {' - line 1082", "'private static String get(JSONObject o, String prop) {' - line 1097", "'public IssueTracker(@NonNull String type, @NonNull String viewUrl, @CheckForNull String reportUrl) {' - line 1126", "'private static IssueTracker createFromJSONObject(Object o) {' - line 1132", "'public Plugin(String sourceId, JSONObject o) {' - line 1223", "'public boolean isDeprecated() {' - line 1275", "'return getDeprecation() != null;' - line 1276", "'public String getDisplayName() {' - line 1284", "'public PluginWrapper getInstalled() {' - line 1298", "'public boolean isCompatible() {' - line 1311", "'return isCompatible(new PluginManager.MetadataCache());' - line 1312", "'public boolean isCompatible(PluginManager.MetadataCache cache) {' - line 1316", "'return isCompatibleWithInstalledVersion() && !isForNewerHudson() &&' - line 1317", "'public boolean isCompatibleWithInstalledVersion() {' - line 1330", "'public List<Plugin> getNeededDependencies() {' - line 1347", "'else if (current.isOlderThan(requiredVersion)) {' - line 1366", "'else if (!current.isEnabled()) {' - line 1370", "'public boolean isForNewerHudson() {' - line 1394", "'new VersionNumber(Jenkins.VERSION.replaceFirst(\"SHOT *\\\\(private.*\\\\)\", \"SHOT\")));' - line 1397", "'public VersionNumber getNeededDependenciesRequiredCore() {' - line 1403", "'public boolean isNeededDependenciesForNewerJenkins() {' - line 1417", "'return isNeededDependenciesForNewerJenkins(new PluginManager.MetadataCache());' - line 1418", "'public boolean isNeededDependenciesForNewerJenkins(PluginManager.MetadataCache cache) {' - line 1422", "'public boolean isNeededDependenciesCompatibleWithInstalledVersion() {' - line 1441", "'return isNeededDependenciesCompatibleWithInstalledVersion(new PluginManager.MetadataCache());' - line 1442", "'public boolean isNeededDependenciesCompatibleWithInstalledVersion(PluginManager.MetadataCache cache) {' - line 1446", "'return getDependenciesIncompatibleWithInstalledVersion(cache).isEmpty();' - line 1447", "'public boolean fixesSecurityVulnerabilities() {' - line 1456", "'public List<Plugin> getDependenciesIncompatibleWithInstalledVersion(PluginManager.MetadataCache cache) {' - line 1483", "'public void setIncompatibleParentPlugins(Set<Plugin> incompatibleParentPlugins) {' - line 1495", "'public Set<Plugin> getIncompatibleParentPlugins() {' - line 1500", "'public boolean hasIncompatibleParentPlugins() {' - line 1505", "'public Set<Warning> getWarnings() {' - line 1514", "'public boolean hasCategory(String category) {' - line 1542", "'public Stream<String> getCategoriesStream() {' - line 1554", "'public boolean hasWarnings() {' - line 1562", "'return getWarnings().size() > 0;' - line 1563", "'public void install() {' - line 1571", "'public Future<UpdateCenterJob> deploy() {' - line 1575", "'return deploy(false);' - line 1576", "'public Future<UpdateCenterJob> deploy(boolean dynamicLoad) {' - line 1591", "'return deploy(dynamicLoad, null, null, false);' - line 1592", "'public Future<UpdateCenterJob> deploy(boolean dynamicLoad, @CheckForNull UUID correlationId, @CheckForNull List<PluginWrapper> batch, boolean hasEnabledDependents) {' - line 1613", "'public Future<UpdateCenterJob> deployBackup() {' - line 1650", "'public HttpResponse doInstall() throws IOException {' - line 1660", "'public HttpResponse doInstallNow() throws IOException {' - line 1666", "'public HttpResponse doDowngrade() throws IOException {' - line 1675"]}, "PermalinkProjectAction.java": {"METHODS": ["'List<Permalink> getPermalinks();' - line 59", "'public String getDisplayName() {' - line 99", "'public String getId() {' - line 104", "'public String getDisplayName() {' - line 115", "'public String getId() {' - line 120", "'public boolean apply(Run<?, ?> run) {' - line 125", "'public String getDisplayName() {' - line 131", "'public String getId() {' - line 136", "'public boolean apply(Run<?, ?> run) {' - line 142", "'public String getDisplayName() {' - line 148", "'public String getId() {' - line 153", "'public boolean apply(Run<?, ?> run) {' - line 158", "'public String getDisplayName() {' - line 165", "'public String getId() {' - line 170", "'public boolean apply(Run<?, ?> run) {' - line 175", "'public String getDisplayName() {' - line 182", "'public String getId() {' - line 187", "'public boolean apply(Run<?, ?> run) {' - line 192", "'public String getDisplayName() {' - line 198", "'public String getId() {' - line 203", "'public boolean apply(Run<?, ?> run) {' - line 208"]}, "AdministrativeMonitor.java": {"METHODS": ["'protected AdministrativeMonitor(String id) {' - line 101", "'protected AdministrativeMonitor() {' - line 105", "'public String getUrl() {' - line 112", "'public String getDisplayName() {' - line 117", "'return getUrl();' - line 123", "'public void disable(boolean value) throws IOException {' - line 129", "'public boolean isEnabled() {' - line 148", "'public boolean isSecurity() {' - line 169", "'public void doDisable(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 177", "'public Permission getRequiredPermission() {' - line 199", "'public Object getTarget() {' - line 208", "'public static ExtensionList<AdministrativeMonitor> all() {' - line 216"]}, "TransientProjectActionFactory.java": {"METHODS": ["'public static ExtensionList<TransientProjectActionFactory> all() {' - line 68"]}, "LoadStatistics.java": {"METHODS": ["'protected LoadStatistics(int initialOnlineExecutors, int initialBusyExecutors) {' - line 140", "'/*package*/ static boolean isModern(Class<? extends LoadStatistics> clazz) {' - line 159", "'public float getLatestIdleExecutors(TimeScale timeScale) {' - line 191", "'public JFreeChart createChart(CategoryDataset ds) {' - line 219", "'protected void configureRenderer(LineAndShapeRenderer renderer) {' - line 258", "'public TrendChart createTrendChart(TimeScale timeScale) {' - line 269", "'public TrendChart doGraph(@QueryParameter String type) throws IOException {' - line 276", "'return createTrendChart(TimeScale.parse(type));' - line 277", "'public Api getApi() {' - line 280", "'protected void updateExecutorCounts() {' - line 288", "'protected void updateCounts(LoadStatisticsSnapshot current) {' - line 297", "'public LoadStatisticsSnapshot computeSnapshot() {' - line 334", "'return computeSnapshot(Jenkins.get().getQueue().getBuildableItems());' - line 336", "'protected LoadStatisticsSnapshot computeSnapshot(Iterable<Queue.BuildableItem> queue) {' - line 351", "'public long getRecurrencePeriod() {' - line 390", "'protected void doRun() {' - line 395", "'private int count(List<Queue.BuildableItem> bis, Label l) {' - line 410", "'public int getDefinedExecutors() {' - line 481", "'public int getOnlineExecutors() {' - line 489", "'public int getConnectingExecutors() {' - line 497", "'public int getBusyExecutors() {' - line 505", "'public int getIdleExecutors() {' - line 514", "'public int getAvailableExecutors() {' - line 522", "'public int getQueueLength() {' - line 530", "'public boolean equals(Object o) {' - line 535", "'public int hashCode() {' - line 571", "'public String toString() {' - line 583", "'public LoadStatisticsSnapshot build() {' - line 609", "'public Builder withQueueLength(int queueLength) {' - line 617", "'public Builder with(@CheckForNull Node node) {' - line 622", "'return with(node.toComputer());' - line 624", "'public Builder with(@CheckForNull Computer computer) {' - line 629", "'public static Builder builder() {' - line 658"]}, "BuildVariableContributor.java": {"METHODS": ["'public static ExtensionList<BuildVariableContributor> all() {' - line 70"]}, "PersistenceRoot.java": {"METHODS": ["'File getRootDir();' - line 43"]}, "Describable.java": {"METHODS": ["'Descriptor<T> getDescriptor();' - line 41"]}, "UnprotectedRootAction.java": {"METHODS": []}, "JobPropertyDescriptor.java": {"METHODS": ["'protected JobPropertyDescriptor(Class<? extends JobProperty<?>> clazz) {' - line 44", "'protected JobPropertyDescriptor() {' - line 55", "'public boolean isApplicable(Class<? extends Job> jobType) {' - line 83", "'public static List<JobPropertyDescriptor> getPropertyDescriptors(Class<? extends Job> clazz) {' - line 97", "'public static Collection<JobPropertyDescriptor> all() {' - line 105"]}, "FreeStyleProject.java": {"METHODS": ["'public FreeStyleProject(Jenkins parent, String name) {' - line 48", "'public FreeStyleProject(ItemGroup parent, String name) {' - line 52", "'protected Class<FreeStyleBuild> getBuildClass() {' - line 57", "'public DescriptorImpl getDescriptor() {' - line 62", "'public DescriptorImpl() {' - line 81", "'public String getDisplayName() {' - line 87", "'public FreeStyleProject newInstance(ItemGroup parent, String name) {' - line 92", "'public String getDescription() {' - line 97", "'public String getCategoryId() {' - line 102", "'public String getIconFilePathPattern() {' - line 107", "'public String getIconClassName() {' - line 112"]}, "WorkspaceListener.java": {"METHODS": ["'public void afterDelete(AbstractProject project) {' - line 11", "'public void beforeUse(AbstractBuild b, FilePath workspace, BuildListener listener) {' - line 18", "'public static ExtensionList<WorkspaceListener> all() {' - line 25"]}, "RootAction.java": {"METHODS": []}, "StringParameterValue.java": {"METHODS": ["'public StringParameterValue(String name, String value) {' - line 45", "'public StringParameterValue(String name, String value, String description) {' - line 49", "'public void buildEnvironment(Run<?, ?> build, EnvVars env) {' - line 58", "'public VariableResolver<String> createVariableResolver(AbstractBuild<?, ?> build) {' - line 64", "'public String getValue() {' - line 69", "'public void doTrim() {' - line 77", "'public int hashCode() {' - line 84", "'public boolean equals(Object obj) {' - line 92", "'public String toString() {' - line 107", "'@Override public String getShortDescription() {' - line 111"]}, "WorkspaceBrowser.java": {"METHODS": []}, "Executor.java": {"METHODS": ["'public Executor(@NonNull Computer owner, int n) {' - line 149", "'public void interrupt() {' - line 157", "'void interruptForShutdown() {' - line 188", "'public void interrupt(Result result) {' - line 198", "'private void interrupt(Result result, boolean forShutdown) {' - line 202", "'public void interrupt(Result result, CauseOfInterruption... causes) {' - line 216", "'private void interrupt(Result result, boolean forShutdown, CauseOfInterruption... causes) {' - line 220", "'public Result abortResult() {' - line 248", "'public void recordCauseOfInterruption(Run<?, ?> build, TaskListener listener) {' - line 273", "'private void resetWorkUnit(String reason) {' - line 299", "'public void run() {' - line 325", "'public SubTask call() throws Exception {' - line 353", "'private void finish1(@CheckForNull Throwable problems) {' - line 478", "'private void finish2() {' - line 497", "'public void completedAsynchronous(@CheckForNull Throwable error) {' - line 510", "'public WorkUnit getCurrentWorkUnit() {' - line 562", "'public FilePath getCurrentWorkspace() {' - line 576", "'public String getDisplayName() {' - line 596", "'public int getNumber() {' - line 608", "'public boolean isIdle() {' - line 616", "'public boolean isBusy() {' - line 628", "'public boolean isActive() {' - line 646", "'public boolean isDisplayCell() {' - line 679", "'public boolean isParking() {' - line 687", "'public int getProgress() {' - line 711", "'public boolean isLikelyStuck() {' - line 732", "'public long getElapsedTime() {' - line 753", "'public long getTimeSpentInQueue() {' - line 767", "'public String getTimestampString() {' - line 782", "'public String getEstimatedRemainingTime() {' - line 790", "'public long getEstimatedRemainingTimeMillis() {' - line 808", "'public void start() {' - line 828", "'public void doStop(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 850", "'public HttpResponse doStop() {' - line 863", "'return doStopBuild(null);' - line 864", "'public HttpResponse doStopBuild(@CheckForNull @QueryParameter(fixEmpty = true) String runExtId) {' - line 878", "'public HttpResponse doYank() {' - line 906", "'public boolean hasStopPermission() {' - line 913", "'public long getIdleStartMilliseconds() {' - line 935", "'public Api getApi() {' - line 946", "'protected Object call(Object o, Method m, Object[] args) throws Throwable {' - line 957", "'public static Executor of(Executable executable) {' - line 986", "'public static long getEstimatedDurationFor(Executable e) {' - line 1005"]}, "EnvironmentContributor.java": {"METHODS": ["'public void buildEnvironmentFor(@NonNull Run r, @NonNull EnvVars envs, @NonNull TaskListener listener) throws IOException, InterruptedException {}' - line 87", "'public void buildEnvironmentFor(@NonNull Job j, @NonNull EnvVars envs, @NonNull TaskListener listener) throws IOException, InterruptedException {}' - line 109", "'public static ExtensionList<EnvironmentContributor> all() {' - line 114", "'public String getIconFileName() {' - line 126", "'public String getDisplayName() {' - line 131", "'public String getUrlName() {' - line 136"]}, "StatusIcon.java": {"METHODS": ["'String getImageOf(String size);' - line 53", "'String getDescription();' - line 58"]}, "ParameterDefinition.java": {"METHODS": ["'protected ParameterDefinition(@NonNull String name) {' - line 105", "'protected ParameterDefinition(@NonNull String name, String description) {' - line 116", "'public ParameterDefinition copyWithDefaultValue(ParameterValue defaultValue) {' - line 127", "'public String getType() {' - line 133", "'public String getName() {' - line 139", "'public String getDescription() {' - line 145", "'public void setDescription(@CheckForNull String description) {' - line 153", "'public String getFormattedDescription() {' - line 162", "'public ParameterDescriptor getDescriptor() {' - line 173", "'public ParameterValue createValue(CLICommand command, String value) throws IOException, InterruptedException {' - line 221", "'public ParameterValue getDefaultParameterValue() {' - line 233", "'public boolean isValid(ParameterValue value) {' - line 243", "'public int hashCode() {' - line 249", "'public boolean equals(Object obj) {' - line 254", "'protected ParameterDescriptor(Class<? extends ParameterDefinition> klazz) {' - line 289", "'protected ParameterDescriptor() {' - line 300", "'public String getValuePage() {' - line 303", "'return getViewPage(clazz, \"index.jelly\");' - line 304", "'public String getDisplayName() {' - line 309"]}, "TextParameterValue.java": {"METHODS": ["'public TextParameterValue(String name, String value) {' - line 34", "'public TextParameterValue(String name, String value, String description) {' - line 38", "'public String toString() {' - line 43"]}, "Jobs.java": {"METHODS": []}, "Item.java": {"METHODS": ["'String getName();' - line 98", "'String getFullName();' - line 111", "'String getDisplayName();' - line 126", "'String getFullDisplayName();' - line 133", "'return getRelativeNameFrom(item.getParent());' - line 160", "'String getUrl();' - line 172", "'String getShortUrl();' - line 181", "'void onLoad(ItemGroup<? extends Item> parent, String name) throws IOException;' - line 216", "'void onCopiedFrom(Item src);' - line 224", "'void save() throws IOException;' - line 244", "'void delete() throws IOException, InterruptedException;' - line 249"]}, "ViewPropertyDescriptor.java": {"METHODS": ["'protected ViewPropertyDescriptor(Class<? extends ViewProperty> clazz) {' - line 33", "'protected ViewPropertyDescriptor() {' - line 42", "'public ViewProperty newInstance(View view) {' - line 56", "'public boolean isEnabledFor(View view) {' - line 76"]}, "RunnerStack.java": {"METHODS": []}, "ModifiableItemGroup.java": {"METHODS": ["'T doCreateItem(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException;' - line 47"]}, "Slave.java": {"METHODS": ["'protected Slave(@NonNull String name, String remoteFS, ComputerLauncher launcher) throws FormException, IOException {' - line 177", "'public String getUserId() {' - line 219", "'public void setUserId(String userId){' - line 231", "'public ComputerLauncher getLauncher() {' - line 234", "'public void setLauncher(ComputerLauncher launcher) {' - line 248", "'public String getRemoteFS() {' - line 252", "'public String getNodeName() {' - line 258", "'@Override public String toString() {' - line 262", "'return getClass().getName() + \"[\" + name + \"]\";' - line 263", "'public void setNodeName(String name) {' - line 267", "'public void setNodeDescription(String value) {' - line 272", "'public String getNodeDescription() {' - line 277", "'public int getNumExecutors() {' - line 282", "'public void setNumExecutors(int n) {' - line 287", "'public Mode getMode() {' - line 292", "'public void setMode(Mode mode) {' - line 297", "'public void setNodeProperties(List<? extends NodeProperty<?>> properties) throws IOException {' - line 309", "'public RetentionStrategy getRetentionStrategy() {' - line 313", "'public void setRetentionStrategy(RetentionStrategy availabilityStrategy) {' - line 318", "'public String getLabelString() {' - line 323", "'public void setLabelString(String labelString) throws IOException {' - line 329", "'public Computer createComputer() {' - line 341", "'public FilePath getWorkspaceFor(TopLevelItem item) {' - line 346", "'public FilePath getRootPath() {' - line 361", "'return createPath(StringUtils.defaultString(computer.getAbsoluteRemoteFs(), remoteFS));' - line 367", "'public JnlpJar(String fileName) {' - line 388", "'public void doIndex(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 392", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 404", "'private URLConnection connect() throws IOException {' - line 408", "'public URL getURL() throws IOException {' - line 413", "'public byte[] readFully() throws IOException {' - line 469", "'public Launcher createLauncher(TaskListener listener) {' - line 486", "'private void reportLauncherCreateError(@NonNull String humanReadableMsg, @CheckForNull String exceptionDetails, @NonNull TaskListener listener) {' - line 532", "'new IllegalStateException(exceptionDetails != null ? exceptionDetails : humanReadableMsg));' - line 539", "'public SlaveComputer getComputer() {' - line 551", "'public boolean equals(Object o) {' - line 556", "'public int hashCode() {' - line 566", "'protected Object readResolve() {' - line 573", "'public SlaveDescriptor getDescriptor() {' - line 580", "'public FormValidation doCheckNumExecutors(@QueryParameter String value) {' - line 588", "'public FormValidation doCheckRemoteFS(@QueryParameter String value) throws IOException, ServletException {' - line 595", "'public ClockDifference call() {' - line 693", "'private Object writeReplace() {' - line 698", "'public GetClockDifference3 call() {' - line 713", "'private Object readResolve() {' - line 728"]}, "Result.java": {"METHODS": ["'private Result(@NonNull String name, @NonNull BallColor color, /*@java.annotation.Nonnegative */int ordinal, boolean complete) {' - line 97", "'*      a result (may be {@code null})' - line 121", "'*      a result (may be {@code null})' - line 123", "'public static Result combine(Result r1, Result r2) {' - line 127", "'public boolean isWorseThan(@NonNull Result that) {' - line 137", "'public boolean isWorseOrEqualTo(@NonNull Result that) {' - line 141", "'public boolean isBetterThan(@NonNull Result that) {' - line 145", "'public boolean isBetterOrEqualTo(@NonNull Result that) {' - line 149", "'public boolean isCompleteBuild() {' - line 157", "'private Object readResolve() {' - line 186", "'public boolean canConvert(Class clazz) {' - line 199", "'public Object fromString(String s) {' - line 204", "'public OptionHandlerImpl(CmdLineParser parser, OptionDef option, Setter<? super Result> setter) {' - line 211", "'public int parseArguments(Parameters params) throws CmdLineException {' - line 216", "'public String getDefaultMetaVariable() {' - line 228", "'public static void init() {' - line 234", "'public Object convert(Class type, Object value) {' - line 237"]}, "SubTask.java": {"METHODS": []}, "FutureLoad.java": {"METHODS": ["'public FutureLoad(long startTime, long duration, int numExecutors) {' - line 46", "'public String toString() {' - line 53"]}, "ScheduleResult.java": {"METHODS": ["'public boolean isCreated() {' - line 22", "'public boolean isRefused() {' - line 30", "'private Created(WaitingItem item) {' - line 61", "'public boolean isCreated() {' - line 66", "'public WaitingItem getCreateItem() {' - line 71", "'public Item getItem() {' - line 76", "'private Existing(Item item) {' - line 84", "'public Item getItem() {' - line 89", "'public boolean isRefused() {' - line 96", "'public static Created created(WaitingItem i) {' - line 101", "'public static Existing existing(Item i) {' - line 105", "'public static Refused refused() {' - line 109"]}, "WorkUnitContext.java": {"METHODS": ["'public WorkUnitContext(BuildableItem item) {' - line 74", "'protected void onCriteriaMet() {' - line 85", "'public WorkUnit createWorkUnit(SubTask execUnit) {' - line 109", "'public List<WorkUnit> getWorkUnits() {' - line 115", "'public WorkUnit getPrimaryWorkUnit() {' - line 119", "'public void synchronizeStart() throws InterruptedException {' - line 127", "'public void synchronizeEnd(Queue.Executable executable, Throwable problems, long duration) throws InterruptedException {' - line 150", "'public void synchronizeEnd(Executor e, Queue.Executable executable, Throwable problems, long duration) throws InterruptedException {' - line 162"]}, "Tasks.java": {"METHODS": ["'public static Object getSameNodeConstraintOf(SubTask t) {' - line 52"]}, "QueueListener.java": {"METHODS": ["'public void onEnterWaiting(WaitingItem wi) {}' - line 35", "'public void onLeaveWaiting(WaitingItem wi) {}' - line 42", "'public void onEnterBlocked(BlockedItem bi) {}' - line 48", "'public void onLeaveBlocked(BlockedItem bi) {}' - line 53", "'public void onEnterBuildable(BuildableItem bi) {}' - line 60", "'public void onLeaveBuildable(BuildableItem bi) {}' - line 68", "'public void onLeft(LeftItem li) {}' - line 74", "'public static ExtensionList<QueueListener> all() {' - line 79"]}, "AbstractQueueTask.java": {"METHODS": []}, "QueueTaskFilter.java": {"METHODS": ["'protected QueueTaskFilter(Task base) {' - line 45", "'public Label getAssignedLabel() {' - line 50", "'public Node getLastBuiltOn() {' - line 55", "'public boolean isBuildBlocked() {' - line 61", "'public String getWhyBlocked() {' - line 67", "'public CauseOfBlockage getCauseOfBlockage() {' - line 72", "'public String getName() {' - line 77", "'public String getFullDisplayName() {' - line 82", "'public long getEstimatedDuration() {' - line 87", "'public void checkAbortPermission() {' - line 97", "'public boolean hasAbortPermission() {' - line 102", "'public String getUrl() {' - line 107", "'public boolean isConcurrentBuild() {' - line 112", "'public String getDisplayName() {' - line 117", "'public ResourceList getResourceList() {' - line 122", "'public Object getSameNodeConstraint() {' - line 132"]}, "SubTaskContributor.java": {"METHODS": ["'public static ExtensionList<SubTaskContributor> all() {' - line 50"]}, "WorkUnit.java": {"METHODS": ["'public void setExecutor(@CheckForNull Executor e) {' - line 70", "'public Executable getExecutable() {' - line 81", "'public void setExecutable(Executable executable) {' - line 89", "'public boolean isMainWork() {' - line 100", "'public String toString() {' - line 105"]}, "Timeline.java": {"METHODS": ["'private int at(long t) {' - line 46", "'private Long next(long t) {' - line 57", "'private void splitAt(long t) {' - line 65", "'int insert(long start, long end, int n) {' - line 79", "'Long fit(long start, long duration, int n) {' - line 102"]}, "CauseOfBlockage.java": {"METHODS": ["'public void print(TaskListener listener) {' - line 40", "'public static CauseOfBlockage fromMessage(@NonNull final Localizable l) {' - line 47", "'public String getShortDescription() {' - line 51", "'@Override public String toString() {' - line 57", "'return getShortDescription();' - line 58", "'public static CauseOfBlockage createNeedsMoreExecutor(Localizable l) {' - line 72", "'private NeedsMoreExecutorImpl(Localizable l) {' - line 79", "'public String getShortDescription() {' - line 84", "'public BecauseNodeIsOffline(Node node) {' - line 95", "'public String getShortDescription() {' - line 100", "'public void print(TaskListener listener) {' - line 106", "'public BecauseNodeIsNotAcceptingTasks(Node node) {' - line 120", "'public String getShortDescription() {' - line 125", "'public void print(TaskListener listener) {' - line 132", "'public BecauseLabelIsOffline(Label l) {' - line 145", "'public String getShortDescription() {' - line 150", "'public void print(TaskListener listener) {' - line 159", "'public BecauseNodeIsBusy(Node node) {' - line 175", "'public String getShortDescription() {' - line 180", "'public void print(TaskListener listener) {' - line 186", "'public BecauseLabelIsBusy(Label label) {' - line 197", "'public String getShortDescription() {' - line 202", "'public void print(TaskListener listener) {' - line 207"]}, "Latch.java": {"METHODS": ["'private void check(int threshold) throws InterruptedException {' - line 85", "'protected void onCriteriaMet() throws InterruptedException {}' - line 109"]}, "QueueTaskFuture.java": {"METHODS": ["'Future<R> getStartCondition();' - line 25", "'R waitForStart() throws InterruptedException, ExecutionException;' - line 30"]}, "FoldableAction.java": {"METHODS": ["'void foldIntoExisting(Queue.Item item, Task owner, List<Action> otherActions);' - line 57"]}, "MappingWorksheet.java": {"METHODS": ["'public E get(int index) {' - line 102", "'public int size() {' - line 107", "'private ExecutorChunk(List<ExecutorSlot> base, int index) {' - line 118", "'public boolean canAccept(WorkChunk c) {' - line 130", "'public String getName() {' - line 146", "'public int capacity() {' - line 154", "'return size();' - line 155", "'private void execute(WorkChunk wc, WorkUnitContext wuc) {' - line 158", "'assert capacity() >= wc.size();' - line 159", "'private WorkChunk(List<SubTask> base, int index) {' - line 190", "'private Label getAssignedLabel(SubTask task) {' - line 206", "'public List<ExecutorChunk> applicableExecutorChunks() {' - line 214", "'public ExecutorChunk assigned(int n) {' - line 236", "'public WorkChunk get(int n) {' - line 243", "'public ExecutorChunk assign(int index, ExecutorChunk element) {' - line 250", "'public int size() {' - line 259", "'public boolean isPartiallyValid() {' - line 276", "'public boolean isCompletelyValid() {' - line 292", "'return isPartiallyValid();' - line 295", "'public void execute(WorkUnitContext wuc) {' - line 302", "'public MappingWorksheet(BuildableItem item, List<? extends ExecutorSlot> offers) {' - line 311", "'public MappingWorksheet(BuildableItem item, List<? extends ExecutorSlot> offers, Collection<? extends LoadPredictor> loadPredictors) {' - line 315", "'public WorkChunk works(int index) {' - line 385", "'public ExecutorChunk executors(int index) {' - line 389"]}, "QueueSorter.java": {"METHODS": ["'public void sortBlockedItems(List<Queue.BlockedItem> blockedItems) {' - line 47", "'public static ExtensionList<QueueSorter> all() {' - line 55", "'public static void installDefaultQueueSorter() {' - line 65"]}, "AbstractSubTask.java": {"METHODS": []}, "FutureImpl.java": {"METHODS": ["'public FutureImpl(Task task) {' - line 58", "'public Future<Executable> getStartCondition() {' - line 63", "'public Executable waitForStart() throws InterruptedException, ExecutionException {' - line 68", "'return getStartCondition().get();' - line 69", "'public boolean cancel(boolean mayInterruptIfRunning) {' - line 73"]}, "AbstractQueueSorterImpl.java": {"METHODS": ["'public void sortBuildableItems(List<BuildableItem> buildables) {' - line 17", "'public int compare(BuildableItem lhs, BuildableItem rhs) {' - line 32", "'protected static int compare(long a, long b) {' - line 43", "'protected static int compare(int a, int b) {' - line 54"]}, "LoadPredictor.java": {"METHODS": ["'public Iterable<FutureLoad> predict(MappingWorksheet plan, Computer computer, long start, long end) {' - line 61", "'return predict(computer, start, end);' - line 63", "'public Iterable<FutureLoad> predict(Computer computer, long start, long end) {' - line 75", "'public static ExtensionList<LoadPredictor> all() {' - line 82", "'public Iterable<FutureLoad> predict(MappingWorksheet plan, final Computer computer, long start, long eternity) {' - line 92"]}, "Executables.java": {"METHODS": ["'public static long getEstimatedDurationFor(@CheckForNull Executable e) {' - line 78"]}, "QueueTaskDispatcher.java": {"METHODS": ["'return canTake(node, item.task); // backward compatible behaviour' - line 100", "'public static ExtensionList<QueueTaskDispatcher> all() {' - line 138"]}, "SCMListener.java": {"METHODS": ["'public void onCheckout(Run<?, ?> build, SCM scm, FilePath workspace, TaskListener listener, @CheckForNull File changelogFile, @CheckForNull SCMRevisionState pollingBaseline) throws Exception {}' - line 68", "'public void onChangeLogParsed(Run<?, ?> build, SCM scm, TaskListener listener, ChangeLogSet<?> changelog) throws Exception {' - line 111", "'public void onChangeLogParsed(AbstractBuild<?, ?> build, BuildListener listener, ChangeLogSet<?> changelog) throws Exception {' - line 118"]}, "SaveableListener.java": {"METHODS": ["'public void onChange(Saveable o, XmlFile file) {}' - line 54", "'public void register() {' - line 64", "'public void unregister() {' - line 71", "'public static void fireOnChange(Saveable o, XmlFile file) {' - line 78", "'public static ExtensionList<SaveableListener> all() {' - line 93"]}, "ItemListener.java": {"METHODS": ["'public void onCreated(Item item) {' - line 55", "'public void onCheckCopy(Item src, ItemGroup parent) throws Failure {' - line 67", "'public void onCopied(Item src, Item item) {' - line 85", "'public void onLoaded() {' - line 93", "'public void onDeleted(Item item) {' - line 101", "'public void onRenamed(Item item, String oldName, String newName) {' - line 115", "'public void onLocationChanged(Item item, String oldFullName, String newFullName) {}' - line 138", "'public void onUpdated(Item item) {' - line 145", "'public void onBeforeShutdown() {' - line 153", "'public void register() {' - line 163", "'public static ExtensionList<ItemListener> all() {' - line 170", "'public static void fireOnCopied(final Item src, final Item result) {' - line 174", "'public static void checkBeforeCopy(final Item src, final ItemGroup parent) throws Failure {' - line 187", "'public static void fireOnCreated(final Item item) {' - line 199", "'public static void fireOnUpdated(final Item item) {' - line 203", "'public static void fireOnDeleted(final Item item) {' - line 208", "'public static void fireLocationChange(final Item rootItem, final String oldFullName) {' - line 218"]}, "RunListener.java": {"METHODS": ["'protected RunListener(Class<R> targetType) {' - line 67", "'protected RunListener() {' - line 71", "'public void onCompleted(R r, @NonNull TaskListener listener) {}' - line 92", "'public void onFinalized(R r) {}' - line 105", "'public void onInitialize(R r) {}' - line 113", "'public void onStarted(R r, TaskListener listener) {}' - line 128", "'public Environment setUpEnvironment(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException, RunnerAbortedException {' - line 159", "'public void onDeleted(R r) {}' - line 171", "'public void register() {' - line 181", "'public void unregister() {' - line 188", "'public static void fireCompleted(Run r, @NonNull TaskListener listener) {' - line 203", "'public static void fireInitialize(Run r) {' - line 214", "'public static void fireStarted(Run r, TaskListener listener) {' - line 226", "'public static void fireFinalized(Run r) {' - line 237", "'public static void fireDeleted(Run r) {' - line 251", "'public static ExtensionList<RunListener> all() {' - line 262"]}, "SCMPollListener.java": {"METHODS": ["'public void onBeforePolling(AbstractProject<?, ?> project, TaskListener listener) {}' - line 51", "'public void onPollingSuccess(AbstractProject<?, ?> project, TaskListener listener, PollingResult result) {}' - line 59", "'public void onPollingFailed(AbstractProject<?, ?> project, TaskListener listener, Throwable exception) {}' - line 68", "'public static void fireBeforePolling(AbstractProject<?, ?> project, TaskListener listener) {' - line 70", "'public static void firePollingSuccess(AbstractProject<?, ?> project, TaskListener listener, PollingResult result) {' - line 74", "'public static void firePollingFailed(AbstractProject<?, ?> project, TaskListener listener, Throwable exception) {' - line 78", "'public static ExtensionList<SCMPollListener> all() {' - line 85"]}, "LabelAtomProperty.java": {"METHODS": []}, "LabelAtomPropertyDescriptor.java": {"METHODS": []}, "LabelOperatorPrecedence.java": {"METHODS": []}, "LabelAssignmentAction.java": {"METHODS": ["'Label getAssignedLabel(@NonNull SubTask task);' - line 38"]}, "LabelAtom.java": {"METHODS": ["'public LabelAtom(@NonNull String name) {' - line 90", "'public String getExpression() {' - line 98", "'return escape(name);' - line 99", "'public boolean isAtom() { return true; }' - line 103", "'public List<Action> getActions() {' - line 116", "'protected void updateTransientActions() {' - line 126", "'public String getDescription() {' - line 139", "'public void setDescription(String description) throws IOException {' - line 143", "'public List<LabelAtomProperty> getPropertiesList() {' - line 156", "'public boolean matches(VariableResolver<Boolean> resolver) {' - line 161", "'public Set<LabelAtom> listAtoms() {' - line 171", "'public LabelOperatorPrecedence precedence() {' - line 176", "'public void save() throws IOException {' - line 185", "'public void load() {' - line 198", "'public List<LabelAtomPropertyDescriptor> getApplicablePropertyDescriptors() {' - line 215", "'public void doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, FormException {' - line 223", "'private boolean isInvalidName() {' - line 242", "'public static LabelAtom findNearest(String name) {' - line 266", "'return get(EditDistance.findNearest(name, candidates));' - line 271", "'public static boolean needsEscape(String name) {' - line 274", "'public static String escape(String name) {' - line 289", "'private LabelAtomConverter() {' - line 308", "'public boolean canConvert(Class type) {' - line 313", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 318", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 331", "'protected void callback(LabelAtom obj, UnmarshallingContext context) {' - line 344"]}, "LabelVisitor.java": {"METHODS": []}, "LabelExpression.java": {"METHODS": ["'protected LabelExpression(String name) {' - line 52", "'public String getExpression() {' - line 57", "'return getDisplayName();' - line 58", "'public Not(Label base) {' - line 64", "'public boolean matches(VariableResolver<Boolean> resolver) {' - line 70", "'public LabelOperatorPrecedence precedence() {' - line 80", "'public Paren(Label base) {' - line 91", "'public boolean matches(VariableResolver<Boolean> resolver) {' - line 97", "'public LabelOperatorPrecedence precedence() {' - line 107", "'static String paren(LabelOperatorPrecedence op, Label l) {' - line 115", "'protected Binary(Label lhs, Label rhs, LabelOperatorPrecedence op) {' - line 124", "'private static String combine(Label lhs, Label rhs, LabelOperatorPrecedence op) {' - line 130", "'return paren(op, lhs) + op.str + paren(op, rhs);' - line 131", "'public boolean matches(VariableResolver<Boolean> resolver) {' - line 139", "'return op(lhs.matches(resolver), rhs.matches(resolver));' - line 140", "'public And(Label lhs, Label rhs) {' - line 147", "'protected boolean op(boolean a, boolean b) {' - line 152", "'public LabelOperatorPrecedence precedence() {' - line 162", "'public Or(Label lhs, Label rhs) {' - line 168", "'protected boolean op(boolean a, boolean b) {' - line 173", "'public LabelOperatorPrecedence precedence() {' - line 183", "'public Iff(Label lhs, Label rhs) {' - line 189", "'protected boolean op(boolean a, boolean b) {' - line 194", "'public LabelOperatorPrecedence precedence() {' - line 204", "'public Implies(Label lhs, Label rhs) {' - line 210", "'protected boolean op(boolean a, boolean b) {' - line 215", "'public LabelOperatorPrecedence precedence() {' - line 225", "'public static AutoCompletionCandidates autoComplete(@Nullable String label) {' - line 240", "'public static FormValidation validate(@Nullable String expression) {' - line 262", "'public static FormValidation validate(@Nullable String expression, @CheckForNull Item item) {' - line 277"]}, "RenderOnDemandClosure.java": {"METHODS": ["'public RenderOnDemandClosure(JellyContext context, String attributesToCapture) {' - line 64", "'public HttpResponse render() {' - line 94", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 97", "'new DefaultScriptInvoker() {' - line 100", "'protected JellyContext createContext(StaplerRequest req, StaplerResponse rsp, Script script, Object it) {' - line 102", "'protected void exportVariables(StaplerRequest req, StaplerResponse rsp, Script script, Object it, JellyContext context) {' - line 117"]}, "HistoryWidget.java": {"METHODS": ["'public HistoryWidget(O owner, Iterable<T> baseList, Adapter<? super T> adapter) {' - line 97", "'protected String getOwnerUrl() {' - line 109", "'public String getDisplayName() {' - line 116", "'public String getUrlName() {' - line 121", "'public String getFirstTransientBuildKey() {' - line 125", "'protected HistoryPageFilter updateFirstTransientBuildKey(HistoryPageFilter historyPageFilter) {' - line 138", "'private Iterable<HistoryPageEntry<T>> updateFirstTransientBuildKey(Iterable<HistoryPageEntry<T>> source) {' - line 143", "'public Iterable<HistoryPageEntry<T>> getRenderList() {' - line 157", "'return updateFirstTransientBuildKey(pageEntries.subList(0, THRESHOLD));' - line 161", "'return updateFirstTransientBuildKey(pageEntries);' - line 164", "'return updateFirstTransientBuildKey(toPageEntries(baseList));' - line 168", "'private List<HistoryPageEntry<T>> toPageEntries(Iterable<T> historyItemList) {' - line 172", "'public HistoryPageFilter getHistoryPageFilter() {' - line 190", "'return updateFirstTransientBuildKey(historyPageFilter);' - line 195", "'protected HistoryPageFilter<T> newPageFilter() {' - line 198", "'public boolean isTrimmed() {' - line 214", "'public void setTrimmed(boolean trimmed) {' - line 218", "'public String getNextBuildNumberToFetch() {' - line 272", "'public void setNextBuildNumberToFetch(String nextBuildNumberToFetch) {' - line 276", "'int compare(T record, String key);' - line 284", "'String getKey(T record);' - line 286", "'boolean isBuilding(T record);' - line 288", "'String getNextKey(String key);' - line 290", "'private Long getPagingParam(@CheckForNull StaplerRequest currentRequest, @CheckForNull String name) {' - line 293", "'public Class<Job> type() {' - line 314", "'public Class<HistoryWidget> widgetType() {' - line 319", "'public Collection<HistoryWidget> createFor(@NonNull Job target) {' - line 325"]}, "BuildHistoryWidget.java": {"METHODS": ["'public BuildHistoryWidget(Task owner, Iterable<T> baseList, Adapter<? super T> adapter) {' - line 57", "'public QueueItem getQueuedItem() {' - line 64", "'public List<QueueItem> getQueuedItems() {' - line 71", "'public HistoryPageFilter getHistoryPageFilter() {' - line 82", "'return updateFirstTransientBuildKey(historyPageFilter);' - line 88", "'public Class<Job> type() {' - line 96", "'public Class<BuildHistoryWidget> widgetType() {' - line 101", "'public Collection<BuildHistoryWidget> createFor(@NonNull Job target) {' - line 107"]}, "Widget.java": {"METHODS": ["'public String getUrlName() {' - line 66", "'return getClass().getSimpleName();' - line 67", "'protected String getOwnerUrl() {' - line 75", "'public String getUrl() {' - line 82"]}, "SafeTimerTask.java": {"METHODS": ["'public static SafeTimerTask of(ExceptionRunnable r) {' - line 55", "'protected void doRun() throws Exception {' - line 58", "'void run() throws Exception;' - line 70", "'public static File getLogsRoot() {' - line 108"]}, "TimerTrigger.java": {"METHODS": ["'public TimerTrigger(@NonNull String spec) {' - line 55", "'public void run() {' - line 60", "'public boolean isApplicable(Item item) {' - line 71", "'public String getDisplayName() {' - line 77", "'public FormValidation doCheck(@QueryParameter String value, @AncestorInPath Item item) {' - line 82", "'return doCheckSpec(value, item);' - line 83", "'public FormValidation doCheckSpec(@QueryParameter String value, @AncestorInPath Item item) {' - line 89", "'private void updateValidationsForSanity(Collection<FormValidation> validations, CronTabList ctl) {' - line 103", "'private void updateValidationsForNextRun(Collection<FormValidation> validations, CronTabList ctl) {' - line 108", "'public String getShortDescription() {' - line 126", "'public boolean equals(Object o) {' - line 131", "'public int hashCode() {' - line 136"]}, "TriggerDescriptor.java": {"METHODS": ["'protected TriggerDescriptor(Class<? extends Trigger<?>> clazz) {' - line 35", "'protected TriggerDescriptor() {' - line 46"]}, "Trigger.java": {"METHODS": ["'public void start(J project, boolean newInstance) {' - line 92", "'public void run() {}' - line 117", "'public void stop() {}' - line 128", "'public Action getProjectAction() {' - line 138", "'public TriggerDescriptor getDescriptor() {' - line 157", "'protected Trigger(@NonNull String cronTabSpec) {' - line 176", "'protected Trigger() {' - line 184", "'protected Object readResolve() throws ObjectStreamException {' - line 198", "'public String toString() {' - line 210", "'public Cron() {' - line 221", "'public long getRecurrencePeriod() {' - line 227", "'public long getInitialDelay() {' - line 232", "'public void doRun() {' - line 237", "'public static void checkTriggers(final Calendar cal) {' - line 254", "'public void run(AbstractProject p) {' - line 270", "'public static List<TriggerDescriptor> for_(Item i) {' - line 364"]}, "SlowTriggerAdminMonitor.java": {"METHODS": ["'public static SlowTriggerAdminMonitor getInstance() {' - line 37", "'public SlowTriggerAdminMonitor() {' - line 41", "'public boolean isActivated() {' - line 45", "'public String getDisplayName() {' - line 51", "'public void clear() {' - line 55", "'public void report(@NonNull final Class<? extends TriggerDescriptor> trigger, @NonNull final String fullJobName, long duration) {' - line 61", "'public HttpResponse doClear() {' - line 90", "'public String getTimeString() {' - line 111", "'public String getFullJobName() {' - line 116", "'public long getDuration() {' - line 124"]}, "SCMTrigger.java": {"METHODS": ["'public SCMTrigger(String scmpoll_spec) {' - line 111", "'public SCMTrigger(String scmpoll_spec, boolean ignorePostCommitHooks) {' - line 126", "'public boolean isIgnorePostCommitHooks() {' - line 138", "'public void setIgnorePostCommitHooks(boolean ignorePostCommitHooks) {' - line 151", "'public String getScmpoll_spec() {' - line 155", "'public void run() {' - line 160", "'public void run(Action[] additionalActions) {' - line 174", "'new Runner(additionalActions).run();' - line 185", "'public DescriptorImpl getDescriptor() {' - line 197", "'public File getLogFile() {' - line 213", "'private static ThreadFactory threadFactory() {' - line 220", "'private Object readResolve() {' - line 249", "'public boolean isApplicable(Item item) {' - line 257", "'public ExecutorService getExecutor() {' - line 261", "'public boolean isClogged() {' - line 269", "'public void clogCheck() {' - line 277", "'public List<Runner> getRunners() {' - line 284", "'public List<SCMTriggerItem> getItemsBeingPolled() {' - line 289", "'public String getDisplayName() {' - line 298", "'public int getPollingThreadCount() {' - line 306", "'public void setPollingThreadCount(int n) {' - line 314", "'public boolean isPollingThreadCountOptionVisible() {' - line 329", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 359", "'public FormValidation doCheckPollingThreadCount(@QueryParameter String value) {' - line 373", "'public String getDisplayName() {' - line 400", "'public boolean isActivated() {' - line 407", "'public BuildAction(Run<?, ?> run) {' - line 427", "'public BuildAction(AbstractBuild build) {' - line 433", "'public File getPollingLogFile() {' - line 447", "'public String getIconFileName() {' - line 452", "'public String getDisplayName() {' - line 457", "'public String getUrlName() {' - line 462", "'public void doPollingLog(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 469", "'public AnnotatedLargeText getPollingLogText() {' - line 478", "'public void writePollingLogTo(long offset, XMLOutput out) throws IOException {' - line 486", "'@Override public void onAttached(Run<?, ?> r) {' - line 491", "'@Override public void onLoad(Run<?, ?> r) {' - line 495", "'public Item getItem() {' - line 513", "'return job().asItem();' - line 514", "'public String getIconFileName() {' - line 518", "'public String getDisplayName() {' - line 523", "'public String getUrlName() {' - line 532", "'public String getLog() throws IOException {' - line 536", "'public void writeLogTo(XMLOutput out) throws IOException {' - line 545", "'public Runner() {' - line 564", "'public Runner(Action[] actions) {' - line 568", "'public File getLogFile() {' - line 581", "'public SCMTriggerItem getTarget() {' - line 589", "'return job();' - line 590", "'public long getStartTime() {' - line 596", "'public String getDuration() {' - line 603", "'private boolean runPolling() {' - line 607", "'public void run() {' - line 638", "'public boolean equals(Object that) {' - line 690", "'private Item _job() {' - line 694", "'public int hashCode() {' - line 699", "'private SCMTriggerItem job() {' - line 704", "'public SCMTriggerCause(File logFile) throws IOException {' - line 718", "'public SCMTriggerCause(String pollingLog) {' - line 723", "'public SCMTriggerCause() {' - line 732", "'public void onLoad(Run run) {' - line 737", "'public void onAddedTo(Run build) {' - line 742", "'public String getShortDescription() {' - line 758", "'public Run getRun() {' - line 763", "'public boolean equals(Object o) {' - line 768", "'public int hashCode() {' - line 773"]}, "Triggers.java": {"METHODS": ["'public static List<TriggerDescriptor> getApplicableTriggers(Item i) {' - line 59"]}, "InitReactorListener.java": {"METHODS": []}, "InitializerFinder.java": {"METHODS": ["'public InitializerFinder(ClassLoader cl) {' - line 35", "'public InitializerFinder() {' - line 39", "'protected String displayNameOf(Initializer i) {' - line 44", "'protected String[] requiresOf(Initializer i) {' - line 49", "'protected String[] attainsOf(Initializer i) {' - line 54", "'protected Milestone afterOf(Initializer i) {' - line 59", "'protected Milestone beforeOf(Initializer i) {' - line 64", "'protected boolean fatalOf(Initializer i) {' - line 69"]}, "TerminatorFinder.java": {"METHODS": ["'public TerminatorFinder(ClassLoader cl) {' - line 8", "'protected String displayNameOf(Terminator i) {' - line 13", "'protected String[] requiresOf(Terminator i) {' - line 18", "'protected String[] attainsOf(Terminator i) {' - line 23", "'protected Milestone afterOf(Terminator i) {' - line 28", "'protected Milestone beforeOf(Terminator i) {' - line 33", "'protected boolean fatalOf(Terminator i) {' - line 41"]}, "TaskMethodFinder.java": {"METHODS": ["'public Collection<Task> discoverTasks(Reactor session) throws IOException {' - line 58", "'protected boolean filter(Method e) {' - line 74", "'protected String getDisplayNameOf(Method e, T i) {' - line 81", "'protected void invoke(Method e) {' - line 101", "'private Object lookUp(Class<?> type) {' - line 121", "'private TaskImpl(T i, Method e) {' - line 141", "'public T getAnnotation() {' - line 151", "'public Method getMethod() {' - line 158", "'public Collection<Milestone> requires() {' - line 163", "'public Collection<Milestone> attains() {' - line 168", "'public String getDisplayName() {' - line 173", "'return getDisplayNameOf(e, i);' - line 174", "'public boolean failureIsFatal() {' - line 178", "'return fatalOf(i);' - line 179", "'public void run(Reactor session) {' - line 183", "'public String toString() {' - line 188", "'private Collection<Milestone> toMilestones(String[] tokens, Milestone m) {' - line 192"]}, "TermMilestone.java": {"METHODS": ["'public static TaskBuilder ordering() {' - line 43", "'public String toString() {' - line 53"]}, "InitStrategy.java": {"METHODS": ["'public List<File> listPluginArchives(PluginManager pm) throws IOException {' - line 44", "'private void listPluginFiles(PluginManager pm, String extension, Collection<File> all) throws IOException {' - line 61", "'protected void getBundledPluginsFromProperty(final List<File> r) {' - line 75", "'@Override public void visit(File f, String relativePath) throws IOException {' - line 85", "'public boolean skipInitTask(Task task) {' - line 105", "'public static InitStrategy get(ClassLoader cl) throws IOException {' - line 113", "'public boolean accept(File dir, String name) {' - line 133"]}, "Terminator.java": {"METHODS": ["'TermMilestone after() default STARTED;' - line 29", "'TermMilestone before() default COMPLETED;' - line 38", "'String[] requires() default {};' - line 43", "'String[] attains() default {};' - line 51", "'String displayName() default \"\";' - line 57"]}, "InitMilestone.java": {"METHODS": ["'public static TaskBuilder ordering() {' - line 131", "'public String toString() {' - line 141"]}, "Initializer.java": {"METHODS": ["'public static void init() throws IOException {' - line 44", "'InitMilestone after() default STARTED;' - line 68", "'InitMilestone before() default COMPLETED;' - line 77", "'String[] requires() default {};' - line 82", "'String[] attains() default {};' - line 90", "'String displayName() default \"\";' - line 96", "'boolean fatal() default true;' - line 103"]}, "GroovyInitScript.java": {"METHODS": ["'public static void init(Jenkins j) {' - line 40", "'new GroovyHookScript(\"init\", j.servletContext, j.getRootDir(), j.getPluginManager().uberClassLoader).run();' - line 41"]}, "InstallUncaughtExceptionHandler.java": {"METHODS": ["'public static void init(final Jenkins j) throws IOException {' - line 31", "'private static void handleException(Jenkins j, Throwable e, HttpServletRequest req, HttpServletResponse rsp, int code) throws IOException, ServletException {' - line 47", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 77", "'private static boolean isEOFException(Throwable e) {' - line 84", "'return isEOFException(e.getCause());' - line 90", "'public void uncaughtException(Thread t, Throwable ex) {' - line 98", "'private InstallUncaughtExceptionHandler() {}' - line 108"]}, "InitialUserContent.java": {"METHODS": ["'public static void init(Jenkins h) throws IOException {' - line 43"]}, "HyperlinkNote.java": {"METHODS": ["'public HyperlinkNote(String url, int length) {' - line 55", "'public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {' - line 61", "'protected String extraAttributes() {' - line 77", "'public static String encodeTo(String url, String text) {' - line 81", "'return encodeTo(url, text, HyperlinkNote::new);' - line 82", "'static String encodeTo(String url, String text, BiFunction<String, Integer, ConsoleNote> constructor) {' - line 86", "'public String getDisplayName() {' - line 107"]}, "ExpandableDetailsNote.java": {"METHODS": ["'public ExpandableDetailsNote(String caption, String html) {' - line 46", "'public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {' - line 52", "'public static String encodeTo(String buttonCaption, String html) {' - line 58", "'public String getDisplayName() {' - line 72"]}, "ConsoleAnnotator.java": {"METHODS": ["'public ConsoleAnnotator annotate(T context, MarkupText text) {' - line 103", "'case 1:     return  cast(all.iterator().next()); // just one' - line 128", "'return combine(_for(context));' - line 138"]}, "ConsoleAnnotationDescriptor.java": {"METHODS": ["'protected ConsoleAnnotationDescriptor(Class<? extends ConsoleNote<?>> clazz) {' - line 46", "'protected ConsoleAnnotationDescriptor() {' - line 50", "'public String getDisplayName() {' - line 60", "'public boolean hasScript() {' - line 67", "'return hasResource(\"/script.js\") != null;' - line 68", "'public boolean hasStylesheet() {' - line 74", "'return hasResource(\"/style.css\") != null;' - line 75", "'private URL hasResource(String name) {' - line 78", "'public void doScriptJs(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 83", "'public void doStyleCss(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 88"]}, "ConsoleAnnotatorFactory.java": {"METHODS": ["'public boolean hasScript() {' - line 98", "'return getResource(\"/script.js\") != null;' - line 99", "'public boolean hasStylesheet() {' - line 102", "'return getResource(\"/style.css\") != null;' - line 103", "'private URL getResource(String fileName) {' - line 106", "'public void doScriptJs(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 115", "'public void doStyleCss(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 120", "'public static ExtensionList<ConsoleAnnotatorFactory> all() {' - line 128"]}, "ConsoleLogFilter.java": {"METHODS": ["'public OutputStream decorateLogger(AbstractBuild build, OutputStream logger) throws IOException, InterruptedException {' - line 65", "'return decorateLogger((Run) build, logger);' - line 68", "'public OutputStream decorateLogger(Run build, OutputStream logger) throws IOException, InterruptedException {' - line 84", "'return decorateLogger((AbstractBuild) build, logger);' - line 90", "'public OutputStream decorateLogger(@NonNull Computer computer, OutputStream logger) throws IOException, InterruptedException {' - line 105", "'public static ExtensionList<ConsoleLogFilter> all() {' - line 112"]}, "LineTransformationOutputStream.java": {"METHODS": ["'public void write(int b) throws IOException {' - line 54", "'private void eol() throws IOException {' - line 59", "'public void write(byte[] b, int off, int len) throws IOException {' - line 70", "'public void close() throws IOException {' - line 78", "'public void forceEol() throws IOException {' - line 88", "'protected String trimEOL(String line) {' - line 98", "'protected Delegating(OutputStream out) {' - line 124", "'public void flush() throws IOException {' - line 129", "'public void close() throws IOException {' - line 134"]}, "AnnotatedLargeText.java": {"METHODS": ["'public AnnotatedLargeText(File file, Charset charset, boolean completed, T context) {' - line 82", "'public AnnotatedLargeText(ByteBuffer memory, Charset charset, boolean completed, T context) {' - line 87", "'public void doProgressiveHtml(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 92", "'public void doProgressiveText(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 100", "'private boolean isHtml() {' - line 108", "'protected void setContentType(StaplerResponse rsp) {' - line 114", "'private ConsoleAnnotator<T> createAnnotator(StaplerRequest req) throws IOException {' - line 118", "'new CipherInputStream(new ByteArrayInputStream(Base64.getDecoder().decode(base64.getBytes(StandardCharsets.UTF_8))), sym)),' - line 125", "'return getConsoleAnnotator(ois);' - line 130", "'private ConsoleAnnotator getConsoleAnnotator(ObjectInputStream ois) throws IOException, ClassNotFoundException {' - line 143", "'public long writeLogTo(long start, Writer w) throws IOException {' - line 149", "'return writeHtmlTo(start, w);' - line 151", "'public long writeLogTo(long start, OutputStream out) throws IOException {' - line 162", "'public long writeRawLogTo(long start, OutputStream out) throws IOException {' - line 171", "'public long writeHtmlTo(long start, Writer w) throws IOException {' - line 176"]}, "ModelHyperlinkNote.java": {"METHODS": ["'public ModelHyperlinkNote(String url, int length) {' - line 23", "'protected String extraAttributes() {' - line 28", "'public static String encodeTo(@NonNull User u) {' - line 32", "'return encodeTo(u, u.getDisplayName());' - line 33", "'public static String encodeTo(User u, String text) {' - line 36", "'return encodeTo('/' + u.getUrl(), text);' - line 37", "'public static String encodeTo(Item item) {' - line 40", "'return encodeTo(item, item.getFullDisplayName());' - line 41", "'public static String encodeTo(Item item, String text) {' - line 44", "'return encodeTo('/' + item.getUrl(), text);' - line 45", "'public static String encodeTo(Run r) {' - line 48", "'return encodeTo('/' + r.getUrl(), r.getDisplayName());' - line 49", "'public static String encodeTo(Node node) {' - line 52", "'return encodeTo(\"/\" + c.getUrl(), node.getDisplayName());' - line 55", "'return encodeTo(\"/computer/\" + nodePath, node.getDisplayName());' - line 58", "'public static String encodeTo(Label label) {' - line 64", "'return encodeTo(\"/\" + label.getUrl(), label.getName());' - line 65", "'public static String encodeTo(String url, String text) {' - line 68", "'public String getDisplayName() {' - line 76"]}, "ConsoleNote.java": {"METHODS": ["'public ConsoleAnnotationDescriptor getDescriptor() {' - line 169", "'public void encodeTo(OutputStream out) throws IOException {' - line 181", "'public void encodeTo(Writer out) throws IOException {' - line 195", "'private ByteArrayOutputStream encodeToBytes() throws IOException {' - line 199", "'public String encode() throws IOException {' - line 225", "'return encodeToBytes().toString();' - line 226", "'public static ConsoleNote readFrom(DataInputStream in) throws IOException, ClassNotFoundException {' - line 237", "'return getConsoleNote(ois);' - line 282", "'private static ConsoleNote getConsoleNote(ObjectInputStream ois) throws IOException, ClassNotFoundException {' - line 292", "'public static void skip(DataInputStream in) throws IOException {' - line 299", "'public static int findPreamble(byte[] buf, int start, int len) {' - line 340", "'public static List<String> removeNotes(Collection<String> logLines) {' - line 362", "'public static String removeNotes(String line) {' - line 374"]}, "ConsoleAnnotationOutputStream.java": {"METHODS": ["'public ConsoleAnnotationOutputStream(Writer out, ConsoleAnnotator<? super T> ann, T context, Charset charset) {' - line 68", "'public ConsoleAnnotator<T> getConsoleAnnotator() {' - line 75", "'protected void eol(byte[] in, int sz) throws IOException {' - line 85", "'public ConsoleAnnotator<T> annotate(T context, MarkupText text) {' - line 117", "'public void flush() throws IOException {' - line 151", "'public void close() throws IOException {' - line 156", "'private LineBuffer(int initialSize) {' - line 169", "'private void reset() {' - line 173", "'private StringBuffer getStringBuffer() {' - line 181"]}, "PlainTextConsoleOutputStream.java": {"METHODS": ["'public PlainTextConsoleOutputStream(OutputStream out) {' - line 41", "'protected void eol(byte[] in, int sz) throws IOException {' - line 49"]}, "UrlAnnotator.java": {"METHODS": ["'public ConsoleAnnotator newInstance(Object context) {' - line 17", "'public ConsoleAnnotator annotate(@NonNull Object context, @NonNull MarkupText text) {' - line 23"]}, "AbstractCloudImpl.java": {"METHODS": ["'protected AbstractCloudImpl(String name, String instanceCapStr) {' - line 20", "'protected void setInstanceCapStr(String value) {' - line 26", "'public String getInstanceCapStr() {' - line 36", "'public int getInstanceCap() {' - line 46", "'protected void setInstanceCap(int v) {' - line 50"]}, "NodeProperty.java": {"METHODS": ["'protected void setNode(N node) { this.node = node; }' - line 82", "'public NodePropertyDescriptor getDescriptor() {' - line 85", "'public CauseOfBlockage canTake(Queue.Task task) {' - line 100", "'public CauseOfBlockage canTake(Queue.BuildableItem item) {' - line 112", "'return canTake(item.task);  // backward compatible behaviour' - line 113", "'public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 136", "'public void buildEnvVars(@NonNull EnvVars env, @NonNull TaskListener listener) throws IOException, InterruptedException {' - line 169", "'public static List<NodePropertyDescriptor> for_(Node node) {' - line 189"]}, "WorkspaceList.java": {"METHODS": ["'public String toString() {' - line 51", "'private Entry(@NonNull FilePath path, boolean quick) {' - line 90", "'private Entry(@NonNull FilePath path, boolean quick, Object context) {' - line 94", "'public String toString() {' - line 101", "'protected Lease(@NonNull FilePath path) {' - line 115", "'@Override public void close() {' - line 131", "'public static Lease createDummyLease(@NonNull FilePath p) {' - line 138", "'public void release() {' - line 141", "'public static Lease createLinkedDummyLease(@NonNull FilePath p, final Lease parent) {' - line 151", "'public void release() {' - line 154", "'public WorkspaceList() {' - line 163", "'return allocate(base, new Object());' - line 174", "'return acquire(candidate, false, context);' - line 190", "'return lease(p);' - line 204", "'return acquire(p, false);' - line 230", "'return acquire(p, quick, new Object());' - line 241", "'return lease(p);' - line 273", "'private Lease lease(@NonNull FilePath p) {' - line 279", "'public void release() {' - line 283", "'@Override public void close() {' - line 287", "'public static FilePath tempDir(FilePath ws) {' - line 311"]}, "ChannelPinger.java": {"METHODS": ["'public ChannelPinger() {' - line 74", "'public void preOnline(Computer c, Channel channel, FilePath root, TaskListener listener)  {' - line 93", "'public void install(Channel channel) {' - line 101", "'public SetUpRemotePing(int pingTimeoutSeconds, int pingIntervalSeconds) {' - line 133", "'public Void call() throws IOException {' - line 139", "'public int hashCode() {' - line 146", "'public boolean equals(Object obj) {' - line 151", "'protected Object readResolve() {' - line 168", "'public static void setUpPingForChannel(final Channel channel, final SlaveComputer computer, int timeoutSeconds, int intervalSeconds, final boolean analysis) {' - line 178", "'protected void onDead(Throwable cause) {' - line 183", "'private void analyze(Throwable cause) {' - line 209", "'protected void onDead() {' - line 221", "'public void onClosed(Channel channel, IOException cause) {' - line 228"]}, "SlaveComputer.java": {"METHODS": ["'public SlaveComputer(Slave slave) {' - line 153", "'private OutputStream decorate(OutputStream os) {' - line 163", "'public boolean isAcceptingTasks() {' - line 176", "'public String getJnlpMac() {' - line 185", "'public void setAcceptingTasks(boolean acceptingTasks) {' - line 198", "'public Boolean isUnix() {' - line 203", "'public Slave getNode() {' - line 209", "'public TaskListener getListener() {' - line 224", "'public String getIconClassName() {' - line 229", "'public boolean isJnlpAgent() {' - line 240", "'public boolean isLaunchSupported() {' - line 245", "'public ComputerLauncher getLauncher() {' - line 253", "'public ComputerLauncher getDelegatedLauncher() {' - line 262", "'public void taskAccepted(Executor executor, Queue.Task task) {' - line 330", "'public void taskStarted(Executor executor, Queue.Task task) {' - line 344", "'public void taskCompleted(Executor executor, Queue.Task task, long durationMS) {' - line 356", "'public void taskCompletedWithProblems(Executor executor, Queue.Task task, long durationMS, Throwable problems) {' - line 368", "'public boolean isConnecting() {' - line 380", "'return isOffline() && l != null && !l.isDone();' - line 382", "'public OutputStream openLogFile() {' - line 385", "'public int getClassLoadingCount() throws IOException, InterruptedException {' - line 482", "'public int getClassLoadingPrefetchCacheCount() throws IOException, InterruptedException {' - line 495", "'public int getResourceLoadingCount() throws IOException, InterruptedException {' - line 511", "'public long getClassLoadingTime() throws IOException, InterruptedException {' - line 524", "'public long getResourceLoadingTime() throws IOException, InterruptedException {' - line 537", "'public String getAbsoluteRemoteFs() {' - line 553", "'public String getAbsoluteRemotePath() {' - line 569", "'return getAbsoluteRemoteFs();' - line 571", "'@Override public Integer call() {' - line 584", "'@Override public Integer call() {' - line 594", "'@Override public Long call() {' - line 610", "'public void onClosed(Channel c, IOException cause) {' - line 639", "'public Channel getChannel() {' - line 768", "'public Charset getDefaultCharset() {' - line 773", "'public List<LogRecord> getLogRecords() throws IOException, InterruptedException {' - line 778", "'public HttpResponse doDoDisconnect(@QueryParameter String offlineMessage) {' - line 803", "'public void run() {' - line 818", "'public void doLaunchSlaveAgent(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 830", "'public void tryReconnect() {' - line 851", "'public HttpResponse doSlaveAgentJnlp(StaplerRequest req, StaplerResponse res) {' - line 873", "'return doJenkinsAgentJnlp(req, res);' - line 874", "'public HttpResponse doJenkinsAgentJnlp(StaplerRequest req, StaplerResponse res) {' - line 878", "'public HttpResponse doJenkinsAgentJnlp(StaplerRequest req, StaplerResponse res) {' - line 884", "'public HttpResponse doSlaveAgentJnlp(StaplerRequest req, StaplerResponse res) {' - line 889", "'public Object getTarget() {' - line 896", "'protected void kill() {' - line 906", "'public RetentionStrategy getRetentionStrategy() {' - line 923", "'private void closeChannel() {' - line 931", "'protected void setNode(final Node node) {' - line 951", "'public void run() {' - line 962", "'protected ComputerLauncher grabLauncher(Node node) {' - line 984", "'public String getSlaveVersion() throws IOException, InterruptedException {' - line 992", "'public String getOSDescription() throws IOException, InterruptedException {' - line 1003", "'public String call() throws IOException {' - line 1042", "'public String call() throws IOException {' - line 1050", "'public Boolean call() throws IOException {' - line 1066", "'private AbsolutePath(String relativePath) {' - line 1077", "'public String call() throws IOException {' - line 1082", "'public String call() throws IOException {' - line 1089", "'public Void call() {' - line 1114", "'public static VirtualChannel getChannelToMaster() {' - line 1157", "'public static List<SlaveSystemInfo> getSystemInfoExtensions() {' - line 1166", "'public List<LogRecord> call() {' - line 1172"]}, "ComputerLauncherFilter.java": {"METHODS": ["'protected ComputerLauncherFilter(ComputerLauncher core) {' - line 44", "'public ComputerLauncher getCore() {' - line 51", "'public boolean isLaunchSupported() {' - line 56", "'public void launch(SlaveComputer computer, TaskListener listener) throws IOException, InterruptedException {' - line 61", "'public void afterDisconnect(SlaveComputer computer, TaskListener listener) {' - line 66", "'public void beforeDisconnect(SlaveComputer computer, TaskListener listener) {' - line 71", "'public Descriptor<ComputerLauncher> getDescriptor() {' - line 76"]}, "NodeProvisioner.java": {"METHODS": ["'public PlannedNode(String displayName, Future<Node> future, int numExecutors) {' - line 100", "'public void spent() {' - line 121", "'new MultiStageTimeSeries(Messages._NodeProvisioner_EmptyString(), Color.WHITE, 0, DECAY);' - line 157", "'public NodeProvisioner(@CheckForNull Label label, LoadStatistics loadStatistics) {' - line 159", "'public List<PlannedNode> getPendingLaunches() {' - line 171", "'public void suggestReviewNow() {' - line 181", "'private void update() {' - line 211", "'private StrategyState(LoadStatistics.LoadStatisticsSnapshot snapshot, @CheckForNull Label label, int plannedCapacitySnapshot) {' - line 412", "'public Label getLabel() {' - line 422", "'public int getQueueLengthSnapshot() {' - line 439", "'public int getPlannedCapacitySnapshot() {' - line 446", "'public int getIdleSnapshot() {' - line 455", "'public int getTotalSnapshot() {' - line 464", "'public float getQueueLengthLatest() {' - line 479", "'public float getPlannedCapacityLatest() {' - line 486", "'public float getIdleLatest() {' - line 495", "'return getAvailableExecutorsLatest();' - line 496", "'public float getTotalLatest() {' - line 504", "'return getOnlineExecutorsLatest();' - line 505", "'public float getDefinedExecutorsLatest() {' - line 512", "'public float getOnlineExecutorsLatest() {' - line 520", "'public float getConnectingExecutorsLatest() {' - line 528", "'public float getBusyExecutorsLatest() {' - line 536", "'public float getIdleExecutorsLatest() {' - line 544", "'public float getAvailableExecutorsLatest() {' - line 552", "'public void recordPendingLaunches(PlannedNode... plannedNodes) {' - line 562", "'public void recordPendingLaunches(Collection<PlannedNode> plannedNodes) {' - line 572", "'public String toString() {' - line 606", "'public StrategyDecision apply(@NonNull StrategyState state) {' - line 626", "'private float calcThresholdMargin(int totalSnapshot) {' - line 784", "'public long getInitialDelay() {' - line 808", "'public long getRecurrencePeriod() {' - line 813", "'protected void doRun() {' - line 818", "'private static float getFloatSystemProperty(String propName, float defaultValue) {' - line 834", "'private static void fireOnFailure(final NodeProvisioner.PlannedNode plannedNode, final Throwable cause) {' - line 845", "'private static void fireOnComplete(final NodeProvisioner.PlannedNode plannedNode, final Node newNode) {' - line 874", "'private static void fireOnCommit(final NodeProvisioner.PlannedNode plannedNode, final Node newNode) {' - line 888"]}, "SimpleScheduledRetentionStrategy.java": {"METHODS": ["'public SimpleScheduledRetentionStrategy(String startTimeSpec, int upTimeMins, boolean keepUpWhenActive) {' - line 73", "'public int getUpTimeMins() {' - line 82", "'public boolean isKeepUpWhenActive() {' - line 86", "'public String getStartTimeSpec() {' - line 90", "'public boolean isManualLaunchAllowed(final SlaveComputer c) {' - line 167", "'return isOnlineScheduled();' - line 168", "'public void run() {' - line 183", "'public void run() {' - line 211", "'public void run() {' - line 225", "'public String getDisplayName() {' - line 255", "'public FormValidation doCheck(@QueryParameter String value) {' - line 262"]}, "EphemeralNode.java": {"METHODS": ["'Node asNode();' - line 37"]}, "AbstractCloudSlave.java": {"METHODS": ["'protected AbstractCloudSlave(@NonNull String name, String remoteFS, ComputerLauncher launcher)' - line 46", "'public void terminate() throws InterruptedException, IOException {' - line 81"]}, "DelegatingComputerLauncher.java": {"METHODS": ["'protected DelegatingComputerLauncher(ComputerLauncher launcher) {' - line 53", "'public ComputerLauncher getLauncher() {' - line 57", "'public void launch(SlaveComputer computer, TaskListener listener) throws IOException, InterruptedException {' - line 62", "'public void afterDisconnect(SlaveComputer computer, TaskListener listener) {' - line 67", "'public void beforeDisconnect(SlaveComputer computer, TaskListener listener) {' - line 72", "'public List<Descriptor<ComputerLauncher>> getApplicableDescriptors() {' - line 100"]}, "NodeDescriptor.java": {"METHODS": ["'protected NodeDescriptor(Class<? extends Node> clazz) {' - line 58", "'protected NodeDescriptor() {' - line 62", "'public boolean isInstantiable() {' - line 70", "'public void handleNewNodePage(ComputerSet computerSet, String name, StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 85", "'public String getConfigPage() {' - line 92", "'return getViewPage(clazz, \"configure-entries.jelly\");' - line 93", "'public FormValidation doCheckName(@QueryParameter String value) {' - line 96", "'public static List<NodeDescriptor> allInstantiable() {' - line 123"]}, "ComputerRetentionWork.java": {"METHODS": ["'public long getRecurrencePeriod() {' - line 52", "'protected void doRun() {' - line 58", "'public void run() {' - line 63"]}, "ComputerLauncher.java": {"METHODS": ["'public boolean isLaunchSupported() {' - line 64", "'public void launch(SlaveComputer computer, TaskListener listener) throws IOException, InterruptedException {' - line 92", "'public void launch(SlaveComputer computer, StreamTaskListener listener) throws IOException, InterruptedException {' - line 102", "'public void afterDisconnect(SlaveComputer computer, TaskListener listener) {' - line 117", "'public void afterDisconnect(SlaveComputer computer, StreamTaskListener listener) {' - line 127", "'public void beforeDisconnect(SlaveComputer computer, TaskListener listener) {' - line 144", "'public void beforeDisconnect(SlaveComputer computer, StreamTaskListener listener) {' - line 154", "'private StreamTaskListener cast(TaskListener listener) {' - line 157"]}, "Cloud.java": {"METHODS": ["'protected Cloud(String name) {' - line 119", "'public String getDisplayName() {' - line 125", "'return getUrl();' - line 141", "'public ACL getACL() {' - line 145", "'public Collection<PlannedNode> provision(Label label, int excessWorkload) {' - line 184", "'public Collection<PlannedNode> provision(CloudState state, int excessWorkload) {' - line 220", "'return provision(state.getLabel(), excessWorkload);' - line 221", "'public boolean canProvision(Label label) {' - line 229", "'public boolean canProvision(CloudState state) {' - line 240", "'return canProvision(state.getLabel());' - line 241", "'public Descriptor<Cloud> getDescriptor() {' - line 245", "'public static void registerPermissions() {' - line 279", "'public String getIcon() {' - line 289", "'public String getIconClassName() {' - line 293", "'public String getIconAltText() {' - line 298", "'return getClass().getSimpleName().replace(\"Cloud\", \"\");' - line 299", "'public HttpResponse doDoDelete() throws IOException {' - line 306", "'public HttpResponse doConfigSubmit(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException, Descriptor.FormException {' - line 316", "'public Cloud reconfigure(@NonNull final StaplerRequest req, JSONObject form) throws Descriptor.FormException {' - line 336", "'return getDescriptor().newInstance(req, form);' - line 338", "'public CloudState(@CheckForNull Label label, int additionalPlannedCapacity) {' - line 357", "'public Label getLabel() {' - line 366", "'public int getAdditionalPlannedCapacity() {' - line 374"]}, "NodeSpecific.java": {"METHODS": ["'T forNode(@NonNull Node node, TaskListener log) throws IOException, InterruptedException;' - line 47"]}, "CloudSlaveRetentionStrategy.java": {"METHODS": ["'public long check(T c) {' - line 27", "'return checkCycle();' - line 39", "'protected void kill(Node n) throws IOException {' - line 48", "'protected long checkCycle() {' - line 55", "'return getIdleMaxTime() / 10;' - line 56", "'protected boolean isIdleForTooLong(T c) {' - line 62", "'protected long getIdleMaxTime() {' - line 69"]}, "NodePropertyDescriptor.java": {"METHODS": ["'protected NodePropertyDescriptor(Class<? extends NodeProperty<?>> clazz) {' - line 41", "'protected NodePropertyDescriptor() {' - line 45", "'public boolean isApplicableAsGlobal() {' - line 54", "'return isApplicable(Jenkins.get().getClass());' - line 58"]}, "AbstractCloudComputer.java": {"METHODS": ["'public AbstractCloudComputer(T slave) {' - line 42", "'public T getNode() {' - line 48", "'public HttpResponse doDoDelete() throws IOException {' - line 57"]}, "ComputerListener.java": {"METHODS": ["'public void preLaunch(Computer c, TaskListener taskListener) throws IOException, InterruptedException {' - line 70", "'public void onLaunchFailure(Computer c, TaskListener taskListener) throws IOException, InterruptedException {' - line 84", "'public void preOnline(Computer c, Channel channel, FilePath root, TaskListener listener) throws IOException, InterruptedException {' - line 121", "'public void onOnline(Computer c) {}' - line 131", "'public void onOnline(Computer c, TaskListener listener) throws IOException, InterruptedException {' - line 164", "'public void onOffline(Computer c) {}' - line 175", "'public void onOffline(@NonNull Computer c, @CheckForNull OfflineCause cause) {' - line 182", "'public void onTemporarilyOnline(Computer c) {}' - line 192", "'public void onTemporarilyOffline(Computer c, OfflineCause cause) {}' - line 200", "'public void onConfigurationChange() {}' - line 211", "'return all().remove(this);' - line 231", "'public static ExtensionList<ComputerListener> all() {' - line 237"]}, "ComputerConnector.java": {"METHODS": ["'public ComputerConnectorDescriptor getDescriptor() {' - line 54"]}, "OfflineCause.java": {"METHODS": ["'public long getTimestamp() {' - line 60", "'protected SimpleOfflineCause(Localizable description) {' - line 83", "'public String toString() {' - line 88", "'public static OfflineCause create(Localizable d) {' - line 93", "'public ChannelTermination(Exception cause) {' - line 104", "'public String getShortDescription() {' - line 108", "'@Override public String toString() {' - line 112", "'public String toString() {' - line 122", "'public UserCause(@CheckForNull User user, @CheckForNull String message) {' - line 138", "'private UserCause(String userId, String message) {' - line 145", "'public User getUser() {' - line 150", "'private Object readResolve() throws ObjectStreamException {' - line 158", "'public ByCLI(String message) {' - line 178", "'public IdleOfflineCause() {' - line 189"]}, "EnvironmentVariablesNodeProperty.java": {"METHODS": ["'public EnvironmentVariablesNodeProperty(List<Entry> env) {' - line 58", "'public EnvironmentVariablesNodeProperty(Entry... env) {' - line 62", "'public EnvVars getEnvVars() {' - line 66", "'public List<Entry> getEnv() {' - line 74", "'public void buildEnvVars(EnvVars env, TaskListener listener) throws IOException, InterruptedException {' - line 85", "'public String getDisplayName() {' - line 94", "'public String getHelpPage() {' - line 98", "'private Entry(Map.Entry<String, String> e) {' - line 114", "'public Entry(String key, String value) {' - line 119", "'private static EnvVars toMap(List<Entry> entries) {' - line 125"]}, "ConnectionActivityMonitor.java": {"METHODS": ["'public ConnectionActivityMonitor() {' - line 52", "'protected void execute(TaskListener listener) throws IOException, InterruptedException {' - line 57", "'public long getRecurrencePeriod() {' - line 87", "'public Void call() throws RuntimeException {' - line 111"]}, "Channels.java": {"METHODS": ["'public static Channel forProcess(String name, ExecutorService execService, InputStream in, OutputStream out, Proc proc) throws IOException {' - line 69", "'return forProcess(name, execService, in, out, null, proc);' - line 70", "'public static Channel forProcess(String name, ExecutorService execService, InputStream in, OutputStream out, OutputStream header, final Proc proc) throws IOException {' - line 77", "'public Channel build(CommandTransport transport) throws IOException {' - line 80", "'public static Channel forProcess(String name, ExecutorService execService, final Process proc, OutputStream header) throws IOException {' - line 123", "'public Channel build(CommandTransport transport) throws IOException {' - line 129", "'public static Channel newJVM(String displayName, TaskListener listener, FilePath workDir, ClasspathBuilder classpath, Map<String, String> systemProperties) throws IOException {' - line 188", "'return newJVM(displayName, listener, vmb, workDir, classpath);' - line 192", "'public static Channel newJVM(String displayName, TaskListener listener, JVMBuilder vmb, FilePath workDir, ClasspathBuilder classpath) throws IOException {' - line 221", "'new BufferedInputStream(SocketChannelStream.in(s)),' - line 241", "'new BufferedOutputStream(SocketChannelStream.out(s)), null, p);' - line 242"]}, "JNLPLauncher.java": {"METHODS": ["'public JNLPLauncher(@CheckForNull String tunnel, @CheckForNull String vmargs, @CheckForNull RemotingWorkDirSettings workDirSettings) {' - line 97", "'public JNLPLauncher(@CheckForNull String tunnel) {' - line 108", "'public JNLPLauncher(@CheckForNull String tunnel, @CheckForNull String vmargs) {' - line 116", "'public JNLPLauncher() {' - line 125", "'public JNLPLauncher(boolean enableWorkDir) {' - line 134", "'protected Object readResolve() {' - line 141", "'public RemotingWorkDirSettings getWorkDirSettings() {' - line 155", "'public boolean isLaunchSupported() {' - line 165", "'public boolean isWebSocket() {' - line 172", "'public void setWebSocket(boolean webSocket) {' - line 180", "'public void launch(SlaveComputer computer, TaskListener listener) {' - line 185", "'public String getWorkDirOptions(@NonNull Computer computer) {' - line 206", "'public DescriptorImpl() {' - line 216", "'public String getDisplayName() {' - line 222", "'public boolean isWorkDirSupported() {' - line 236", "'public FormValidation doCheckWebSocket(@QueryParameter boolean webSocket, @QueryParameter String tunnel) {' - line 242", "'public static String getInboundAgentUrl() {' - line 274"]}, "RetentionStrategy.java": {"METHODS": ["'public boolean isManualLaunchAllowed(T c) {' - line 73", "'public boolean isAcceptingTasks(T c) {' - line 87", "'public void start(final @NonNull T c) {' - line 102", "'public long check(Computer c) {' - line 129", "'public void start(Computer c) {' - line 134", "'private Object readResolve() {' - line 143", "'public Always() {' - line 165", "'public long check(SlaveComputer c) {' - line 170", "'public String getDisplayName() {' - line 180", "'public Demand(long inDemandDelay, long idleDelay) {' - line 204", "'public long getInDemandDelay() {' - line 214", "'public long getIdleDelay() {' - line 223", "'public long check(final SlaveComputer c) {' - line 229", "'public String getDisplayName() {' - line 294"]}, "ComputerConnectorDescriptor.java": {"METHODS": []}, "DumbSlave.java": {"METHODS": ["'public DumbSlave(String name, String nodeDescription, String remoteFS, String numExecutors, Node.Mode mode, String labelString, ComputerLauncher launcher, RetentionStrategy retentionStrategy) throws FormException, IOException {' - line 49", "'public DumbSlave(@NonNull String name, String remoteFS, ComputerLauncher launcher) throws FormException, IOException {' - line 73", "'public String getDisplayName() {' - line 82"]}, "CloudProvisioningListener.java": {"METHODS": ["'public CauseOfBlockage canProvision(Cloud cloud, Label label, int numExecutors) {' - line 40", "'return canProvision(cloud, new Cloud.CloudState(label, 0), numExecutors);' - line 47", "'public CauseOfBlockage canProvision(Cloud cloud, Cloud.CloudState state, int numExecutors) {' - line 65", "'return canProvision(cloud, state.getLabel(), numExecutors);' - line 66", "'public void onStarted(Cloud cloud, Label label, Collection<NodeProvisioner.PlannedNode> plannedNodes) {' - line 80", "'public void onComplete(NodeProvisioner.PlannedNode plannedNode, Node node) {' - line 90", "'public void onCommit(@NonNull NodeProvisioner.PlannedNode plannedNode, @NonNull Node node) {' - line 102", "'public void onFailure(NodeProvisioner.PlannedNode plannedNode, Throwable t) {' - line 112", "'public static ExtensionList<CloudProvisioningListener> all() {' - line 133"]}, "NodeList.java": {"METHODS": ["'public NodeList() {' - line 53", "'public NodeList(Collection<? extends Node> c) {' - line 56", "'public NodeList(Node... toCopyIn) {' - line 66", "'public void add(int index, Node element) {' - line 76", "'public Node remove(int index) {' - line 81", "'public boolean remove(Object o) {' - line 86", "'public void clear() {' - line 91", "'public boolean addAll(Collection<? extends Node> c) {' - line 96", "'public boolean addAll(int index, Collection<? extends Node> c) {' - line 101", "'protected void removeRange(int fromIndex, int toIndex) {' - line 106", "'public boolean removeAll(Collection<?> c) {' - line 111", "'public boolean retainAll(Collection<?> c) {' - line 116", "'public boolean add(Node node) {' - line 121", "'public Node set(int index, Node element) {' - line 126", "'public ConverterImpl(XStream xstream) {' - line 136", "'public boolean canConvert(Class type) {' - line 141", "'public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {' - line 146", "'protected Object createCollection(Class type) {' - line 155", "'public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {' - line 160"]}, "CloudRetentionStrategy.java": {"METHODS": ["'public CloudRetentionStrategy(int idleMinutes) {' - line 47", "'public long check(final AbstractCloudComputer c) {' - line 53", "'public void start(AbstractCloudComputer c) {' - line 73"]}, "SecurityRealm.java": {"METHODS": ["'public IdStrategy getUserIdStrategy() {' - line 178", "'public IdStrategy getGroupIdStrategy() {' - line 192", "'return getUserIdStrategy();' - line 193", "'public CliAuthenticator createCliAuthenticator(final CLICommand command) {' - line 200", "'public Descriptor<SecurityRealm> getDescriptor() {' - line 213", "'public String getAuthenticationGatewayUrl() {' - line 222", "'public String getLoginUrl() {' - line 241", "'public boolean canLogOut() {' - line 258", "'protected String getPostLogOutUrl2(StaplerRequest req, Authentication auth) {' - line 278", "'return getPostLogOutUrl(req, org.acegisecurity.Authentication.fromSpring(auth));' - line 282", "'protected String getPostLogOutUrl(StaplerRequest req, org.acegisecurity.Authentication auth) {' - line 297", "'return getPostLogOutUrl2(req, auth.toSpring());' - line 298", "'public CaptchaSupport getCaptchaSupport() {' - line 301", "'public void setCaptchaSupport(CaptchaSupport captchaSupport) {' - line 305", "'public List<Descriptor<CaptchaSupport>> getCaptchaSupportDescriptors() {' - line 309", "'public void doLogout(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 322", "'private void resetRememberMeCookie(StaplerRequest req, StaplerResponse rsp, String contextPath) {' - line 336", "'private void clearStaleSessionCookies(StaplerRequest req, StaplerResponse rsp, String contextPath) {' - line 345", "'public boolean allowsSignup() {' - line 391", "'public UserDetails loadUserByUsername2(String username) throws UsernameNotFoundException {' - line 405", "'return loadUserByUsername(username).toSpring();' - line 408", "'return getSecurityComponents().userDetails2.loadUserByUsername(username);' - line 415", "'public GroupDetails loadGroupByGroupname2(String groupname, boolean fetchMembers)' - line 446", "'return loadGroupByGroupname(groupname);' - line 450", "'return loadGroupByGroupname(groupname, fetchMembers);' - line 458", "'public GroupDetails loadGroupByGroupname(String groupname) throws org.acegisecurity.userdetails.UsernameNotFoundException, org.springframework.dao.DataAccessException {' - line 473", "'return loadGroupByGroupname2(groupname, false);' - line 475", "'public GroupDetails loadGroupByGroupname(String groupname, boolean fetchMembers) throws org.acegisecurity.userdetails.UsernameNotFoundException, org.springframework.dao.DataAccessException {' - line 486", "'return loadGroupByGroupname2(groupname, fetchMembers);' - line 488", "'public HttpResponse commenceSignup(FederatedIdentity identity) {' - line 512", "'public Filter createFilter(FilterConfig filterConfig) {' - line 575", "'public static String getFrom() {' - line 640", "'public SecurityComponents createSecurityComponents() {' - line 674", "'public Authentication authenticate(Authentication authentication) {' - line 677", "'public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {' - line 682", "'public GroupDetails loadGroupByGroupname2(String groupname, boolean fetchMembers) throws UsernameNotFoundException {' - line 692", "'public Filter createFilter(FilterConfig filterConfig) {' - line 700", "'private Object readResolve() {' - line 707", "'public String getDisplayName() {' - line 717", "'public SecurityRealm newInstance(StaplerRequest req, JSONObject formData) throws Descriptor.FormException {' - line 722", "'public SecurityComponents() {' - line 766", "'public SecurityComponents(AuthenticationManager manager) {' - line 775", "'public SecurityComponents(org.acegisecurity.AuthenticationManager manager) {' - line 785", "'public SecurityComponents(AuthenticationManager manager, UserDetailsService userDetails) {' - line 792", "'public SecurityComponents(org.acegisecurity.AuthenticationManager manager, org.acegisecurity.userdetails.UserDetailsService userDetails) {' - line 800", "'public SecurityComponents(AuthenticationManager manager, UserDetailsService userDetails, RememberMeServices rememberMe) {' - line 807", "'public SecurityComponents(org.acegisecurity.AuthenticationManager manager, org.acegisecurity.userdetails.UserDetailsService userDetails, org.acegisecurity.ui.rememberme.RememberMeServices rememberMe) {' - line 821", "'private static RememberMeServices createRememberMeService(UserDetailsService uds) {' - line 825"]}, "HudsonPrivateSecurityRealm.java": {"METHODS": ["'public HudsonPrivateSecurityRealm(boolean allowsSignup) {' - line 131", "'public HudsonPrivateSecurityRealm(boolean allowsSignup, boolean enableCaptcha, CaptchaSupport captchaSupport) {' - line 136", "'public boolean allowsSignup() {' - line 152", "'public boolean getAllowsSignup() {' - line 157", "'return allowsSignup();' - line 158", "'public boolean isEnableCaptcha() {' - line 166", "'private static boolean hasSomeUser() {' - line 176", "'public GroupDetails loadGroupByGroupname2(String groupname, boolean fetchMembers) throws UsernameNotFoundException {' - line 187", "'public UserDetails loadUserByUsername2(String username) throws UsernameNotFoundException {' - line 192", "'return load(username).asUserDetails();' - line 193", "'public Details load(String username) throws UsernameNotFoundException {' - line 197", "'protected UserDetails authenticate2(String username, String password) throws AuthenticationException {' - line 208", "'public HttpResponse commenceSignup(final FederatedIdentity identity) {' - line 227", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 232", "'public User doCreateAccountWithFederatedIdentity(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 246", "'public User doCreateAccount(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 259", "'return _doCreateAccount(req, rsp, \"signup.jelly\");' - line 260", "'private User _doCreateAccount(StaplerRequest req, StaplerResponse rsp, String formView) throws ServletException, IOException {' - line 263", "'private void loginAndTakeBack(StaplerRequest req, StaplerResponse rsp, User u) throws ServletException, IOException {' - line 280", "'public void doCreateAccountByAdmin(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 306", "'public User createAccountByAdmin(StaplerRequest req, StaplerResponse rsp, String addUserView, String successView) throws IOException, ServletException {' - line 314", "'public User createAccountFromSetupWizard(StaplerRequest req) throws IOException, AccountCreationFailedException {' - line 333", "'return createAccount(si);' - line 340", "'private String getErrorMessages(SignupInfo si) {' - line 344", "'public void doCreateFirstAccount(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 359", "'private void tryToMakeAdmin(User u) {' - line 374", "'private User createAccount(StaplerRequest req, StaplerResponse rsp, boolean validateCaptcha, String formView) throws ServletException, IOException {' - line 393", "'return createAccount(si);' - line 402", "'private SignupInfo validateAccountCreationForm(StaplerRequest req, boolean validateCaptcha) {' - line 413", "'private User createAccount(SignupInfo si) throws IOException {' - line 474", "'private boolean containsOnlyAcceptableCharacters(@NonNull String value) {' - line 496", "'public boolean isMailerPluginPresent() {' - line 505", "'public User createAccount(String userName, String password) throws IOException {' - line 518", "'public User createAccountWithHashedPassword(String userName, String hashedPassword) throws IOException {' - line 531", "'public String getDisplayName() {' - line 546", "'public ACL getACL() {' - line 551", "'public void checkPermission(Permission permission) {' - line 556", "'public boolean hasPermission(Permission permission) {' - line 561", "'public List<User> getAllUsers() {' - line 569", "'public User getUser(String id) {' - line 584", "'public SignupInfo() {' - line 608", "'public SignupInfo(StaplerRequest req) {' - line 611", "'public SignupInfo(FederatedIdentity i) {' - line 615", "'private Details(String passwordHash) {' - line 648", "'static Details fromHashedPassword(String hashed) {' - line 652", "'static Details fromPlainPassword(String rawPassword) {' - line 656", "'public String getPassword() {' - line 676", "'public boolean isPasswordCorrect(String candidate) {' - line 680", "'public String getProtectedPassword() {' - line 684", "'public String getUsername() {' - line 689", "'public boolean isAccountNonExpired() {' - line 697", "'public boolean isAccountNonLocked() {' - line 701", "'public boolean isCredentialsNonExpired() {' - line 705", "'public boolean isEnabled() {' - line 709", "'UserDetails asUserDetails() {' - line 713", "'public String getPassword() {' - line 725", "'public String getUsername() {' - line 730", "'public boolean isAccountNonExpired() {' - line 735", "'public boolean isAccountNonLocked() {' - line 740", "'public boolean isCredentialsNonExpired() {' - line 745", "'public boolean isEnabled() {' - line 750", "'public boolean equals(Object o) {' - line 755", "'public int hashCode() {' - line 760", "'return getUsername().hashCode();' - line 761", "'public ConverterImpl(XStream2 xstream) { super(xstream); }' - line 767", "'@Override protected void callback(Details d, UnmarshallingContext context) {' - line 769", "'public String getDisplayName() {' - line 782", "'public Details newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 787", "'public boolean isEnabled() {' - line 837", "'public UserProperty newInstance(User user) {' - line 843", "'public String getIconFileName() {' - line 856", "'public String getUrlName() {' - line 864", "'public String getDisplayName() {' - line 869", "'public String getDescription() {' - line 874", "'public Category getCategory() {' - line 880", "'public String encode(CharSequence rawPassword) {' - line 899", "'public boolean matches(CharSequence rawPassword, String encodedPassword) {' - line 904", "'public boolean isHashValid(String hash) {' - line 913", "'public String encode(CharSequence rawPassword) {' - line 947", "'public boolean matches(CharSequence rawPassword, String encPass) {' - line 952", "'public boolean isPasswordHashed(String password) {' - line 963", "'private static String generatePassword() {' - line 981", "'public String getDisplayName() {' - line 991", "'public FormValidation doCheckAllowsSignup(@QueryParameter boolean value) {' - line 995", "'public void init(FilterConfig config) throws ServletException {' - line 1005", "'public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 1009", "'private boolean needsToCreateFirstUser() {' - line 1024", "'public void destroy() {' - line 1030"]}, "SparseACL.java": {"METHODS": ["'public Entry(Sid sid, Permission permission, boolean allowed) {' - line 47", "'public SparseACL(ACL parent) {' - line 60", "'public void add(Entry e) {' - line 64", "'public void add(Sid sid, Permission permission, boolean allowed) {' - line 68", "'public boolean hasPermission2(Authentication a, Permission permission) {' - line 73", "'protected Boolean hasPermission(Sid p, Permission permission) {' - line 90"]}, "FederatedLoginService.java": {"METHODS": ["'public User signin() throws UnclaimedIdentityException {' - line 186", "'public void addToCurrentUser() throws IOException {' - line 210", "'public void addTo(User u) throws IOException {' - line 220", "'public String toString() {' - line 230", "'return getIdentifier();' - line 231", "'public UnclaimedIdentityException(FederatedIdentity identity) {' - line 242", "'public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node) throws IOException, ServletException {' - line 247", "'public static ExtensionList<FederatedLoginService> all() {' - line 264"]}, "LegacyAuthorizationStrategy.java": {"METHODS": ["'public LegacyAuthorizationStrategy() {' - line 47", "'public ACL getRootACL() {' - line 51", "'public Collection<String> getGroups() {' - line 56", "'public String getDisplayName() {' - line 64"]}, "GlobalSecurityConfiguration.java": {"METHODS": ["'public SecurityRealm getSecurityRealm() {' - line 69", "'public AuthorizationStrategy getAuthorizationStrategy() {' - line 73", "'public MarkupFormatter getMarkupFormatter() {' - line 77", "'public int getSlaveAgentPort() {' - line 81", "'public boolean isSlaveAgentPortEnforced() {' - line 90", "'public Set<String> getAgentProtocols() {' - line 95", "'public boolean isDisableRememberMe() {' - line 99", "'public Category getCategory() {' - line 105", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 127", "'private boolean configureDescriptor(StaplerRequest req, JSONObject json, Descriptor<?> d) throws FormException {' - line 173", "'public String getDisplayName() {' - line 182", "'return getDescriptor().getDisplayName();' - line 183", "'public String getDescription() {' - line 187", "'public String getIconFileName() {' - line 192", "'public String getUrlName() {' - line 197", "'public Permission getRequiredPermission() {' - line 202", "'public Descriptor<GlobalSecurityConfiguration> getDescriptor() {' - line 215", "'public String getDisplayName() {' - line 223"]}, "PermissionGroup.java": {"METHODS": ["'public PermissionGroup(@NonNull Class owner, Localizable title) throws IllegalStateException {' - line 62", "'public PermissionGroup(String id, @NonNull Class owner, Localizable title) throws IllegalStateException {' - line 73", "'public String getId() {' - line 84", "'public String getOwnerClassName() {' - line 88", "'public Iterator<Permission> iterator() {' - line 93", "'return getPermissions().iterator();' - line 94", "'public int compareTo(PermissionGroup that) {' - line 129", "'return getOwnerClassName().compareTo(that.getOwnerClassName());' - line 137", "'private int compareOrder() {' - line 140", "'@Override public boolean equals(Object o) {' - line 145", "'@Override public int hashCode() {' - line 149", "'return getOwnerClassName().hashCode();' - line 150", "'@Override public String toString() {' - line 157"]}, "AuthenticationProcessingFilter2.java": {"METHODS": ["'public AuthenticationProcessingFilter2(String authenticationGatewayUrl) {' - line 57", "'protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult) throws IOException, ServletException {' - line 66", "'protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {' - line 93"]}, "PermissionScope.java": {"METHODS": ["'public PermissionScope(Class<? extends ModelObject> modelClass, PermissionScope... containers) {' - line 68", "'public boolean isContainedBy(PermissionScope s) {' - line 79"]}, "AccessDeniedException2.java": {"METHODS": ["'public AccessDeniedException2(Authentication authentication, Permission permission) {' - line 29", "'public AccessDeniedException2(Throwable t, Authentication authentication, Permission permission) {' - line 33", "'public void reportAsHeaders(HttpServletResponse rsp) {' - line 43", "'public void report(PrintWriter w) {' - line 52", "'public AccessDeniedException3 toSpring() {' - line 57"]}, "AccessControlled.java": {"METHODS": ["'return getACL().hasPermission(permission);' - line 71", "'return getACL().hasAnyPermission(permission);' - line 81", "'return getACL().hasPermission2(a, permission);' - line 92", "'return hasPermission2(a.toSpring(), permission);' - line 101"]}, "UnwrapSecurityExceptionFilter.java": {"METHODS": ["'public void init(FilterConfig filterConfig) throws ServletException {' - line 47", "'public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 51", "'public void destroy() {' - line 75"]}, "FullControlOnceLoggedInAuthorizationStrategy.java": {"METHODS": ["'public FullControlOnceLoggedInAuthorizationStrategy() {' - line 54", "'public ACL getRootACL() {' - line 58", "'public List<String> getGroups() {' - line 63", "'public boolean isAllowAnonymousRead() {' - line 70", "'public void setAllowAnonymousRead(boolean allowAnonymousRead) {' - line 75", "'public DescriptorImpl() {' - line 102", "'public String getDisplayName() {' - line 108"]}, "ACL.java": {"METHODS": ["'return hasPermission2(a, p);' - line 137", "'public boolean hasPermission2(@NonNull Authentication a, @NonNull Permission permission) {' - line 175", "'return hasPermission(org.acegisecurity.Authentication.fromSpring(a), permission);' - line 177", "'public boolean hasPermission(@NonNull org.acegisecurity.Authentication a, @NonNull Permission permission) {' - line 187", "'return hasPermission2(a.toSpring(), permission);' - line 188", "'public static ACL lambda2(final BiFunction<Authentication, Permission, Boolean> impl) {' - line 197", "'public boolean hasPermission2(Authentication a, Permission permission) {' - line 200", "'public static ACL lambda(final BiFunction<org.acegisecurity.Authentication, Permission, Boolean> impl) {' - line 211", "'public boolean hasPermission(org.acegisecurity.Authentication a, Permission permission) {' - line 214", "'return hasCreatePermission(org.acegisecurity.Authentication.fromSpring(a), c, d);' - line 258", "'return hasCreatePermission2(a.toSpring(), c, d);' - line 271", "'return hasCreatePermission(org.acegisecurity.Authentication.fromSpring(a), c, d);' - line 311", "'return hasCreatePermission2(a.toSpring(), c, d);' - line 324", "'public String toString() {' - line 341", "'public static void impersonate2(@NonNull Authentication auth, @NonNull Runnable body) {' - line 421", "'public static void impersonate(@NonNull org.acegisecurity.Authentication auth, @NonNull Runnable body) {' - line 435", "'return impersonate2(auth.toSpring(), body);' - line 462", "'public static ACLContext as2(@NonNull Authentication auth) {' - line 481", "'public static ACLContext as(@NonNull org.acegisecurity.Authentication auth) {' - line 493", "'return as2(auth.toSpring());' - line 494", "'public static ACLContext as(@CheckForNull User user) {' - line 514", "'return as2(user == null ? Jenkins.ANONYMOUS2 : user.impersonate2());' - line 515", "'public static boolean isAnonymous2(@NonNull Authentication authentication) {' - line 524", "'public static boolean isAnonymous(@NonNull org.acegisecurity.Authentication authentication) {' - line 533", "'return isAnonymous2(authentication.toSpring());' - line 534"]}, "BasicAuthenticationFilter.java": {"METHODS": ["'public void init(FilterConfig filterConfig) throws ServletException {' - line 97", "'public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 102", "'private void prepareRedirect(HttpServletResponse rsp, String path) {' - line 176", "'public void destroy() {' - line 182"]}, "UserDetailsServiceProxy.java": {"METHODS": ["'public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {' - line 42", "'public void setDelegate(UserDetailsService core) {' - line 50"]}, "UserMayOrMayNotExistException2.java": {"METHODS": ["'public UserMayOrMayNotExistException2(String msg) {' - line 43", "'public UserMayOrMayNotExistException2(String msg, Throwable t) {' - line 47"]}, "TokenBasedRememberMeServices2.java": {"METHODS": ["'public TokenBasedRememberMeServices2(UserDetailsService userDetailsService) {' - line 93", "'protected String makeTokenSignature(long tokenExpiryTime, String username) {' - line 97", "'protected int calculateLoginLifetime(HttpServletRequest request, Authentication authentication) {' - line 168", "'return getTokenValiditySeconds();' - line 169", "'protected UserDetails processAutoLoginCookie(String[] cookieTokens, HttpServletRequest request, HttpServletResponse response) {' - line 173", "'private long getTokenExpiryTime(String[] cookieTokens) {' - line 211", "'protected Authentication createSuccessfulAuthentication(HttpServletRequest request, UserDetails userDetails) {' - line 222", "'protected boolean isTokenExpired(long tokenExpiryTimeMs) {' - line 240", "'protected int getTokenValiditySeconds() {' - line 259", "'protected String getCookieName() {' - line 265", "'private static boolean equals(String expected, String actual) {' - line 272", "'private static byte[] bytesUtf8(String s) {' - line 278"]}, "SecurityMode.java": {"METHODS": []}, "RememberMeServicesProxy.java": {"METHODS": ["'public Authentication autoLogin(HttpServletRequest request, HttpServletResponse response) {' - line 54", "'public void loginFail(HttpServletRequest request, HttpServletResponse response) {' - line 61", "'public void loginSuccess(HttpServletRequest request, HttpServletResponse response, Authentication successfulAuthentication) {' - line 67", "'public void setDelegate(RememberMeServices delegate) {' - line 72"]}, "HudsonAuthenticationEntryPoint.java": {"METHODS": ["'public HudsonAuthenticationEntryPoint(String loginFormUrl) {' - line 65", "'public void commence(HttpServletRequest req, HttpServletResponse rsp, AuthenticationException reason) throws IOException, ServletException {' - line 70", "'private void printResponse(String loginForm, PrintWriter out) {' - line 124"]}, "GroupDetails.java": {"METHODS": ["'public String getDisplayName() {' - line 52", "'return getName();' - line 53", "'public Set<String> getMembers() {' - line 69"]}, "Permission.java": {"METHODS": ["'public Permission(@NonNull PermissionGroup group, @NonNull String name, @CheckForNull Localizable description, @CheckForNull Permission impliedBy, boolean enable) {' - line 168", "'public Permission(@NonNull PermissionGroup group, @NonNull String name, @CheckForNull Localizable description, @CheckForNull Permission impliedBy) {' - line 177", "'public Permission(@NonNull PermissionGroup group, @NonNull String name, @CheckForNull Permission impliedBy) {' - line 186", "'private Permission(@NonNull PermissionGroup group, @NonNull String name) {' - line 190", "'public boolean isContainedBy(@NonNull PermissionScope s) {' - line 197", "'@Override public boolean equals(Object o) {' - line 222", "'@Override public int hashCode() {' - line 226", "'return getId().hashCode();' - line 227", "'public String toString() {' - line 253", "'public void setEnabled(boolean enable) {' - line 257", "'public boolean getEnabled() {' - line 261"]}, "AuthenticationManagerProxy.java": {"METHODS": ["'public Authentication authenticate(Authentication authentication) throws AuthenticationException {' - line 48", "'public void setDelegate(AuthenticationManager manager) {' - line 57"]}, "HttpSessionContextIntegrationFilter2.java": {"METHODS": ["'public HttpSessionContextIntegrationFilter2(SecurityContextRepository securityContextRepository) {' - line 43", "'public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {' - line 48", "'private boolean hasInvalidSessionSeed(Authentication authentication, HttpSession session) {' - line 65"]}, "AccountCreationFailedException.java": {"METHODS": ["'public AccountCreationFailedException(String message) {' - line 36"]}, "ContainerAuthentication.java": {"METHODS": ["'public ContainerAuthentication(HttpServletRequest request) {' - line 59", "'public Object getCredentials() {' - line 81", "'public Object getDetails() {' - line 86", "'public String getPrincipal() {' - line 91", "'public boolean isAuthenticated() {' - line 96", "'public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {' - line 101", "'public String getName() {' - line 106", "'return getPrincipal();' - line 107"]}, "HudsonFilter.java": {"METHODS": ["'public void init(FilterConfig filterConfig) throws ServletException {' - line 101", "'public static HudsonFilter get(ServletContext context) {' - line 128", "'public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 158", "'public void destroy() {' - line 176"]}, "CliAuthenticator.java": {"METHODS": []}, "ChainedServletFilter.java": {"METHODS": ["'public ChainedServletFilter() {' - line 50", "'public ChainedServletFilter(Filter... filters) {' - line 54", "'public ChainedServletFilter(Collection<? extends Filter> filters) {' - line 58", "'public void setFilters(Collection<? extends Filter> filters) {' - line 62", "'public void init(FilterConfig filterConfig) throws ServletException {' - line 67", "'public void doFilter(ServletRequest request, ServletResponse response, final FilterChain chain) throws IOException, ServletException {' - line 79", "'new FilterChain() {' - line 84", "'public void doFilter(ServletRequest request, ServletResponse response) throws IOException, ServletException {' - line 90", "'private int status() {' - line 107", "'public void destroy() {' - line 115"]}, "AccessDeniedException3.java": {"METHODS": ["'public AccessDeniedException3(Authentication authentication, Permission permission) {' - line 30", "'public AccessDeniedException3(Throwable t, Authentication authentication, Permission permission) {' - line 34", "'public void reportAsHeaders(HttpServletResponse rsp) {' - line 44", "'public void report(PrintWriter w) {' - line 64"]}, "LegacySecurityRealm.java": {"METHODS": ["'public LegacySecurityRealm() {' - line 51", "'public SecurityComponents createSecurityComponents() {' - line 55", "'public Authentication authenticate(Authentication authentication) throws AuthenticationException {' - line 60", "'public String getAuthenticationGatewayUrl() {' - line 72", "'public String getLoginUrl() {' - line 77", "'public Filter createFilter(FilterConfig filterConfig) {' - line 82", "'public DescriptorImpl() {' - line 105", "'public String getDisplayName() {' - line 111"]}, "AccessDeniedHandlerImpl.java": {"METHODS": ["'public void handle(HttpServletRequest req, HttpServletResponse rsp, AccessDeniedException cause) throws IOException, ServletException {' - line 47"]}, "SidACL.java": {"METHODS": ["'public boolean hasPermission2(@NonNull Authentication a, Permission permission) {' - line 47", "'protected Boolean _hasPermission(@NonNull Authentication a, Permission permission) {' - line 70", "'protected String toString(Sid p) {' - line 121", "'protected Boolean hasPermission(Sid p, Permission permission) {' - line 144"]}, "PermissionAdder.java": {"METHODS": []}, "AbstractPasswordBasedSecurityRealm.java": {"METHODS": ["'public SecurityComponents createSecurityComponents() {' - line 31", "'new ImpersonatingUserDetailsService2(this::loadUserByUsername2));' - line 43", "'protected UserDetails authenticate2(String username, String password) throws AuthenticationException {' - line 70", "'return authenticate(username, password).toSpring();' - line 73", "'private UserDetails doAuthenticate(String username, String password) throws AuthenticationException {' - line 94", "'public UserDetails loadUserByUsername2(String username) throws UsernameNotFoundException {' - line 114", "'return loadUserByUsername(username).toSpring();' - line 117", "'public GroupDetails loadGroupByGroupname2(String groupname, boolean fetchMembers) throws UsernameNotFoundException {' - line 147", "'return loadGroupByGroupname(groupname);' - line 150", "'public GroupDetails loadGroupByGroupname(String groupname) throws org.acegisecurity.userdetails.UsernameNotFoundException, org.springframework.dao.DataAccessException {' - line 166", "'return loadGroupByGroupname2(groupname, false);' - line 168", "'protected void additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {' - line 176", "'protected UserDetails retrieveUser(String username, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {' - line 181", "'return doAuthenticate(username, authentication.getCredentials().toString());' - line 182"]}, "FederatedLoginServiceUserProperty.java": {"METHODS": ["'protected FederatedLoginServiceUserProperty(Collection<String> identifiers) {' - line 46", "'public boolean has(String identifier) {' - line 50", "'public Collection<String> getIdentifiers() {' - line 54"]}, "NoopFilter.java": {"METHODS": ["'public void init(FilterConfig filterConfig) throws ServletException {' - line 41", "'public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 45", "'public void destroy() {' - line 50"]}, "UserMayOrMayNotExistException.java": {"METHODS": ["'public UserMayOrMayNotExistException(String msg) {' - line 34", "'public UserMayOrMayNotExistException(String msg, Object extraInformation) {' - line 38", "'public UserMayOrMayNotExistException(String msg, Throwable t) {' - line 42", "'public UserMayOrMayNotExistException2 toSpring() {' - line 47", "'public static UserMayOrMayNotExistException fromSpring(UserMayOrMayNotExistException2 x) {' - line 51"]}, "AuthorizationStrategy.java": {"METHODS": ["'return getACL((Job) project);' - line 87", "'return getRootACL();' - line 91", "'return getRootACL();' - line 127", "'return getRootACL();' - line 140", "'return getACL(computer.getNode());' - line 153", "'return getRootACL();' - line 166", "'return getRootACL();' - line 170", "'private Object readResolve() {' - line 218", "'public String getDisplayName() {' - line 238"]}, "ACLContext.java": {"METHODS": ["'public SecurityContext getPreviousContext2() {' - line 58", "'public void close() {' - line 71"]}, "WhoAmI.java": {"METHODS": ["'public Api getApi() {' - line 36", "'public String getName() {' - line 41", "'return auth().getName();' - line 42", "'public boolean isAuthenticated() {' - line 46", "'return auth().isAuthenticated();' - line 47", "'public boolean isAnonymous() {' - line 51", "'public String getDetails() {' - line 56", "'return auth().getDetails() != null ? auth().getDetails().toString() : null;' - line 57", "'public String getToString() {' - line 61", "'return auth().toString();' - line 62", "'public String[] getAuthorities() {' - line 70", "'public boolean isHeaderDangerous(@NonNull String name) {' - line 83", "'public String getIconFileName() {' - line 88", "'public String getDisplayName() {' - line 93", "'public String getUrlName() {' - line 98"]}, "CrumbFilter.java": {"METHODS": ["'public CrumbIssuer getCrumbIssuer() {' - line 46", "'public ForwardToView getForwardView() {' - line 56", "'public void init(FilterConfig filterConfig) throws ServletException {' - line 62", "'public String getPathInfo() {' - line 71", "'return canonicalPath(getRequestURI().substring(getContextPath().length()));' - line 73", "'private static String canonicalPath(String path) {' - line 78", "'public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 114", "'private String extractCrumbFromRequest(HttpServletRequest httpRequest, String crumbFieldName) {' - line 163", "'protected static boolean isMultipart(HttpServletRequest request) {' - line 178", "'public void destroy() {' - line 187"]}, "GlobalCrumbIssuerConfiguration.java": {"METHODS": ["'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 52", "'public CrumbIssuer getCrumbIssuer() {' - line 66", "'public static CrumbIssuer createDefaultCrumbIssuer() {' - line 71"]}, "CrumbIssuerDescriptor.java": {"METHODS": ["'protected CrumbIssuerDescriptor(String salt, String crumbRequestField) {' - line 28", "'public String getCrumbSalt() {' - line 36", "'public void setCrumbSalt(String salt) {' - line 43", "'public String getCrumbRequestField() {' - line 55", "'public void setCrumbRequestField(String requestField) {' - line 62"]}, "CrumbIssuer.java": {"METHODS": ["'public String getCrumbRequestField() {' - line 56", "'return getDescriptor().getCrumbRequestField();' - line 57", "'public String getCrumb() {' - line 65", "'return getCrumb(Stapler.getCurrentRequest());' - line 66", "'public String getCrumb(ServletRequest request) {' - line 72", "'public boolean validateCrumb(ServletRequest request) {' - line 107", "'return validateCrumb(request, crumbSalt, request.getParameter(crumbField));' - line 112", "'public boolean validateCrumb(ServletRequest request, MultipartFormDataParser parser) {' - line 120", "'return validateCrumb(request, crumbSalt, parser.get(crumbField));' - line 125", "'public CrumbIssuerDescriptor<CrumbIssuer> getDescriptor() {' - line 139", "'public Api getApi() {' - line 150", "'public static void initStaplerCrumbIssuer() {' - line 158", "'public String issueCrumb(StaplerRequest request) {' - line 161", "'public void validateCrumb(StaplerRequest request, String submittedCrumb) {' - line 167", "'@Override public void doXml(StaplerRequest req, StaplerResponse rsp, @QueryParameter String xpath, @QueryParameter String wrapper, @QueryParameter String tree, @QueryParameter int depth) throws IOException, ServletException {' - line 186"]}, "DefaultCrumbIssuer.java": {"METHODS": ["'public DefaultCrumbIssuer(boolean excludeClientIPFromCrumb) {' - line 47", "'public boolean isExcludeClientIPFromCrumb() {' - line 52", "'private Object readResolve() {' - line 56", "'public boolean validateCrumb(ServletRequest request, String salt, String crumb) {' - line 95", "'private String getClientIP(HttpServletRequest req) {' - line 109", "'public DescriptorImpl() {' - line 126", "'public String getDisplayName() {' - line 132", "'public DefaultCrumbIssuer newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 137"]}, "CrumbExclusion.java": {"METHODS": ["'public static ExtensionList<CrumbExclusion> all() {' - line 36"]}, "CaptchaSupportDescriptor.java": {"METHODS": []}, "CaptchaSupport.java": {"METHODS": ["'public CaptchaSupportDescriptor getDescriptor() {' - line 61"]}, "MemoryUsageMonitor.java": {"METHODS": ["'private MemoryGroup(List<MemoryPoolMXBean> pools, MemoryType type) {' - line 67", "'private void update() {' - line 74", "'public TrendChart doGraph(@QueryParameter String type) throws IOException {' - line 95", "'public MemoryUsageMonitor() {' - line 104", "'public long getRecurrencePeriod() {' - line 111", "'protected void doRun() {' - line 116"]}, "TooManyJobsButNoView.java": {"METHODS": ["'public String getDisplayName() {' - line 48", "'public boolean isActivated() {' - line 53", "'public void doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 66", "'public Permission getRequiredPermission() {' - line 77"]}, "ReverseProxySetupMonitor.java": {"METHODS": ["'public boolean isActivated() {' - line 63", "'public HttpResponse doTest(StaplerRequest request, @QueryParameter boolean testWithContext) {' - line 70", "'public void getTestForReverseProxySetup(String rest) {' - line 94", "'public Permission getRequiredPermission() {' - line 107", "'public HttpResponse doAct(@QueryParameter String no) throws IOException {' - line 117", "'public String getDisplayName() {' - line 129"]}, "NullIdDescriptorMonitor.java": {"METHODS": ["'public String getDisplayName() {' - line 53", "'public boolean isActivated() {' - line 60", "'public List<Descriptor> getProblems() {' - line 64", "'public void verify() {' - line 69"]}, "HudsonHomeDiskUsageMonitor.java": {"METHODS": ["'public HudsonHomeDiskUsageMonitor() {' - line 51", "'public boolean isActivated() {' - line 56", "'public String getDisplayName() {' - line 61", "'public HttpResponse doAct(@QueryParameter String no) throws IOException {' - line 69", "'public List<Solution> getSolutions() {' - line 78", "'public Solution getSolution(String id) {' - line 85", "'public static HudsonHomeDiskUsageMonitor get() {' - line 95", "'return all().get(HudsonHomeDiskUsageMonitor.class);' - line 96", "'protected Solution(String id) {' - line 120", "'protected Solution() {' - line 124", "'public String getUrl() {' - line 131", "'public static ExtensionList<Solution> all() {' - line 138"]}, "HudsonHomeDiskUsageChecker.java": {"METHODS": ["'public long getRecurrencePeriod() {' - line 43", "'protected void doRun() {' - line 48"]}, "OldDataMonitor.java": {"METHODS": ["'static OldDataMonitor get(Jenkins j) throws IllegalStateException {' - line 91", "'public OldDataMonitor() {' - line 95", "'public String getDisplayName() {' - line 100", "'public boolean isActivated() {' - line 105", "'private static void remove(Saveable obj, boolean isDelete) {' - line 120", "'public void onChange(Saveable obj, XmlFile file) {' - line 138", "'public void onDeleted(Item item) {' - line 146", "'public void onDeleted(Run run) {' - line 154", "'public static void report(Saveable obj, String version) {' - line 166", "'public static void report(UnmarshallingContext context, String version) {' - line 189", "'private ReportException(String version) {' - line 196", "'public static void report(Saveable obj, Collection<Throwable> errors) {' - line 206", "'public VersionRange(VersionRange previous, String version, String extra) {' - line 249", "'public String toString() {' - line 277", "'public boolean isOld(int threshold) {' - line 286", "'public Iterator<VersionNumber> getVersionList() {' - line 298", "'public HttpResponse doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {' - line 312", "'public HttpResponse doUpgrade(StaplerRequest req, StaplerResponse rsp) {' - line 326", "'public HttpResponse doDiscard(StaplerRequest req, StaplerResponse rsp) {' - line 343", "'private void saveAndRemoveEntries(Predicate<Map.Entry<SaveableReference, VersionRange>> matchingPredicate) {' - line 349", "'public HttpResponse doIndex(StaplerResponse rsp) throws IOException {' - line 379", "'private static SaveableReference referTo(Saveable s) {' - line 389", "'@Override public Saveable get() {' - line 406", "'@Override public int hashCode() {' - line 410", "'@Override public boolean equals(Object obj) {' - line 414", "'@Override public Saveable get() {' - line 428", "'@Override public int hashCode() {' - line 438", "'@Override public boolean equals(Object obj) {' - line 442", "'public Category getCategory() {' - line 451", "'public String getIconFileName() {' - line 456", "'public String getUrlName() {' - line 461", "'public String getDescription() {' - line 466", "'public String getDisplayName() {' - line 471", "'public Badge getBadge() {' - line 476"]}, "GetNodeCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 44", "'protected int run() throws IOException {' - line 50"]}, "InstallPluginCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 59", "'protected int run() throws Exception {' - line 83", "'private static File getTmpFile() throws Exception {' - line 170", "'private static File moveToFinalLocation(File tmpFile) throws Exception {' - line 174"]}, "RemoveJobFromViewCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 47", "'protected int run() throws Exception {' - line 52"]}, "OfflineNodeCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 52", "'protected int run() throws Exception {' - line 57"]}, "DeleteBuildsCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 44", "'protected void printUsageSummary(PrintStream stderr) {' - line 49", "'protected int act(List<Run<?, ?>> builds) throws IOException {' - line 56"]}, "DeleteNodeCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 47", "'protected int run() throws Exception {' - line 53"]}, "SessionIdCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 14", "'protected int run() {' - line 19"]}, "WaitNodeOfflineCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 42", "'protected int run() throws Exception {' - line 47"]}, "GetJobCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 39", "'protected int run() throws Exception {' - line 44"]}, "ListJobsCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 43", "'protected int run() throws Exception {' - line 51"]}, "UpdateJobCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 41", "'protected int run() throws Exception {' - line 46"]}, "WaitNodeOnlineCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 42", "'protected int run() throws Exception {' - line 47"]}, "ClearQueueCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 42", "'protected int run() throws Exception {' - line 47"]}, "WhoAmICommand.java": {"METHODS": ["'public String getShortDescription() {' - line 39", "'protected int run() {' - line 44"]}, "DeleteJobCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 48", "'protected int run() throws Exception {' - line 54"]}, "QuietDownCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 52", "'protected int run() throws Exception {' - line 57"]}, "GetViewCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 41", "'protected int run() throws Exception {' - line 47"]}, "UpdateViewCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 42", "'protected int run() throws Exception {' - line 48"]}, "AbstractBuildRangeCommand.java": {"METHODS": ["'protected int run() throws Exception {' - line 24", "'return act((List) job.getBuilds(rs));' - line 27"]}, "CliCrumbExclusion.java": {"METHODS": ["'public boolean process(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException {' - line 43"]}, "DeleteViewCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 47", "'protected int run() throws Exception {' - line 53"]}, "CLICommand.java": {"METHODS": ["'public String getName() {' - line 168", "'public int main(List<String> args, Locale locale, InputStream stdin, PrintStream stdout, PrintStream stderr) {' - line 226", "'private void logFailedCommandAndPrintExceptionErrorMessage(List<String> args, Throwable e) {' - line 288", "'private void logAndPrintError(Throwable e, String errorMessage, String logMessage, Level logLevel) {' - line 296", "'protected CmdLineParser getCmdLineParser() {' - line 308", "'public Channel checkChannel() throws AbortException {' - line 316", "'public Authentication getTransportAuthentication2() {' - line 337", "'public void setTransportAuth2(Authentication transportAuth) {' - line 354", "'public void setTransportAuth(org.acegisecurity.Authentication transportAuth) {' - line 362", "'protected void printUsage(PrintStream stderr, CmdLineParser p) {' - line 393", "'protected void printUsageSummary(PrintStream stderr) {' - line 463", "'protected String getClientSystemProperty(String name) throws IOException, InterruptedException {' - line 472", "'public void setClientCharset(@NonNull Charset encoding) {' - line 481", "'protected String getClientEnvironmentVariable(String name) throws IOException, InterruptedException {' - line 499", "'protected CLICommand createClone() {' - line 507", "'return getClass().getDeclaredConstructor().newInstance();' - line 509", "'protected void registerOptionHandlers() {' - line 518", "'public static ExtensionList<CLICommand> all() {' - line 532", "'public static CLICommand clone(String name) {' - line 539", "'/*package*/ static CLICommand setCurrent(CLICommand cmd) {' - line 550", "'public static CLICommand getCurrent() {' - line 559", "'new DiscoverServiceNames(cls).findResourceNames(OptionHandler.class.getName());' - line 571", "'new DiscoverClasses(cls).findResourceClasses(servicesIter);' - line 573"]}, "GroovyCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 47", "'protected int run() throws Exception {' - line 61", "'private String loadScript() throws CmdLineException, IOException, InterruptedException {' - line 79"]}, "CloneableCLICommand.java": {"METHODS": ["'protected CLICommand createClone() {' - line 35"]}, "SetBuildDisplayNameCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 14", "'protected int run() throws Exception {' - line 28"]}, "CopyJobCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 41", "'protected int run() throws Exception {' - line 52"]}, "VersionCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 37", "'protected int run() {' - line 42"]}, "ReloadConfigurationCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 42", "'protected int run() throws Exception {' - line 47"]}, "Connection.java": {"METHODS": ["'public Connection(Socket socket) throws IOException {' - line 71", "'public Connection(InputStream in, OutputStream out) {' - line 75", "'public void writeUTF(String msg) throws IOException {' - line 87", "'public String readUTF() throws IOException {' - line 91", "'public void writeBoolean(boolean b) throws IOException {' - line 95", "'public boolean readBoolean() throws IOException {' - line 99", "'public void writeObject(Object o) throws IOException {' - line 106", "'public void writeKey(Key key) throws IOException {' - line 124", "'public X509EncodedKeySpec readKey() throws IOException {' - line 128", "'public void writeByteArray(byte[] data) throws IOException {' - line 133", "'public byte[] readByteArray() throws IOException {' - line 138", "'public KeyAgreement diffieHellman(boolean side) throws IOException, GeneralSecurityException {' - line 155", "'return diffieHellman(side, 512);' - line 156", "'public KeyAgreement diffieHellman(boolean side, int keySize) throws IOException, GeneralSecurityException {' - line 159", "'public Connection encryptConnection(SecretKey sessionKey, String algorithm) throws IOException, GeneralSecurityException {' - line 198", "'private IvParameterSpec createIv(SecretKey sessionKey) {' - line 210", "'public static byte[] fold(byte[] bytes, int size) {' - line 220", "'private String detectKeyAlgorithm(KeyPair kp) {' - line 228", "'return detectKeyAlgorithm(kp.getPublic());' - line 229", "'private String detectKeyAlgorithm(PublicKey kp) {' - line 232", "'public void proveIdentity(byte[] sharedSecret, KeyPair key) throws IOException, GeneralSecurityException {' - line 242", "'public PublicKey verifyIdentity(byte[] sharedSecret) throws IOException, GeneralSecurityException {' - line 257", "'public void close() throws IOException {' - line 275"]}, "CreateJobCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 40", "'protected int run() throws Exception {' - line 48"]}, "GroovyshCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 57", "'protected int run() {' - line 64", "'public Object doCall(Object[] args) {' - line 110"]}, "CreateViewCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 43", "'protected int run() throws Exception {' - line 49"]}, "ConsoleCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 25", "'protected int run() throws Exception {' - line 42", "'private long seek(Run<?, ?> run) throws IOException {' - line 96", "'void add(long pos) {' - line 106", "'long get() {' - line 111", "'protected void printUsageSummary(PrintStream stderr) {' - line 143"]}, "UpdateNodeCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 43", "'protected int run() throws IOException, ServletException {' - line 49"]}, "ListPluginsCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 42", "'protected int run() {' - line 50", "'private void printPlugin(PluginWrapper plugin, int colWidthShortName, int colWidthDisplayName) {' - line 86"]}, "DisconnectNodeCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 54", "'protected int run() throws Exception {' - line 59"]}, "AddJobToViewCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 48", "'protected int run() throws Exception {' - line 53"]}, "RunRangeCommand.java": {"METHODS": ["'protected int run() throws Exception {' - line 21", "'return act((List) job.getBuilds(rs));' - line 24"]}, "BuildCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 69", "'protected int run() throws Exception {' - line 100", "'protected void printUsageSummary(PrintStream stderr) {' - line 222", "'public CLICause() {' - line 243", "'public CLICause(String startedBy) {' - line 247", "'public String getShortDescription() {' - line 252", "'public void print(TaskListener listener) {' - line 259", "'public boolean equals(Object o) {' - line 265", "'public int hashCode() {' - line 280"]}, "ListChangesCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 29", "'//    protected void printUsageSummary(PrintStream stderr) {' - line 34", "'protected int act(List<Run<?, ?>> builds) throws IOException {' - line 46"]}, "CancelQuietDownCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 42", "'protected int run() throws Exception {' - line 47"]}, "OnlineNodeCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 45", "'protected int run() throws Exception {' - line 50"]}, "CLIAction.java": {"METHODS": ["'public String getIconFileName() {' - line 78", "'public String getDisplayName() {' - line 83", "'public String getUrlName() {' - line 88", "'public void doCommand(StaplerRequest req, StaplerResponse rsp) throws ServletException, IOException {' - line 92", "'public boolean isWebSocketSupported() {' - line 109", "'public HttpResponse doWs() {' - line 116", "'public void send(byte[] data) throws IOException {' - line 126", "'public void close() throws IOException {' - line 133", "'private void doClose() throws IOException {' - line 138", "'protected void opened() {' - line 143", "'new Thread(() -> {' - line 150", "'protected void binary(byte[] payload, int offset, int len) {' - line 164", "'protected void error(Throwable cause) {' - line 175", "'protected void closed(int statusCode, String reason) {' - line 180", "'public Object getTarget() {' - line 189", "'protected void onArg(String text) {' - line 221", "'protected void onLocale(String text) {' - line 226", "'protected void onEncoding(String text) {' - line 237", "'protected void onStart() {' - line 246", "'protected void onStdin(byte[] chunk) throws IOException {' - line 251", "'protected void onEndStdin() throws IOException {' - line 256", "'protected void handleClose() {' - line 261", "'void run() throws IOException, InterruptedException {' - line 273", "'protected FullDuplexHttpService createService(StaplerRequest req, UUID uuid) throws IOException {' - line 323", "'protected void run(InputStream upload, OutputStream download) throws IOException, InterruptedException {' - line 326"]}, "CliTransportAuthenticator.java": {"METHODS": ["'public static ExtensionList<CliTransportAuthenticator> all() {' - line 35"]}, "CreateNodeCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 43", "'protected int run() throws Exception {' - line 49"]}, "HelpCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 46", "'protected int run() throws Exception {' - line 51", "'return showCommandDetails();' - line 58", "'private int showAllCommands() {' - line 65", "'private int showCommandDetails() throws Exception {' - line 78"]}, "EnablePluginCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 52", "'protected int run() throws Exception {' - line 57", "'private boolean enablePlugin(PluginManager manager, String shortName) throws IOException {' - line 71", "'private void enableDependencies(PluginManager manager, PluginWrapper plugin) throws IOException {' - line 86"]}, "DisablePluginCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 60", "'protected void printUsageSummary(PrintStream stderr) {' - line 69", "'protected int run() throws Exception {' - line 75", "'return getResultCode(results);' - line 105", "'private void printResults(List<PluginWrapper.PluginDisableResult> results) {' - line 112", "'private void printIndented(int indent, String format, String... arguments) {' - line 124", "'private void printResult(PluginWrapper.PluginDisableResult oneResult, int indent) {' - line 142", "'private void restartIfNecessary(List<PluginWrapper.PluginDisableResult> results) throws RestartNotSupportedException {' - line 161", "'private boolean restartIfNecessary(PluginWrapper.PluginDisableResult oneResult) throws RestartNotSupportedException {' - line 177", "'private int getResultCode(List<PluginWrapper.PluginDisableResult> results) {' - line 203", "'private int getResultCode(PluginWrapper.PluginDisableResult result) {' - line 221"]}, "SetBuildDescriptionCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 16", "'protected int run() throws Exception {' - line 30"]}, "ReloadJobCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 52", "'protected int run() throws Exception {' - line 58"]}, "ConnectNodeCommand.java": {"METHODS": ["'public String getShortDescription() {' - line 53", "'protected int run() throws Exception {' - line 58"]}, "ViewOptionHandler.java": {"METHODS": ["'public ViewOptionHandler(CmdLineParser parser, OptionDef option, Setter<View> setter) {' - line 63", "'public int parseArguments(Parameters params) throws CmdLineException {' - line 69", "'public View getView(final String name) {' - line 91", "'public String getDefaultMetaVariable() {' - line 121"]}, "AbstractItemOptionHandler.java": {"METHODS": ["'public AbstractItemOptionHandler(CmdLineParser parser, OptionDef option, Setter<AbstractItem> setter) {' - line 39", "'@Override protected Class<AbstractItem> type() {' - line 43"]}, "NodeOptionHandler.java": {"METHODS": ["'public NodeOptionHandler(CmdLineParser parser, OptionDef option, Setter<Node> setter) {' - line 45", "'public int parseArguments(Parameters params) throws CmdLineException {' - line 51", "'public String getDefaultMetaVariable() {' - line 63"]}, "GenericItemOptionHandler.java": {"METHODS": ["'protected GenericItemOptionHandler(CmdLineParser parser, OptionDef option, Setter<T> setter) {' - line 52", "'@Override public int parseArguments(Parameters params) throws CmdLineException {' - line 58", "'@Override public String getDefaultMetaVariable() {' - line 83"]}, "AbstractProjectOptionHandler.java": {"METHODS": ["'public AbstractProjectOptionHandler(CmdLineParser parser, OptionDef option, Setter<AbstractProject> setter) {' - line 41", "'@Override protected Class<AbstractProject> type() {' - line 45", "'public String getDefaultMetaVariable() {' - line 50"]}, "ParameterizedJobOptionHandler.java": {"METHODS": ["'public ParameterizedJobOptionHandler(CmdLineParser parser, OptionDef option, Setter<ParameterizedJobMixIn.ParameterizedJob> setter) {' - line 43", "'public String getDefaultMetaVariable() {' - line 53"]}, "TopLevelItemOptionHandler.java": {"METHODS": ["'public TopLevelItemOptionHandler(CmdLineParser parser, OptionDef option, Setter<TopLevelItem> setter) {' - line 16", "'@Override protected Class<TopLevelItem> type() {' - line 20", "'public String getDefaultMetaVariable() {' - line 25"]}, "JobOptionHandler.java": {"METHODS": ["'public JobOptionHandler(CmdLineParser parser, OptionDef option, Setter<Job> setter) {' - line 41", "'@Override protected Class<Job> type() {' - line 45", "'public String getDefaultMetaVariable() {' - line 50"]}, "CLIResolver.java": {"METHODS": []}, "OptionHandlerExtension.java": {"METHODS": []}, "CLIMethod.java": {"METHODS": ["'String name();' - line 68", "'boolean usesChannel() default false;' - line 73"]}, "MethodBinder.java": {"METHODS": ["'public void addValue(Object value) throws CmdLineException {' - line 71", "'public Class getType() {' - line 76", "'public boolean isMultiValued() {' - line 81", "'public FieldSetter asFieldSetter() {' - line 86", "'public AnnotatedElement asAnnotatedElement() {' - line 91", "'public Object call(Object instance) throws Exception {' - line 112", "'private ArgumentImpl(Argument base, int bias) {' - line 131", "'public String usage() {' - line 137", "'public String metaVar() {' - line 142", "'public boolean required() {' - line 147", "'public int index() {' - line 157", "'public boolean multiValued() {' - line 162", "'public boolean hidden() {' - line 172", "'public boolean equals(Object o) {' - line 177", "'public int hashCode() {' - line 189"]}, "CLIRegisterer.java": {"METHODS": ["'public ExtensionComponentSet refresh() throws ExtensionRefreshException {' - line 75", "'private Method findResolver(Class type) throws IOException {' - line 91", "'private List<ExtensionComponent<CLICommand>> discover(@NonNull final Jenkins jenkins) {' - line 100", "'public String getName() {' - line 115", "'public String getShortDescription() {' - line 120", "'protected CmdLineParser getCmdLineParser() {' - line 126", "'return bindMethod(new ArrayList<>());' - line 127", "'private CmdLineParser bindMethod(List<MethodBinder> binders) {' - line 130", "'public int main(List<String> args, Locale locale, InputStream stdin, PrintStream stdout, PrintStream stderr) {' - line 196", "'private void printError(String errorMessage) {' - line 264", "'private void logAndPrintError(Throwable e, String errorMessage, String logMessage, Level logLevel) {' - line 269", "'protected int run() throws Exception {' - line 275", "'private ResourceBundleHolder loadMessageBundle(Method m) throws ClassNotFoundException {' - line 293"]}, "BatchFile.java": {"METHODS": ["'public BatchFile(String command) {' - line 54", "'public void setConfiguredLocalRules(List<EnvVarsFilterLocalRule> configuredLocalRules) {' - line 65", "'public String[] buildCommandLine(FilePath script) {' - line 72", "'protected String getContents() {' - line 77", "'protected String getFileExtension() {' - line 82", "'public void setUnstableReturn(Integer unstableReturn) {' - line 92", "'protected boolean isErrorlevelForUnstableBuild(int exitCode) {' - line 97", "'private Object readResolve() {' - line 101", "'public String getHelpFile() {' - line 112", "'public String getDisplayName() {' - line 118", "'public FormValidation doCheckUnstableReturn(@QueryParameter String value) {' - line 126", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 147", "'public List<EnvVarsFilterLocalRuleDescriptor> getApplicableLocalRules() {' - line 153"]}, "BuildStepMonitor.java": {"METHODS": ["'public boolean perform(BuildStep bs, AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 18", "'public boolean perform(BuildStep bs, AbstractBuild build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 24", "'public boolean perform(BuildStep bs, AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 40"]}, "CommandInterpreter.java": {"METHODS": ["'protected CommandInterpreter(String command) {' - line 70", "'public List<EnvVarsFilterLocalRule> getConfiguredLocalRules() {' - line 85", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException {' - line 90", "'return perform(build, launcher, (TaskListener) listener);' - line 91", "'protected boolean isErrorlevelForUnstableBuild(int exitCode) {' - line 102", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, TaskListener listener) throws InterruptedException {' - line 106", "'protected int join(Proc p) throws IOException, InterruptedException {' - line 193", "'public FilePath createScriptFile(@NonNull FilePath dir) throws IOException, InterruptedException {' - line 200"]}, "BuildWrapper.java": {"METHODS": ["'public boolean tearDown(AbstractBuild build, BuildListener listener) throws IOException, InterruptedException {' - line 112", "'return tearDown((Build) build, listener);' - line 114", "'public boolean tearDown(Build build, BuildListener listener) throws IOException, InterruptedException {' - line 124", "'public Environment setUp(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 151", "'return setUp((Build) build, launcher, listener);' - line 154", "'public Environment setUp(Build build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 168", "'return setUp((AbstractBuild) build, launcher, listener);' - line 171", "'public Launcher decorateLauncher(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException, RunnerAbortedException {' - line 208", "'public OutputStream decorateLogger(AbstractBuild build, OutputStream logger) throws IOException, InterruptedException, RunnerAbortedException {' - line 235", "'public void preCheckout(AbstractBuild build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException{' - line 262", "'public Action getProjectAction(AbstractProject job) {' - line 277", "'public void makeBuildVariables(AbstractBuild build, Map<String, String> variables) {' - line 309", "'public void makeSensitiveBuildVariables(AbstractBuild build, Set<String> sensitiveVariables) {' - line 325"]}, "Recorder.java": {"METHODS": ["'protected Recorder() {}' - line 49", "'public BuildStepDescriptor getDescriptor() {' - line 52"]}, "BuildWrapperDescriptor.java": {"METHODS": ["'protected BuildWrapperDescriptor(Class<? extends BuildWrapper> clazz) {' - line 38", "'protected BuildWrapperDescriptor() {' - line 49"]}, "Maven.java": {"METHODS": ["'public Maven(String targets, String name) {' - line 159", "'public Maven(String targets, String name, String pom, String properties, String jvmOptions) {' - line 163", "'public Maven(String targets, String name, String pom, String properties, String jvmOptions, boolean usePrivateRepository) {' - line 167", "'public Maven(String targets, String name, String pom, String properties, String jvmOptions, boolean usePrivateRepository, SettingsProvider settings, GlobalSettingsProvider globalSettings) {' - line 171", "'public Maven(String targets, String name, String pom, String properties, String jvmOptions, boolean usePrivateRepository, SettingsProvider settings, GlobalSettingsProvider globalSettings, boolean injectBuildVariables) {' - line 176", "'public String getTargets() {' - line 188", "'public SettingsProvider getSettings() {' - line 195", "'protected void setSettings(SettingsProvider settings) {' - line 199", "'public GlobalSettingsProvider getGlobalSettings() {' - line 206", "'protected void setGlobalSettings(GlobalSettingsProvider globalSettings) {' - line 210", "'public void setUsePrivateRepository(boolean usePrivateRepository) {' - line 214", "'public boolean usesPrivateRepository() {' - line 218", "'public boolean isInjectBuildVariables() {' - line 223", "'public MavenInstallation getMaven() {' - line 231", "'private Object readResolve() {' - line 240", "'public String invoke(File ws, VirtualChannel channel) throws IOException {' - line 261", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 290", "'protected void wrapUpArguments(ArgumentListBuilder args, String normalizedTarget, AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws IOException, InterruptedException {' - line 387", "'protected void buildEnvVars(EnvVars env, MavenInstallation mi) throws IOException, InterruptedException {' - line 393", "'public DescriptorImpl getDescriptor() {' - line 414", "'public DescriptorImpl() {' - line 433", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 438", "'public String getHelpFile(String fieldName) {' - line 443", "'public String getDisplayName() {' - line 450", "'public GlobalSettingsProvider getDefaultGlobalSettingsProvider() {' - line 454", "'public SettingsProvider getDefaultSettingsProvider() {' - line 458", "'public MavenInstallation[] getInstallations() {' - line 462", "'public void setInstallations(MavenInstallation... installations) {' - line 466", "'public Builder newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 482", "'public MavenInstallation(String name, String home) {' - line 515", "'public MavenInstallation(String name, String home, List<? extends ToolProperty<?>> properties) {' - line 520", "'public String getMavenHome() {' - line 530", "'return getHome();' - line 531", "'public File getHomeDir() {' - line 534", "'public void buildEnvVars(EnvVars env) {' - line 539", "'public boolean meetsMavenReqVersion(Launcher launcher, int mavenReqVersion) throws IOException, InterruptedException {' - line 557", "'else if (mavenReqVersion == MAVEN_21) {' - line 567", "'else if (mavenReqVersion == MAVEN_30) {' - line 571", "'public String call() throws IOException {' - line 588", "'public boolean isMaven2_1(Launcher launcher) throws IOException, InterruptedException {' - line 613", "'return meetsMavenReqVersion(launcher, MAVEN_21);' - line 614", "'public String getExecutable(Launcher launcher) throws IOException, InterruptedException {' - line 620", "'public String call() throws IOException {' - line 632", "'private static File getExeFile(String execName, String home) {' - line 645", "'public boolean getExists() {' - line 665", "'return getExecutable(new LocalLauncher(new StreamTaskListener(OutputStream.nullOutputStream()))) != null;' - line 667", "'public MavenInstallation forEnvironment(EnvVars environment) {' - line 676", "'public MavenInstallation forNode(Node node, TaskListener log) throws IOException, InterruptedException {' - line 681", "'public String getDisplayName() {' - line 689", "'public MavenInstallation[] getInstallations() {' - line 701", "'public void setInstallations(MavenInstallation... installations) {' - line 708", "'@Override protected FormValidation checkHomeDirectory(File value) {' - line 715", "'public ConverterImpl(XStream2 xstream) { super(xstream); }' - line 728", "'@Override protected String oldHomeField(ToolInstallation obj) {' - line 730", "'public boolean equals(final Object o) {' - line 736", "'public int hashCode() {' - line 748", "'public MavenInstaller(String id) {' - line 762", "'public String getDisplayName() {' - line 770", "'public boolean isApplicable(Class<? extends ToolInstallation> toolType) {' - line 775", "'MavenInstallation inferMavenInstallation();' - line 802"]}, "Builder.java": {"METHODS": ["'public boolean prebuild(Build build, BuildListener listener) {' - line 54", "'public BuildStepMonitor getRequiredMonitorService() {' - line 63", "'public Descriptor<Builder> getDescriptor() {' - line 68"]}, "Fingerprinter.java": {"METHODS": ["'@DataBoundSetter public void setExcludes(String excludes) {' - line 118", "'@DataBoundSetter public void setDefaultExcludes(boolean defaultExcludes) {' - line 122", "'@DataBoundSetter public void setCaseSensitive(boolean caseSensitive) {' - line 126", "'public Fingerprinter(String targets, boolean recordBuildArtifacts) {' - line 134", "'public String getTargets() {' - line 139", "'public String getExcludes() {' - line 143", "'public boolean getDefaultExcludes() {' - line 147", "'public boolean getCaseSensitive() {' - line 151", "'private Object readResolve() {' - line 159", "'public boolean getRecordBuildArtifacts() {' - line 173", "'public void perform(Run<?, ?> build, FilePath workspace, EnvVars environment, Launcher launcher, TaskListener listener) throws InterruptedException {' - line 178", "'public BuildStepMonitor getRequiredMonitorService() {' - line 211", "'public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {' - line 216", "'Fingerprint addRecord(Run build) throws IOException {' - line 269", "'public List<Record> invoke(File baseDir, VirtualChannel channel) throws IOException {' - line 294", "'private void record(Run<?, ?> build, FilePath ws, TaskListener listener, Map<String, String> record, final String targets) throws IOException, InterruptedException {' - line 324", "'public String getDisplayName() {' - line 336", "'public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) throws IOException {' - line 341", "'return doCheckTargets(project, value);' - line 342", "'public FormValidation doCheckTargets(@AncestorInPath AbstractProject<?, ?> project, @QueryParameter String value) throws IOException {' - line 345", "'public Publisher newInstance(StaplerRequest req, JSONObject formData) {' - line 353", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 358", "'public FingerprintAction(Run build, Map<String, String> record) {' - line 377", "'public FingerprintAction(AbstractBuild build, Map<String, String> record) {' - line 383", "'public void add(Map<String, String> moreRecords) {' - line 387", "'public String getIconFileName() {' - line 397", "'public String getDisplayName() {' - line 402", "'public String getUrlName() {' - line 407", "'public Run getRun() {' - line 411", "'public AbstractBuild getBuild() {' - line 416", "'@Override public void onLoad(Run<?, ?> r) {' - line 427", "'@Override public void onAttached(Run<?, ?> r) {' - line 432", "'return getDependencies(false);' - line 477"]}, "BuildStepCompatibilityLayer.java": {"METHODS": ["'public boolean prebuild(AbstractBuild<?, ?> build, BuildListener listener) {' - line 59", "'return prebuild((Build) build, listener);' - line 61", "'public boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {' - line 70", "'return perform((Build) build, launcher, listener);' - line 86", "'public Action getProjectAction(AbstractProject<?, ?> project) {' - line 93", "'return getProjectAction((Project) project);' - line 95", "'public boolean prebuild(Build<?, ?> build, BuildListener listener) {' - line 118", "'public boolean perform(Build<?, ?> build, Launcher launcher, BuildListener listener)' - line 127", "'return perform((AbstractBuild<?, ?>) build, launcher, listener);' - line 131", "'public Action getProjectAction(Project<?, ?> project) {' - line 141"]}, "Notifier.java": {"METHODS": ["'protected Notifier() {}' - line 49", "'public BuildStepDescriptor getDescriptor() {' - line 52"]}, "Shell.java": {"METHODS": ["'public Shell(String command) {' - line 65", "'public void setConfiguredLocalRules(List<EnvVarsFilterLocalRule> configuredLocalRules) {' - line 76", "'private static String addLineFeedForNonASCII(String s) {' - line 87", "'public String[] buildCommandLine(FilePath script) {' - line 98", "'protected String getContents() {' - line 112", "'return addLineFeedForNonASCII(LineEndingConversion.convertEOL(command, LineEndingConversion.EOLType.Unix));' - line 113", "'protected String getFileExtension() {' - line 117", "'public void setUnstableReturn(Integer unstableReturn) {' - line 127", "'protected boolean isErrorlevelForUnstableBuild(int exitCode) {' - line 132", "'public DescriptorImpl getDescriptor() {' - line 137", "'private Object readResolve() {' - line 141", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 157", "'public List<EnvVarsFilterLocalRuleDescriptor> getApplicableLocalRules() {' - line 163", "'public String getShell() {' - line 167", "'public String getShellOrDefault() {' - line 176", "'public String getShellOrDefault(VirtualChannel channel) {' - line 183", "'public void setShell(String shell) {' - line 200", "'public String getDisplayName() {' - line 207", "'public FormValidation doCheckUnstableReturn(@QueryParameter String value) {' - line 215", "'public boolean configure(StaplerRequest req, JSONObject data) throws FormException {' - line 236", "'public FormValidation doCheckShell(@QueryParameter String value) {' - line 244", "'public String call() throws IOException {' - line 254"]}, "BuildStepDescriptor.java": {"METHODS": ["'protected BuildStepDescriptor(Class<? extends T> clazz) {' - line 44", "'protected BuildStepDescriptor() {' - line 55", "'List<Descriptor<T>> filter(List<Descriptor<T>> base, Class<? extends AbstractProject> type) {' - line 72"]}, "BuildStep.java": {"METHODS": ["'boolean prebuild(AbstractBuild<?, ?> build, BuildListener listener);' - line 90", "'boolean perform(AbstractBuild<?, ?> build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException;' - line 128", "'Action getProjectAction(AbstractProject<?, ?> project);' - line 135", "'private PublisherList() {' - line 269", "'public void addNotifier(Descriptor<Publisher> d) {' - line 282", "'public void addRecorder(Descriptor<Publisher> d) {' - line 296", "'public boolean add(Descriptor<Publisher> d) {' - line 302", "'public void add(int index, Descriptor<Publisher> d) {' - line 307", "'public Descriptor<Publisher> get(int index) {' - line 312", "'public int size() {' - line 317", "'public Iterator<Descriptor<Publisher>> iterator() {' - line 322", "'public boolean remove(Object o) {' - line 327"]}, "UserNameResolver.java": {"METHODS": ["'public static String resolve(User u) {' - line 71", "'public static ExtensionList<UserNameResolver> all() {' - line 83"]}, "BuildWrappers.java": {"METHODS": ["'public static List<Descriptor<BuildWrapper>> getFor(AbstractProject<?, ?> project) {' - line 56"]}, "LogRotator.java": {"METHODS": ["'public CollatedLogRotatorException(String msg, Exception... collated) {' - line 71", "'public CollatedLogRotatorException(String msg, Collection<Exception> values) {' - line 80", "'public LogRotator(String daysToKeepStr, String numToKeepStr, String artifactDaysToKeepStr, String artifactNumToKeepStr) {' - line 111", "'public static int parse(String p) {' - line 116", "'public LogRotator(int daysToKeep, int numToKeep) {' - line 130", "'public LogRotator(int daysToKeep, int numToKeep, int artifactDaysToKeep, int artifactNumToKeep) {' - line 134", "'public void perform(Job<?, ?> job) throws IOException, InterruptedException {' - line 144", "'private boolean shouldKeepRun(Run r, Run lsb, Run lstb) {' - line 227", "'private boolean tooNew(Run r, Calendar cal) {' - line 247", "'public int getDaysToKeep() {' - line 256", "'public int getNumToKeep() {' - line 260", "'public int getArtifactDaysToKeep() {' - line 264", "'return unbox(artifactDaysToKeep);' - line 265", "'public int getArtifactNumToKeep() {' - line 268", "'return unbox(artifactNumToKeep);' - line 269", "'public String getDaysToKeepStr() {' - line 272", "'return toString(daysToKeep);' - line 273", "'public String getNumToKeepStr() {' - line 276", "'return toString(numToKeep);' - line 277", "'public String getArtifactDaysToKeepStr() {' - line 280", "'return toString(artifactDaysToKeep);' - line 281", "'public String getArtifactNumToKeepStr() {' - line 284", "'return toString(artifactNumToKeep);' - line 285", "'private int unbox(Integer i) {' - line 288", "'private String toString(Integer i) {' - line 292", "'public String getDisplayName() {' - line 301"]}, "UserAvatarResolver.java": {"METHODS": ["'public static String resolve(User u, String avatarSize) {' - line 85", "'public static ExtensionList<UserAvatarResolver> all() {' - line 113"]}, "ArtifactArchiver.java": {"METHODS": ["'public ArtifactArchiver(String artifacts, String excludes, boolean latestOnly) {' - line 127", "'public ArtifactArchiver(String artifacts, String excludes, boolean latestOnly, boolean allowEmptyArchive) {' - line 132", "'public ArtifactArchiver(String artifacts, String excludes, boolean latestOnly, boolean allowEmptyArchive, boolean onlyIfSuccessful) {' - line 137", "'public ArtifactArchiver(String artifacts, String excludes, boolean latestOnly, boolean allowEmptyArchive, boolean onlyIfSuccessful, Boolean defaultExcludes) {' - line 142", "'protected Object readResolve() {' - line 154", "'public String getArtifacts() {' - line 170", "'public boolean isLatestOnly() {' - line 183", "'public boolean isOnlyIfSuccessful() {' - line 187", "'public boolean isFingerprint() {' - line 195", "'@DataBoundSetter public void setFingerprint(boolean fingerprint) {' - line 200", "'public boolean getAllowEmptyArchive() {' - line 204", "'public boolean isDefaultExcludes() {' - line 212", "'public boolean isCaseSensitive() {' - line 220", "'public boolean isFollowSymlinks() {' - line 228", "'public void perform(Run<?, ?> build, FilePath ws, EnvVars environment, Launcher launcher, TaskListener listener) throws IOException, InterruptedException {' - line 237", "'public BuildStepMonitor getRequiredMonitorService() {' - line 329", "'public DescriptorImpl() {' - line 345", "'public String getDisplayName() {' - line 351", "'public ArtifactArchiver newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 372", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 377", "'@Override public void onLoaded() {' - line 384"]}, "Publisher.java": {"METHODS": ["'protected Publisher() {' - line 71", "'public boolean prebuild(Build build, BuildListener listener) {' - line 82", "'public Action getProjectAction(Project project) {' - line 91", "'public boolean needsToRunAfterFinalized() {' - line 118", "'public Descriptor<Publisher> getDescriptor() {' - line 123", "'public DescriptorExtensionListImpl(Jenkins hudson) {' - line 137", "'protected List<ExtensionComponent<Descriptor<Publisher>>> sort(List<ExtensionComponent<Descriptor<Publisher>>> r) {' - line 142", "'public int compare(ExtensionComponent<Descriptor<Publisher>> lhs, ExtensionComponent<Descriptor<Publisher>> rhs) {' - line 149", "'private int classify(Descriptor<Publisher> d) {' - line 159"]}, "BuildTrigger.java": {"METHODS": ["'public BuildTrigger(String childProjects, boolean evenIfUnstable) {' - line 110", "'public BuildTrigger(String childProjects, String threshold) {' - line 115", "'public BuildTrigger(String childProjects, Result threshold) {' - line 119", "'public BuildTrigger(List<AbstractProject> childProjects, Result threshold) {' - line 126", "'public BuildTrigger(Collection<? extends AbstractProject> childProjects, Result threshold) {' - line 130", "'public String getChildProjectsValue() {' - line 134", "'public Result getThreshold() {' - line 138", "'public List<AbstractProject> getChildProjects() {' - line 150", "'return getChildProjects(Jenkins.get());' - line 151", "'public List<AbstractProject> getChildProjects(AbstractProject owner) {' - line 156", "'return getChildProjects(owner == null ? null : owner.getParent());' - line 157", "'public List<AbstractProject> getChildProjects(ItemGroup base) {' - line 161", "'public BuildStepMonitor getRequiredMonitorService() {' - line 172", "'public boolean hasSame(AbstractProject owner, Collection<? extends AbstractProject> projects) {' - line 180", "'public boolean hasSame(Collection<? extends AbstractProject> projects) {' - line 190", "'return hasSame(null, projects);' - line 191", "'public boolean perform(AbstractBuild build, Launcher launcher, BuildListener listener) {' - line 195", "'public static boolean execute(AbstractBuild build, BuildListener listener, BuildTrigger trigger) {' - line 245", "'return execute(build, listener);' - line 246", "'public static boolean execute(AbstractBuild build, BuildListener listener) {' - line 257", "'public int compare(Dependency lhs, Dependency rhs) {' - line 282", "'public void buildDependencyGraph(AbstractProject owner, DependencyGraph graph) {' - line 313", "'public boolean needsToRunAfterFinalized() {' - line 335", "'public boolean onJobRenamed(String oldName, String newName) {' - line 341", "'private Object readResolve() {' - line 367", "'public String getDisplayName() {' - line 377", "'public String getHelpFile() {' - line 382", "'public BuildTrigger newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 387", "'public boolean isApplicable(Class<? extends AbstractProject> jobType) {' - line 398", "'public boolean showEvenIfUnstableOption(@CheckForNull Class<? extends AbstractProject<?, ?>> jobType) {' - line 402", "'public FormValidation doCheck(@AncestorInPath AbstractProject project, @QueryParameter String value) {' - line 410", "'public AutoCompletionCandidates doAutoCompleteChildProjects(@QueryParameter String value, @AncestorInPath Item self, @AncestorInPath ItemGroup container) {' - line 444", "'public void onLocationChanged(final Item item, final String oldFullName, final String newFullName) {' - line 451", "'private void locationChanged(Item item, String oldFullName, String newFullName) {' - line 457"]}, "MavenWarningNote.java": {"METHODS": ["'public MavenWarningNote() {' - line 41", "'public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {' - line 45", "'public String getDisplayName() {' - line 54"]}, "Maven3MojoNote.java": {"METHODS": ["'public Maven3MojoNote() {' - line 52", "'public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {' - line 56", "'public String getDisplayName() {' - line 65"]}, "MavenMojoNote.java": {"METHODS": ["'public MavenMojoNote() {' - line 44", "'public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {' - line 48", "'public String getDisplayName() {' - line 57"]}, "MavenErrorNote.java": {"METHODS": ["'public MavenErrorNote() {' - line 39", "'public ConsoleAnnotator annotate(Object context, MarkupText text, int charPos) {' - line 43", "'public String getDisplayName() {' - line 52"]}, "MavenConsoleAnnotator.java": {"METHODS": ["'public MavenConsoleAnnotator(OutputStream out, Charset charset) {' - line 41", "'protected void eol(byte[] b, int len) throws IOException {' - line 47", "'new MavenMojoNote().encodeTo(out);' - line 59", "'new Maven3MojoNote().encodeTo(out);' - line 63", "'new MavenWarningNote().encodeTo(out);' - line 67", "'new MavenErrorNote().encodeTo(out);' - line 71"]}, "PosixException.java": {"METHODS": ["'public PosixException(String message) {' - line 12", "'public PosixException(String message, Throwable cause) {' - line 16"]}, "SU.java": {"METHODS": ["'private SU() { // not meant to be instantiated' - line 62", "'public static VirtualChannel start(final TaskListener listener, final String rootUsername, final String rootPassword) throws IOException, InterruptedException {' - line 74", "'return newLocalChannel();  // TODO: perhaps use RunAs to run as an Administrator?' - line 76", "'protected String sudoExe() {' - line 82", "'protected Process sudoWithPass(ArgumentListBuilder args) throws IOException {' - line 88", "'protected String sudoExe() {' - line 107", "'protected Process sudoWithPass(ArgumentListBuilder args) throws IOException {' - line 113", "'return newLocalChannel();' - line 125", "'private static LocalChannel newLocalChannel() {' - line 128", "'VirtualChannel start(TaskListener listener, String rootPassword) throws IOException, InterruptedException {' - line 151", "'return newLocalChannel();' - line 155"]}, "WindowsUtil.java": {"METHODS": []}, "CronTabList.java": {"METHODS": ["'public CronTabList(Collection<CronTab> tabs) {' - line 46", "'public String checkSanity() {' - line 70", "'public static CronTabList create(@NonNull String format) {' - line 97", "'return create(format, null);' - line 98", "'public static CronTabList create(@NonNull String format, Hash hash) {' - line 105"]}, "CronTab.java": {"METHODS": ["'public CronTab(String format) {' - line 74", "'public CronTab(String format, Hash hash) {' - line 82", "'public CronTab(String format, int line) {' - line 92", "'public CronTab(String format, int line, Hash hash) {' - line 103", "'public CronTab(String format, int line, Hash hash, @CheckForNull String timezone) {' - line 115", "'private void set(String format, int line, Hash hash) {' - line 119", "'private void set(String format, int line, Hash hash, String timezone) {' - line 126", "'boolean check(Calendar cal) {' - line 149", "'private CalendarField(String displayName, int field, int min, int offset, boolean redoAdjustmentIfModified, CalendarField lowerField) {' - line 206", "'int valueOf(Calendar c) {' - line 218", "'void addTo(Calendar c, int i) {' - line 222", "'void setTo(Calendar c, int i) {' - line 226", "'void clear(Calendar c) {' - line 230", "'private int ceil(CronTab c, int n) {' - line 241", "'private int first(CronTab c) {' - line 253", "'return ceil(c, 0);' - line 254", "'private int floor(CronTab c, int n) {' - line 257", "'private int last(CronTab c) {' - line 266", "'return floor(c, 63);' - line 267", "'long bits(CronTab c) { return c.bits[0]; }' - line 282", "'void rollUp(Calendar cal, int i) { cal.add(Calendar.HOUR_OF_DAY, i); }' - line 285", "'long bits(CronTab c) { return c.bits[1]; }' - line 289", "'void rollUp(Calendar cal, int i) { cal.add(Calendar.DAY_OF_MONTH, i); }' - line 292", "'long bits(CronTab c) { return c.bits[2]; }' - line 296", "'void rollUp(Calendar cal, int i) { cal.add(Calendar.MONTH, i); }' - line 299", "'long bits(CronTab c) { return c.bits[3]; }' - line 303", "'void rollUp(Calendar cal, int i) { cal.add(Calendar.YEAR, i); }' - line 306", "'long bits(CronTab c) { return c.dayOfWeek; }' - line 310", "'void rollUp(Calendar cal, int i) {' - line 313", "'void setTo(Calendar c, int i) {' - line 318", "'public Calendar ceil(long t) {' - line 358", "'return ceil(cal);' - line 361", "'public Calendar ceil(Calendar cal) {' - line 372", "'public Calendar floor(long t) {' - line 427", "'return floor(cal);' - line 430", "'public Calendar floor(Calendar cal) {' - line 441", "'void set(String format, Hash hash) {' - line 489", "'private boolean checkBits(long bitMask, int n) {' - line 496", "'public String toString() {' - line 501", "'private String toString(String key, long bit) {' - line 510", "'@CheckForNull public TimeZone getTimeZone() {' - line 594"]}, "BaseParser.java": {"METHODS": ["'public void setHash(Hash hash) {' - line 53", "'public String getErrorMessage() {' - line 58", "'public void setErrorMessage(String errorMessage) {' - line 62", "'protected long doRange(int start, int end, int step, int field) {' - line 66", "'protected long doRange(int step, int field) {' - line 81", "'return doRange(LOWER_BOUNDS[field], UPPER_BOUNDS[field], step, field);' - line 82", "'protected long doHash(int step, int field) {' - line 92", "'return doHash(LOWER_BOUNDS[field], u, step, field);' - line 96", "'protected long doHash(int s, int e, int step, int field) {' - line 99", "'protected void rangeCheck(int value, int field) {' - line 122", "'private void error(String msg) {' - line 128", "'protected Hash getHashForTokens() {' - line 133"]}, "Hash.java": {"METHODS": ["'public static Hash from(String seed) {' - line 53", "'public int next(int n) {' - line 69", "'private static MessageDigest getMd5() throws NoSuchAlgorithmException {' - line 80", "'public static Hash zero() {' - line 87", "'public int next(int n) {' - line 93"]}, "RareOrImpossibleDateException.java": {"METHODS": []}, "MarkupFormatter.java": {"METHODS": ["'* public String getCodeMirrorMode() // return null to disable CodeMirror dynamically' - line 63", "'* public String getCodeMirrorConfig()' - line 64", "'public String getHelpUrl() {' - line 109", "'return getDescriptor().getHelpFile(\"syntax\");' - line 110", "'public MarkupFormatterDescriptor getDescriptor() {' - line 114", "'public HttpResponse doPreviewDescription(@QueryParameter String text) throws IOException {' - line 123", "'return html(200, w.toString(), extraHeaders);' - line 130", "'public HttpResponse previewsNowNeedPostForSecurity2153(@QueryParameter String text, StaplerRequest req) throws IOException {' - line 140", "'return doPreviewDescription(text);' - line 143", "'return html(405, \"This endpoint now requires that POST requests are sent. Update the component implementing this preview feature.\", Collections.emptyMap());' - line 145", "'private static HttpResponse html(int status, @NonNull String html, @NonNull Map<String, String> headers) {' - line 155"]}, "MarkupFormatterDescriptor.java": {"METHODS": []}, "EscapedMarkupFormatter.java": {"METHODS": ["'public EscapedMarkupFormatter() {' - line 43", "'public void translate(String markup, Writer output) throws IOException {' - line 47", "'public String getDisplayName() {' - line 58"]}, "LogRecorderManager.java": {"METHODS": ["'public LogRecorderManager() {' - line 96", "'public List<LogRecorder> getRecorders() {' - line 100", "'public void setRecorders(List<LogRecorder> recorders) {' - line 105", "'public String getDisplayName() {' - line 121", "'public String getSearchUrl() {' - line 126", "'public LogRecorder getDynamic(String token) {' - line 130", "'return getLogRecorder(token);' - line 131", "'public LogRecorder getLogRecorder(String token) {' - line 134", "'static File configDir() {' - line 138", "'public void load() throws IOException {' - line 145", "'public HttpResponse doNewLogRecorder(@QueryParameter String name) {' - line 164", "'public FormValidation doCheckNewName(@QueryParameter String name) {' - line 176", "'public ContextMenu doChildrenContextMenu(StaplerRequest request, StaplerResponse response) throws Exception {' - line 190", "'public HttpResponse doConfigLogger(@QueryParameter String name, @QueryParameter String level) {' - line 207", "'public void doRss(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 227", "'/*package*/ static void doRss(StaplerRequest req, StaplerResponse rsp, List<LogRecord> logs) throws IOException, ServletException {' - line 234", "'public String getEntryTitle(LogRecord entry) {' - line 251", "'public String getEntryUrl(LogRecord entry) {' - line 256", "'public String getEntryID(LogRecord entry) {' - line 261", "'public String getEntryDescription(LogRecord entry) {' - line 266", "'public Calendar getEntryTimestamp(LogRecord entry) {' - line 271", "'public String getEntryAuthor(LogRecord entry) {' - line 278", "'public static void init(Jenkins h) throws IOException {' - line 285", "'public Object getTarget() {' - line 291"]}, "LogRecorder.java": {"METHODS": ["'public LogRecorder(String name) {' - line 117", "'new WeakLogHandler(handler, Logger.getLogger(\"\"));' - line 121", "'private Object readResolve() {' - line 124", "'public List<Target> getLoggers() {' - line 140", "'public void setLoggers(List<Target> loggers) {' - line 144", "'Target[] orderedTargets() {' - line 149", "'public static Set<String> getAutoCompletionCandidates(List<String> loggerNamesList) {' - line 160", "'public FormValidation doCheckName(@QueryParameter String value, @QueryParameter String level) {' - line 200", "'public AutoCompletionCandidates doAutoCompleteLoggerName(@QueryParameter String value) {' - line 217", "'public void publish(LogRecord record) {' - line 243", "'public Target(String name, Level level) {' - line 271", "'public Target(String name, int level) {' - line 275", "'public Target(String name, String level) {' - line 281", "'public Level getLevel() {' - line 285", "'public String getName() {' - line 289", "'public boolean equals(Object o) {' - line 294", "'public int hashCode() {' - line 306", "'public boolean includes(LogRecord r) {' - line 311", "'public Boolean matches(LogRecord r) {' - line 325", "'public Logger getLogger() {' - line 340", "'public void enable() {' - line 350", "'new SetLevel(name, getLevel()).broadcast();' - line 354", "'public void disable() {' - line 357", "'new SetLevel(name, null).broadcast();' - line 359", "'public int compare(Target left, Target right) {' - line 369", "'@Override public Void call() throws Error {' - line 385", "'void broadcast() {' - line 392", "'@Override public void preOnline(Computer c, Channel channel, FilePath root, TaskListener listener) throws IOException, InterruptedException {' - line 409", "'public String getDisplayName() {' - line 419", "'public String getSearchUrl() {' - line 424", "'public String getName() {' - line 428", "'public LogRecorderManager getParent() {' - line 432", "'public HttpResponse doClear() throws IOException {' - line 468", "'private void handlePluginUpdatingLegacyLogManagerMap() {' - line 498", "'public boolean equals(Object o) {' - line 516", "'public int hashCode() {' - line 528", "'public void doRss(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 552", "'private XmlFile getConfigFile() {' - line 559", "'public List<LogRecord> getLogRecords() {' - line 566", "'public int compare(Computer c1, Computer c2) {' - line 580"]}, "WeakLogHandler.java": {"METHODS": ["'public WeakLogHandler(Handler target, Logger logger) {' - line 44", "'public void publish(LogRecord record) {' - line 51", "'public void flush() {' - line 58", "'public void close() throws SecurityException {' - line 65", "'private Handler resolve() {' - line 71", "'public void setFormatter(Formatter newFormatter) throws SecurityException {' - line 79", "'public void setEncoding(String encoding) throws SecurityException, UnsupportedEncodingException {' - line 87", "'public void setFilter(Filter newFilter) throws SecurityException {' - line 95", "'public void setErrorManager(ErrorManager em) {' - line 103", "'public void setLevel(Level newLevel) throws SecurityException {' - line 111", "'public boolean isLoggable(LogRecord record) {' - line 119"]}, "AbstractNodeMonitorDescriptor.java": {"METHODS": ["'protected AbstractNodeMonitorDescriptor() {' - line 63", "'protected AbstractNodeMonitorDescriptor(long interval) {' - line 72", "'protected AbstractNodeMonitorDescriptor(Class<? extends NodeMonitor> clazz) {' - line 81", "'protected AbstractNodeMonitorDescriptor(Class<? extends NodeMonitor> clazz, long interval) {' - line 90", "'private void schedule(long interval) {' - line 96", "'public void doRun() {' - line 100", "'public T get(Computer c) {' - line 170", "'public long getTimestamp() {' - line 189", "'public String getTimestampString() {' - line 193", "'public boolean isIgnored() {' - line 202", "'protected boolean markOnline(Computer c) {' - line 214", "'protected boolean markOffline(Computer c, OfflineCause oc) {' - line 227", "'protected boolean markOffline(Computer c) {' - line 244", "'return markOffline(c, null);' - line 245", "'protected long getMonitoringTimeOut() {' - line 279", "'public void run() {' - line 300"]}, "SwapSpaceMonitor.java": {"METHODS": ["'public String toHtml(MemoryUsage usage) {' - line 53", "'public long toMB(MemoryUsage usage) {' - line 69", "'public String getColumnCaption() {' - line 80", "'public DescriptorImpl() {' - line 95", "'protected MonitorTask createCallable(Computer c) {' - line 100", "'public String getDisplayName() {' - line 106", "'public NodeMonitor newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 111", "'public MemoryUsage call() throws IOException {' - line 121", "'return report(e);' - line 126", "'return report(e);' - line 128", "'public MemoryUsage2(MemoryUsage mem) {' - line 157", "'public long getTotalPhysicalMemory() {' - line 165", "'public long getAvailablePhysicalMemory() {' - line 173", "'public long getTotalSwapSpace() {' - line 181", "'public long getAvailableSwapSpace() {' - line 189"]}, "MonitorMarkedNodeOffline.java": {"METHODS": ["'public String getDisplayName() {' - line 41", "'public boolean isActivated() {' - line 48"]}, "DiskSpaceMonitorDescriptor.java": {"METHODS": ["'public DiskSpace(String path, long size) {' - line 65", "'public String toString() {' - line 71", "'public String getPath() {' - line 82", "'public long getFreeSize() {' - line 90", "'public String getGbLeft() {' - line 97", "'public String toHtml() {' - line 108", "'protected void setTriggered(boolean triggered) {' - line 120", "'protected void setTriggered(Class<? extends AbstractDiskSpaceMonitor> trigger, boolean triggered) {' - line 127", "'public static DiskSpace parse(String size) throws ParseException {' - line 143", "'public GetUsableSpace() {}' - line 169", "'public DiskSpace invoke(File f, VirtualChannel channel) throws IOException {' - line 172"]}, "ClockMonitor.java": {"METHODS": ["'public ClockDifference getDifferenceFor(Computer c) {' - line 48", "'public DescriptorImpl() {' - line 64", "'public String getDisplayName() {' - line 77", "'public NodeMonitor newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 82"]}, "MonitorOfflineCause.java": {"METHODS": []}, "AbstractDiskSpaceMonitor.java": {"METHODS": ["'protected AbstractDiskSpaceMonitor(String threshold) throws ParseException {' - line 20", "'protected AbstractDiskSpaceMonitor() {' - line 25", "'public long getThresholdBytes() {' - line 29", "'public Object data(Computer c) {' - line 40", "'public DiskSpace markNodeOfflineIfDiskspaceIsTooLow(Computer c) {' - line 59"]}, "ResponseTimeMonitor.java": {"METHODS": ["'public String getDisplayName() {' - line 85", "'public NodeMonitor newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 90", "'private Step1(Data cur) {' - line 98", "'public Data call() {' - line 103", "'private Object writeReplace() {' - line 108", "'public Step3 call() {' - line 124", "'private Step3(Data cur, long start) {' - line 136", "'private Object readResolve() {' - line 141", "'private Data(Data old, long newDataPoint) {' - line 160", "'private int failureCount() {' - line 174", "'public long getAverage() {' - line 186", "'public boolean hasTooManyTimeouts() {' - line 195", "'return failureCount() >= 5;' - line 196", "'public String toString() {' - line 203", "'return getAverage() + \"ms\";' - line 207"]}, "ArchitectureMonitor.java": {"METHODS": ["'public String getDisplayName() {' - line 51", "'public NodeMonitor newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 56", "'public String call() {' - line 66"]}, "DiskSpaceMonitor.java": {"METHODS": ["'public DiskSpaceMonitor(String freeSpaceThreshold) throws ParseException {' - line 47", "'public DiskSpaceMonitor() {}' - line 51", "'public DiskSpace getFreeSpace(Computer c) {' - line 53", "'public String getColumnCaption() {' - line 58", "'public String getDisplayName() {' - line 66", "'public static DiskSpaceMonitorDescriptor install() {' - line 83"]}, "NodeMonitor.java": {"METHODS": ["'return getDescriptor().getDisplayName();' - line 78", "'public Object data(Computer c) {' - line 89", "'return getDescriptor().get(c);' - line 90", "'public Thread triggerUpdate() {' - line 103", "'return getDescriptor().triggerUpdate();' - line 104", "'public static List<NodeMonitor> getAll() {' - line 111", "'public boolean isIgnored() {' - line 128", "'public void setIgnored(boolean ignored) {' - line 132"]}, "AbstractAsyncNodeMonitorDescriptor.java": {"METHODS": ["'protected AbstractAsyncNodeMonitorDescriptor() {' - line 35", "'protected AbstractAsyncNodeMonitorDescriptor(long interval) {' - line 38", "'protected AbstractAsyncNodeMonitorDescriptor(Class<? extends NodeMonitor> clazz) {' - line 42", "'protected AbstractAsyncNodeMonitorDescriptor(Class<? extends NodeMonitor> clazz, long interval) {' - line 46", "'protected T monitor(Computer c) throws IOException, InterruptedException {' - line 56", "'return monitorDetailed().getMonitoringData();' - line 75", "'private void error(Computer c, Throwable x) {' - line 123", "'private Result(@NonNull Map<Computer, T> data, @NonNull Collection<Computer> skipped) {' - line 160"]}, "TemporarySpaceMonitor.java": {"METHODS": ["'public TemporarySpaceMonitor(String freeSpaceThreshold) throws ParseException {' - line 52", "'public TemporarySpaceMonitor() {}' - line 56", "'public DiskSpace getFreeSpace(Computer c) {' - line 58", "'public String getColumnCaption() {' - line 64", "'public DescriptorImpl() {' - line 81", "'public String getDisplayName() {' - line 87", "'public static DiskSpaceMonitorDescriptor install() {' - line 107", "'public DiskSpace invoke(File f, VirtualChannel channel) throws IOException {' - line 113"]}, "NodeMonitorUpdater.java": {"METHODS": ["'public void run() {' - line 23", "'public void onOnline(Computer c, TaskListener listener) throws IOException, InterruptedException {' - line 37"]}, "StatusFilter.java": {"METHODS": ["'public StatusFilter(boolean statusFilter) {' - line 51", "'public List<TopLevelItem> filter(List<TopLevelItem> added, List<TopLevelItem> all, View filteringView) {' - line 59", "'public boolean getStatusFilter() {' - line 73", "'public StatusFilterDescriptor() {' - line 79", "'public String getDisplayName() {' - line 88"]}, "WeatherColumn.java": {"METHODS": ["'public WeatherColumn() {' - line 33", "'public String getDisplayName() {' - line 40"]}, "ViewsTabBarDescriptor.java": {"METHODS": []}, "JobColumn.java": {"METHODS": ["'public JobColumn() {' - line 37", "'public String getDisplayName() {' - line 45"]}, "ListViewColumn.java": {"METHODS": ["'public String getColumnCaption() {' - line 81", "'return getDescriptor().getDisplayName();' - line 82", "'public boolean shownByDefault() {' - line 109", "'public Descriptor<ListViewColumn> getDescriptor() {' - line 118", "'public static List<ListViewColumn> createDefaultInitialColumnList() {' - line 128", "'return createDefaultInitialColumnList(ListViewColumn.all());' - line 129", "'public static List<ListViewColumn> createDefaultInitialColumnList(Class<? extends View> context) {' - line 138", "'return createDefaultInitialColumnList(DescriptorVisibilityFilter.applyType(context, ListViewColumn.all()));' - line 139", "'public static List<ListViewColumn> createDefaultInitialColumnList(View view) {' - line 148", "'return createDefaultInitialColumnList(DescriptorVisibilityFilter.apply(view, ListViewColumn.all()));' - line 149", "'private static List<ListViewColumn> createDefaultInitialColumnList(List<Descriptor<ListViewColumn>> descriptors) {' - line 152"]}, "BuildButtonColumn.java": {"METHODS": ["'public BuildButtonColumn() {' - line 34", "'public String taskNoun(Object job) {' - line 37", "'public String getDisplayName() {' - line 48"]}, "ViewsTabBar.java": {"METHODS": ["'public ViewsTabBarDescriptor getDescriptor() {' - line 70", "'public List<View> sort(@NonNull List<? extends View> views) {' - line 84", "'public ViewsTabBar getViewsTabBar() {' - line 97", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 102"]}, "LastSuccessColumn.java": {"METHODS": ["'public LastSuccessColumn() {' - line 33", "'public String getDisplayName() {' - line 40"]}, "ListViewColumnDescriptor.java": {"METHODS": ["'public boolean shownByDefault() {' - line 24"]}, "DefaultMyViewsTabBar.java": {"METHODS": ["'public DefaultMyViewsTabBar() {' - line 40", "'public String getDisplayName() {' - line 47"]}, "GlobalDefaultViewConfiguration.java": {"METHODS": ["'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 42"]}, "LastStableColumn.java": {"METHODS": ["'public LastStableColumn() {' - line 33", "'public String getDisplayName() {' - line 40", "'public boolean shownByDefault() {' - line 45"]}, "StatusColumn.java": {"METHODS": ["'public StatusColumn() {' - line 39", "'public String getDisplayName() {' - line 46"]}, "MyViewsTabBarDescriptor.java": {"METHODS": []}, "MyViewsTabBar.java": {"METHODS": ["'public MyViewsTabBarDescriptor getDescriptor() {' - line 70", "'public List<View> sort(@NonNull List<? extends View> views) {' - line 84", "'public MyViewsTabBar getMyViewsTabBar() {' - line 97", "'public boolean configure(StaplerRequest req, JSONObject json) throws FormException {' - line 102"]}, "DefaultViewsTabBar.java": {"METHODS": ["'public DefaultViewsTabBar() {' - line 40", "'public String getDisplayName() {' - line 47"]}, "LastDurationColumn.java": {"METHODS": ["'public LastDurationColumn() {' - line 33", "'public String getDisplayName() {' - line 40"]}, "ViewJobFilter.java": {"METHODS": ["'public Descriptor<ViewJobFilter> getDescriptor() {' - line 51"]}, "LastFailureColumn.java": {"METHODS": ["'public LastFailureColumn() {' - line 33", "'public String getDisplayName() {' - line 40"]}, "SearchItem.java": {"METHODS": ["'String getSearchName();' - line 44", "'String getSearchUrl();' - line 54", "'SearchIndex getSearchIndex();' - line 63"]}, "SearchIndex.java": {"METHODS": ["'void find(String token, List<SearchItem> result);' - line 36", "'void suggest(String token, List<SearchItem> result);' - line 42", "'public void find(String token, List<SearchItem> result) {' - line 49", "'public void suggest(String token, List<SearchItem> result) {' - line 54"]}, "UnionSearchIndex.java": {"METHODS": ["'public static SearchIndex combine(SearchIndex... sets) {' - line 34", "'public UnionSearchIndex(SearchIndex lhs, SearchIndex rhs) {' - line 51", "'public void find(String token, List<SearchItem> result) {' - line 57", "'public void suggest(String token, List<SearchItem> result) {' - line 63"]}, "SearchItems.java": {"METHODS": ["'public static SearchItem create(String searchName, String url) {' - line 30", "'return create(searchName, url, SearchIndex.EMPTY);' - line 31", "'public static SearchItem create(final String searchName, final String url, final SearchIndex children) {' - line 34", "'public String getSearchName() {' - line 37", "'public String getSearchUrl() {' - line 42", "'public SearchIndex getSearchIndex() {' - line 47", "'public static SearchItem create(final String searchName, final String url, final SearchableModelObject searchable) {' - line 53", "'public String getSearchName() {' - line 56", "'public String getSearchUrl() {' - line 61", "'public SearchIndex getSearchIndex() {' - line 66"]}, "SuggestedItem.java": {"METHODS": ["'public SuggestedItem(SearchItem top) {' - line 39", "'public SuggestedItem(SuggestedItem parent, SearchItem item) {' - line 43", "'public String getPath() {' - line 48", "'private void getPath(StringBuilder buf) {' - line 59", "'public String getUrl() {' - line 76", "'private static SuggestedItem build(SearchableModelObject searchContext, Item top) {' - line 82", "'public static SuggestedItem build(SearchableModelObject searchContext, SearchItem si) {' - line 97", "'return build(searchContext, (Item) si);' - line 99", "'private void getUrl(StringBuilder buf) {' - line 104"]}, "SearchableModelObject.java": {"METHODS": ["'Search getSearch();' - line 43"]}, "ParsedQuickSilver.java": {"METHODS": ["'private ParsedQuickSilver(Class<? extends SearchableModelObject> clazz) {' - line 53", "'private String splitName(String url) {' - line 84", "'private String stripGetPrefix(Method m) {' - line 93", "'protected Getter(String url, String searchName) {' - line 105", "'Object get(Object obj) {' - line 122", "'throw toError(e);' - line 126", "'Object get(Object obj) {' - line 147", "'throw toError(e);' - line 151", "'private static IllegalAccessError toError(IllegalAccessException e) {' - line 156", "'public void addTo(SearchIndexBuilder builder, final Object instance) {' - line 162", "'public String getSearchName() {' - line 166", "'public String getSearchUrl() {' - line 171", "'public SearchIndex getSearchIndex() {' - line 176"]}, "SearchFactory.java": {"METHODS": ["'public static ExtensionList<SearchFactory> all() {' - line 40"]}, "CollectionSearchIndex.java": {"METHODS": ["'protected Iterable<SMT> allAsIterable() {' - line 50", "'public void find(String token, List<SearchItem> result) {' - line 56", "'public void suggest(String token, List<SearchItem> result) {' - line 63", "'protected String getName(SMT o) {' - line 77"]}, "UserSearchProperty.java": {"METHODS": ["'public UserSearchProperty(boolean insensitiveSearch) {' - line 18", "'public boolean getInsensitiveSearch() {' - line 23", "'public static boolean isCaseInsensitive() {' - line 27", "'public String getDisplayName() {' - line 42", "'public UserProperty newInstance(User user) {' - line 47", "'public UserProperty newInstance(StaplerRequest req, JSONObject formData) throws FormException {' - line 52"]}, "FixedSet.java": {"METHODS": ["'public FixedSet(Collection<? extends SearchItem> items) {' - line 40", "'public FixedSet(SearchItem... items) {' - line 44", "'public void find(String token, List<SearchItem> result) {' - line 49", "'public void suggest(String token, List<SearchItem> result) {' - line 60"]}, "Search.java": {"METHODS": ["'public void doIndex(StaplerRequest req, StaplerResponse rsp) throws IOException, ServletException {' - line 75", "'public void doSuggestOpenSearch(StaplerRequest req, StaplerResponse rsp, @QueryParameter String q) throws IOException, ServletException {' - line 112", "'public void doSuggest(StaplerRequest req, StaplerResponse rsp, @QueryParameter String query) throws IOException, ServletException {' - line 128", "'public SearchResult getSuggestions(StaplerRequest req, String query) {' - line 143", "'public int getMaxSearchSize() {' - line 162", "'private SearchIndex makeSuggestIndex(StaplerRequest req) {' - line 180", "'public boolean hasMoreResults() {' - line 196", "'public Item(String name) {' - line 213", "'void find(SearchIndex index, String token, List<SearchItem> result) {' - line 221", "'void find(SearchIndex index, String token, List<SearchItem> result) {' - line 227", "'static SuggestedItem findClosestSuggestedItem(List<SuggestedItem> r, String query) {' - line 247", "'public static SuggestedItem find(SearchIndex index, String query) {' - line 266", "'return find(index, query, null);' - line 267", "'public static SuggestedItem find(SearchIndex index, String query, SearchableModelObject searchContext) {' - line 275", "'else if (1 == r.size()) {' - line 280", "'return findClosestSuggestedItem(r, query);' - line 286", "'public static List<SuggestedItem> suggest(SearchIndex index, final String tokenList) {' - line 295", "'return suggest(index, tokenList, null);' - line 296", "'public static List<SuggestedItem> suggest(SearchIndex index, final String tokenList, SearchableModelObject searchContext) {' - line 302", "'public int compareTo(Tag that) {' - line 317", "'public int length() { return tokens.length; }' - line 345", "'public List<String> subSequence(final int start) {' - line 352", "'public String get(int index) {' - line 355", "'public int size() {' - line 363", "'public String toString() {' - line 371", "'private static List<SuggestedItem> find(Mode m, SearchIndex index, String tokenList, SearchableModelObject searchContext) {' - line 383", "'public Object getTarget() {' - line 428"]}, "SearchResult.java": {"METHODS": ["'boolean hasMoreResults();' - line 9"]}, "QuickSilver.java": {"METHODS": ["'String[] value() default {};' - line 53"]}, "SearchIndexBuilder.java": {"METHODS": ["'public SearchIndexBuilder addAllAnnotations(SearchableModelObject o) {' - line 47", "'public SearchIndexBuilder add(String urlAsWellAsName) {' - line 55", "'return add(urlAsWellAsName, urlAsWellAsName);' - line 56", "'public SearchIndexBuilder add(String url, String name) {' - line 65", "'public SearchIndexBuilder add(String url, String... names) {' - line 70", "'public SearchIndexBuilder add(SearchItem item) {' - line 76", "'public SearchIndexBuilder add(String url, SearchableModelObject searchable, String name) {' - line 81", "'public SearchIndexBuilder add(String url, SearchableModelObject searchable, String... names) {' - line 86", "'public SearchIndexBuilder add(SearchIndex index) {' - line 92", "'public SearchIndexBuilder add(SearchIndexBuilder index) {' - line 97", "'return add(index.make());' - line 98", "'public SearchIndex make() {' - line 101"]}, "ANTLRException.java": {"METHODS": ["'public ANTLRException(String message) {' - line 9", "'public ANTLRException(String message, Throwable cause) {' - line 13", "'public ANTLRException(Throwable cause) {' - line 17"]}, "QuotedStringTokenizerTest.java": {"METHODS": ["'public void test1() {' - line 39", "'public void test2() {' - line 45", "'public void test3() {' - line 51", "'public void test4() {' - line 57", "'public void test5() {' - line 63", "'public void test6() {' - line 69", "'public void test7() {' - line 76", "'public void testHasMoreToken() {' - line 82", "'private void check(String src, String... expected) {' - line 89"]}, "PrivateKeyProviderTest.java": {"METHODS": ["'public void loadKeyDSA() throws IOException, GeneralSecurityException {' - line 26", "'private void assertKeyPairNotNull(File file, String password) throws IOException, GeneralSecurityException {' - line 36", "'public void loadKeyDSAPassword() throws IOException, GeneralSecurityException {' - line 47", "'public void loadKeyRSA() throws IOException, GeneralSecurityException {' - line 57", "'public void loadKeyRSAPassword() throws IOException, GeneralSecurityException {' - line 66", "'public void loadKeyOpenSSH() throws IOException, GeneralSecurityException {' - line 76", "'public void loadKeyOpenSSHPKCS8() throws IOException, GeneralSecurityException {' - line 85", "'public void loadKeyOpenSSHRFC4716() throws IOException, GeneralSecurityException {' - line 95", "'public void loadKeyOpenSSHMultipleKeys() throws IOException, GeneralSecurityException {' - line 106", "'public void loadBlankKey() throws IOException, GeneralSecurityException {' - line 116", "'public void loadKeyBroken() throws IOException, GeneralSecurityException {' - line 127"]}, "PlainCLIProtocolTest.java": {"METHODS": ["'public void ignoreUnknownOperations() throws Exception {' - line 39", "'protected void onStdout(byte[] chunk) throws IOException {' - line 57", "'protected void onStderr(byte[] chunk) throws IOException {}' - line 62", "'protected void handleClose() {}' - line 65", "'void send() throws IOException {' - line 67", "'void newop() throws IOException {' - line 73", "'protected void onArg(String text) {' - line 91", "'protected void onLocale(String text) {}' - line 96", "'protected void onEncoding(String text) {}' - line 99", "'protected void onStdin(byte[] chunk) throws IOException {' - line 108", "'protected void onEndStdin() throws IOException {}' - line 120", "'protected void handleClose() {}' - line 123", "'void send() throws IOException {' - line 125", "'void newop() throws IOException {' - line 130"]}, "CLIConnectionFactoryTest.java": {"METHODS": ["'void setUp() {' - line 11", "'void testBearerFromToken() {' - line 16", "'void testBasicFromUserAndPass() {' - line 21"]}, "HexDumpTest.java": {"METHODS": ["'public void testToHex1(String expected, byte[] buf) {' - line 19", "'static Stream<Arguments> testToHex1Sources() {' - line 23", "'public void testToHex2(String expected, byte[] buf, int start, int len) {' - line 36", "'static Stream<Arguments> testToHex2Sources() {' - line 40"]}, "QuotedStringTokenizer.java": {"METHODS": ["'public static String[] tokenize(String str) {' - line 70", "'public static String[] tokenize(String str, String delimiters) {' - line 74", "'public QuotedStringTokenizer(String str)' - line 126", "'public String[] toArray() {' - line 131", "'public boolean hasMoreTokens()' - line 141", "'else if (c == '\\'' && _single)' - line 166", "'else if (c == '\\\"' && _double)' - line 172", "'else if (_delim.indexOf(c) >= 0)' - line 195", "'else if (c == '\\'' && _single)' - line 201", "'else if (c == '\\\"' && _double)' - line 207", "'else if (c == '\\\\')' - line 213", "'else if (c == '\\'')' - line 231", "'else if (c == '\\\\')' - line 237", "'else if (c == '\\\"')' - line 257", "'else if (c == '\\\\')' - line 263", "'public String nextToken()' - line 283", "'public String nextToken(String delim)' - line 296", "'return nextToken();' - line 303", "'public boolean hasMoreElements()' - line 308", "'return hasMoreTokens();' - line 310", "'public Object nextElement()' - line 315", "'return nextToken();' - line 318", "'public int countTokens()' - line 325", "'public static String quote(String s, String delim)' - line 339", "'public static String quote(String s)' - line 369", "'public static void quote(StringBuffer buf, String s)' - line 389", "'public static String unquote(String s)' - line 434", "'else if (c == '\\\\')' - line 485", "'public boolean getDouble()' - line 500", "'public void setDouble(boolean d)' - line 509", "'public boolean getSingle()' - line 518", "'public void setSingle(boolean single)' - line 527", "'public static byte convertHexDigit(byte b)' - line 536"]}, "CLI.java": {"METHODS": ["'private CLI() {}' - line 76", "'/*package*/ static void verifyJenkinsConnection(URLConnection c) throws IOException {' - line 85", "'public static void main(final String[] _args) throws Exception {' - line 100", "'public static int _main(String[] _args) throws Exception {' - line 115", "'public boolean verify(String s, SSLSession sslSession) {' - line 188", "'return plainHttpConnection(url, args, factory);' - line 319", "'return webSocketConnection(url, args, factory);' - line 323", "'private static String readAuthFromFile(String auth) throws IOException {' - line 330", "'private static File getFileFromArguments(List<String> args) {' - line 341", "'private static int webSocketConnection(String url, List<String> args, CLIConnectionFactory factory) throws Exception {' - line 345", "'public void onOpen(Session session, EndpointConfig config) {}' - line 349", "'public void beforeRequest(Map<String, List<String>> headers) {' - line 354", "'public void send(byte[] data) throws IOException {' - line 366", "'public void close() throws IOException {' - line 371", "'private static int plainHttpConnection(String url, List<String> args, CLIConnectionFactory factory) throws IOException, InterruptedException {' - line 388", "'new Thread(\"ping\") { // JENKINS-46659' - line 398", "'public void run() {' - line 400", "'void start(List<String> args) throws IOException {' - line 427", "'new Thread(\"input reader\") {' - line 434", "'public void run() {' - line 436", "'protected void onStdout(byte[] chunk) throws IOException {' - line 463", "'protected void onStderr(byte[] chunk) throws IOException {' - line 468", "'protected void handleClose() {' - line 473", "'private static String computeVersion() {' - line 491", "'public static KeyPair loadKey(File f, String passwd) throws IOException, GeneralSecurityException {' - line 506", "'public static KeyPair loadKey(File f) throws IOException, GeneralSecurityException {' - line 510", "'return loadKey(f, null);' - line 511", "'public static KeyPair loadKey(String pemString, String passwd) throws IOException, GeneralSecurityException {' - line 517", "'public static KeyPair loadKey(String pemString) throws IOException, GeneralSecurityException {' - line 521", "'return loadKey(pemString, null);' - line 522", "'static String usage() {' - line 526", "'private static void printUsage(String msg) {' - line 530"]}, "CLIConnectionFactory.java": {"METHODS": ["'public CLIConnectionFactory authorization(String value) {' - line 18", "'public CLIConnectionFactory basicAuth(String username, String password) {' - line 27", "'return basicAuth(username + ':' + password);' - line 28", "'public CLIConnectionFactory basicAuth(String userInfo) {' - line 35", "'return authorization(\"Basic \" + Base64.getEncoder().encodeToString(userInfo.getBytes(StandardCharsets.UTF_8)));' - line 36", "'public CLIConnectionFactory bearerAuth(String bearerToken) {' - line 43", "'return authorization(\"Bearer \" + bearerToken);' - line 44"]}, "SSHCLI.java": {"METHODS": ["'static int sshConnection(String jenkinsUrl, String user, List<String> args, PrivateKeyProvider provider, final boolean strictHostKey) throws IOException {' - line 62", "'public boolean verifyServerKey(ClientSession clientSession, SocketAddress remoteAddress, PublicKey serverKey) {' - line 90", "'private static URLConnection openConnection(URL url) throws IOException {' - line 132", "'private SSHCLI() {}' - line 136"]}, "DiagnosedStreamCorruptionException.java": {"METHODS": ["'public Exception getDiagnoseFailure() {' - line 26", "'public byte[] getReadBack() {' - line 30", "'public byte[] getReadAhead() {' - line 34", "'public String toString() {' - line 40"]}, "NoCheckTrustManager.java": {"METHODS": ["'public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {' - line 13", "'public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {' - line 18", "'public X509Certificate[] getAcceptedIssuers() {' - line 23"]}, "FullDuplexHttpStream.java": {"METHODS": ["'public InputStream getInputStream() {' - line 28", "'public OutputStream getOutputStream() {' - line 36", "'public FullDuplexHttpStream(URL base, String relativeTarget, String authorization) throws IOException {' - line 47", "'private HttpURLConnection openHttpConnection(URL target) throws IOException {' - line 96", "'private URL tryToResolveRedirects(URL base, String authorization) {' - line 101"]}, "PlainCLIProtocol.java": {"METHODS": ["'void send(byte[] data) throws IOException;' - line 82", "'public void send(byte[] data) throws IOException {' - line 94", "'public void close() throws IOException {' - line 101", "'public void run() {' - line 123", "'protected EitherSide(Output out) {' - line 180", "'new DataOutputStream(baos).writeInt(v);' - line 209", "'new DataOutputStream(buf).writeUTF(text);' - line 226", "'public void write(int b) throws IOException {' - line 233", "'public void write(@NonNull byte[] b, int off, int len) throws IOException {' - line 238", "'public void write(@NonNull byte[] b) throws IOException {' - line 243", "'return stream(Op.STDOUT);' - line 306", "'return stream(Op.STDERR);' - line 310", "'protected boolean handle(Op op, DataInputStream dis) throws IOException {' - line 322", "'return stream(Op.STDIN);' - line 363", "'private PlainCLIProtocol() {}' - line 372"]}, "PrivateKeyProvider.java": {"METHODS": ["'public List<KeyPair> getKeys() {' - line 66", "'public boolean hasKeys() {' - line 70", "'public boolean readFromDefaultLocations() {' - line 81", "'public void readFrom(File keyFile) throws IOException, GeneralSecurityException {' - line 105", "'private static boolean isPemEncrypted(File f) throws IOException {' - line 113", "'return readPemFile(f).contains(\"4,ENCRYPTED\");' - line 115", "'private static String askForPasswd(String filePath) {' - line 118", "'public static KeyPair loadKey(File f, String passwd) throws IOException, GeneralSecurityException {' - line 128", "'return loadKey(readPemFile(f), passwd);' - line 129", "'private static String readPemFile(File f) throws IOException {' - line 132", "'public static KeyPair loadKey(String pemString, String passwd) throws IOException, GeneralSecurityException {' - line 143", "'new PathResource(Paths.get(\"key\")),' - line 145", "'new ByteArrayInputStream(pemString.getBytes(StandardCharsets.UTF_8)),' - line 146"]}, "HexDump.java": {"METHODS": ["'public static String toHex(byte[] buf) {' - line 10", "'return toHex(buf, 0, buf.length);' - line 11", "'public static String toHex(byte[] buf, int start, int len) {' - line 14"]}, "FlightRecorderInputStream.java": {"METHODS": ["'public void clear() {' - line 35", "'public byte[] getRecord() {' - line 42", "'public DiagnosedStreamCorruptionException analyzeCrash(Exception problem, String diagnosisName) {' - line 50", "'public void run() {' - line 56", "'public int read() throws IOException {' - line 88", "'public int read(@NonNull byte[] b, int off, int len) throws IOException {' - line 96", "'public long skip(long n) throws IOException {' - line 107", "'return read(buf, 0, buf.length);' - line 109", "'public int available() throws IOException {' - line 113", "'public void close() throws IOException {' - line 118", "'public boolean markSupported() {' - line 123"]}, "Provider.java": {"METHODS": ["'Handler handle(HttpServletRequest req, HttpServletResponse rsp, Listener listener) throws Exception;' - line 45", "'void onWebSocketConnect(Object providerSession);' - line 49", "'Object getProviderSession();' - line 51", "'void onWebSocketClose(int statusCode, String reason);' - line 53", "'void onWebSocketError(Throwable cause);' - line 55", "'void onWebSocketBinary(byte[] payload, int offset, int length);' - line 57", "'void onWebSocketText(String message);' - line 59", "'Future<Void> sendBinary(ByteBuffer data) throws IOException;' - line 65", "'void sendBinary(ByteBuffer partialByte, boolean isLast) throws IOException;' - line 67", "'Future<Void> sendText(String text) throws IOException;' - line 69", "'Future<Void> sendPing(ByteBuffer applicationData) throws IOException;' - line 71", "'void close() throws IOException;' - line 73"]}, "Jetty10Provider.java": {"METHODS": ["'public Jetty10Provider() {' - line 61", "'private void init(HttpServletRequest req) {' - line 65", "'public Handler handle(HttpServletRequest req, HttpServletResponse rsp, Listener listener) throws Exception {' - line 73", "'public Future<Void> sendBinary(ByteBuffer data) throws IOException {' - line 87", "'public void sendBinary(ByteBuffer partialByte, boolean isLast) throws IOException {' - line 94", "'public Future<Void> sendText(String text) throws IOException {' - line 99", "'public Future<Void> sendPing(ByteBuffer applicationData) throws IOException {' - line 106", "'public void close() throws IOException {' - line 113", "'private Session session() {' - line 117", "'public void writeSuccess() {' - line 135", "'public void writeFailed(Throwable x) {' - line 140", "'private static Object createWebSocket(JettyServerUpgradeRequest req, JettyServerUpgradeResponse resp) {' - line 145", "'public void onWebSocketBinary(byte[] payload, int offset, int length) {' - line 152", "'public void onWebSocketText(String message) {' - line 157", "'public void onWebSocketClose(int statusCode, String reason) {' - line 162", "'public void onWebSocketConnect(Session session) {' - line 167", "'public void onWebSocketError(Throwable cause) {' - line 172"]}, "MainTest.java": {"METHODS": ["'void unsupported() {' - line 8", "'void supported() {' - line 14", "'void future() {' - line 22", "'private static void assertJavaCheckFails(int releaseVersion, boolean enableFutureJava) {' - line 41", "'private static void assertJavaCheckPasses(int releaseVersion, boolean enableFutureJava) {' - line 66"]}}